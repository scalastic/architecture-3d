(function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                configurable: false,
                enumerable: true,
                get: getter
            })
        }
    };
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module["default"]
        } : function getModuleExports() {
            return module
        };
        __webpack_require__.d(getter, "a", getter);
        return getter
    };
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property)
    };
    __webpack_require__.p = "";
    return __webpack_require__(__webpack_require__.s = 38)
})([function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const CONSTANTS = {
        GENERIC: "generic",
        META: "meta",
        META_TYPES: {
            LAYER: "layer"
        },
        GRID: {
            OFFSET_X: config.gridWidth / config.gridCellSize / 2,
            OFFSET_Y: config.gridHeight / config.gridCellSize / 2,
            CELL_WIDTH_ON_CANVAS: config.textureCanvasWidth * (config.gridCellSize / config.gridWidth),
            CELL_HEIGHT_ON_CANVAS: config.textureCanvasHeight * (config.gridCellSize / config.gridHeight)
        },
        INTERACTION_MODE: {
            PLACE_COMPONENT: "place-component",
            PAN: "pan",
            PAN_ON_DRAG: "pan-on-drag",
            SELECT: "select",
            DRAW_LINES: "draw-lines",
            DRAW_AREA: "draw-area",
            ADD_LABEL: "add-label",
            ADD_ICON: "add-icon",
            ADD_IMAGE: "add-image",
            ADD_WIDGET: "add-widget"
        },
        AREA_TYPES: {
            STANDARD: 0,
            VPN: 1
        },
        ANCHOR_TYPES: {
            STANDALONE: 0,
            OBJECT: 1
        },
        SUB_PART_TYPES: {
            LINE_SEGMENT: 0,
            ANCHOR_POINT: 1
        },
        LINE_DASH: {
            SOLID: 1,
            DASHED: 2,
            DOTTED: 3
        },
        NOTIFICATION_TYPES: {
            SHARED_DOC: "shared-doc",
            DOC_STRUCTURE_CHANGE: "doc-structure-changed"
        },
        ACTIONS: {
            CREATE: "create",
            UPDATE: "update",
            DELETE: "delete",
            SET: "set"
        },
        TYPES: {
            COMPONENT: "component",
            LINE_GROUP: "line-group",
            LABEL: "label",
            ICON: "icon",
            AREA: "area",
            IMAGE: "image",
            WIDGET: "widget"
        },
        WIDGET_TYPES: {
            CHART: "chart",
            SCALE_GROUP: "scale-group"
        },
        EVENTS: {
            CELL_CHANGED: "cell-changed",
            HALF_CELL_CHANGED: "half-cell-changed",
            HALF_CELL_INTERSECTION_CHANGED: "half-cell-intersection-changed",
            QUARTER_CELL_CHANGED: "quarter-cell-changed",
            QUARTER_CELL_INTERSECTION_CHANGED: "quarter-cell-intersection-changed",
            EIGHTS_CELL_CHANGED: "quarter-cell-intersection-changed",
            RAW_POSITION_CHANGED: "raw-pos-changed"
        },
        VIEWS: {
            ADD: "add",
            SELECTION: "selection",
            FILE: "file",
            EXPORT: "export",
            ACCOUNT: "account",
            API: "api"
        },
        ERROR_TYPES: {
            HTTP_ERROR: "http-error",
            SCRIPT_ERROR: "script-error"
        },
        PAYMENT_PLAN: {
            FREE: "free",
            PAID: "paid",
            CANCELLED: "cancelled"
        },
        TIME_SPANS: {
            "1H": 36e5,
            "4H": 144e5,
            "8H": 288e5,
            "1D": 864e5,
            "2D": 1728e5,
            "3D": 2592e5,
            "1W": 6048e5
        }
    };
    CONSTANTS.PIXEL_OBJECT_TYPES = {};
    CONSTANTS.PIXEL_OBJECT_TYPES[CONSTANTS.TYPES.LABEL] = true;
    CONSTANTS.PIXEL_OBJECT_TYPES[CONSTANTS.TYPES.ICON] = true;
    CONSTANTS.PIXEL_OBJECT_TYPES[CONSTANTS.TYPES.IMAGE] = true;
    CONSTANTS.BOX_SELECTION_TYPES = {};
    CONSTANTS.BOX_SELECTION_TYPES[CONSTANTS.TYPES.COMPONENT] = true;
    CONSTANTS.BOX_SELECTION_TYPES[CONSTANTS.TYPES.LABEL] = true;
    CONSTANTS.BOX_SELECTION_TYPES[CONSTANTS.TYPES.ICON] = true;
    CONSTANTS.BOX_SELECTION_TYPES[CONSTANTS.TYPES.IMAGE] = true;
    CONSTANTS.BOX_SELECTION_TYPES[CONSTANTS.TYPES.USER] = true;
    module.exports = CONSTANTS
}, function(module, exports) {
    const config = {
        logoFolder: "/assets/images/", //"components/logos/",
        itemsInFreePlan: 30,
        gridCellSize: 10,
        gridWidth: 1e3,
        gridHeight: 1e3,
        textureCanvasWidth: 2048,
        textureCanvasHeight: 2048,
        pixelPerUnit: 128,
        minSelectionSize: .4,
        lineSelectionProximity: .2,
        undoSteps: 100,
        labelDefaultWidth: 4,
        labelDefaultHeight: 1,
        labelDefaultText: "New Label",
        defaultImagePath: "no-image-selected.png",
        isLocalMode: false,
        minZoom: 1,
        maxZoom: 30,
        zoomPerWheelDelta: 1.2,
        camMin: -920,
        camMax: 920,
        continuousPanPerFrame: 1 / 60,
        rotationAnimationDuration: 40,
        transactionSaveBufferTime: 1e3,
        userSettingSaveBufferTime: 2e3
    };
    const isDevelopmentMode = typeof document !== "undefined" && document.location.href.indexOf("localhost") > -1;
    config.blankImagePath = config.logoFolder + "blank.png";
    /* if (config.isLocalMode) {
        config.httpRoot = "/api/";
        config.imageRoot = "/user-images/"
    } else if (document.location.host.startsWith("pt.")) {
        config.httpRoot = "https://pt.arcentry.com/pt/";
        config.imageRoot = "https://pt.arcentry.com/arcentry-pt-images/";
        config.stripeApiKey = "pk_test_I5cS5gt2oRrTbDZFvc2LEsnq"
    }  else if (isDevelopmentMode) { */
        config.httpRoot = "http://localhost/api/"; //"https://arcentry.com/api/";
        config.imageRoot = "/assets/user-images/"; //"https://arcentry.com/arcentry-prod-images/";
        config.stripeApiKey = "CONFIG.STRIPEAPIKEY"; //"pk_live_ocIHH8sMbicZQLh6Ox990c9k"
    /* } else {
        config.httpRoot = "http://localhost/dev/"; //"https://arcentry.com/dev/";
        config.imageRoot = "https://s3.eu-central-1.amazonaws.com/arcentry-dev-images/";
        config.stripeApiKey = "pk_test_I5cS5gt2oRrTbDZFvc2LEsnq"
    } */
    config.isEmbed = document.location.href.indexOf("embed.html") > -1;
    module.exports = config
}, function(module, exports) {
    module.exports = class EventEmitter {
        constructor()
        {
            this.listener = {}
        }
        on(eventName, fn, context, order)
        {
            if (!this.listener[eventName]) {
                this.listener[eventName] = []
            }
            this.listener[eventName].push({
                eventName: eventName,
                fn: fn,
                context: context,
                order: order
            });
            this.listener[eventName].sort((a, b) => {
                return a.order > b.order ? 1 : -1
            })
        }
        off(eventName, fn, context)
        {
            if (!this.listener[eventName]) {
                return
            }
            var i = this.listener[eventName].length;
            while (i--) {
                if (this.listener[eventName][i].fn === fn && this.listener[eventName][i].context === context) {
                    this.listener[eventName].splice(i, 1)
                }
            }
            if (this.listener[eventName].length === 0) {
                delete this.listener[eventName]
            }
        }
        emit(eventName)
        {
            if (!this.listener[eventName]) {
                return
            }
            const args = Array.prototype.slice.call(arguments, 1);
            var last = null;
            var i = 0;
            while (this.listener[eventName] && this.listener[eventName][i]) {
                last = this.listener[eventName][i];
                if (this.listener[eventName][i].fn.apply(this.listener[eventName][i].context, args) === false) {
                    return
                }
                if (this.listener[eventName] && this.listener[eventName][i] === last) {
                    i++
                }
            }
        }
        hasListeners(eventName)
        {
            return this.listener[eventName] && this.listener[eventName].length > 0
        }
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const Point = __webpack_require__(8);
    module.exports = class Rectangle {
        constructor(x1, y1, x2, y2)
        {
            this.x1 = null;
            this.x2 = null;
            this.y1 = null;
            this.y2 = null;
            this.width = null;
            this.height = null;
            this.set(x1, y1, x2, y2)
        }
        static fromWorldCoordinates(x1, y1, x2, y2)
        {
            return new this(x1 / config.gridCellSize, y1 / config.gridCellSize, x2 / config.gridCellSize, y2 / config.gridCellSize)
        }
        static fromPoints(pointA, pointB)
        {
            return new this(pointA.x, pointA.y, pointB.x, pointB.y)
        }
        static fromPointAndSize(point, sizes)
        {
            return new this(point.x, point.y, point.x + sizes.width, point.y + sizes.height)
        }
        getSerializable()
        {
            return {
                x1: this.x1,
                y1: this.y1,
                x2: this.x2,
                y2: this.y2
            }
        }
        setFromSerializable(s)
        {
            this.set(s.x1, s.y1, s.x2, s.y2)
        }
        clone()
        {
            return new this.constructor(this.x1, this.y1, this.x2, this.y2)
        }
        set(x1, y1, x2, y2)
        {
            this.x1 = Math.min(x1, x2);
            this.y1 = Math.min(y1, y2);
            this.x2 = Math.max(x1, x2);
            this.y2 = Math.max(y1, y2);
            this.width = this.x2 - this.x1;
            this.height = this.y2 - this.y1
        }
        setDimensions(width, height)
        {
            this.width = width;
            this.height = height;
            this.x2 = this.x1 + this.width;
            this.y2 = this.y1 + this.height
        }
        setPosition(point)
        {
            this.x1 = point.x;
            this.y1 = point.y;
            this.x2 = this.x1 + this.width;
            this.y2 = this.y1 + this.height
        }
        getTopLeft()
        {
            return new Point(this.x1, this.y1)
        }
        getCenter()
        {
            return new Point(this.x1 + this.width / 2, this.y1 + this.height / 2)
        }
        getAnchors()
        {
            return [{
                x: this.x1,
                y: this.y1
            }, {
                x: this.x2,
                y: this.y1
            }, {
                x: this.x2,
                y: this.y2
            }, {
                x: this.x1,
                y: this.y2
            }]
        }
        intersects(rectangleB)
        {
            return !(rectangleB.x1 > this.x2 || rectangleB.x2 < this.x1 || rectangleB.y1 > this.y2 || rectangleB.y2 < this.y1)
        }
        isWithin(rectangleB)
        {
            return rectangleB.x1 >= this.x1 && rectangleB.x2 <= this.x2 && rectangleB.y1 >= this.y1 && rectangleB.y2 <= this.y2
        }
        containsPoint(point)
        {
            return point.x > this.x1 && point.x < this.x2 && point.y > this.y1 && point.y < this.y2
        }
    }
}, function(module, exports) {
    exports.deepClone = function(obj) {
        return JSON.parse(JSON.stringify(obj))
    };
    exports.clamp = function(val, min, max) {
        if (val < min) {
            return min
        }
        if (val > max) {
            return max
        }
        return val
    };
    exports.mergeMaps = function(mapA, mapB) {
        const result = {};
        var id;
        for (id in mapA) {
            result[id] = mapA[id]
        }
        for (id in mapB) {
            result[id] = mapB[id]
        }
        return result
    };
    exports.bindNativeEvent = function(source, event, callback, context) {
        const boundEventHandler = callback.bind(context);
        source.addEventListener(event, boundEventHandler, false);
        return {
            cancel: function() {
                source.removeEventListener(event, boundEventHandler, false)
            }
        }
    };
    exports.mapToArray = function(map) {
        const arr = [];
        for (var key in map) {
            arr.push(map[key])
        }
        return arr
    };
    exports.reverseMap = function(map) {
        const reversedMap = {};
        for (var key in map) {
            reversedMap[map[key]] = key
        }
        return reversedMap
    };
    var queryParams = null;
    exports.getQueryParam = function(key) {
        if (!queryParams) {
            queryParams = {};
            if (!document.location.search) {
                return null
            }
            const pairs = document.location.search.substr(1).split("&");
            var pair,
                i;
            for (i = 0; i < pairs.length; i++) {
                pair = pairs[i].split("=");
                queryParams[pair[0].trim()] = pair[1].trim()
            }
        }
        return queryParams[key] || null
    };
    exports.downloadAsFile = function(filename, text, mimeType) {
        var element = document.createElement("a");
        element.setAttribute("href", "data:" + mimeType + ";charset=utf-8," + encodeURIComponent(text));
        element.setAttribute("download", filename);
        element.style.display = "none";
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element)
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const STYLES = {
        transparentColor: "#00000000",
        themeColor: "#e61898",
        label: {
            lineHeight: 1.1
        },
        grid: {
            background: "#FFF",
            primaryLineColor: "#CCC",
            secondaryLineColor: "#EEE"
        },
        selectionRectangle: {
            background: "#e6189833",
            border: "#e61898CC",
            borderWidth: .03,
            lineDash: [.03, .03]
        },
        highlighting: {
            trueColor: "#16d68266",
            falseColor: "#d63f1666",
            placementColor: "#e6189866",
            positionIndicatorLineColor: "#CCCCCC",
            dimensionIndicatorLineColor: "#e61898"
        },
        lineDrawing: {
            hoverHighlightOpacity: "33",
            anchorPointOpacity: "66",
            hoverHighlightWidth: .15,
            anchorPointToLineWidthOffset: .1
        },
        lineHelper: {
            lineWidth: .05,
            lineColor: "#e61898",
            lineDash: [.05],
            radius: .2
        },
        area: {
            hoverHighlightOpacity: "33",
            hoverHighlightWidth: .15,
            transparentOutlineInteractionColor: "#e6189866"
        },
        objectAnchorPoint: {
            lineWidth: .02,
            color: "#99999999",
            radius: .1
        },
        selection: {
            hoverColor: "#e6189866",
            selectColor: "#e61898CC",
            selectionBoxPadding: .1,
            selectionBoxSideLength: .15,
            selectionBoxLineWidth: .03
        }
    };
    STYLES.lineDrawing.lineDash = [];
    STYLES.lineDrawing.lineDash[C.LINE_DASH.SOLID] = [];
    STYLES.lineDrawing.lineDash[C.LINE_DASH.DASHED] = [.1, .25];
    STYLES.lineDrawing.lineDash[C.LINE_DASH.DOTTED] = [.005, .15];
    module.exports = STYLES
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    __webpack_require__.d(__webpack_exports__, "g", function() {
        return LOG_SCALE
    });
    __webpack_require__.d(__webpack_exports__, "H", function() {
        return log10
    });
    __webpack_require__.d(__webpack_exports__, "I", function() {
        return logRangeFraction
    });
    __webpack_require__.d(__webpack_exports__, "b", function() {
        return DASHED_LINE
    });
    __webpack_require__.d(__webpack_exports__, "c", function() {
        return DOT_DASH_LINE
    });
    __webpack_require__.d(__webpack_exports__, "f", function() {
        return HORIZONTAL
    });
    __webpack_require__.d(__webpack_exports__, "h", function() {
        return VERTICAL
    });
    __webpack_require__.d(__webpack_exports__, "x", function() {
        return getContext
    });
    __webpack_require__.d(__webpack_exports__, "i", function() {
        return addEvent
    });
    __webpack_exports__["O"] = removeEvent;
    __webpack_exports__["k"] = cancelEvent;
    __webpack_exports__["z"] = hsvToRGB;
    __webpack_exports__["v"] = findPos;
    __webpack_exports__["L"] = pageX;
    __webpack_exports__["M"] = pageY;
    __webpack_exports__["t"] = dragGetX_;
    __webpack_exports__["u"] = dragGetY_;
    __webpack_exports__["E"] = isOK;
    __webpack_exports__["G"] = isValidPoint;
    __webpack_exports__["w"] = floatFormat;
    __webpack_require__.d(__webpack_exports__, "d", function() {
        return DateAccessorsLocal
    });
    __webpack_require__.d(__webpack_exports__, "e", function() {
        return DateAccessorsUTC
    });
    __webpack_exports__["q"] = dateString_;
    __webpack_exports__["j"] = binarySearch;
    __webpack_exports__["p"] = dateParser;
    __webpack_exports__["R"] = update;
    __webpack_exports__["S"] = updateDeep;
    __webpack_exports__["A"] = isArrayLike;
    __webpack_exports__["C"] = isDateLike;
    __webpack_exports__["l"] = clone;
    __webpack_exports__["m"] = createCanvas;
    __webpack_exports__["y"] = getContextPixelRatio;
    __webpack_exports__["n"] = createIterator;
    __webpack_exports__["P"] = repeatAndCleanup;
    __webpack_exports__["F"] = isPixelChangingOptionList;
    __webpack_require__.d(__webpack_exports__, "a", function() {
        return Circles
    });
    __webpack_exports__["s"] = detectLineDelimiter;
    __webpack_exports__["D"] = isNodeContainedBy;
    __webpack_exports__["Q"] = toRGB_;
    __webpack_exports__["B"] = isCanvasSupported;
    __webpack_exports__["N"] = parseFloat_;
    __webpack_exports__["K"] = numberValueFormatter;
    __webpack_exports__["J"] = numberAxisLabelFormatter;
    __webpack_exports__["o"] = dateAxisLabelFormatter;
    __webpack_exports__["r"] = dateValueFormatter;
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__ = __webpack_require__(18);
    var LOG_SCALE = 10;
    var LN_TEN = Math.log(LOG_SCALE);
    var log10 = function(x) {
        return Math.log(x) / LN_TEN
    };
    var logRangeFraction = function(r0, r1, pct) {
        var logr0 = log10(r0);
        var logr1 = log10(r1);
        var exponent = logr0 + pct * (logr1 - logr0);
        var value = Math.pow(LOG_SCALE, exponent);
        return value
    };
    var DOTTED_LINE = [2, 2];
    var DASHED_LINE = [7, 3];
    var DOT_DASH_LINE = [7, 2, 2, 2];
    var HORIZONTAL = 1;
    var VERTICAL = 2;
    var getContext = function(canvas) {
        return canvas.getContext("2d")
    };
    var addEvent = function addEvent(elem, type, fn) {
        elem.addEventListener(type, fn, false)
    };
    function removeEvent(elem, type, fn) {
        elem.removeEventListener(type, fn, false)
    }
    function cancelEvent(e) {
        e = e ? e : window.event;
        if (e.stopPropagation) {
            e.stopPropagation()
        }
        if (e.preventDefault) {
            e.preventDefault()
        }
        e.cancelBubble = true;
        e.cancel = true;
        e.returnValue = false;
        return false
    }
    function hsvToRGB(hue, saturation, value) {
        var red;
        var green;
        var blue;
        if (saturation === 0) {
            red = value;
            green = value;
            blue = value
        } else {
            var i = Math.floor(hue * 6);
            var f = hue * 6 - i;
            var p = value * (1 - saturation);
            var q = value * (1 - saturation * f);
            var t = value * (1 - saturation * (1 - f));
            switch (i) {
            case 1:
                red = q;
                green = value;
                blue = p;
                break;
            case 2:
                red = p;
                green = value;
                blue = t;
                break;
            case 3:
                red = p;
                green = q;
                blue = value;
                break;
            case 4:
                red = t;
                green = p;
                blue = value;
                break;
            case 5:
                red = value;
                green = p;
                blue = q;
                break;
            case 6:
            case 0:
                red = value;
                green = t;
                blue = p;
                break
            }
        }
        red = Math.floor(255 * red + .5);
        green = Math.floor(255 * green + .5);
        blue = Math.floor(255 * blue + .5);
        return "rgb(" + red + "," + green + "," + blue + ")"
    }
    function findPos(obj) {
        var p = obj.getBoundingClientRect(),
            w = window,
            d = document.documentElement;
        return {
            x: p.left + (w.pageXOffset || d.scrollLeft),
            y: p.top + (w.pageYOffset || d.scrollTop)
        }
    }
    function pageX(e) {
        return !e.pageX || e.pageX < 0 ? 0 : e.pageX
    }
    function pageY(e) {
        return !e.pageY || e.pageY < 0 ? 0 : e.pageY
    }
    function dragGetX_(e, context) {
        return pageX(e) - context.px
    }
    function dragGetY_(e, context) {
        return pageY(e) - context.py
    }
    function isOK(x) {
        return !!x && !isNaN(x)
    }
    function isValidPoint(p, opt_allowNaNY) {
        if (!p)
            return false;
        if (p.yval === null)
            return false;
        if (p.x === null || p.x === undefined)
            return false;
        if (p.y === null || p.y === undefined)
            return false;
        if (isNaN(p.x) || !opt_allowNaNY && isNaN(p.y))
            return false;
        return true
    }
    function floatFormat(x, opt_precision) {
        var p = Math.min(Math.max(1, opt_precision || 2), 21);
        return Math.abs(x) < .001 && x !== 0 ? x.toExponential(p - 1) : x.toPrecision(p)
    }
    function zeropad(x) {
        if (x < 10)
            return "0" + x;
        else
            return "" + x
    }
    var DateAccessorsLocal = {
        getFullYear: d => d.getFullYear(),
        getMonth: d => d.getMonth(),
        getDate: d => d.getDate(),
        getHours: d => d.getHours(),
        getMinutes: d => d.getMinutes(),
        getSeconds: d => d.getSeconds(),
        getMilliseconds: d => d.getMilliseconds(),
        getDay: d => d.getDay(),
        makeDate: function(y, m, d, hh, mm, ss, ms) {
            return new Date(y, m, d, hh, mm, ss, ms)
        }
    };
    var DateAccessorsUTC = {
        getFullYear: d => d.getUTCFullYear(),
        getMonth: d => d.getUTCMonth(),
        getDate: d => d.getUTCDate(),
        getHours: d => d.getUTCHours(),
        getMinutes: d => d.getUTCMinutes(),
        getSeconds: d => d.getUTCSeconds(),
        getMilliseconds: d => d.getUTCMilliseconds(),
        getDay: d => d.getUTCDay(),
        makeDate: function(y, m, d, hh, mm, ss, ms) {
            return new Date(Date.UTC(y, m, d, hh, mm, ss, ms))
        }
    };
    function hmsString_(hh, mm, ss, ms) {
        var ret = zeropad(hh) + ":" + zeropad(mm);
        if (ss) {
            ret += ":" + zeropad(ss);
            if (ms) {
                var str = "" + ms;
                ret += "." + ("000" + str).substring(str.length)
            }
        }
        return ret
    }
    function dateString_(time, utc) {
        var accessors = utc ? DateAccessorsUTC : DateAccessorsLocal;
        var date = new Date(time);
        var y = accessors.getFullYear(date);
        var m = accessors.getMonth(date);
        var d = accessors.getDate(date);
        var hh = accessors.getHours(date);
        var mm = accessors.getMinutes(date);
        var ss = accessors.getSeconds(date);
        var ms = accessors.getMilliseconds(date);
        var year = "" + y;
        var month = zeropad(m + 1);
        var day = zeropad(d);
        var frac = hh * 3600 + mm * 60 + ss + .001 * ms;
        var ret = year + "/" + month + "/" + day;
        if (frac) {
            ret += " " + hmsString_(hh, mm, ss, ms)
        }
        return ret
    }
    function round_(num, places) {
        var shift = Math.pow(10, places);
        return Math.round(num * shift) / shift
    }
    function binarySearch(val, arry, abs, low, high) {
        if (low === null || low === undefined || high === null || high === undefined) {
            low = 0;
            high = arry.length - 1
        }
        if (low > high) {
            return -1
        }
        if (abs === null || abs === undefined) {
            abs = 0
        }
        var validIndex = function(idx) {
            return idx >= 0 && idx < arry.length
        };
        var mid = parseInt((low + high) / 2, 10);
        var element = arry[mid];
        var idx;
        if (element == val) {
            return mid
        } else if (element > val) {
            if (abs > 0) {
                idx = mid - 1;
                if (validIndex(idx) && arry[idx] < val) {
                    return mid
                }
            }
            return binarySearch(val, arry, abs, low, mid - 1)
        } else if (element < val) {
            if (abs < 0) {
                idx = mid + 1;
                if (validIndex(idx) && arry[idx] > val) {
                    return mid
                }
            }
            return binarySearch(val, arry, abs, mid + 1, high)
        }
        return -1
    }
    function dateParser(dateStr) {
        var dateStrSlashed;
        var d;
        if (dateStr.search("-") == -1 || dateStr.search("T") != -1 || dateStr.search("Z") != -1) {
            d = dateStrToMillis(dateStr);
            if (d && !isNaN(d))
                return d
        }
        if (dateStr.search("-") != -1) {
            dateStrSlashed = dateStr.replace("-", "/", "g");
            while (dateStrSlashed.search("-") != -1) {
                dateStrSlashed = dateStrSlashed.replace("-", "/")
            }
            d = dateStrToMillis(dateStrSlashed)
        } else if (dateStr.length == 8) {
            dateStrSlashed = dateStr.substr(0, 4) + "/" + dateStr.substr(4, 2) + "/" + dateStr.substr(6, 2);
            d = dateStrToMillis(dateStrSlashed)
        } else {
            d = dateStrToMillis(dateStr)
        }
        if (!d || isNaN(d)) {
            console.error("Couldn't parse " + dateStr + " as a date")
        }
        return d
    }
    function dateStrToMillis(str) {
        return new Date(str).getTime()
    }
    function update(self, o) {
        if (typeof o != "undefined" && o !== null) {
            for (var k in o) {
                if (o.hasOwnProperty(k)) {
                    self[k] = o[k]
                }
            }
        }
        return self
    }
    function updateDeep(self, o) {
        function isNode(o) {
            return typeof Node === "object" ? o instanceof Node : typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string"
        }
        if (typeof o != "undefined" && o !== null) {
            for (var k in o) {
                if (o.hasOwnProperty(k)) {
                    if (o[k] === null) {
                        self[k] = null
                    } else if (isArrayLike(o[k])) {
                        self[k] = o[k].slice()
                    } else if (isNode(o[k])) {
                        self[k] = o[k]
                    } else if (typeof o[k] == "object") {
                        if (typeof self[k] != "object" || self[k] === null) {
                            self[k] = {}
                        }
                        updateDeep(self[k], o[k])
                    } else {
                        self[k] = o[k]
                    }
                }
            }
        }
        return self
    }
    function isArrayLike(o) {
        var typ = typeof o;
        if (typ != "object" && !(typ == "function" && typeof o.item == "function") || o === null || typeof o.length != "number" || o.nodeType === 3) {
            return false
        }
        return true
    }
    function isDateLike(o) {
        if (typeof o != "object" || o === null || typeof o.getTime != "function") {
            return false
        }
        return true
    }
    function clone(o) {
        var r = [];
        for (var i = 0; i < o.length; i++) {
            if (isArrayLike(o[i])) {
                r.push(clone(o[i]))
            } else {
                r.push(o[i])
            }
        }
        return r
    }
    function createCanvas() {
        return document.createElement("canvas")
    }
    function getContextPixelRatio(context) {
        try {
            var devicePixelRatio = window.devicePixelRatio;
            var backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
            if (devicePixelRatio !== undefined) {
                return devicePixelRatio / backingStoreRatio
            } else {
                return 1
            }
        } catch (e) {
            return 1
        }
    }
    function Iterator(array, start, length, predicate) {
        start = start || 0;
        length = length || array.length;
        this.hasNext = true;
        this.peek = null;
        this.start_ = start;
        this.array_ = array;
        this.predicate_ = predicate;
        this.end_ = Math.min(array.length, start + length);
        this.nextIdx_ = start - 1;
        this.next()
    }
    Iterator.prototype.next = function() {
        if (!this.hasNext) {
            return null
        }
        var obj = this.peek;
        var nextIdx = this.nextIdx_ + 1;
        var found = false;
        while (nextIdx < this.end_) {
            if (!this.predicate_ || this.predicate_(this.array_, nextIdx)) {
                this.peek = this.array_[nextIdx];
                found = true;
                break
            }
            nextIdx++
        }
        this.nextIdx_ = nextIdx;
        if (!found) {
            this.hasNext = false;
            this.peek = null
        }
        return obj
    };
    function createIterator(array, start, length, opt_predicate) {
        return new Iterator(array, start, length, opt_predicate)
    }
    var requestAnimFrame = function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
                window.setTimeout(callback, 1e3 / 60)
            }
    }();
    function repeatAndCleanup(repeatFn, maxFrames, framePeriodInMillis, cleanupFn) {
        var frameNumber = 0;
        var previousFrameNumber;
        var startTime = (new Date).getTime();
        repeatFn(frameNumber);
        if (maxFrames == 1) {
            cleanupFn();
            return
        }
        var maxFrameArg = maxFrames - 1;
        (function loop() {
            if (frameNumber >= maxFrames)
                return;
            requestAnimFrame.call(window, function() {
                var currentTime = (new Date).getTime();
                var delayInMillis = currentTime - startTime;
                previousFrameNumber = frameNumber;
                frameNumber = Math.floor(delayInMillis / framePeriodInMillis);
                var frameDelta = frameNumber - previousFrameNumber;
                var predictOvershootStutter = frameNumber + frameDelta > maxFrameArg;
                if (predictOvershootStutter || frameNumber >= maxFrameArg) {
                    repeatFn(maxFrameArg);
                    cleanupFn()
                } else {
                    if (frameDelta !== 0) {
                        repeatFn(frameNumber)
                    }
                    loop()
                }
            })
        })()
    }
    var pixelSafeOptions = {
        annotationClickHandler: true,
        annotationDblClickHandler: true,
        annotationMouseOutHandler: true,
        annotationMouseOverHandler: true,
        axisLineColor: true,
        axisLineWidth: true,
        clickCallback: true,
        drawCallback: true,
        drawHighlightPointCallback: true,
        drawPoints: true,
        drawPointCallback: true,
        drawGrid: true,
        fillAlpha: true,
        gridLineColor: true,
        gridLineWidth: true,
        hideOverlayOnMouseOut: true,
        highlightCallback: true,
        highlightCircleSize: true,
        interactionModel: true,
        labelsDiv: true,
        labelsKMB: true,
        labelsKMG2: true,
        labelsSeparateLines: true,
        labelsShowZeroValues: true,
        legend: true,
        panEdgeFraction: true,
        pixelsPerYLabel: true,
        pointClickCallback: true,
        pointSize: true,
        rangeSelectorPlotFillColor: true,
        rangeSelectorPlotFillGradientColor: true,
        rangeSelectorPlotStrokeColor: true,
        rangeSelectorBackgroundStrokeColor: true,
        rangeSelectorBackgroundLineWidth: true,
        rangeSelectorPlotLineWidth: true,
        rangeSelectorForegroundStrokeColor: true,
        rangeSelectorForegroundLineWidth: true,
        rangeSelectorAlpha: true,
        showLabelsOnHighlight: true,
        showRoller: true,
        strokeWidth: true,
        underlayCallback: true,
        unhighlightCallback: true,
        zoomCallback: true
    };
    function isPixelChangingOptionList(labels, attrs) {
        var seriesNamesDictionary = {};
        if (labels) {
            for (var i = 1; i < labels.length; i++) {
                seriesNamesDictionary[labels[i]] = true
            }
        }
        var scanFlatOptions = function(options) {
            for (var property in options) {
                if (options.hasOwnProperty(property) && !pixelSafeOptions[property]) {
                    return true
                }
            }
            return false
        };
        for (var property in attrs) {
            if (!attrs.hasOwnProperty(property))
                continue;
            if (property == "highlightSeriesOpts" || seriesNamesDictionary[property] && !attrs.series) {
                if (scanFlatOptions(attrs[property]))
                    return true
            } else if (property == "series" || property == "axes") {
                var perSeries = attrs[property];
                for (var series in perSeries) {
                    if (perSeries.hasOwnProperty(series) && scanFlatOptions(perSeries[series])) {
                        return true
                    }
                }
            } else {
                if (!pixelSafeOptions[property])
                    return true
            }
        }
        return false
    }
    var Circles = {
        DEFAULT: function(g, name, ctx, canvasx, canvasy, color, radius) {
            ctx.beginPath();
            ctx.fillStyle = color;
            ctx.arc(canvasx, canvasy, radius, 0, 2 * Math.PI, false);
            ctx.fill()
        }
    };
    function detectLineDelimiter(data) {
        for (var i = 0; i < data.length; i++) {
            var code = data.charAt(i);
            if (code === "\r") {
                if (i + 1 < data.length && data.charAt(i + 1) === "\n") {
                    return "\r\n"
                }
                return code
            }
            if (code === "\n") {
                if (i + 1 < data.length && data.charAt(i + 1) === "\r") {
                    return "\n\r"
                }
                return code
            }
        }
        return null
    }
    function isNodeContainedBy(containee, container) {
        if (container === null || containee === null) {
            return false
        }
        var containeeNode = containee;
        while (containeeNode && containeeNode !== container) {
            containeeNode = containeeNode.parentNode
        }
        return containeeNode === container
    }
    function pow(base, exp) {
        if (exp < 0) {
            return 1 / Math.pow(base, -exp)
        }
        return Math.pow(base, exp)
    }
    var RGBA_RE = /^rgba?\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})(?:,\s*([01](?:\.\d+)?))?\)$/;
    function parseRGBA(rgbStr) {
        var bits = RGBA_RE.exec(rgbStr);
        if (!bits)
            return null;
        var r = parseInt(bits[1], 10),
            g = parseInt(bits[2], 10),
            b = parseInt(bits[3], 10);
        if (bits[4]) {
            return {
                r: r,
                g: g,
                b: b,
                a: parseFloat(bits[4])
            }
        } else {
            return {
                r: r,
                g: g,
                b: b
            }
        }
    }
    function toRGB_(colorStr) {
        var rgb = parseRGBA(colorStr);
        if (rgb)
            return rgb;
        var div = document.createElement("div");
        div.style.backgroundColor = colorStr;
        div.style.visibility = "hidden";
        document.body.appendChild(div);
        var rgbStr = window.getComputedStyle(div, null).backgroundColor;
        document.body.removeChild(div);
        return parseRGBA(rgbStr)
    }
    function isCanvasSupported(opt_canvasElement) {
        try {
            var canvas = opt_canvasElement || document.createElement("canvas");
            canvas.getContext("2d")
        } catch (e) {
            return false
        }
        return true
    }
    function parseFloat_(x, opt_line_no, opt_line) {
        var val = parseFloat(x);
        if (!isNaN(val))
            return val;
        if (/^ *$/.test(x))
            return null;
        if (/^ *nan *$/i.test(x))
            return NaN;
        var msg = "Unable to parse '" + x + "' as a number";
        if (opt_line !== undefined && opt_line_no !== undefined) {
            msg += " on line " + (1 + (opt_line_no || 0)) + " ('" + opt_line + "') of CSV."
        }
        console.error(msg);
        return null
    }
    var KMB_LABELS = ["K", "M", "B", "T", "Q"];
    var KMG2_BIG_LABELS = ["k", "M", "G", "T", "P", "E", "Z", "Y"];
    var KMG2_SMALL_LABELS = ["m", "u", "n", "p", "f", "a", "z", "y"];
    function numberValueFormatter(x, opts) {
        var sigFigs = opts("sigFigs");
        if (sigFigs !== null) {
            return floatFormat(x, sigFigs)
        }
        var digits = opts("digitsAfterDecimal");
        var maxNumberWidth = opts("maxNumberWidth");
        var kmb = opts("labelsKMB");
        var kmg2 = opts("labelsKMG2");
        var label;
        if (x !== 0 && (Math.abs(x) >= Math.pow(10, maxNumberWidth) || Math.abs(x) < Math.pow(10, -digits))) {
            label = x.toExponential(digits)
        } else {
            label = "" + round_(x, digits)
        }
        if (kmb || kmg2) {
            var k;
            var k_labels = [];
            var m_labels = [];
            if (kmb) {
                k = 1e3;
                k_labels = KMB_LABELS
            }
            if (kmg2) {
                if (kmb)
                    console.warn("Setting both labelsKMB and labelsKMG2. Pick one!");
                k = 1024;
                k_labels = KMG2_BIG_LABELS;
                m_labels = KMG2_SMALL_LABELS
            }
            var absx = Math.abs(x);
            var n = pow(k, k_labels.length);
            for (var j = k_labels.length - 1; j >= 0; j--, n /= k) {
                if (absx >= n) {
                    label = round_(x / n, digits) + k_labels[j];
                    break
                }
            }
            if (kmg2) {
                var x_parts = String(x.toExponential()).split("e-");
                if (x_parts.length === 2 && x_parts[1] >= 3 && x_parts[1] <= 24) {
                    if (x_parts[1] % 3 > 0) {
                        label = round_(x_parts[0] / pow(10, x_parts[1] % 3), digits)
                    } else {
                        label = Number(x_parts[0]).toFixed(2)
                    }
                    label += m_labels[Math.floor(x_parts[1] / 3) - 1]
                }
            }
        }
        return label
    }
    function numberAxisLabelFormatter(x, granularity, opts) {
        return numberValueFormatter.call(this, x, opts)
    }
    var SHORT_MONTH_NAMES_ = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateAxisLabelFormatter(date, granularity, opts) {
        var utc = opts("labelsUTC");
        var accessors = utc ? DateAccessorsUTC : DateAccessorsLocal;
        var year = accessors.getFullYear(date),
            month = accessors.getMonth(date),
            day = accessors.getDate(date),
            hours = accessors.getHours(date),
            mins = accessors.getMinutes(date),
            secs = accessors.getSeconds(date),
            millis = accessors.getMilliseconds(date);
        if (granularity >= __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__["a"].DECADAL) {
            return "" + year
        } else if (granularity >= __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__["a"].MONTHLY) {
            return SHORT_MONTH_NAMES_[month] + "&#160;" + year
        } else {
            var frac = hours * 3600 + mins * 60 + secs + .001 * millis;
            if (frac === 0 || granularity >= __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__["a"].DAILY) {
                return zeropad(day) + "&#160;" + SHORT_MONTH_NAMES_[month]
            } else if (granularity < __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__["a"].SECONDLY) {
                var str = "" + millis;
                return zeropad(secs) + "." + ("000" + str).substring(str.length)
            } else if (granularity > __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__["a"].MINUTELY) {
                return hmsString_(hours, mins, secs, 0)
            } else {
                return hmsString_(hours, mins, secs, millis)
            }
        }
    }
    function dateValueFormatter(d, opts) {
        return dateString_(d, opts("labelsUTC"))
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const Rectangle = __webpack_require__(3);
    exports.toAnchorPoint = function(anchorPoint) {
        if (anchorPoint === null) {
            return null
        } else if (anchorPoint.type === C.ANCHOR_TYPES.STANDALONE) {
            return anchorPoint
        } else if (anchorPoint.type === C.ANCHOR_TYPES.OBJECT) {
            const obj = canvas.app.objects.getById(anchorPoint.id);
            if (!obj) {
                return {
                    x: anchorPoint.x || 0,
                    y: anchorPoint.y || 0,
                    type: C.ANCHOR_TYPES.STANDALONE
                }
            }
            return canvas.app.objects.getById(anchorPoint.id).anchorPoints.anchors[anchorPoint.index]
        } else {
            return anchorPoint
        }
    };
    exports.computeBoundingBox = function(data) {
        var x1 = Infinity,
            y1 = Infinity,
            x2 = -Infinity,
            y2 = -Infinity,
            i,
            anchor;
        for (i = 0; i < data.anchors.length; i++) {
            if (data.anchors[i] === null) {
                continue
            }
            anchor = exports.toAnchorPoint(data.anchors[i]);
            if (anchor.x < x1) {
                x1 = anchor.x
            }
            if (anchor.x > x2) {
                x2 = anchor.x
            }
            if (anchor.y < y1) {
                y1 = anchor.y
            }
            if (anchor.y > y2) {
                y2 = anchor.y
            }
        }
        return new Rectangle(x1, y1, x2, y2)
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    module.exports = class Point {
        constructor(x, y)
        {
            this.x = x;
            this.y = y;
            this.isPoint = true
        }
        static fromThreePoint(threePoint)
        {
            return new this(threePoint.x / config.gridCellSize, threePoint.z / config.gridCellSize)
        }
        static fromPoint(point)
        {
            return new this(point.x, point.y)
        }
        clone()
        {
            return new Point(this.x, this.y)
        }
        getSerializable()
        {
            return {
                x: this.x,
                y: this.y
            }
        }
        equals(point)
        {
            return point.x === this.x && point.y === this.y
        }
        set(x, y)
        {
            this.x = x;
            this.y = y
        }
    }
}, function(module, exports) {
    const KEYS = {
        CMD: 400,
        0: 48,
        1: 49,
        2: 50,
        3: 51,
        4: 52,
        5: 53,
        6: 54,
        7: 55,
        8: 56,
        9: 57,
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        PAUSE_BREAK: 19,
        CAPS_LOCK: 20,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        ARROW_LEFT: 37,
        ARROW_UP: 38,
        ARROW_RIGHT: 39,
        ARROW_DOWN: 40,
        INSERT: 45,
        DELETE: 46,
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        LEFT_WINDOWS_KEY: 91,
        RIGHT_WINDOWS_KEY: 92,
        SELECT_KEY: 93,
        NUMPAD_0: 96,
        NUMPAD_1: 97,
        NUMPAD_2: 98,
        NUMPAD_3: 99,
        NUMPAD_4: 100,
        NUMPAD_5: 101,
        NUMPAD_6: 102,
        NUMPAD_7: 103,
        NUMPAD_8: 104,
        NUMPAD_9: 105,
        MULTIPLY: 106,
        ADD: 107,
        SUBTRACT: 109,
        DECIMAL_POINT: 110,
        DIVIDE: 111,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123,
        NUM_LOCK: 144,
        SCROLL_LOCK: 145,
        SEMICOLON: 186,
        EQUAL_SIGN: 187,
        COMMA: 188,
        DASH: 189,
        PERIOD: 190,
        FORWARD_SLASH: 191,
        GRAVE_ACCENT: 192,
        OPEN_BRACKET: 219,
        BACK_SLASH: 220,
        CLOSE_BRACKET: 221,
        SINGLE_QUOTE: 222
    };
    module.exports = KEYS
}, function(module, exports, __webpack_require__) {
    const Rectangle = __webpack_require__(3);
    const C = __webpack_require__(0);
    module.exports = class PixelObject {
        constructor(canvas, id, type)
        {
            this.canvas = canvas;
            this.id = id;
            this.type = type;
            this.isSelectable = true;
            this.isSelected = false;
            this.isHoverable = true;
            this.isHovered = false;
            this.isPristine = true;
            this.boundingBox = new Rectangle(0, 0, 0, 0);
            this.canvas.pixelPlane.plane.scheduleRender();
            this.canvas.app.state.on(this.id + "-update", this.onUpdate, this)
        }
        destroy()
        {
            this.canvas.pixelPlane.plane.scheduleRender();
            this.canvas.pixelPlane.plane.off("render", this.render, this);
            this.canvas.app.state.off(this.id + "-update", this.onUpdate, this);
            this.canvas = null;
            this.boundingBox = null
        }
        delete()
        {
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.DELETE,
                id: this.id
            })
        }
        computeBoundingBox()
        {
            if (this.isPristine === true) {
                const data = this.canvas.app.state.getStateForId(this.id);
                if (this.type === C.TYPES.ICON) {
                    this.computeIconBoundingBox(data)
                }
            }
            return this.boundingBox
        }
        showHover()
        {
            this.isHovered = true;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        hideHover()
        {
            this.isHovered = false;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        showSelected()
        {
            this.isSelected = true;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        hideSelected()
        {
            this.isSelected = false;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        onUpdate()
        {
            if (this.type === C.TYPES.ICON) {
                this.computeIconBoundingBox()
            }
            this.canvas.pixelPlane.plane.scheduleRender();
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        computeIconBoundingBox()
        {
            this.isPristine = false;
            const data = this.canvas.app.state.getStateForId(this.id);
            this.boundingBox.set(data.position.x, data.position.y, data.position.x + data.fontSize, data.position.y + data.fontSize)
        }
    }
}, function(module, exports) {
    module.exports = {
        "500px": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "address-book": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "address-card": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        adjust: {
            unicode: "",
            tags: ["contrast"],
            style: "solid"
        },
        algolia: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        amazon: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "amazon-pay": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        android: {
            unicode: "",
            tags: ["robot"],
            style: "brands"
        },
        "angle-double-down": {
            unicode: "",
            tags: ["arrows"],
            style: "solid"
        },
        "angle-double-left": {
            unicode: "",
            tags: ["laquo", "quote", "previous", "back", "arrows"],
            style: "solid"
        },
        "angle-double-right": {
            unicode: "",
            tags: ["raquo", "quote", "next", "forward", "arrows"],
            style: "solid"
        },
        "angle-double-up": {
            unicode: "",
            tags: ["arrows"],
            style: "solid"
        },
        "angle-down": {
            unicode: "",
            tags: ["arrow"],
            style: "solid"
        },
        "angle-left": {
            unicode: "",
            tags: ["previous", "back", "arrow"],
            style: "solid"
        },
        "angle-right": {
            unicode: "",
            tags: ["next", "forward", "arrow"],
            style: "solid"
        },
        "angle-up": {
            unicode: "",
            tags: ["arrow"],
            style: "solid"
        },
        angular: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "app-store": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "app-store-ios": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        apple: {
            unicode: "",
            tags: ["osx", "food"],
            style: "brands"
        },
        "apple-pay": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        archive: {
            unicode: "",
            tags: ["box", "storage", "package"],
            style: "solid"
        },
        "arrow-circle-down": {
            unicode: "",
            tags: ["download"],
            style: "solid"
        },
        "arrow-circle-left": {
            unicode: "",
            tags: ["previous", "back"],
            style: "solid"
        },
        "arrow-circle-right": {
            unicode: "",
            tags: ["next", "forward"],
            style: "solid"
        },
        "arrow-circle-up": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "arrow-down": {
            unicode: "",
            tags: ["download"],
            style: "solid"
        },
        "arrow-left": {
            unicode: "",
            tags: ["previous", "back"],
            style: "solid"
        },
        "arrow-right": {
            unicode: "",
            tags: ["next", "forward"],
            style: "solid"
        },
        "arrow-up": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "arrows-alt": {
            unicode: "",
            tags: ["expand", "enlarge", "fullscreen", "bigger", "move", "reorder", "resize", "arrow", "arrows"],
            style: "solid"
        },
        "arrows-alt-h": {
            unicode: "",
            tags: ["resize", "arrows-h"],
            style: "solid"
        },
        "arrows-alt-v": {
            unicode: "",
            tags: ["resize", "arrows-v"],
            style: "solid"
        },
        aws: {
            unicode: "",
            tags: ["amazon web services"],
            style: "brands"
        },
        backward: {
            unicode: "",
            tags: ["rewind", "previous"],
            style: "solid"
        },
        "balance-scale": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        barcode: {
            unicode: "",
            tags: ["scan"],
            style: "solid"
        },
        "battery-empty": {
            unicode: "",
            tags: ["power", "status"],
            style: "solid"
        },
        "battery-full": {
            unicode: "",
            tags: ["power", "status"],
            style: "solid"
        },
        bell: {
            unicode: "",
            tags: ["alert", "reminder", "notification"],
            style: "solid"
        },
        "bell-slash": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        binoculars: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        bitbucket: {
            unicode: "",
            tags: ["git", "bitbucket-square"],
            style: "brands"
        },
        bitcoin: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        blackberry: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        bluetooth: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        bolt: {
            unicode: "",
            tags: ["lightning", "weather"],
            style: "solid"
        },
        bomb: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        book: {
            unicode: "",
            tags: ["read", "documentation"],
            style: "solid"
        },
        bookmark: {
            unicode: "",
            tags: ["save"],
            style: "solid"
        },
        box: {
            unicode: "",
            tags: ["package"],
            style: "solid"
        },
        "box-open": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        boxes: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        briefcase: {
            unicode: "",
            tags: ["work", "business", "office", "luggage", "bag"],
            style: "solid"
        },
        btc: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        bug: {
            unicode: "",
            tags: ["report", "insect"],
            style: "solid"
        },
        building: {
            unicode: "",
            tags: ["work", "business", "apartment", "office", "company"],
            style: "solid"
        },
        bullhorn: {
            unicode: "",
            tags: ["announcement", "share", "broadcast", "louder", "megaphone"],
            style: "solid"
        },
        bullseye: {
            unicode: "",
            tags: ["target"],
            style: "solid"
        },
        burn: {
            unicode: "",
            tags: ["energy"],
            style: "solid"
        },
        calculator: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        calendar: {
            unicode: "",
            tags: ["date", "time", "when", "event", "calendar-o", "schedule"],
            style: "solid"
        },
        camera: {
            unicode: "",
            tags: ["photo", "picture", "record"],
            style: "solid"
        },
        "caret-down": {
            unicode: "",
            tags: ["more", "dropdown", "menu", "triangle down", "arrow"],
            style: "solid"
        },
        "caret-left": {
            unicode: "",
            tags: ["previous", "back", "triangle left", "arrow"],
            style: "solid"
        },
        "caret-right": {
            unicode: "",
            tags: ["next", "forward", "triangle right", "arrow"],
            style: "solid"
        },
        "caret-square-down": {
            unicode: "",
            tags: ["more", "dropdown", "menu", "caret-square-o-down"],
            style: "solid"
        },
        "caret-square-left": {
            unicode: "",
            tags: ["previous", "back", "caret-square-o-left"],
            style: "solid"
        },
        "caret-square-right": {
            unicode: "",
            tags: ["next", "forward", "caret-square-o-right"],
            style: "solid"
        },
        "caret-square-up": {
            unicode: "",
            tags: ["caret-square-o-up"],
            style: "solid"
        },
        "caret-up": {
            unicode: "",
            tags: ["triangle up", "arrow"],
            style: "solid"
        },
        "cart-arrow-down": {
            unicode: "",
            tags: ["shopping"],
            style: "solid"
        },
        "cart-plus": {
            unicode: "",
            tags: ["add", "shopping"],
            style: "solid"
        },
        "cc-amazon-pay": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "cc-amex": {
            unicode: "",
            tags: ["amex"],
            style: "brands"
        },
        "cc-apple-pay": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "cc-diners-club": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "cc-discover": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "cc-jcb": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "cc-mastercard": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "cc-paypal": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "cc-stripe": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "cc-visa": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        certificate: {
            unicode: "",
            tags: ["badge", "star"],
            style: "solid"
        },
        "chart-area": {
            unicode: "",
            tags: ["graph", "analytics", "area-chart"],
            style: "solid"
        },
        "chart-bar": {
            unicode: "",
            tags: ["graph", "analytics", "bar-chart"],
            style: "solid"
        },
        "chart-line": {
            unicode: "",
            tags: ["graph", "analytics", "line-chart", "dashboard"],
            style: "solid"
        },
        "chart-pie": {
            unicode: "",
            tags: ["graph", "analytics", "pie-chart"],
            style: "solid"
        },
        check: {
            unicode: "",
            tags: ["checkmark", "done", "todo", "agree", "accept", "confirm", "tick", "ok", "select", "success", "notification", "notify", "notice", "yes", "correct"],
            style: "solid"
        },
        "check-circle": {
            unicode: "",
            tags: ["todo", "done", "agree", "accept", "confirm", "ok", "select", "success", "yes", "correct"],
            style: "solid"
        },
        "check-square": {
            unicode: "",
            tags: ["checkmark", "done", "todo", "agree", "accept", "confirm", "ok", "select", "success", "yes", "correct"],
            style: "solid"
        },
        "chevron-circle-down": {
            unicode: "",
            tags: ["more", "dropdown", "menu", "arrow"],
            style: "solid"
        },
        "chevron-circle-left": {
            unicode: "",
            tags: ["previous", "back", "arrow"],
            style: "solid"
        },
        "chevron-circle-right": {
            unicode: "",
            tags: ["next", "forward", "arrow"],
            style: "solid"
        },
        "chevron-circle-up": {
            unicode: "",
            tags: ["arrow"],
            style: "solid"
        },
        "chevron-down": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "chevron-left": {
            unicode: "",
            tags: ["bracket", "previous", "back"],
            style: "solid"
        },
        "chevron-right": {
            unicode: "",
            tags: ["bracket", "next", "forward"],
            style: "solid"
        },
        "chevron-up": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        child: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        chrome: {
            unicode: "",
            tags: ["browser"],
            style: "brands"
        },
        circle: {
            unicode: "",
            tags: ["dot", "notification", "circle-thin"],
            style: "solid"
        },
        "circle-notch": {
            unicode: "",
            tags: ["circle-o-notch"],
            style: "solid"
        },
        clipboard: {
            unicode: "",
            tags: ["paste"],
            style: "solid"
        },
        "clipboard-check": {
            unicode: "",
            tags: ["todo", "done", "agree", "accept", "confirm", "ok", "select", "success", "yes"],
            style: "solid"
        },
        "clipboard-list": {
            unicode: "",
            tags: ["todo", "ul", "ol", "checklist", "finished", "completed", "done", "schedule", "intinerary"],
            style: "solid"
        },
        clock: {
            unicode: "",
            tags: ["watch", "timer", "late", "timestamp", "date", "schedule"],
            style: "solid"
        },
        clone: {
            unicode: "",
            tags: ["copy"],
            style: "solid"
        },
        cloud: {
            unicode: "",
            tags: ["save"],
            style: "solid"
        },
        "cloud-download-alt": {
            unicode: "",
            tags: ["cloud-download"],
            style: "solid"
        },
        "cloud-upload-alt": {
            unicode: "",
            tags: ["cloud-upload"],
            style: "solid"
        },
        cloudscale: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        cloudsmith: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        cloudversify: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        code: {
            unicode: "",
            tags: ["html", "brackets"],
            style: "solid"
        },
        "code-branch": {
            unicode: "",
            tags: ["git", "fork", "vcs", "svn", "github", "rebase", "version", "branch", "code-fork"],
            style: "solid"
        },
        codepen: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        coffee: {
            unicode: "",
            tags: ["morning", "mug", "breakfast", "tea", "drink", "cafe"],
            style: "solid"
        },
        cog: {
            unicode: "",
            tags: ["settings"],
            style: "solid"
        },
        cogs: {
            unicode: "",
            tags: ["settings", "gears"],
            style: "solid"
        },
        comment: {
            unicode: "",
            tags: ["speech", "notification", "note", "chat", "bubble", "feedback", "message", "texting", "sms", "conversation"],
            style: "solid"
        },
        "comment-alt": {
            unicode: "",
            tags: ["speech", "notification", "note", "chat", "bubble", "feedback", "message", "texting", "sms", "conversation", "commenting", "commenting"],
            style: "solid"
        },
        "comment-dots": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "comment-slash": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        comments: {
            unicode: "",
            tags: ["speech", "notification", "note", "chat", "bubble", "feedback", "message", "texting", "sms", "conversation"],
            style: "solid"
        },
        compass: {
            unicode: "",
            tags: ["safari", "directory", "menu", "location"],
            style: "solid"
        },
        compress: {
            unicode: "",
            tags: ["collapse", "combine", "contract", "merge", "smaller"],
            style: "solid"
        },
        copy: {
            unicode: "",
            tags: ["duplicate", "clone", "file", "files-o"],
            style: "solid"
        },
        copyright: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "credit-card": {
            unicode: "",
            tags: ["money", "buy", "debit", "checkout", "purchase", "payment", "credit-card-alt"],
            style: "solid"
        },
        css3: {
            unicode: "",
            tags: ["code"],
            style: "brands"
        },
        cube: {
            unicode: "",
            tags: ["package"],
            style: "solid"
        },
        cubes: {
            unicode: "",
            tags: ["packages"],
            style: "solid"
        },
        cut: {
            unicode: "",
            tags: ["scissors", "scissors"],
            style: "solid"
        },
        database: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "digital-ocean": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        docker: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "dollar-sign": {
            unicode: "",
            tags: ["usd", "price"],
            style: "solid"
        },
        dolly: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "dolly-flatbed": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        donate: {
            unicode: "",
            tags: ["give", "generosity"],
            style: "solid"
        },
        "dot-circle": {
            unicode: "",
            tags: ["target", "bullseye", "notification"],
            style: "solid"
        },
        download: {
            unicode: "",
            tags: ["import"],
            style: "solid"
        },
        dropbox: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        drupal: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        ember: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        envelope: {
            unicode: "",
            tags: ["email", "e-mail", "letter", "support", "mail", "message", "notification"],
            style: "solid"
        },
        erlang: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        ethereum: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "euro-sign": {
            unicode: "",
            tags: ["eur", "eur"],
            style: "solid"
        },
        "exchange-alt": {
            unicode: "",
            tags: ["transfer", "arrows", "arrow", "exchange", "swap", "return", "reciprocate"],
            style: "solid"
        },
        exclamation: {
            unicode: "",
            tags: ["warning", "error", "problem", "notification", "notify", "notice", "alert", "danger"],
            style: "solid"
        },
        "exclamation-circle": {
            unicode: "",
            tags: ["warning", "error", "problem", "notification", "notify", "notice", "alert", "danger"],
            style: "solid"
        },
        "exclamation-triangle": {
            unicode: "",
            tags: ["warning", "error", "problem", "notification", "notify", "notice", "alert", "danger"],
            style: "solid"
        },
        expand: {
            unicode: "",
            tags: ["enlarge", "bigger", "resize"],
            style: "solid"
        },
        "expand-arrows-alt": {
            unicode: "",
            tags: ["enlarge", "bigger", "resize", "move", "arrows-alt"],
            style: "solid"
        },
        expeditedssl: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "external-link-alt": {
            unicode: "",
            tags: ["open", "new", "external-link"],
            style: "solid"
        },
        eye: {
            unicode: "",
            tags: ["show", "visible", "views", "see", "seen", "sight", "optic"],
            style: "solid"
        },
        "eye-dropper": {
            unicode: "",
            tags: ["eyedropper"],
            style: "solid"
        },
        "eye-slash": {
            unicode: "",
            tags: ["toggle", "show", "hide", "visible", "visiblity", "views", "unseen", "blind"],
            style: "solid"
        },
        facebook: {
            unicode: "",
            tags: ["social network", "facebook-official"],
            style: "brands"
        },
        "facebook-messenger": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "fast-backward": {
            unicode: "",
            tags: ["rewind", "previous", "beginning", "start", "first"],
            style: "solid"
        },
        "fast-forward": {
            unicode: "",
            tags: ["next", "end", "last"],
            style: "solid"
        },
        fax: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        female: {
            unicode: "",
            tags: ["woman", "human", "user", "person", "profile"],
            style: "solid"
        },
        file: {
            unicode: "",
            tags: ["new", "page", "pdf", "document"],
            style: "solid"
        },
        "file-alt": {
            unicode: "",
            tags: ["new", "page", "pdf", "document", "file-text", "invoice"],
            style: "solid"
        },
        "file-archive": {
            unicode: "",
            tags: ["zip", ".zip", "compress", "compression", "bundle", "download"],
            style: "solid"
        },
        "file-audio": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "file-code": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "file-excel": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "file-image": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "file-medical": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "file-medical-alt": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "file-pdf": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "file-powerpoint": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "file-video": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "file-word": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        film: {
            unicode: "",
            tags: ["movie"],
            style: "solid"
        },
        filter: {
            unicode: "",
            tags: ["funnel", "options"],
            style: "solid"
        },
        fire: {
            unicode: "",
            tags: ["flame", "hot", "popular"],
            style: "solid"
        },
        firefox: {
            unicode: "",
            tags: ["browser"],
            style: "brands"
        },
        folder: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "folder-open": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        forward: {
            unicode: "",
            tags: ["forward", "next"],
            style: "solid"
        },
        gamepad: {
            unicode: "",
            tags: ["controller"],
            style: "solid"
        },
        git: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "git-square": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        github: {
            unicode: "",
            tags: ["octocat"],
            style: "brands"
        },
        "github-alt": {
            unicode: "",
            tags: ["octocat"],
            style: "brands"
        },
        "github-square": {
            unicode: "",
            tags: ["octocat"],
            style: "brands"
        },
        gitkraken: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        gitlab: {
            unicode: "",
            tags: ["Axosoft"],
            style: "brands"
        },
        gitter: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        globe: {
            unicode: "",
            tags: ["world", "planet", "map", "place", "travel", "earth", "global", "translate", "all", "language", "localize", "location", "coordinates", "country", "gps", "online"],
            style: "solid"
        },
        google: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "google-drive": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "google-play": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "google-plus": {
            unicode: "",
            tags: ["google-plus-circle", "google-plus-official"],
            style: "brands"
        },
        "google-plus-g": {
            unicode: "",
            tags: ["social network", "google-plus"],
            style: "brands"
        },
        "google-plus-square": {
            unicode: "",
            tags: ["social network"],
            style: "brands"
        },
        "google-wallet": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "graduation-cap": {
            unicode: "",
            tags: ["learning", "school", "student"],
            style: "solid"
        },
        grunt: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        gulp: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "hacker-news": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "hacker-news-square": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        hashtag: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        hdd: {
            unicode: "",
            tags: ["harddrive", "hard drive", "storage", "save", "machine"],
            style: "solid"
        },
        heading: {
            unicode: "",
            tags: ["header", "header"],
            style: "solid"
        },
        headphones: {
            unicode: "",
            tags: ["sound", "listen", "music", "audio", "speaker"],
            style: "solid"
        },
        heart: {
            unicode: "",
            tags: ["love", "like", "favorite"],
            style: "solid"
        },
        history: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        home: {
            unicode: "",
            tags: ["main", "house"],
            style: "solid"
        },
        hourglass: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        html5: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "id-badge": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "id-card": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "id-card-alt": {
            unicode: "",
            tags: ["demographics"],
            style: "solid"
        },
        image: {
            unicode: "",
            tags: ["photo", "album", "picture", "picture"],
            style: "solid"
        },
        images: {
            unicode: "",
            tags: ["photo", "album", "picture"],
            style: "solid"
        },
        inbox: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        industry: {
            unicode: "",
            tags: ["factory", "manufacturing"],
            style: "solid"
        },
        info: {
            unicode: "",
            tags: ["help", "information", "more", "details"],
            style: "solid"
        },
        "info-circle": {
            unicode: "",
            tags: ["help", "information", "more", "details"],
            style: "solid"
        },
        instagram: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "internet-explorer": {
            unicode: "",
            tags: ["browser", "ie"],
            style: "brands"
        },
        ioxhost: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        itunes: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        java: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        jenkins: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        joomla: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        js: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "js-square": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        jsfiddle: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        key: {
            unicode: "",
            tags: ["unlock", "password"],
            style: "solid"
        },
        keyboard: {
            unicode: "",
            tags: ["type", "input"],
            style: "solid"
        },
        language: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        laptop: {
            unicode: "",
            tags: ["demo", "computer", "device", "pc", "mac", "pc", "macbook", "dell", "dude you're getting", "machine"],
            style: "solid"
        },
        laravel: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        less: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "level-down-alt": {
            unicode: "",
            tags: ["level-down"],
            style: "solid"
        },
        "level-up-alt": {
            unicode: "",
            tags: ["level-up"],
            style: "solid"
        },
        "life-ring": {
            unicode: "",
            tags: ["support"],
            style: "solid"
        },
        lightbulb: {
            unicode: "",
            tags: ["idea", "inspiration"],
            style: "solid"
        },
        line: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        link: {
            unicode: "",
            tags: ["chain"],
            style: "solid"
        },
        linkedin: {
            unicode: "",
            tags: ["linkedin-square"],
            style: "brands"
        },
        linode: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        linux: {
            unicode: "",
            tags: ["tux"],
            style: "brands"
        },
        "lira-sign": {
            unicode: "",
            tags: ["try", "turkish", "try"],
            style: "solid"
        },
        "location-arrow": {
            unicode: "",
            tags: ["map", "coordinates", "location", "address", "place", "where", "gps"],
            style: "solid"
        },
        lock: {
            unicode: "",
            tags: ["protect", "admin", "security"],
            style: "solid"
        },
        "lock-open": {
            unicode: "",
            tags: ["protect", "admin", "password", "lock", "open"],
            style: "solid"
        },
        magento: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        magic: {
            unicode: "",
            tags: ["wizard", "automatic", "autocomplete"],
            style: "solid"
        },
        magnet: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        male: {
            unicode: "",
            tags: ["man", "human", "user", "person", "profile"],
            style: "solid"
        },
        map: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        maxcdn: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        medium: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        medkit: {
            unicode: "",
            tags: ["first aid", "firstaid", "help", "support", "health"],
            style: "solid"
        },
        medrt: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        meetup: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        meh: {
            unicode: "",
            tags: ["face", "emoticon", "rating", "neutral"],
            style: "solid"
        },
        mercury: {
            unicode: "",
            tags: ["transgender"],
            style: "solid"
        },
        microchip: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        microphone: {
            unicode: "",
            tags: ["record", "voice", "sound"],
            style: "solid"
        },
        "microphone-slash": {
            unicode: "",
            tags: ["record", "voice", "sound", "mute"],
            style: "solid"
        },
        microsoft: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        minus: {
            unicode: "",
            tags: ["hide", "minify", "delete", "remove", "trash", "hide", "collapse"],
            style: "solid"
        },
        mobile: {
            unicode: "",
            tags: ["cell phone", "cellphone", "text", "call", "number", "telephone", "device", "screen", "apple", "iphone"],
            style: "solid"
        },
        "mobile-alt": {
            unicode: "",
            tags: ["cell phone", "cellphone", "text", "call", "number", "telephone", "device", "screen", "apple", "iphone"],
            style: "solid"
        },
        "money-bill-alt": {
            unicode: "",
            tags: ["cash", "money", "buy", "checkout", "purchase", "payment", "price"],
            style: "solid"
        },
        moon: {
            unicode: "",
            tags: ["night", "darker", "contrast"],
            style: "solid"
        },
        "mouse-pointer": {
            unicode: "",
            tags: ["select"],
            style: "solid"
        },
        music: {
            unicode: "",
            tags: ["note", "sound"],
            style: "solid"
        },
        newspaper: {
            unicode: "",
            tags: ["press", "article"],
            style: "solid"
        },
        node: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "node-js": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        npm: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        opencart: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        openid: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        opera: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "paper-plane": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        paperclip: {
            unicode: "",
            tags: ["attachment"],
            style: "solid"
        },
        "parachute-box": {
            unicode: "",
            tags: ["aid", "assistance", "rescue", "supplies"],
            style: "solid"
        },
        pause: {
            unicode: "",
            tags: ["wait"],
            style: "solid"
        },
        paypal: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "pen-square": {
            unicode: "",
            tags: ["write", "edit", "update", "pencil-square"],
            style: "solid"
        },
        "pencil-alt": {
            unicode: "",
            tags: ["write", "edit", "update", "pencil", "design"],
            style: "solid"
        },
        percent: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "phoenix-framework": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        phone: {
            unicode: "",
            tags: ["call", "voice", "number", "support", "earphone", "telephone"],
            style: "solid"
        },
        php: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "piggy-bank": {
            unicode: "",
            tags: ["savings", "save"],
            style: "solid"
        },
        pills: {
            unicode: "",
            tags: ["medicine", "drugs"],
            style: "solid"
        },
        pinterest: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        plane: {
            unicode: "",
            tags: ["travel", "trip", "location", "destination", "airplane", "fly", "mode"],
            style: "solid"
        },
        playstation: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        plug: {
            unicode: "",
            tags: ["power", "connect", "online"],
            style: "solid"
        },
        plus: {
            unicode: "",
            tags: ["add", "new", "create", "expand"],
            style: "solid"
        },
        podcast: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        poo: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "pound-sign": {
            unicode: "",
            tags: ["gbp", "gbp"],
            style: "solid"
        },
        "power-off": {
            unicode: "",
            tags: ["on"],
            style: "solid"
        },
        print: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "product-hunt": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        pushed: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "puzzle-piece": {
            unicode: "",
            tags: ["addon", "add-on", "section"],
            style: "solid"
        },
        python: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        qq: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        qrcode: {
            unicode: "",
            tags: ["scan"],
            style: "solid"
        },
        question: {
            unicode: "",
            tags: ["help", "information", "unknown", "support"],
            style: "solid"
        },
        "question-circle": {
            unicode: "",
            tags: ["help", "information", "unknown", "support"],
            style: "solid"
        },
        quora: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        random: {
            unicode: "",
            tags: ["sort", "shuffle"],
            style: "solid"
        },
        react: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        readme: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        recycle: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        reddit: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        redo: {
            unicode: "",
            tags: ["forward", "repeat", "repeat"],
            style: "solid"
        },
        registered: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        resolving: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        retweet: {
            unicode: "",
            tags: ["refresh", "reload", "share", "swap"],
            style: "solid"
        },
        ribbon: {
            unicode: "",
            tags: ["cause", "badge", "pin", "lapel"],
            style: "solid"
        },
        road: {
            unicode: "",
            tags: ["street"],
            style: "solid"
        },
        rocket: {
            unicode: "",
            tags: ["app"],
            style: "solid"
        },
        rss: {
            unicode: "",
            tags: ["blog"],
            style: "solid"
        },
        "ruble-sign": {
            unicode: "",
            tags: ["rub", "rub"],
            style: "solid"
        },
        "rupee-sign": {
            unicode: "",
            tags: ["indian", "inr"],
            style: "solid"
        },
        safari: {
            unicode: "",
            tags: ["browser"],
            style: "brands"
        },
        sass: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        save: {
            unicode: "",
            tags: ["floppy", "floppy-o"],
            style: "solid"
        },
        search: {
            unicode: "",
            tags: ["magnify", "zoom", "enlarge", "bigger", "preview"],
            style: "solid"
        },
        "search-minus": {
            unicode: "",
            tags: ["magnify", "minify", "zoom", "smaller", "zoom out"],
            style: "solid"
        },
        "search-plus": {
            unicode: "",
            tags: ["magnify", "zoom", "enlarge", "bigger", "zoom in"],
            style: "solid"
        },
        searchengin: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        server: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        share: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "shekel-sign": {
            unicode: "",
            tags: ["ils", "ils"],
            style: "solid"
        },
        "shield-alt": {
            unicode: "",
            tags: ["shield"],
            style: "solid"
        },
        ship: {
            unicode: "",
            tags: ["boat", "sea"],
            style: "solid"
        },
        "shipping-fast": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "shopping-bag": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "shopping-basket": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "shopping-cart": {
            unicode: "",
            tags: ["checkout", "buy", "purchase", "payment"],
            style: "solid"
        },
        shower: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        sign: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        signal: {
            unicode: "",
            tags: ["graph", "bars", "status", "online"],
            style: "solid"
        },
        skype: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        slack: {
            unicode: "",
            tags: ["hashtag", "anchor", "hash"],
            style: "brands"
        },
        "slack-hash": {
            unicode: "",
            tags: ["hashtag", "anchor", "hash"],
            style: "brands"
        },
        "sliders-h": {
            unicode: "",
            tags: ["settings", "sliders"],
            style: "solid"
        },
        slideshare: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        smile: {
            unicode: "",
            tags: ["face", "emoticon", "happy", "approve", "satisfied", "rating"],
            style: "solid"
        },
        smoking: {
            unicode: "",
            tags: ["smoking status", "cigarette", "nicotine"],
            style: "solid"
        },
        snapchat: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        snowflake: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        soundcloud: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "space-shuttle": {
            unicode: "",
            tags: ["nasa", "astronaut", "rocket", "machine", "transportation"],
            style: "solid"
        },
        speakap: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        spinner: {
            unicode: "",
            tags: ["loading", "progress"],
            style: "solid"
        },
        spotify: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        square: {
            unicode: "",
            tags: ["block", "box"],
            style: "solid"
        },
        "square-full": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "stack-exchange": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "stack-overflow": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        star: {
            unicode: "",
            tags: ["award", "achievement", "night", "rating", "score", "favorite"],
            style: "solid"
        },
        "star-half": {
            unicode: "",
            tags: ["award", "achievement", "rating", "score", "star-half-empty", "star-half-full"],
            style: "solid"
        },
        staylinked: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        steam: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "step-backward": {
            unicode: "",
            tags: ["rewind", "previous", "beginning", "start", "first"],
            style: "solid"
        },
        "step-forward": {
            unicode: "",
            tags: ["next", "end", "last"],
            style: "solid"
        },
        "sticky-note": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        stop: {
            unicode: "",
            tags: ["block", "box", "square"],
            style: "solid"
        },
        "stop-circle": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        stopwatch: {
            unicode: "",
            tags: ["time"],
            style: "solid"
        },
        strikethrough: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        stripe: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        stumbleupon: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        suitcase: {
            unicode: "",
            tags: ["trip", "luggage", "travel", "move", "baggage"],
            style: "solid"
        },
        sun: {
            unicode: "",
            tags: ["weather", "contrast", "lighter", "brighten", "day"],
            style: "solid"
        },
        superpowers: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        sync: {
            unicode: "",
            tags: ["reload", "refresh", "exchange", "swap"],
            style: "solid"
        },
        "sync-alt": {
            unicode: "",
            tags: ["reload", "refresh"],
            style: "solid"
        },
        table: {
            unicode: "",
            tags: ["data", "excel", "spreadsheet"],
            style: "solid"
        },
        tablet: {
            unicode: "",
            tags: ["device", "screen", "apple", "ipad", "kindle"],
            style: "solid"
        },
        "tablet-alt": {
            unicode: "",
            tags: ["device", "screen", "apple", "ipad", "kindle"],
            style: "solid"
        },
        tablets: {
            unicode: "",
            tags: ["medicine", "drugs"],
            style: "solid"
        },
        "tachometer-alt": {
            unicode: "",
            tags: ["tachometer", "dashboard"],
            style: "solid"
        },
        tag: {
            unicode: "",
            tags: ["label"],
            style: "solid"
        },
        tags: {
            unicode: "",
            tags: ["labels"],
            style: "solid"
        },
        tape: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        tasks: {
            unicode: "",
            tags: ["progress", "loading", "downloading", "downloads", "settings"],
            style: "solid"
        },
        taxi: {
            unicode: "",
            tags: ["vehicle", "machine", "transportation", "cab", "cabbie", "car", "uber", "lyft", "car service"],
            style: "solid"
        },
        telegram: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "telegram-plane": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "tencent-weibo": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        terminal: {
            unicode: "",
            tags: ["command", "prompt", "code", "console"],
            style: "solid"
        },
        thermometer: {
            unicode: "",
            tags: ["temperature", "fever"],
            style: "solid"
        },
        "thumbs-down": {
            unicode: "",
            tags: ["dislike", "disapprove", "disagree", "hand", "thumbs-o-down"],
            style: "solid"
        },
        "thumbs-up": {
            unicode: "",
            tags: ["like", "favorite", "approve", "agree", "hand", "thumbs-o-up", "success", "yes", "ok", "okay", "you got it dude"],
            style: "solid"
        },
        thumbtack: {
            unicode: "",
            tags: ["marker", "pin", "location", "coordinates", "thumb-tack"],
            style: "solid"
        },
        "ticket-alt": {
            unicode: "",
            tags: ["ticket"],
            style: "solid"
        },
        times: {
            unicode: "",
            tags: ["close", "exit", "x", "cross", "error", "problem", "notification", "notify", "notice", "wrong", "incorrect"],
            style: "solid"
        },
        "times-circle": {
            unicode: "",
            tags: ["close", "exit", "x", "cross", "problem", "notification", "notify", "notice", "wrong", "incorrect"],
            style: "solid"
        },
        tint: {
            unicode: "",
            tags: ["raindrop", "waterdrop", "drop", "droplet"],
            style: "solid"
        },
        "toggle-off": {
            unicode: "",
            tags: ["switch"],
            style: "solid"
        },
        "toggle-on": {
            unicode: "",
            tags: ["switch"],
            style: "solid"
        },
        trademark: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        train: {
            unicode: "",
            tags: ["bullet", "locomotive", "railway"],
            style: "solid"
        },
        transgender: {
            unicode: "",
            tags: ["intersex"],
            style: "solid"
        },
        "transgender-alt": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        trash: {
            unicode: "",
            tags: ["garbage", "delete", "remove", "hide"],
            style: "solid"
        },
        "trash-alt": {
            unicode: "",
            tags: ["garbage", "delete", "remove", "hide", "trash", "trash-o"],
            style: "solid"
        },
        tree: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        trello: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        tripadvisor: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        trophy: {
            unicode: "",
            tags: ["award", "achievement", "cup", "winner", "game"],
            style: "solid"
        },
        truck: {
            unicode: "",
            tags: ["shipping", "delivery"],
            style: "solid"
        },
        "tumblr-square": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        tv: {
            unicode: "",
            tags: ["display", "computer", "monitor", "television"],
            style: "solid"
        },
        twitch: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        twitter: {
            unicode: "",
            tags: ["tweet", "social network"],
            style: "brands"
        },
        typo3: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        uber: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        uikit: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        umbrella: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        underline: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        undo: {
            unicode: "",
            tags: ["back", "exchange", "swap", "return", "control z", "oops"],
            style: "solid"
        },
        university: {
            unicode: "",
            tags: ["bank", "institution"],
            style: "solid"
        },
        unlink: {
            unicode: "",
            tags: ["remove", "chain", "chain-broken"],
            style: "solid"
        },
        unlock: {
            unicode: "",
            tags: ["protect", "admin", "password", "lock"],
            style: "solid"
        },
        "unlock-alt": {
            unicode: "",
            tags: ["protect", "admin", "password", "lock"],
            style: "solid"
        },
        upload: {
            unicode: "",
            tags: ["import"],
            style: "solid"
        },
        usb: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        user: {
            unicode: "",
            tags: ["person", "man", "head", "profile", "account"],
            style: "solid"
        },
        "user-circle": {
            unicode: "",
            tags: ["person", "man", "head", "profile", "account"],
            style: "solid"
        },
        "user-md": {
            unicode: "",
            tags: ["doctor", "profile", "medical", "nurse", "job", "occupation"],
            style: "solid"
        },
        "user-plus": {
            unicode: "",
            tags: ["sign up", "signup"],
            style: "solid"
        },
        "user-secret": {
            unicode: "",
            tags: ["whisper", "spy", "incognito", "privacy"],
            style: "solid"
        },
        "user-times": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        users: {
            unicode: "",
            tags: ["people", "profiles", "persons"],
            style: "solid"
        },
        video: {
            unicode: "",
            tags: ["film", "movie", "record", "camera", "video-camera"],
            style: "solid"
        },
        vimeo: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        vk: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "volume-down": {
            unicode: "",
            tags: ["audio", "lower", "quieter", "sound", "music", "speaker"],
            style: "solid"
        },
        "volume-off": {
            unicode: "",
            tags: ["audio", "mute", "sound", "music"],
            style: "solid"
        },
        "volume-up": {
            unicode: "",
            tags: ["audio", "higher", "louder", "sound", "music", "speaker"],
            style: "solid"
        },
        vuejs: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        warehouse: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        weibo: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        weight: {
            unicode: "",
            tags: ["scale"],
            style: "solid"
        },
        weixin: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        whatsapp: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        wheelchair: {
            unicode: "",
            tags: ["handicap", "person"],
            style: "solid"
        },
        wifi: {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "wikipedia-w": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "window-close": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "window-maximize": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "window-minimize": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "window-restore": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        windows: {
            unicode: "",
            tags: ["microsoft"],
            style: "brands"
        },
        "wine-glass": {
            unicode: "",
            tags: [],
            style: "solid"
        },
        "won-sign": {
            unicode: "",
            tags: ["krw", "krw"],
            style: "solid"
        },
        wordpress: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        wrench: {
            unicode: "",
            tags: ["settings", "fix", "update", "spanner", "tool"],
            style: "solid"
        },
        "x-ray": {
            unicode: "",
            tags: ["radiological images", "radiology"],
            style: "solid"
        },
        xbox: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        xing: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "y-combinator": {
            unicode: "",
            tags: [],
            style: "brands"
        },
        yahoo: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        yandex: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        yelp: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        "yen-sign": {
            unicode: "",
            tags: ["jpy", "jpy"],
            style: "solid"
        },
        yoast: {
            unicode: "",
            tags: [],
            style: "brands"
        },
        youtube: {
            unicode: "",
            tags: ["video", "film", "youtube-play", "youtube-square"],
            style: "brands"
        }
    }
}, function(module, exports) {
    exports.getDistanceBetweenPoints = function(pointA, pointB) {
        const a = pointA.x - pointB.x;
        const b = pointA.y - pointB.y;
        return Math.sqrt(a * a + b * b)
    };
    exports.getDistanceToLine = function(point, linePointA, linePointB) {
        var A = point.x - linePointA.x;
        var B = point.y - linePointA.y;
        var C = linePointB.x - linePointA.x;
        var D = linePointB.y - linePointA.y;
        var dot = A * C + B * D;
        var len_sq = C * C + D * D;
        var param = -1;
        if (len_sq != 0) {
            param = dot / len_sq
        }
        var xx,
            yy;
        if (param < 0) {
            xx = linePointA.x;
            yy = linePointA.y
        } else if (param > 1) {
            xx = linePointB.x;
            yy = linePointB.y
        } else {
            xx = linePointA.x + param * C;
            yy = linePointA.y + param * D
        }
        var dx = point.x - xx;
        var dy = point.y - yy;
        return Math.sqrt(dx * dx + dy * dy)
    };
    exports.getClosestPoint = function(pos, points) {
        var i,
            minDistance = Infinity,
            distance,
            minIndex;
        for (i = 0; i < points.length; i++) {
            distance = exports.getDistanceBetweenPoints(pos, points[i]);
            if (distance < minDistance) {
                minDistance = distance;
                minIndex = i
            }
        }
        return {
            distance: minDistance,
            index: minIndex,
            point: points[minIndex]
        }
    };
    exports.doLinesIntersect = function(a, b, c, d, p, q, r, s) {
        var det,
            gamma,
            lambda;
        det = (c - a) * (s - q) - (r - p) * (d - b);
        if (det === 0) {
            return false
        } else {
            lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;
            gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;
            return 0 < lambda && lambda < 1 && (0 < gamma && gamma < 1)
        }
    };
    exports.getLineIntersectionPoint = function(p1, p2, p3, p4) {
        const point = {
            x: ((p1.x * p2.y - p2.x * p1.y) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x)) / ((p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x)),
            y: ((p1.x * p2.y - p2.x * p1.y) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x)) / ((p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x))
        };
        if (isPointBetween(point, p1, p2) && isPointBetween(point, p3, p4)) {
            return point
        } else {
            return null
        }
    };
    function isPointBetween(p, a, b) {
        return (a.x <= p.x && p.x <= b.x || a.x >= p.x && p.x >= b.x) && (a.y <= p.y && p.y <= b.y || a.y >= p.y && p.y >= b.y)
    }
}, function(module, exports, __webpack_require__) {
    const models = __webpack_require__(97);
    const componentConfig = __webpack_require__(98);
    const components = createComponentList();
    exports.getComponentStructure = function() {
        return componentConfig
    };
    exports.getModel = function(key) {
        if (!models[key]) {
            console.warn("Unknown Model " + key);
            return null
        }
        return models[key]
    };
    exports.getComponentConfig = function(componentId) {
        if (!components[componentId]) {
            console.warn("Unknown component config " + componentId);
            return null
        }
        return components[componentId]
    };
    exports.getModelForComponentId = function(componentId) {
        return models[componentConfig[componentId].model]
    };
    function createComponentList() {
        var id,
            category,
            components = {};
        for (category in componentConfig) {
            for (id in componentConfig[category].components) {
                components[id] = componentConfig[category].components[id]
            }
        }
        return components
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__datahandler__ = __webpack_require__(20);
    var __WEBPACK_IMPORTED_MODULE_1__dygraph_layout__ = __webpack_require__(30);
    var BarsHandler = function() {
        __WEBPACK_IMPORTED_MODULE_0__datahandler__["a"].call(this)
    };
    BarsHandler.prototype = new __WEBPACK_IMPORTED_MODULE_0__datahandler__["a"];
    BarsHandler.prototype.extractSeries = function(rawData, seriesIndex, options) {};
    BarsHandler.prototype.rollingAverage = function(series, rollPeriod, options) {};
    BarsHandler.prototype.onPointsCreated_ = function(series, points) {
        for (var i = 0; i < series.length; ++i) {
            var item = series[i];
            var point = points[i];
            point.y_top = NaN;
            point.y_bottom = NaN;
            point.yval_minus = __WEBPACK_IMPORTED_MODULE_0__datahandler__["a"].parseFloat(item[2][0]);
            point.yval_plus = __WEBPACK_IMPORTED_MODULE_0__datahandler__["a"].parseFloat(item[2][1])
        }
    };
    BarsHandler.prototype.getExtremeYValues = function(series, dateWindow, options) {
        var minY = null,
            maxY = null,
            y;
        var firstIdx = 0;
        var lastIdx = series.length - 1;
        for (var j = firstIdx; j <= lastIdx; j++) {
            y = series[j][1];
            if (y === null || isNaN(y))
                continue;
            var low = series[j][2][0];
            var high = series[j][2][1];
            if (low > y)
                low = y;
            if (high < y)
                high = y;
            if (maxY === null || high > maxY)
                maxY = high;
            if (minY === null || low < minY)
                minY = low
        }
        return [minY, maxY]
    };
    BarsHandler.prototype.onLineEvaluated = function(points, axis, logscale) {
        var point;
        for (var j = 0; j < points.length; j++) {
            point = points[j];
            point.y_top = __WEBPACK_IMPORTED_MODULE_1__dygraph_layout__["a"].calcYNormal_(axis, point.yval_minus, logscale);
            point.y_bottom = __WEBPACK_IMPORTED_MODULE_1__dygraph_layout__["a"].calcYNormal_(axis, point.yval_plus, logscale)
        }
    };
    __webpack_exports__["a"] = BarsHandler
}, function(module, exports) {
    exports.adjustLightness = function(hexValue, lightnessOffset, isAbsolute) {
        const hsl = exports.hexToHsl(hexValue);
        if (hsl.l > .5 && isAbsolute !== true) {
            hsl.l -= lightnessOffset
        } else {
            hsl.l += lightnessOffset
        }
        return exports.hslToHex(hsl.h, hsl.s, hsl.l)
    };
    exports.hexToHsl = function(hexValue) {
        if (!hexValue) {
            return {
                h: 0,
                s: 0,
                l: 0
            }
        }
        var r = parseInt(hexValue.substr(1, 2), 16) / 255;
        var g = parseInt(hexValue.substr(3, 2), 16) / 255;
        var b = parseInt(hexValue.substr(5, 2), 16) / 255;
        var max = Math.max(r, g, b),
            min = Math.min(r, g, b);
        var h,
            s,
            l = (max + min) / 2;
        if (max == min) {
            h = s = 0
        } else {
            var d = max - min;
            s = l > .5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break
            }
            h /= 6
        }
        return {
            h: h,
            s: s,
            l: l
        }
    };
    exports.hslToHex = function(h, s, l) {
        let r,
            g,
            b;
        if (s === 0) {
            r = g = b = l
        } else {
            const q = l < .5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3)
        }
        return `#${toHex(r)}${toHex(g)}${toHex(b)}`
    };
    exports.getRandomColor = function() {
        const f = () => {
            const c = Math.floor(Math.random() * 255).toString(16);
            if (c.length === 1) {
                return "0" + c
            } else {
                return c
            }
        };
        return ("#" + f() + f() + f()).toUpperCase()
    };
    function hue2rgb(p, q, t) {
        if (t < 0)
            t += 1;
        if (t > 1)
            t -= 1;
        if (t < 1 / 6)
            return p + (q - p) * 6 * t;
        if (t < 1 / 2)
            return q;
        if (t < 2 / 3)
            return p + (q - p) * (2 / 3 - t) * 6;
        return p
    }
    function toHex(x) {
        const hex = Math.round(x * 255).toString(16);
        return hex.length === 1 ? "0" + hex : hex
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    (function(process) {
        var __WEBPACK_IMPORTED_MODULE_0__dygraph_layout__ = __webpack_require__(30);
        var __WEBPACK_IMPORTED_MODULE_1__dygraph_canvas__ = __webpack_require__(31);
        var __WEBPACK_IMPORTED_MODULE_2__dygraph_options__ = __webpack_require__(187);
        var __WEBPACK_IMPORTED_MODULE_3__dygraph_interaction_model__ = __webpack_require__(19);
        var __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__ = __webpack_require__(18);
        var __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__ = __webpack_require__(6);
        var __WEBPACK_IMPORTED_MODULE_6__dygraph_default_attrs__ = __webpack_require__(32);
        var __WEBPACK_IMPORTED_MODULE_7__dygraph_options_reference__ = __webpack_require__(33);
        var __WEBPACK_IMPORTED_MODULE_8__iframe_tarp__ = __webpack_require__(34);
        var __WEBPACK_IMPORTED_MODULE_9__datahandler_default__ = __webpack_require__(35);
        var __WEBPACK_IMPORTED_MODULE_10__datahandler_bars_error__ = __webpack_require__(188);
        var __WEBPACK_IMPORTED_MODULE_11__datahandler_bars_custom__ = __webpack_require__(189);
        var __WEBPACK_IMPORTED_MODULE_12__datahandler_default_fractions__ = __webpack_require__(190);
        var __WEBPACK_IMPORTED_MODULE_13__datahandler_bars_fractions__ = __webpack_require__(191);
        var __WEBPACK_IMPORTED_MODULE_14__datahandler_bars__ = __webpack_require__(14);
        var __WEBPACK_IMPORTED_MODULE_15__plugins_annotations__ = __webpack_require__(192);
        var __WEBPACK_IMPORTED_MODULE_16__plugins_axes__ = __webpack_require__(193);
        var __WEBPACK_IMPORTED_MODULE_17__plugins_chart_labels__ = __webpack_require__(194);
        var __WEBPACK_IMPORTED_MODULE_18__plugins_grid__ = __webpack_require__(195);
        var __WEBPACK_IMPORTED_MODULE_19__plugins_legend__ = __webpack_require__(196);
        var __WEBPACK_IMPORTED_MODULE_20__plugins_range_selector__ = __webpack_require__(197);
        var __WEBPACK_IMPORTED_MODULE_21__dygraph_gviz__ = __webpack_require__(198);
        "use strict";
        var Dygraph = function(div, data, opts) {
            this.__init__(div, data, opts)
        };
        Dygraph.NAME = "Dygraph";
        Dygraph.VERSION = "2.0.0";
        Dygraph.DEFAULT_ROLL_PERIOD = 1;
        Dygraph.DEFAULT_WIDTH = 480;
        Dygraph.DEFAULT_HEIGHT = 320;
        Dygraph.ANIMATION_STEPS = 12;
        Dygraph.ANIMATION_DURATION = 200;
        Dygraph.Plotters = __WEBPACK_IMPORTED_MODULE_1__dygraph_canvas__["a"]._Plotters;
        Dygraph.addedAnnotationCSS = false;
        Dygraph.prototype.__init__ = function(div, file, attrs) {
            this.is_initial_draw_ = true;
            this.readyFns_ = [];
            if (attrs === null || attrs === undefined) {
                attrs = {}
            }
            attrs = Dygraph.copyUserAttrs_(attrs);
            if (typeof div == "string") {
                div = document.getElementById(div)
            }
            if (!div) {
                throw new Error("Constructing dygraph with a non-existent div!")
            }
            this.maindiv_ = div;
            this.file_ = file;
            this.rollPeriod_ = attrs.rollPeriod || Dygraph.DEFAULT_ROLL_PERIOD;
            this.previousVerticalX_ = -1;
            this.fractions_ = attrs.fractions || false;
            this.dateWindow_ = attrs.dateWindow || null;
            this.annotations_ = [];
            div.innerHTML = "";
            if (div.style.width === "" && attrs.width) {
                div.style.width = attrs.width + "px"
            }
            if (div.style.height === "" && attrs.height) {
                div.style.height = attrs.height + "px"
            }
            if (div.style.height === "" && div.clientHeight === 0) {
                div.style.height = Dygraph.DEFAULT_HEIGHT + "px";
                if (div.style.width === "") {
                    div.style.width = Dygraph.DEFAULT_WIDTH + "px"
                }
            }
            this.width_ = div.clientWidth || attrs.width || 0;
            this.height_ = div.clientHeight || attrs.height || 0;
            if (attrs.stackedGraph) {
                attrs.fillGraph = true
            }
            this.user_attrs_ = {};
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["R"](this.user_attrs_, attrs);
            this.attrs_ = {};
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["S"](this.attrs_, __WEBPACK_IMPORTED_MODULE_6__dygraph_default_attrs__["a"]);
            this.boundaryIds_ = [];
            this.setIndexByName_ = {};
            this.datasetIndex_ = [];
            this.registeredEvents_ = [];
            this.eventListeners_ = {};
            this.attributes_ = new __WEBPACK_IMPORTED_MODULE_2__dygraph_options__["a"](this);
            this.createInterface_();
            this.plugins_ = [];
            var plugins = Dygraph.PLUGINS.concat(this.getOption("plugins"));
            for (var i = 0; i < plugins.length; i++) {
                var Plugin = plugins[i];
                var pluginInstance;
                if (typeof Plugin.activate !== "undefined") {
                    pluginInstance = Plugin
                } else {
                    pluginInstance = new Plugin
                }
                var pluginDict = {
                    plugin: pluginInstance,
                    events: {},
                    options: {},
                    pluginOptions: {}
                };
                var handlers = pluginInstance.activate(this);
                for (var eventName in handlers) {
                    if (!handlers.hasOwnProperty(eventName))
                        continue;
                    pluginDict.events[eventName] = handlers[eventName]
                }
                this.plugins_.push(pluginDict)
            }
            for (var i = 0; i < this.plugins_.length; i++) {
                var plugin_dict = this.plugins_[i];
                for (var eventName in plugin_dict.events) {
                    if (!plugin_dict.events.hasOwnProperty(eventName))
                        continue;
                    var callback = plugin_dict.events[eventName];
                    var pair = [plugin_dict.plugin, callback];
                    if (!(eventName in this.eventListeners_)) {
                        this.eventListeners_[eventName] = [pair]
                    } else {
                        this.eventListeners_[eventName].push(pair)
                    }
                }
            }
            this.createDragInterface_();
            this.start_()
        };
        Dygraph.prototype.cascadeEvents_ = function(name, extra_props) {
            if (!(name in this.eventListeners_))
                return false;
            var e = {
                dygraph: this,
                cancelable: false,
                defaultPrevented: false,
                preventDefault: function() {
                    if (!e.cancelable)
                        throw "Cannot call preventDefault on non-cancelable event.";
                    e.defaultPrevented = true
                },
                propagationStopped: false,
                stopPropagation: function() {
                    e.propagationStopped = true
                }
            };
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["R"](e, extra_props);
            var callback_plugin_pairs = this.eventListeners_[name];
            if (callback_plugin_pairs) {
                for (var i = callback_plugin_pairs.length - 1; i >= 0; i--) {
                    var plugin = callback_plugin_pairs[i][0];
                    var callback = callback_plugin_pairs[i][1];
                    callback.call(plugin, e);
                    if (e.propagationStopped)
                        break
                }
            }
            return e.defaultPrevented
        };
        Dygraph.prototype.getPluginInstance_ = function(type) {
            for (var i = 0; i < this.plugins_.length; i++) {
                var p = this.plugins_[i];
                if (p.plugin instanceof type) {
                    return p.plugin
                }
            }
            return null
        };
        Dygraph.prototype.isZoomed = function(axis) {
            const isZoomedX = !!this.dateWindow_;
            if (axis === "x")
                return isZoomedX;
            const isZoomedY = this.axes_.map(axis => !!axis.valueRange).indexOf(true) >= 0;
            if (axis === null || axis === undefined) {
                return isZoomedX || isZoomedY
            }
            if (axis === "y")
                return isZoomedY;
            throw new Error(`axis parameter is [${axis}] must be null, 'x' or 'y'.`)
        };
        Dygraph.prototype.toString = function() {
            var maindiv = this.maindiv_;
            var id = maindiv && maindiv.id ? maindiv.id : maindiv;
            return "[Dygraph " + id + "]"
        };
        Dygraph.prototype.attr_ = function(name, seriesName) {
            if (typeof process !== "undefined") {
                if (process.env.NODE_ENV != "production") {
                    if (typeof __WEBPACK_IMPORTED_MODULE_7__dygraph_options_reference__["a"] === "undefined") {
                        console.error("Must include options reference JS for testing")
                    } else if (!__WEBPACK_IMPORTED_MODULE_7__dygraph_options_reference__["a"].hasOwnProperty(name)) {
                        console.error("Dygraphs is using property " + name + ", which has no " + "entry in the Dygraphs.OPTIONS_REFERENCE listing.");
                        __WEBPACK_IMPORTED_MODULE_7__dygraph_options_reference__["a"][name] = true
                    }
                }
            }
            return seriesName ? this.attributes_.getForSeries(name, seriesName) : this.attributes_.get(name)
        };
        Dygraph.prototype.getOption = function(name, opt_seriesName) {
            return this.attr_(name, opt_seriesName)
        };
        Dygraph.prototype.getNumericOption = function(name, opt_seriesName) {
            return this.getOption(name, opt_seriesName)
        };
        Dygraph.prototype.getStringOption = function(name, opt_seriesName) {
            return this.getOption(name, opt_seriesName)
        };
        Dygraph.prototype.getBooleanOption = function(name, opt_seriesName) {
            return this.getOption(name, opt_seriesName)
        };
        Dygraph.prototype.getFunctionOption = function(name, opt_seriesName) {
            return this.getOption(name, opt_seriesName)
        };
        Dygraph.prototype.getOptionForAxis = function(name, axis) {
            return this.attributes_.getForAxis(name, axis)
        };
        Dygraph.prototype.optionsViewForAxis_ = function(axis) {
            var self = this;
            return function(opt) {
                var axis_opts = self.user_attrs_.axes;
                if (axis_opts && axis_opts[axis] && axis_opts[axis].hasOwnProperty(opt)) {
                    return axis_opts[axis][opt]
                }
                if (axis === "x" && opt === "logscale") {
                    return false
                }
                if (typeof self.user_attrs_[opt] != "undefined") {
                    return self.user_attrs_[opt]
                }
                axis_opts = self.attrs_.axes;
                if (axis_opts && axis_opts[axis] && axis_opts[axis].hasOwnProperty(opt)) {
                    return axis_opts[axis][opt]
                }
                if (axis == "y" && self.axes_[0].hasOwnProperty(opt)) {
                    return self.axes_[0][opt]
                } else if (axis == "y2" && self.axes_[1].hasOwnProperty(opt)) {
                    return self.axes_[1][opt]
                }
                return self.attr_(opt)
            }
        };
        Dygraph.prototype.rollPeriod = function() {
            return this.rollPeriod_
        };
        Dygraph.prototype.xAxisRange = function() {
            return this.dateWindow_ ? this.dateWindow_ : this.xAxisExtremes()
        };
        Dygraph.prototype.xAxisExtremes = function() {
            var pad = this.getNumericOption("xRangePad") / this.plotter_.area.w;
            if (this.numRows() === 0) {
                return [0 - pad, 1 + pad]
            }
            var left = this.rawData_[0][0];
            var right = this.rawData_[this.rawData_.length - 1][0];
            if (pad) {
                var range = right - left;
                left -= range * pad;
                right += range * pad
            }
            return [left, right]
        };
        Dygraph.prototype.yAxisExtremes = function() {
            const packed = this.gatherDatasets_(this.rolledSeries_, null);
            const {extremes: extremes} = packed;
            const saveAxes = this.axes_;
            this.computeYAxisRanges_(extremes);
            const newAxes = this.axes_;
            this.axes_ = saveAxes;
            return newAxes.map(axis => axis.extremeRange)
        };
        Dygraph.prototype.yAxisRange = function(idx) {
            if (typeof idx == "undefined")
                idx = 0;
            if (idx < 0 || idx >= this.axes_.length) {
                return null
            }
            var axis = this.axes_[idx];
            return [axis.computedValueRange[0], axis.computedValueRange[1]]
        };
        Dygraph.prototype.yAxisRanges = function() {
            var ret = [];
            for (var i = 0; i < this.axes_.length; i++) {
                ret.push(this.yAxisRange(i))
            }
            return ret
        };
        Dygraph.prototype.toDomCoords = function(x, y, axis) {
            return [this.toDomXCoord(x), this.toDomYCoord(y, axis)]
        };
        Dygraph.prototype.toDomXCoord = function(x) {
            if (x === null) {
                return null
            }
            var area = this.plotter_.area;
            var xRange = this.xAxisRange();
            return area.x + (x - xRange[0]) / (xRange[1] - xRange[0]) * area.w
        };
        Dygraph.prototype.toDomYCoord = function(y, axis) {
            var pct = this.toPercentYCoord(y, axis);
            if (pct === null) {
                return null
            }
            var area = this.plotter_.area;
            return area.y + pct * area.h
        };
        Dygraph.prototype.toDataCoords = function(x, y, axis) {
            return [this.toDataXCoord(x), this.toDataYCoord(y, axis)]
        };
        Dygraph.prototype.toDataXCoord = function(x) {
            if (x === null) {
                return null
            }
            var area = this.plotter_.area;
            var xRange = this.xAxisRange();
            if (!this.attributes_.getForAxis("logscale", "x")) {
                return xRange[0] + (x - area.x) / area.w * (xRange[1] - xRange[0])
            } else {
                var pct = (x - area.x) / area.w;
                return __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["I"](xRange[0], xRange[1], pct)
            }
        };
        Dygraph.prototype.toDataYCoord = function(y, axis) {
            if (y === null) {
                return null
            }
            var area = this.plotter_.area;
            var yRange = this.yAxisRange(axis);
            if (typeof axis == "undefined")
                axis = 0;
            if (!this.attributes_.getForAxis("logscale", axis)) {
                return yRange[0] + (area.y + area.h - y) / area.h * (yRange[1] - yRange[0])
            } else {
                var pct = (y - area.y) / area.h;
                return __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["I"](yRange[1], yRange[0], pct)
            }
        };
        Dygraph.prototype.toPercentYCoord = function(y, axis) {
            if (y === null) {
                return null
            }
            if (typeof axis == "undefined")
                axis = 0;
            var yRange = this.yAxisRange(axis);
            var pct;
            var logscale = this.attributes_.getForAxis("logscale", axis);
            if (logscale) {
                var logr0 = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["H"](yRange[0]);
                var logr1 = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["H"](yRange[1]);
                pct = (logr1 - __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["H"](y)) / (logr1 - logr0)
            } else {
                pct = (yRange[1] - y) / (yRange[1] - yRange[0])
            }
            return pct
        };
        Dygraph.prototype.toPercentXCoord = function(x) {
            if (x === null) {
                return null
            }
            var xRange = this.xAxisRange();
            var pct;
            var logscale = this.attributes_.getForAxis("logscale", "x");
            if (logscale === true) {
                var logr0 = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["H"](xRange[0]);
                var logr1 = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["H"](xRange[1]);
                pct = (__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["H"](x) - logr0) / (logr1 - logr0)
            } else {
                pct = (x - xRange[0]) / (xRange[1] - xRange[0])
            }
            return pct
        };
        Dygraph.prototype.numColumns = function() {
            if (!this.rawData_)
                return 0;
            return this.rawData_[0] ? this.rawData_[0].length : this.attr_("labels").length
        };
        Dygraph.prototype.numRows = function() {
            if (!this.rawData_)
                return 0;
            return this.rawData_.length
        };
        Dygraph.prototype.getValue = function(row, col) {
            if (row < 0 || row > this.rawData_.length)
                return null;
            if (col < 0 || col > this.rawData_[row].length)
                return null;
            return this.rawData_[row][col]
        };
        Dygraph.prototype.createInterface_ = function() {
            var enclosing = this.maindiv_;
            this.graphDiv = document.createElement("div");
            this.graphDiv.style.textAlign = "left";
            this.graphDiv.style.position = "relative";
            enclosing.appendChild(this.graphDiv);
            this.canvas_ = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["m"]();
            this.canvas_.style.position = "absolute";
            this.hidden_ = this.createPlotKitCanvas_(this.canvas_);
            this.canvas_ctx_ = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["x"](this.canvas_);
            this.hidden_ctx_ = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["x"](this.hidden_);
            this.resizeElements_();
            this.graphDiv.appendChild(this.hidden_);
            this.graphDiv.appendChild(this.canvas_);
            this.mouseEventElement_ = this.createMouseEventElement_();
            this.layout_ = new __WEBPACK_IMPORTED_MODULE_0__dygraph_layout__["a"](this);
            var dygraph = this;
            this.mouseMoveHandler_ = function(e) {
                dygraph.mouseMove_(e)
            };
            this.mouseOutHandler_ = function(e) {
                var target = e.target || e.fromElement;
                var relatedTarget = e.relatedTarget || e.toElement;
                if (__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["D"](target, dygraph.graphDiv) && !__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["D"](relatedTarget, dygraph.graphDiv)) {
                    dygraph.mouseOut_(e)
                }
            };
            this.addAndTrackEvent(window, "mouseout", this.mouseOutHandler_);
            this.addAndTrackEvent(this.mouseEventElement_, "mousemove", this.mouseMoveHandler_);
            if (!this.resizeHandler_) {
                this.resizeHandler_ = function(e) {
                    dygraph.resize()
                };
                this.addAndTrackEvent(window, "resize", this.resizeHandler_)
            }
        };
        Dygraph.prototype.resizeElements_ = function() {
            this.graphDiv.style.width = this.width_ + "px";
            this.graphDiv.style.height = this.height_ + "px";
            var pixelRatioOption = this.getNumericOption("pixelRatio");
            var canvasScale = pixelRatioOption || __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["y"](this.canvas_ctx_);
            this.canvas_.width = this.width_ * canvasScale;
            this.canvas_.height = this.height_ * canvasScale;
            this.canvas_.style.width = this.width_ + "px";
            this.canvas_.style.height = this.height_ + "px";
            if (canvasScale !== 1) {
                this.canvas_ctx_.scale(canvasScale, canvasScale)
            }
            var hiddenScale = pixelRatioOption || __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["y"](this.hidden_ctx_);
            this.hidden_.width = this.width_ * hiddenScale;
            this.hidden_.height = this.height_ * hiddenScale;
            this.hidden_.style.width = this.width_ + "px";
            this.hidden_.style.height = this.height_ + "px";
            if (hiddenScale !== 1) {
                this.hidden_ctx_.scale(hiddenScale, hiddenScale)
            }
        };
        Dygraph.prototype.destroy = function() {
            this.canvas_ctx_.restore();
            this.hidden_ctx_.restore();
            for (var i = this.plugins_.length - 1; i >= 0; i--) {
                var p = this.plugins_.pop();
                if (p.plugin.destroy)
                    p.plugin.destroy()
            }
            var removeRecursive = function(node) {
                while (node.hasChildNodes()) {
                    removeRecursive(node.firstChild);
                    node.removeChild(node.firstChild)
                }
            };
            this.removeTrackedEvents_();
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["O"](window, "mouseout", this.mouseOutHandler_);
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["O"](this.mouseEventElement_, "mousemove", this.mouseMoveHandler_);
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["O"](window, "resize", this.resizeHandler_);
            this.resizeHandler_ = null;
            removeRecursive(this.maindiv_);
            var nullOut = function(obj) {
                for (var n in obj) {
                    if (typeof obj[n] === "object") {
                        obj[n] = null
                    }
                }
            };
            nullOut(this.layout_);
            nullOut(this.plotter_);
            nullOut(this)
        };
        Dygraph.prototype.createPlotKitCanvas_ = function(canvas) {
            var h = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["m"]();
            h.style.position = "absolute";
            h.style.top = canvas.style.top;
            h.style.left = canvas.style.left;
            h.width = this.width_;
            h.height = this.height_;
            h.style.width = this.width_ + "px";
            h.style.height = this.height_ + "px";
            return h
        };
        Dygraph.prototype.createMouseEventElement_ = function() {
            return this.canvas_
        };
        Dygraph.prototype.setColors_ = function() {
            var labels = this.getLabels();
            var num = labels.length - 1;
            this.colors_ = [];
            this.colorsMap_ = {};
            var sat = this.getNumericOption("colorSaturation") || 1;
            var val = this.getNumericOption("colorValue") || .5;
            var half = Math.ceil(num / 2);
            var colors = this.getOption("colors");
            var visibility = this.visibility();
            for (var i = 0; i < num; i++) {
                if (!visibility[i]) {
                    continue
                }
                var label = labels[i + 1];
                var colorStr = this.attributes_.getForSeries("color", label);
                if (!colorStr) {
                    if (colors) {
                        colorStr = colors[i % colors.length]
                    } else {
                        var idx = i % 2 ? half + (i + 1) / 2 : Math.ceil((i + 1) / 2);
                        var hue = 1 * idx / (1 + num);
                        colorStr = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["z"](hue, sat, val)
                    }
                }
                this.colors_.push(colorStr);
                this.colorsMap_[label] = colorStr
            }
        };
        Dygraph.prototype.getColors = function() {
            return this.colors_
        };
        Dygraph.prototype.getPropertiesForSeries = function(series_name) {
            var idx = -1;
            var labels = this.getLabels();
            for (var i = 1; i < labels.length; i++) {
                if (labels[i] == series_name) {
                    idx = i;
                    break
                }
            }
            if (idx == -1)
                return null;
            return {
                name: series_name,
                column: idx,
                visible: this.visibility()[idx - 1],
                color: this.colorsMap_[series_name],
                axis: 1 + this.attributes_.axisForSeries(series_name)
            }
        };
        Dygraph.prototype.createRollInterface_ = function() {
            var roller = this.roller_;
            if (!roller) {
                this.roller_ = roller = document.createElement("input");
                roller.type = "text";
                roller.style.display = "none";
                roller.className = "dygraph-roller";
                this.graphDiv.appendChild(roller)
            }
            var display = this.getBooleanOption("showRoller") ? "block" : "none";
            var area = this.getArea();
            var textAttr = {
                top: area.y + area.h - 25 + "px",
                left: area.x + 1 + "px",
                display: display
            };
            roller.size = "2";
            roller.value = this.rollPeriod_;
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["R"](roller.style, textAttr);
            roller.onchange = (() => this.adjustRoll(roller.value))
        };
        Dygraph.prototype.createDragInterface_ = function() {
            var context = {
                isZooming: false,
                isPanning: false,
                is2DPan: false,
                dragStartX: null,
                dragStartY: null,
                dragEndX: null,
                dragEndY: null,
                dragDirection: null,
                prevEndX: null,
                prevEndY: null,
                prevDragDirection: null,
                cancelNextDblclick: false,
                initialLeftmostDate: null,
                xUnitsPerPixel: null,
                dateRange: null,
                px: 0,
                py: 0,
                boundedDates: null,
                boundedValues: null,
                tarp: new __WEBPACK_IMPORTED_MODULE_8__iframe_tarp__["a"],
                initializeMouseDown: function(event, g, contextB) {
                    if (event.preventDefault) {
                        event.preventDefault()
                    } else {
                        event.returnValue = false;
                        event.cancelBubble = true
                    }
                    var canvasPos = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["v"](g.canvas_);
                    contextB.px = canvasPos.x;
                    contextB.py = canvasPos.y;
                    contextB.dragStartX = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["t"](event, contextB);
                    contextB.dragStartY = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["u"](event, contextB);
                    contextB.cancelNextDblclick = false;
                    contextB.tarp.cover()
                },
                destroy: function() {
                    var context = this;
                    if (context.isZooming || context.isPanning) {
                        context.isZooming = false;
                        context.dragStartX = null;
                        context.dragStartY = null
                    }
                    if (context.isPanning) {
                        context.isPanning = false;
                        context.draggingDate = null;
                        context.dateRange = null;
                        for (var i = 0; i < self.axes_.length; i++) {
                            delete self.axes_[i].draggingValue;
                            delete self.axes_[i].dragValueRange
                        }
                    }
                    context.tarp.uncover()
                }
            };
            var interactionModel = this.getOption("interactionModel");
            var self = this;
            var bindHandler = function(handler) {
                return function(event) {
                    handler(event, self, context)
                }
            };
            for (var eventName in interactionModel) {
                if (!interactionModel.hasOwnProperty(eventName))
                    continue;
                this.addAndTrackEvent(this.mouseEventElement_, eventName, bindHandler(interactionModel[eventName]))
            }
            if (!interactionModel.willDestroyContextMyself) {
                var mouseUpHandler = function(event) {
                    context.destroy()
                };
                this.addAndTrackEvent(document, "mouseup", mouseUpHandler)
            }
        };
        Dygraph.prototype.drawZoomRect_ = function(direction, startX, endX, startY, endY, prevDirection, prevEndX, prevEndY) {
            var ctx = this.canvas_ctx_;
            if (prevDirection == __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["f"]) {
                ctx.clearRect(Math.min(startX, prevEndX), this.layout_.getPlotArea().y, Math.abs(startX - prevEndX), this.layout_.getPlotArea().h)
            } else if (prevDirection == __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["h"]) {
                ctx.clearRect(this.layout_.getPlotArea().x, Math.min(startY, prevEndY), this.layout_.getPlotArea().w, Math.abs(startY - prevEndY))
            }
            if (direction == __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["f"]) {
                if (endX && startX) {
                    ctx.fillStyle = "rgba(128,128,128,0.33)";
                    ctx.fillRect(Math.min(startX, endX), this.layout_.getPlotArea().y, Math.abs(endX - startX), this.layout_.getPlotArea().h)
                }
            } else if (direction == __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["h"]) {
                if (endY && startY) {
                    ctx.fillStyle = "rgba(128,128,128,0.33)";
                    ctx.fillRect(this.layout_.getPlotArea().x, Math.min(startY, endY), this.layout_.getPlotArea().w, Math.abs(endY - startY))
                }
            }
        };
        Dygraph.prototype.clearZoomRect_ = function() {
            this.currentZoomRectArgs_ = null;
            this.canvas_ctx_.clearRect(0, 0, this.width_, this.height_)
        };
        Dygraph.prototype.doZoomX_ = function(lowX, highX) {
            this.currentZoomRectArgs_ = null;
            var minDate = this.toDataXCoord(lowX);
            var maxDate = this.toDataXCoord(highX);
            this.doZoomXDates_(minDate, maxDate)
        };
        Dygraph.prototype.doZoomXDates_ = function(minDate, maxDate) {
            var old_window = this.xAxisRange();
            var new_window = [minDate, maxDate];
            const zoomCallback = this.getFunctionOption("zoomCallback");
            this.doAnimatedZoom(old_window, new_window, null, null, () => {
                if (zoomCallback) {
                    zoomCallback.call(this, minDate, maxDate, this.yAxisRanges())
                }
            })
        };
        Dygraph.prototype.doZoomY_ = function(lowY, highY) {
            this.currentZoomRectArgs_ = null;
            var oldValueRanges = this.yAxisRanges();
            var newValueRanges = [];
            for (var i = 0; i < this.axes_.length; i++) {
                var hi = this.toDataYCoord(lowY, i);
                var low = this.toDataYCoord(highY, i);
                newValueRanges.push([low, hi])
            }
            const zoomCallback = this.getFunctionOption("zoomCallback");
            this.doAnimatedZoom(null, null, oldValueRanges, newValueRanges, () => {
                if (zoomCallback) {
                    const [minX, maxX] = this.xAxisRange();
                    zoomCallback.call(this, minX, maxX, this.yAxisRanges())
                }
            })
        };
        Dygraph.zoomAnimationFunction = function(frame, numFrames) {
            var k = 1.5;
            return (1 - Math.pow(k, -frame)) / (1 - Math.pow(k, -numFrames))
        };
        Dygraph.prototype.resetZoom = function() {
            const dirtyX = this.isZoomed("x");
            const dirtyY = this.isZoomed("y");
            const dirty = dirtyX || dirtyY;
            this.clearSelection();
            if (!dirty)
                return;
            const [minDate, maxDate] = this.xAxisExtremes();
            const animatedZooms = this.getBooleanOption("animatedZooms");
            const zoomCallback = this.getFunctionOption("zoomCallback");
            if (!animatedZooms) {
                this.dateWindow_ = null;
                this.axes_.forEach(axis => {
                    if (axis.valueRange)
                        delete axis.valueRange
                });
                this.drawGraph_();
                if (zoomCallback) {
                    zoomCallback.call(this, minDate, maxDate, this.yAxisRanges())
                }
                return
            }
            var oldWindow = null,
                newWindow = null,
                oldValueRanges = null,
                newValueRanges = null;
            if (dirtyX) {
                oldWindow = this.xAxisRange();
                newWindow = [minDate, maxDate]
            }
            if (dirtyY) {
                oldValueRanges = this.yAxisRanges();
                newValueRanges = this.yAxisExtremes()
            }
            this.doAnimatedZoom(oldWindow, newWindow, oldValueRanges, newValueRanges, () => {
                this.dateWindow_ = null;
                this.axes_.forEach(axis => {
                    if (axis.valueRange)
                        delete axis.valueRange
                });
                if (zoomCallback) {
                    zoomCallback.call(this, minDate, maxDate, this.yAxisRanges())
                }
            })
        };
        Dygraph.prototype.doAnimatedZoom = function(oldXRange, newXRange, oldYRanges, newYRanges, callback) {
            var steps = this.getBooleanOption("animatedZooms") ? Dygraph.ANIMATION_STEPS : 1;
            var windows = [];
            var valueRanges = [];
            var step,
                frac;
            if (oldXRange !== null && newXRange !== null) {
                for (step = 1; step <= steps; step++) {
                    frac = Dygraph.zoomAnimationFunction(step, steps);
                    windows[step - 1] = [oldXRange[0] * (1 - frac) + frac * newXRange[0], oldXRange[1] * (1 - frac) + frac * newXRange[1]]
                }
            }
            if (oldYRanges !== null && newYRanges !== null) {
                for (step = 1; step <= steps; step++) {
                    frac = Dygraph.zoomAnimationFunction(step, steps);
                    var thisRange = [];
                    for (var j = 0; j < this.axes_.length; j++) {
                        thisRange.push([oldYRanges[j][0] * (1 - frac) + frac * newYRanges[j][0], oldYRanges[j][1] * (1 - frac) + frac * newYRanges[j][1]])
                    }
                    valueRanges[step - 1] = thisRange
                }
            }
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["P"](step => {
                if (valueRanges.length) {
                    for (var i = 0; i < this.axes_.length; i++) {
                        var w = valueRanges[step][i];
                        this.axes_[i].valueRange = [w[0], w[1]]
                    }
                }
                if (windows.length) {
                    this.dateWindow_ = windows[step]
                }
                this.drawGraph_()
            }, steps, Dygraph.ANIMATION_DURATION / steps, callback)
        };
        Dygraph.prototype.getArea = function() {
            return this.plotter_.area
        };
        Dygraph.prototype.eventToDomCoords = function(event) {
            if (event.offsetX && event.offsetY) {
                return [event.offsetX, event.offsetY]
            } else {
                var eventElementPos = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["v"](this.mouseEventElement_);
                var canvasx = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["L"](event) - eventElementPos.x;
                var canvasy = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["M"](event) - eventElementPos.y;
                return [canvasx, canvasy]
            }
        };
        Dygraph.prototype.findClosestRow = function(domX) {
            var minDistX = Infinity;
            var closestRow = -1;
            var sets = this.layout_.points;
            for (var i = 0; i < sets.length; i++) {
                var points = sets[i];
                var len = points.length;
                for (var j = 0; j < len; j++) {
                    var point = points[j];
                    if (!__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["G"](point, true))
                        continue;
                    var dist = Math.abs(point.canvasx - domX);
                    if (dist < minDistX) {
                        minDistX = dist;
                        closestRow = point.idx
                    }
                }
            }
            return closestRow
        };
        Dygraph.prototype.findClosestPoint = function(domX, domY) {
            var minDist = Infinity;
            var dist,
                dx,
                dy,
                point,
                closestPoint,
                closestSeries,
                closestRow;
            for (var setIdx = this.layout_.points.length - 1; setIdx >= 0; --setIdx) {
                var points = this.layout_.points[setIdx];
                for (var i = 0; i < points.length; ++i) {
                    point = points[i];
                    if (!__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["G"](point))
                        continue;
                    dx = point.canvasx - domX;
                    dy = point.canvasy - domY;
                    dist = dx * dx + dy * dy;
                    if (dist < minDist) {
                        minDist = dist;
                        closestPoint = point;
                        closestSeries = setIdx;
                        closestRow = point.idx
                    }
                }
            }
            var name = this.layout_.setNames[closestSeries];
            return {
                row: closestRow,
                seriesName: name,
                point: closestPoint
            }
        };
        Dygraph.prototype.findStackedPoint = function(domX, domY) {
            var row = this.findClosestRow(domX);
            var closestPoint,
                closestSeries;
            for (var setIdx = 0; setIdx < this.layout_.points.length; ++setIdx) {
                var boundary = this.getLeftBoundary_(setIdx);
                var rowIdx = row - boundary;
                var points = this.layout_.points[setIdx];
                if (rowIdx >= points.length)
                    continue;
                var p1 = points[rowIdx];
                if (!__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["G"](p1))
                    continue;
                var py = p1.canvasy;
                if (domX > p1.canvasx && rowIdx + 1 < points.length) {
                    var p2 = points[rowIdx + 1];
                    if (__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["G"](p2)) {
                        var dx = p2.canvasx - p1.canvasx;
                        if (dx > 0) {
                            var r = (domX - p1.canvasx) / dx;
                            py += r * (p2.canvasy - p1.canvasy)
                        }
                    }
                } else if (domX < p1.canvasx && rowIdx > 0) {
                    var p0 = points[rowIdx - 1];
                    if (__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["G"](p0)) {
                        var dx = p1.canvasx - p0.canvasx;
                        if (dx > 0) {
                            var r = (p1.canvasx - domX) / dx;
                            py += r * (p0.canvasy - p1.canvasy)
                        }
                    }
                }
                if (setIdx === 0 || py < domY) {
                    closestPoint = p1;
                    closestSeries = setIdx
                }
            }
            var name = this.layout_.setNames[closestSeries];
            return {
                row: row,
                seriesName: name,
                point: closestPoint
            }
        };
        Dygraph.prototype.mouseMove_ = function(event) {
            var points = this.layout_.points;
            if (points === undefined || points === null)
                return;
            var canvasCoords = this.eventToDomCoords(event);
            var canvasx = canvasCoords[0];
            var canvasy = canvasCoords[1];
            var highlightSeriesOpts = this.getOption("highlightSeriesOpts");
            var selectionChanged = false;
            if (highlightSeriesOpts && !this.isSeriesLocked()) {
                var closest;
                if (this.getBooleanOption("stackedGraph")) {
                    closest = this.findStackedPoint(canvasx, canvasy)
                } else {
                    closest = this.findClosestPoint(canvasx, canvasy)
                }
                selectionChanged = this.setSelection(closest.row, closest.seriesName)
            } else {
                var idx = this.findClosestRow(canvasx);
                selectionChanged = this.setSelection(idx)
            }
            var callback = this.getFunctionOption("highlightCallback");
            if (callback && selectionChanged) {
                callback.call(this, event, this.lastx_, this.selPoints_, this.lastRow_, this.highlightSet_)
            }
        };
        Dygraph.prototype.getLeftBoundary_ = function(setIdx) {
            if (this.boundaryIds_[setIdx]) {
                return this.boundaryIds_[setIdx][0]
            } else {
                for (var i = 0; i < this.boundaryIds_.length; i++) {
                    if (this.boundaryIds_[i] !== undefined) {
                        return this.boundaryIds_[i][0]
                    }
                }
                return 0
            }
        };
        Dygraph.prototype.animateSelection_ = function(direction) {
            var totalSteps = 10;
            var millis = 30;
            if (this.fadeLevel === undefined)
                this.fadeLevel = 0;
            if (this.animateId === undefined)
                this.animateId = 0;
            var start = this.fadeLevel;
            var steps = direction < 0 ? start : totalSteps - start;
            if (steps <= 0) {
                if (this.fadeLevel) {
                    this.updateSelection_(1)
                }
                return
            }
            var thisId = ++this.animateId;
            var that = this;
            var cleanupIfClearing = function() {
                if (that.fadeLevel !== 0 && direction < 0) {
                    that.fadeLevel = 0;
                    that.clearSelection()
                }
            };
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["P"](function(n) {
                if (that.animateId != thisId)
                    return;
                that.fadeLevel += direction;
                if (that.fadeLevel === 0) {
                    that.clearSelection()
                } else {
                    that.updateSelection_(that.fadeLevel / totalSteps)
                }
            }, steps, millis, cleanupIfClearing)
        };
        Dygraph.prototype.updateSelection_ = function(opt_animFraction) {
            this.cascadeEvents_("select", {
                selectedRow: this.lastRow_ === -1 ? undefined : this.lastRow_,
                selectedX: this.lastx_ === -1 ? undefined : this.lastx_,
                selectedPoints: this.selPoints_
            });
            var i;
            var ctx = this.canvas_ctx_;
            if (this.getOption("highlightSeriesOpts")) {
                ctx.clearRect(0, 0, this.width_, this.height_);
                var alpha = 1 - this.getNumericOption("highlightSeriesBackgroundAlpha");
                var backgroundColor = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["Q"](this.getOption("highlightSeriesBackgroundColor"));
                if (alpha) {
                    var animateBackgroundFade = true;
                    if (animateBackgroundFade) {
                        if (opt_animFraction === undefined) {
                            this.animateSelection_(1);
                            return
                        }
                        alpha *= opt_animFraction
                    }
                    ctx.fillStyle = "rgba(" + backgroundColor.r + "," + backgroundColor.g + "," + backgroundColor.b + "," + alpha + ")";
                    ctx.fillRect(0, 0, this.width_, this.height_)
                }
                this.plotter_._renderLineChart(this.highlightSet_, ctx)
            } else if (this.previousVerticalX_ >= 0) {
                var maxCircleSize = 0;
                var labels = this.attr_("labels");
                for (i = 1; i < labels.length; i++) {
                    var r = this.getNumericOption("highlightCircleSize", labels[i]);
                    if (r > maxCircleSize)
                        maxCircleSize = r
                }
                var px = this.previousVerticalX_;
                ctx.clearRect(px - maxCircleSize - 1, 0, 2 * maxCircleSize + 2, this.height_)
            }
            if (this.selPoints_.length > 0) {
                var canvasx = this.selPoints_[0].canvasx;
                ctx.save();
                for (i = 0; i < this.selPoints_.length; i++) {
                    var pt = this.selPoints_[i];
                    if (isNaN(pt.canvasy))
                        continue;
                    var circleSize = this.getNumericOption("highlightCircleSize", pt.name);
                    var callback = this.getFunctionOption("drawHighlightPointCallback", pt.name);
                    var color = this.plotter_.colors[pt.name];
                    if (!callback) {
                        callback = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["a"].DEFAULT
                    }
                    ctx.lineWidth = this.getNumericOption("strokeWidth", pt.name);
                    ctx.strokeStyle = color;
                    ctx.fillStyle = color;
                    callback.call(this, this, pt.name, ctx, canvasx, pt.canvasy, color, circleSize, pt.idx)
                }
                ctx.restore();
                this.previousVerticalX_ = canvasx
            }
        };
        Dygraph.prototype.setSelection = function(row, opt_seriesName, opt_locked) {
            this.selPoints_ = [];
            var changed = false;
            if (row !== false && row >= 0) {
                if (row != this.lastRow_)
                    changed = true;
                this.lastRow_ = row;
                for (var setIdx = 0; setIdx < this.layout_.points.length; ++setIdx) {
                    var points = this.layout_.points[setIdx];
                    var setRow = row - this.getLeftBoundary_(setIdx);
                    if (setRow >= 0 && setRow < points.length && points[setRow].idx == row) {
                        var point = points[setRow];
                        if (point.yval !== null)
                            this.selPoints_.push(point)
                    } else {
                        for (var pointIdx = 0; pointIdx < points.length; ++pointIdx) {
                            var point = points[pointIdx];
                            if (point.idx == row) {
                                if (point.yval !== null) {
                                    this.selPoints_.push(point)
                                }
                                break
                            }
                        }
                    }
                }
            } else {
                if (this.lastRow_ >= 0)
                    changed = true;
                this.lastRow_ = -1
            }
            if (this.selPoints_.length) {
                this.lastx_ = this.selPoints_[0].xval
            } else {
                this.lastx_ = -1
            }
            if (opt_seriesName !== undefined) {
                if (this.highlightSet_ !== opt_seriesName)
                    changed = true;
                this.highlightSet_ = opt_seriesName
            }
            if (opt_locked !== undefined) {
                this.lockedSet_ = opt_locked
            }
            if (changed) {
                this.updateSelection_(undefined)
            }
            return changed
        };
        Dygraph.prototype.mouseOut_ = function(event) {
            if (this.getFunctionOption("unhighlightCallback")) {
                this.getFunctionOption("unhighlightCallback").call(this, event)
            }
            if (this.getBooleanOption("hideOverlayOnMouseOut") && !this.lockedSet_) {
                this.clearSelection()
            }
        };
        Dygraph.prototype.clearSelection = function() {
            this.cascadeEvents_("deselect", {});
            this.lockedSet_ = false;
            if (this.fadeLevel) {
                this.animateSelection_(-1);
                return
            }
            this.canvas_ctx_.clearRect(0, 0, this.width_, this.height_);
            this.fadeLevel = 0;
            this.selPoints_ = [];
            this.lastx_ = -1;
            this.lastRow_ = -1;
            this.highlightSet_ = null
        };
        Dygraph.prototype.getSelection = function() {
            if (!this.selPoints_ || this.selPoints_.length < 1) {
                return -1
            }
            for (var setIdx = 0; setIdx < this.layout_.points.length; setIdx++) {
                var points = this.layout_.points[setIdx];
                for (var row = 0; row < points.length; row++) {
                    if (points[row].x == this.selPoints_[0].x) {
                        return points[row].idx
                    }
                }
            }
            return -1
        };
        Dygraph.prototype.getHighlightSeries = function() {
            return this.highlightSet_
        };
        Dygraph.prototype.isSeriesLocked = function() {
            return this.lockedSet_
        };
        Dygraph.prototype.loadedEvent_ = function(data) {
            this.rawData_ = this.parseCSV_(data);
            this.cascadeDataDidUpdateEvent_();
            this.predraw_()
        };
        Dygraph.prototype.addXTicks_ = function() {
            var range;
            if (this.dateWindow_) {
                range = [this.dateWindow_[0], this.dateWindow_[1]]
            } else {
                range = this.xAxisExtremes()
            }
            var xAxisOptionsView = this.optionsViewForAxis_("x");
            var xTicks = xAxisOptionsView("ticker")(range[0], range[1], this.plotter_.area.w, xAxisOptionsView, this);
            this.layout_.setXTicks(xTicks)
        };
        Dygraph.prototype.getHandlerClass_ = function() {
            var handlerClass;
            if (this.attr_("dataHandler")) {
                handlerClass = this.attr_("dataHandler")
            } else if (this.fractions_) {
                if (this.getBooleanOption("errorBars")) {
                    handlerClass = __WEBPACK_IMPORTED_MODULE_13__datahandler_bars_fractions__["a"]
                } else {
                    handlerClass = __WEBPACK_IMPORTED_MODULE_12__datahandler_default_fractions__["a"]
                }
            } else if (this.getBooleanOption("customBars")) {
                handlerClass = __WEBPACK_IMPORTED_MODULE_11__datahandler_bars_custom__["a"]
            } else if (this.getBooleanOption("errorBars")) {
                handlerClass = __WEBPACK_IMPORTED_MODULE_10__datahandler_bars_error__["a"]
            } else {
                handlerClass = __WEBPACK_IMPORTED_MODULE_9__datahandler_default__["a"]
            }
            return handlerClass
        };
        Dygraph.prototype.predraw_ = function() {
            var start = new Date;
            this.dataHandler_ = new (this.getHandlerClass_());
            this.layout_.computePlotArea();
            this.computeYAxes_();
            if (!this.is_initial_draw_) {
                this.canvas_ctx_.restore();
                this.hidden_ctx_.restore()
            }
            this.canvas_ctx_.save();
            this.hidden_ctx_.save();
            this.plotter_ = new __WEBPACK_IMPORTED_MODULE_1__dygraph_canvas__["a"](this, this.hidden_, this.hidden_ctx_, this.layout_);
            this.createRollInterface_();
            this.cascadeEvents_("predraw");
            this.rolledSeries_ = [null];
            for (var i = 1; i < this.numColumns(); i++) {
                var series = this.dataHandler_.extractSeries(this.rawData_, i, this.attributes_);
                if (this.rollPeriod_ > 1) {
                    series = this.dataHandler_.rollingAverage(series, this.rollPeriod_, this.attributes_)
                }
                this.rolledSeries_.push(series)
            }
            this.drawGraph_();
            var end = new Date;
            this.drawingTimeMs_ = end - start
        };
        Dygraph.PointType = undefined;
        Dygraph.stackPoints_ = function(points, cumulativeYval, seriesExtremes, fillMethod) {
            var lastXval = null;
            var prevPoint = null;
            var nextPoint = null;
            var nextPointIdx = -1;
            var updateNextPoint = function(idx) {
                if (nextPointIdx >= idx)
                    return;
                for (var j = idx; j < points.length; ++j) {
                    nextPoint = null;
                    if (!isNaN(points[j].yval) && points[j].yval !== null) {
                        nextPointIdx = j;
                        nextPoint = points[j];
                        break
                    }
                }
            };
            for (var i = 0; i < points.length; ++i) {
                var point = points[i];
                var xval = point.xval;
                if (cumulativeYval[xval] === undefined) {
                    cumulativeYval[xval] = 0
                }
                var actualYval = point.yval;
                if (isNaN(actualYval) || actualYval === null) {
                    if (fillMethod == "none") {
                        actualYval = 0
                    } else {
                        updateNextPoint(i);
                        if (prevPoint && nextPoint && fillMethod != "none") {
                            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) * ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval))
                        } else if (prevPoint && fillMethod == "all") {
                            actualYval = prevPoint.yval
                        } else if (nextPoint && fillMethod == "all") {
                            actualYval = nextPoint.yval
                        } else {
                            actualYval = 0
                        }
                    }
                } else {
                    prevPoint = point
                }
                var stackedYval = cumulativeYval[xval];
                if (lastXval != xval) {
                    stackedYval += actualYval;
                    cumulativeYval[xval] = stackedYval
                }
                lastXval = xval;
                point.yval_stacked = stackedYval;
                if (stackedYval > seriesExtremes[1]) {
                    seriesExtremes[1] = stackedYval
                }
                if (stackedYval < seriesExtremes[0]) {
                    seriesExtremes[0] = stackedYval
                }
            }
        };
        Dygraph.prototype.gatherDatasets_ = function(rolledSeries, dateWindow) {
            var boundaryIds = [];
            var points = [];
            var cumulativeYval = [];
            var extremes = {};
            var seriesIdx,
                sampleIdx;
            var firstIdx,
                lastIdx;
            var axisIdx;
            var num_series = rolledSeries.length - 1;
            var series;
            for (seriesIdx = num_series; seriesIdx >= 1; seriesIdx--) {
                if (!this.visibility()[seriesIdx - 1])
                    continue;
                if (dateWindow) {
                    series = rolledSeries[seriesIdx];
                    var low = dateWindow[0];
                    var high = dateWindow[1];
                    firstIdx = null;
                    lastIdx = null;
                    for (sampleIdx = 0; sampleIdx < series.length; sampleIdx++) {
                        if (series[sampleIdx][0] >= low && firstIdx === null) {
                            firstIdx = sampleIdx
                        }
                        if (series[sampleIdx][0] <= high) {
                            lastIdx = sampleIdx
                        }
                    }
                    if (firstIdx === null)
                        firstIdx = 0;
                    var correctedFirstIdx = firstIdx;
                    var isInvalidValue = true;
                    while (isInvalidValue && correctedFirstIdx > 0) {
                        correctedFirstIdx--;
                        isInvalidValue = series[correctedFirstIdx][1] === null
                    }
                    if (lastIdx === null)
                        lastIdx = series.length - 1;
                    var correctedLastIdx = lastIdx;
                    isInvalidValue = true;
                    while (isInvalidValue && correctedLastIdx < series.length - 1) {
                        correctedLastIdx++;
                        isInvalidValue = series[correctedLastIdx][1] === null
                    }
                    if (correctedFirstIdx !== firstIdx) {
                        firstIdx = correctedFirstIdx
                    }
                    if (correctedLastIdx !== lastIdx) {
                        lastIdx = correctedLastIdx
                    }
                    boundaryIds[seriesIdx - 1] = [firstIdx, lastIdx];
                    series = series.slice(firstIdx, lastIdx + 1)
                } else {
                    series = rolledSeries[seriesIdx];
                    boundaryIds[seriesIdx - 1] = [0, series.length - 1]
                }
                var seriesName = this.attr_("labels")[seriesIdx];
                var seriesExtremes = this.dataHandler_.getExtremeYValues(series, dateWindow, this.getBooleanOption("stepPlot", seriesName));
                var seriesPoints = this.dataHandler_.seriesToPoints(series, seriesName, boundaryIds[seriesIdx - 1][0]);
                if (this.getBooleanOption("stackedGraph")) {
                    axisIdx = this.attributes_.axisForSeries(seriesName);
                    if (cumulativeYval[axisIdx] === undefined) {
                        cumulativeYval[axisIdx] = []
                    }
                    Dygraph.stackPoints_(seriesPoints, cumulativeYval[axisIdx], seriesExtremes, this.getBooleanOption("stackedGraphNaNFill"))
                }
                extremes[seriesName] = seriesExtremes;
                points[seriesIdx] = seriesPoints
            }
            return {
                points: points,
                extremes: extremes,
                boundaryIds: boundaryIds
            }
        };
        Dygraph.prototype.drawGraph_ = function() {
            var start = new Date;
            var is_initial_draw = this.is_initial_draw_;
            this.is_initial_draw_ = false;
            this.layout_.removeAllDatasets();
            this.setColors_();
            this.attrs_.pointSize = .5 * this.getNumericOption("highlightCircleSize");
            var packed = this.gatherDatasets_(this.rolledSeries_, this.dateWindow_);
            var points = packed.points;
            var extremes = packed.extremes;
            this.boundaryIds_ = packed.boundaryIds;
            this.setIndexByName_ = {};
            var labels = this.attr_("labels");
            var dataIdx = 0;
            for (var i = 1; i < points.length; i++) {
                if (!this.visibility()[i - 1])
                    continue;
                this.layout_.addDataset(labels[i], points[i]);
                this.datasetIndex_[i] = dataIdx++
            }
            for (var i = 0; i < labels.length; i++) {
                this.setIndexByName_[labels[i]] = i
            }
            this.computeYAxisRanges_(extremes);
            this.layout_.setYAxes(this.axes_);
            this.addXTicks_();
            this.layout_.evaluate();
            this.renderGraph_(is_initial_draw);
            if (this.getStringOption("timingName")) {
                var end = new Date;
                console.log(this.getStringOption("timingName") + " - drawGraph: " + (end - start) + "ms")
            }
        };
        Dygraph.prototype.renderGraph_ = function(is_initial_draw) {
            this.cascadeEvents_("clearChart");
            this.plotter_.clear();
            const underlayCallback = this.getFunctionOption("underlayCallback");
            if (underlayCallback) {
                underlayCallback.call(this, this.hidden_ctx_, this.layout_.getPlotArea(), this, this)
            }
            var e = {
                canvas: this.hidden_,
                drawingContext: this.hidden_ctx_
            };
            this.cascadeEvents_("willDrawChart", e);
            this.plotter_.render();
            this.cascadeEvents_("didDrawChart", e);
            this.lastRow_ = -1;
            this.canvas_.getContext("2d").clearRect(0, 0, this.width_, this.height_);
            const drawCallback = this.getFunctionOption("drawCallback");
            if (drawCallback !== null) {
                drawCallback.call(this, this, is_initial_draw)
            }
            if (is_initial_draw) {
                this.readyFired_ = true;
                while (this.readyFns_.length > 0) {
                    var fn = this.readyFns_.pop();
                    fn(this)
                }
            }
        };
        Dygraph.prototype.computeYAxes_ = function() {
            var axis,
                index,
                opts,
                v;
            this.axes_ = [];
            for (axis = 0; axis < this.attributes_.numAxes(); axis++) {
                opts = {
                    g: this
                };
                __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["R"](opts, this.attributes_.axisOptions(axis));
                this.axes_[axis] = opts
            }
            for (axis = 0; axis < this.axes_.length; axis++) {
                if (axis === 0) {
                    opts = this.optionsViewForAxis_("y" + (axis ? "2" : ""));
                    v = opts("valueRange");
                    if (v)
                        this.axes_[axis].valueRange = v
                } else {
                    var axes = this.user_attrs_.axes;
                    if (axes && axes.y2) {
                        v = axes.y2.valueRange;
                        if (v)
                            this.axes_[axis].valueRange = v
                    }
                }
            }
        };
        Dygraph.prototype.numAxes = function() {
            return this.attributes_.numAxes()
        };
        Dygraph.prototype.axisPropertiesForSeries = function(series) {
            return this.axes_[this.attributes_.axisForSeries(series)]
        };
        Dygraph.prototype.computeYAxisRanges_ = function(extremes) {
            var isNullUndefinedOrNaN = function(num) {
                return isNaN(parseFloat(num))
            };
            var numAxes = this.attributes_.numAxes();
            var ypadCompat,
                span,
                series,
                ypad;
            var p_axis;
            for (var i = 0; i < numAxes; i++) {
                var axis = this.axes_[i];
                var logscale = this.attributes_.getForAxis("logscale", i);
                var includeZero = this.attributes_.getForAxis("includeZero", i);
                var independentTicks = this.attributes_.getForAxis("independentTicks", i);
                series = this.attributes_.seriesForAxis(i);
                ypadCompat = true;
                ypad = .1;
                const yRangePad = this.getNumericOption("yRangePad");
                if (yRangePad !== null) {
                    ypadCompat = false;
                    ypad = yRangePad / this.plotter_.area.h
                }
                if (series.length === 0) {
                    axis.extremeRange = [0, 1]
                } else {
                    var minY = Infinity;
                    var maxY = -Infinity;
                    var extremeMinY,
                        extremeMaxY;
                    for (var j = 0; j < series.length; j++) {
                        if (!extremes.hasOwnProperty(series[j]))
                            continue;
                        extremeMinY = extremes[series[j]][0];
                        if (extremeMinY !== null) {
                            minY = Math.min(extremeMinY, minY)
                        }
                        extremeMaxY = extremes[series[j]][1];
                        if (extremeMaxY !== null) {
                            maxY = Math.max(extremeMaxY, maxY)
                        }
                    }
                    if (includeZero && !logscale) {
                        if (minY > 0)
                            minY = 0;
                        if (maxY < 0)
                            maxY = 0
                    }
                    if (minY == Infinity)
                        minY = 0;
                    if (maxY == -Infinity)
                        maxY = 1;
                    span = maxY - minY;
                    if (span === 0) {
                        if (maxY !== 0) {
                            span = Math.abs(maxY)
                        } else {
                            maxY = 1;
                            span = 1
                        }
                    }
                    var maxAxisY = maxY,
                        minAxisY = minY;
                    if (ypadCompat) {
                        if (logscale) {
                            maxAxisY = maxY + ypad * span;
                            minAxisY = minY
                        } else {
                            maxAxisY = maxY + ypad * span;
                            minAxisY = minY - ypad * span;
                            if (minAxisY < 0 && minY >= 0)
                                minAxisY = 0;
                            if (maxAxisY > 0 && maxY <= 0)
                                maxAxisY = 0
                        }
                    }
                    axis.extremeRange = [minAxisY, maxAxisY]
                }
                if (axis.valueRange) {
                    var y0 = isNullUndefinedOrNaN(axis.valueRange[0]) ? axis.extremeRange[0] : axis.valueRange[0];
                    var y1 = isNullUndefinedOrNaN(axis.valueRange[1]) ? axis.extremeRange[1] : axis.valueRange[1];
                    axis.computedValueRange = [y0, y1]
                } else {
                    axis.computedValueRange = axis.extremeRange
                }
                if (!ypadCompat) {
                    if (logscale) {
                        y0 = axis.computedValueRange[0];
                        y1 = axis.computedValueRange[1];
                        var y0pct = ypad / (2 * ypad - 1);
                        var y1pct = (ypad - 1) / (2 * ypad - 1);
                        axis.computedValueRange[0] = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["I"](y0, y1, y0pct);
                        axis.computedValueRange[1] = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["I"](y0, y1, y1pct)
                    } else {
                        y0 = axis.computedValueRange[0];
                        y1 = axis.computedValueRange[1];
                        span = y1 - y0;
                        axis.computedValueRange[0] = y0 - span * ypad;
                        axis.computedValueRange[1] = y1 + span * ypad
                    }
                }
                if (independentTicks) {
                    axis.independentTicks = independentTicks;
                    var opts = this.optionsViewForAxis_("y" + (i ? "2" : ""));
                    var ticker = opts("ticker");
                    axis.ticks = ticker(axis.computedValueRange[0], axis.computedValueRange[1], this.plotter_.area.h, opts, this);
                    if (!p_axis)
                        p_axis = axis
                }
            }
            if (p_axis === undefined) {
                throw 'Configuration Error: At least one axis has to have the "independentTicks" option activated.'
            }
            for (var i = 0; i < numAxes; i++) {
                var axis = this.axes_[i];
                if (!axis.independentTicks) {
                    var opts = this.optionsViewForAxis_("y" + (i ? "2" : ""));
                    var ticker = opts("ticker");
                    var p_ticks = p_axis.ticks;
                    var p_scale = p_axis.computedValueRange[1] - p_axis.computedValueRange[0];
                    var scale = axis.computedValueRange[1] - axis.computedValueRange[0];
                    var tick_values = [];
                    for (var k = 0; k < p_ticks.length; k++) {
                        var y_frac = (p_ticks[k].v - p_axis.computedValueRange[0]) / p_scale;
                        var y_val = axis.computedValueRange[0] + y_frac * scale;
                        tick_values.push(y_val)
                    }
                    axis.ticks = ticker(axis.computedValueRange[0], axis.computedValueRange[1], this.plotter_.area.h, opts, this, tick_values)
                }
            }
        };
        Dygraph.prototype.detectTypeFromString_ = function(str) {
            var isDate = false;
            var dashPos = str.indexOf("-");
            if (dashPos > 0 && (str[dashPos - 1] != "e" && str[dashPos - 1] != "E") || str.indexOf("/") >= 0 || isNaN(parseFloat(str))) {
                isDate = true
            } else if (str.length == 8 && str > "19700101" && str < "20371231") {
                isDate = true
            }
            this.setXAxisOptions_(isDate)
        };
        Dygraph.prototype.setXAxisOptions_ = function(isDate) {
            if (isDate) {
                this.attrs_.xValueParser = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["p"];
                this.attrs_.axes.x.valueFormatter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["r"];
                this.attrs_.axes.x.ticker = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["b"];
                this.attrs_.axes.x.axisLabelFormatter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["o"]
            } else {
                this.attrs_.xValueParser = function(x) {
                    return parseFloat(x)
                };
                this.attrs_.axes.x.valueFormatter = function(x) {
                    return x
                };
                this.attrs_.axes.x.ticker = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["e"];
                this.attrs_.axes.x.axisLabelFormatter = this.attrs_.axes.x.valueFormatter
            }
        };
        Dygraph.prototype.parseCSV_ = function(data) {
            var ret = [];
            var line_delimiter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["s"](data);
            var lines = data.split(line_delimiter || "\n");
            var vals,
                j;
            var delim = this.getStringOption("delimiter");
            if (lines[0].indexOf(delim) == -1 && lines[0].indexOf("\t") >= 0) {
                delim = "\t"
            }
            var start = 0;
            if (!("labels" in this.user_attrs_)) {
                start = 1;
                this.attrs_.labels = lines[0].split(delim);
                this.attributes_.reparseSeries()
            }
            var line_no = 0;
            var xParser;
            var defaultParserSet = false;
            var expectedCols = this.attr_("labels").length;
            var outOfOrder = false;
            for (var i = start; i < lines.length; i++) {
                var line = lines[i];
                line_no = i;
                if (line.length === 0)
                    continue;
                if (line[0] == "#")
                    continue;
                var inFields = line.split(delim);
                if (inFields.length < 2)
                    continue;
                var fields = [];
                if (!defaultParserSet) {
                    this.detectTypeFromString_(inFields[0]);
                    xParser = this.getFunctionOption("xValueParser");
                    defaultParserSet = true
                }
                fields[0] = xParser(inFields[0], this);
                if (this.fractions_) {
                    for (j = 1; j < inFields.length; j++) {
                        vals = inFields[j].split("/");
                        if (vals.length != 2) {
                            console.error('Expected fractional "num/den" values in CSV data ' + "but found a value '" + inFields[j] + "' on line " + (1 + i) + " ('" + line + "') which is not of this form.");
                            fields[j] = [0, 0]
                        } else {
                            fields[j] = [__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["N"](vals[0], i, line), __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["N"](vals[1], i, line)]
                        }
                    }
                } else if (this.getBooleanOption("errorBars")) {
                    if (inFields.length % 2 != 1) {
                        console.error("Expected alternating (value, stdev.) pairs in CSV data " + "but line " + (1 + i) + " has an odd number of values (" + (inFields.length - 1) + "): '" + line + "'")
                    }
                    for (j = 1; j < inFields.length; j += 2) {
                        fields[(j + 1) / 2] = [__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["N"](inFields[j], i, line), __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["N"](inFields[j + 1], i, line)]
                    }
                } else if (this.getBooleanOption("customBars")) {
                    for (j = 1; j < inFields.length; j++) {
                        var val = inFields[j];
                        if (/^ *$/.test(val)) {
                            fields[j] = [null, null, null]
                        } else {
                            vals = val.split(";");
                            if (vals.length == 3) {
                                fields[j] = [__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["N"](vals[0], i, line), __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["N"](vals[1], i, line), __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["N"](vals[2], i, line)]
                            } else {
                                console.warn("When using customBars, values must be either blank " + 'or "low;center;high" tuples (got "' + val + '" on line ' + (1 + i))
                            }
                        }
                    }
                } else {
                    for (j = 1; j < inFields.length; j++) {
                        fields[j] = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["N"](inFields[j], i, line)
                    }
                }
                if (ret.length > 0 && fields[0] < ret[ret.length - 1][0]) {
                    outOfOrder = true
                }
                if (fields.length != expectedCols) {
                    console.error("Number of columns in line " + i + " (" + fields.length + ") does not agree with number of labels (" + expectedCols + ") " + line)
                }
                if (i === 0 && this.attr_("labels")) {
                    var all_null = true;
                    for (j = 0; all_null && j < fields.length; j++) {
                        if (fields[j])
                            all_null = false
                    }
                    if (all_null) {
                        console.warn("The dygraphs 'labels' option is set, but the first row " + "of CSV data ('" + line + "') appears to also contain " + "labels. Will drop the CSV labels and use the option " + "labels.");
                        continue
                    }
                }
                ret.push(fields)
            }
            if (outOfOrder) {
                console.warn("CSV is out of order; order it correctly to speed loading.");
                ret.sort(function(a, b) {
                    return a[0] - b[0]
                })
            }
            return ret
        };
        function validateNativeFormat(data) {
            const firstRow = data[0];
            const firstX = firstRow[0];
            if (typeof firstX !== "number" && !__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["C"](firstX)) {
                throw new Error(`Expected number or date but got ${typeof firstX}: ${firstX}.`)
            }
            for (let i = 1; i < firstRow.length; i++) {
                const val = firstRow[i];
                if (val === null || val === undefined)
                    continue;
                if (typeof val === "number")
                    continue;
                if (__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["A"](val))
                    continue;
                throw new Error(`Expected number or array but got ${typeof val}: ${val}.`)
            }
        }
        Dygraph.prototype.parseArray_ = function(data) {
            if (data.length === 0) {
                console.error("Can't plot empty data set");
                return null
            }
            if (data[0].length === 0) {
                console.error("Data set cannot contain an empty row");
                return null
            }
            validateNativeFormat(data);
            var i;
            if (this.attr_("labels") === null) {
                console.warn("Using default labels. Set labels explicitly via 'labels' " + "in the options parameter");
                this.attrs_.labels = ["X"];
                for (i = 1; i < data[0].length; i++) {
                    this.attrs_.labels.push("Y" + i)
                }
                this.attributes_.reparseSeries()
            } else {
                var num_labels = this.attr_("labels");
                if (num_labels.length != data[0].length) {
                    console.error("Mismatch between number of labels (" + num_labels + ")" + " and number of columns in array (" + data[0].length + ")");
                    return null
                }
            }
            if (__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["C"](data[0][0])) {
                this.attrs_.axes.x.valueFormatter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["r"];
                this.attrs_.axes.x.ticker = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["b"];
                this.attrs_.axes.x.axisLabelFormatter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["o"];
                var parsedData = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["l"](data);
                for (i = 0; i < data.length; i++) {
                    if (parsedData[i].length === 0) {
                        console.error("Row " + (1 + i) + " of data is empty");
                        return null
                    }
                    if (parsedData[i][0] === null || typeof parsedData[i][0].getTime != "function" || isNaN(parsedData[i][0].getTime())) {
                        console.error("x value in row " + (1 + i) + " is not a Date");
                        return null
                    }
                    parsedData[i][0] = parsedData[i][0].getTime()
                }
                return parsedData
            } else {
                this.attrs_.axes.x.valueFormatter = function(x) {
                    return x
                };
                this.attrs_.axes.x.ticker = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["e"];
                this.attrs_.axes.x.axisLabelFormatter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["J"];
                return data
            }
        };
        Dygraph.prototype.parseDataTable_ = function(data) {
            var shortTextForAnnotationNum = function(num) {
                var shortText = String.fromCharCode(65 + num % 26);
                num = Math.floor(num / 26);
                while (num > 0) {
                    shortText = String.fromCharCode(65 + (num - 1) % 26) + shortText.toLowerCase();
                    num = Math.floor((num - 1) / 26)
                }
                return shortText
            };
            var cols = data.getNumberOfColumns();
            var rows = data.getNumberOfRows();
            var indepType = data.getColumnType(0);
            if (indepType == "date" || indepType == "datetime") {
                this.attrs_.xValueParser = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["p"];
                this.attrs_.axes.x.valueFormatter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["r"];
                this.attrs_.axes.x.ticker = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["b"];
                this.attrs_.axes.x.axisLabelFormatter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["o"]
            } else if (indepType == "number") {
                this.attrs_.xValueParser = function(x) {
                    return parseFloat(x)
                };
                this.attrs_.axes.x.valueFormatter = function(x) {
                    return x
                };
                this.attrs_.axes.x.ticker = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["e"];
                this.attrs_.axes.x.axisLabelFormatter = this.attrs_.axes.x.valueFormatter
            } else {
                throw new Error("only 'date', 'datetime' and 'number' types are supported " + "for column 1 of DataTable input (Got '" + indepType + "')")
            }
            var colIdx = [];
            var annotationCols = {};
            var hasAnnotations = false;
            var i,
                j;
            for (i = 1; i < cols; i++) {
                var type = data.getColumnType(i);
                if (type == "number") {
                    colIdx.push(i)
                } else if (type == "string" && this.getBooleanOption("displayAnnotations")) {
                    var dataIdx = colIdx[colIdx.length - 1];
                    if (!annotationCols.hasOwnProperty(dataIdx)) {
                        annotationCols[dataIdx] = [i]
                    } else {
                        annotationCols[dataIdx].push(i)
                    }
                    hasAnnotations = true
                } else {
                    throw new Error("Only 'number' is supported as a dependent type with Gviz." + " 'string' is only supported if displayAnnotations is true")
                }
            }
            var labels = [data.getColumnLabel(0)];
            for (i = 0; i < colIdx.length; i++) {
                labels.push(data.getColumnLabel(colIdx[i]));
                if (this.getBooleanOption("errorBars"))
                    i += 1
            }
            this.attrs_.labels = labels;
            cols = labels.length;
            var ret = [];
            var outOfOrder = false;
            var annotations = [];
            for (i = 0; i < rows; i++) {
                var row = [];
                if (typeof data.getValue(i, 0) === "undefined" || data.getValue(i, 0) === null) {
                    console.warn("Ignoring row " + i + " of DataTable because of undefined or null first column.");
                    continue
                }
                if (indepType == "date" || indepType == "datetime") {
                    row.push(data.getValue(i, 0).getTime())
                } else {
                    row.push(data.getValue(i, 0))
                }
                if (!this.getBooleanOption("errorBars")) {
                    for (j = 0; j < colIdx.length; j++) {
                        var col = colIdx[j];
                        row.push(data.getValue(i, col));
                        if (hasAnnotations && annotationCols.hasOwnProperty(col) && data.getValue(i, annotationCols[col][0]) !== null) {
                            var ann = {};
                            ann.series = data.getColumnLabel(col);
                            ann.xval = row[0];
                            ann.shortText = shortTextForAnnotationNum(annotations.length);
                            ann.text = "";
                            for (var k = 0; k < annotationCols[col].length; k++) {
                                if (k)
                                    ann.text += "\n";
                                ann.text += data.getValue(i, annotationCols[col][k])
                            }
                            annotations.push(ann)
                        }
                    }
                    for (j = 0; j < row.length; j++) {
                        if (!isFinite(row[j]))
                            row[j] = null
                    }
                } else {
                    for (j = 0; j < cols - 1; j++) {
                        row.push([data.getValue(i, 1 + 2 * j), data.getValue(i, 2 + 2 * j)])
                    }
                }
                if (ret.length > 0 && row[0] < ret[ret.length - 1][0]) {
                    outOfOrder = true
                }
                ret.push(row)
            }
            if (outOfOrder) {
                console.warn("DataTable is out of order; order it correctly to speed loading.");
                ret.sort(function(a, b) {
                    return a[0] - b[0]
                })
            }
            this.rawData_ = ret;
            if (annotations.length > 0) {
                this.setAnnotations(annotations, true)
            }
            this.attributes_.reparseSeries()
        };
        Dygraph.prototype.cascadeDataDidUpdateEvent_ = function() {
            this.cascadeEvents_("dataDidUpdate", {})
        };
        Dygraph.prototype.start_ = function() {
            var data = this.file_;
            if (typeof data == "function") {
                data = data()
            }
            if (__WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["A"](data)) {
                this.rawData_ = this.parseArray_(data);
                this.cascadeDataDidUpdateEvent_();
                this.predraw_()
            } else if (typeof data == "object" && typeof data.getColumnRange == "function") {
                this.parseDataTable_(data);
                this.cascadeDataDidUpdateEvent_();
                this.predraw_()
            } else if (typeof data == "string") {
                var line_delimiter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["s"](data);
                if (line_delimiter) {
                    this.loadedEvent_(data)
                } else {
                    var req;
                    if (window.XMLHttpRequest) {
                        req = new XMLHttpRequest
                    } else {
                        req = new ActiveXObject("Microsoft.XMLHTTP")
                    }
                    var caller = this;
                    req.onreadystatechange = function() {
                        if (req.readyState == 4) {
                            if (req.status === 200 || req.status === 0) {
                                caller.loadedEvent_(req.responseText)
                            }
                        }
                    };
                    req.open("GET", data, true);
                    req.send(null)
                }
            } else {
                console.error("Unknown data format: " + typeof data)
            }
        };
        Dygraph.prototype.updateOptions = function(input_attrs, block_redraw) {
            if (typeof block_redraw == "undefined")
                block_redraw = false;
            var file = input_attrs.file;
            var attrs = Dygraph.copyUserAttrs_(input_attrs);
            if ("rollPeriod" in attrs) {
                this.rollPeriod_ = attrs.rollPeriod
            }
            if ("dateWindow" in attrs) {
                this.dateWindow_ = attrs.dateWindow
            }
            var requiresNewPoints = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["F"](this.attr_("labels"), attrs);
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["S"](this.user_attrs_, attrs);
            this.attributes_.reparseSeries();
            if (file) {
                this.cascadeEvents_("dataWillUpdate", {});
                this.file_ = file;
                if (!block_redraw)
                    this.start_()
            } else {
                if (!block_redraw) {
                    if (requiresNewPoints) {
                        this.predraw_()
                    } else {
                        this.renderGraph_(false)
                    }
                }
            }
        };
        Dygraph.copyUserAttrs_ = function(attrs) {
            var my_attrs = {};
            for (var k in attrs) {
                if (!attrs.hasOwnProperty(k))
                    continue;
                if (k == "file")
                    continue;
                if (attrs.hasOwnProperty(k))
                    my_attrs[k] = attrs[k]
            }
            return my_attrs
        };
        Dygraph.prototype.resize = function(width, height) {
            if (this.resize_lock) {
                return
            }
            this.resize_lock = true;
            if (width === null != (height === null)) {
                console.warn("Dygraph.resize() should be called with zero parameters or " + "two non-NULL parameters. Pretending it was zero.");
                width = height = null
            }
            var old_width = this.width_;
            var old_height = this.height_;
            if (width) {
                this.maindiv_.style.width = width + "px";
                this.maindiv_.style.height = height + "px";
                this.width_ = width;
                this.height_ = height
            } else {
                this.width_ = this.maindiv_.clientWidth;
                this.height_ = this.maindiv_.clientHeight
            }
            if (old_width != this.width_ || old_height != this.height_) {
                this.resizeElements_();
                this.predraw_()
            }
            this.resize_lock = false
        };
        Dygraph.prototype.adjustRoll = function(length) {
            this.rollPeriod_ = length;
            this.predraw_()
        };
        Dygraph.prototype.visibility = function() {
            if (!this.getOption("visibility")) {
                this.attrs_.visibility = []
            }
            while (this.getOption("visibility").length < this.numColumns() - 1) {
                this.attrs_.visibility.push(true)
            }
            return this.getOption("visibility")
        };
        Dygraph.prototype.setVisibility = function(num, value) {
            var x = this.visibility();
            var numIsObject = false;
            if (!Array.isArray(num)) {
                if (num !== null && typeof num === "object") {
                    numIsObject = true
                } else {
                    num = [num]
                }
            }
            if (numIsObject) {
                for (var i in num) {
                    if (num.hasOwnProperty(i)) {
                        if (i < 0 || i >= x.length) {
                            console.warn("Invalid series number in setVisibility: " + i)
                        } else {
                            x[i] = num[i]
                        }
                    }
                }
            } else {
                for (var i = 0; i < num.length; i++) {
                    if (typeof num[i] === "boolean") {
                        if (i >= x.length) {
                            console.warn("Invalid series number in setVisibility: " + i)
                        } else {
                            x[i] = num[i]
                        }
                    } else {
                        if (num[i] < 0 || num[i] >= x.length) {
                            console.warn("Invalid series number in setVisibility: " + num[i])
                        } else {
                            x[num[i]] = value
                        }
                    }
                }
            }
            this.predraw_()
        };
        Dygraph.prototype.size = function() {
            return {
                width: this.width_,
                height: this.height_
            }
        };
        Dygraph.prototype.setAnnotations = function(ann, suppressDraw) {
            this.annotations_ = ann;
            if (!this.layout_) {
                console.warn("Tried to setAnnotations before dygraph was ready. " + "Try setting them in a ready() block. See " + "dygraphs.com/tests/annotation.html");
                return
            }
            this.layout_.setAnnotations(this.annotations_);
            if (!suppressDraw) {
                this.predraw_()
            }
        };
        Dygraph.prototype.annotations = function() {
            return this.annotations_
        };
        Dygraph.prototype.getLabels = function() {
            var labels = this.attr_("labels");
            return labels ? labels.slice() : null
        };
        Dygraph.prototype.indexFromSetName = function(name) {
            return this.setIndexByName_[name]
        };
        Dygraph.prototype.getRowForX = function(xVal) {
            var low = 0,
                high = this.numRows() - 1;
            while (low <= high) {
                var idx = high + low >> 1;
                var x = this.getValue(idx, 0);
                if (x < xVal) {
                    low = idx + 1
                } else if (x > xVal) {
                    high = idx - 1
                } else if (low != idx) {
                    high = idx
                } else {
                    return idx
                }
            }
            return null
        };
        Dygraph.prototype.ready = function(callback) {
            if (this.is_initial_draw_) {
                this.readyFns_.push(callback)
            } else {
                callback.call(this, this)
            }
        };
        Dygraph.prototype.addAndTrackEvent = function(elem, type, fn) {
            __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["i"](elem, type, fn);
            this.registeredEvents_.push({
                elem: elem,
                type: type,
                fn: fn
            })
        };
        Dygraph.prototype.removeTrackedEvents_ = function() {
            if (this.registeredEvents_) {
                for (var idx = 0; idx < this.registeredEvents_.length; idx++) {
                    var reg = this.registeredEvents_[idx];
                    __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["O"](reg.elem, reg.type, reg.fn)
                }
            }
            this.registeredEvents_ = []
        };
        Dygraph.PLUGINS = [__WEBPACK_IMPORTED_MODULE_19__plugins_legend__["a"], __WEBPACK_IMPORTED_MODULE_16__plugins_axes__["a"], __WEBPACK_IMPORTED_MODULE_20__plugins_range_selector__["a"], __WEBPACK_IMPORTED_MODULE_17__plugins_chart_labels__["a"], __WEBPACK_IMPORTED_MODULE_15__plugins_annotations__["a"], __WEBPACK_IMPORTED_MODULE_18__plugins_grid__["a"]];
        Dygraph.GVizChart = __WEBPACK_IMPORTED_MODULE_21__dygraph_gviz__["a"];
        Dygraph.DASHED_LINE = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["b"];
        Dygraph.DOT_DASH_LINE = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["c"];
        Dygraph.dateAxisLabelFormatter = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["o"];
        Dygraph.toRGB_ = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["Q"];
        Dygraph.findPos = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["v"];
        Dygraph.pageX = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["L"];
        Dygraph.pageY = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["M"];
        Dygraph.dateString_ = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["q"];
        Dygraph.defaultInteractionModel = __WEBPACK_IMPORTED_MODULE_3__dygraph_interaction_model__["a"].defaultModel;
        Dygraph.nonInteractiveModel = Dygraph.nonInteractiveModel_ = __WEBPACK_IMPORTED_MODULE_3__dygraph_interaction_model__["a"].nonInteractiveModel_;
        Dygraph.Circles = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["a"];
        Dygraph.Plugins = {
            Legend: __WEBPACK_IMPORTED_MODULE_19__plugins_legend__["a"],
            Axes: __WEBPACK_IMPORTED_MODULE_16__plugins_axes__["a"],
            Annotations: __WEBPACK_IMPORTED_MODULE_15__plugins_annotations__["a"],
            ChartLabels: __WEBPACK_IMPORTED_MODULE_17__plugins_chart_labels__["a"],
            Grid: __WEBPACK_IMPORTED_MODULE_18__plugins_grid__["a"],
            RangeSelector: __WEBPACK_IMPORTED_MODULE_20__plugins_range_selector__["a"]
        };
        Dygraph.DataHandlers = {
            DefaultHandler: __WEBPACK_IMPORTED_MODULE_9__datahandler_default__["a"],
            BarsHandler: __WEBPACK_IMPORTED_MODULE_14__datahandler_bars__["a"],
            CustomBarsHandler: __WEBPACK_IMPORTED_MODULE_11__datahandler_bars_custom__["a"],
            DefaultFractionHandler: __WEBPACK_IMPORTED_MODULE_12__datahandler_default_fractions__["a"],
            ErrorBarsHandler: __WEBPACK_IMPORTED_MODULE_10__datahandler_bars_error__["a"],
            FractionsBarsHandler: __WEBPACK_IMPORTED_MODULE_13__datahandler_bars_fractions__["a"]
        };
        Dygraph.startPan = __WEBPACK_IMPORTED_MODULE_3__dygraph_interaction_model__["a"].startPan;
        Dygraph.startZoom = __WEBPACK_IMPORTED_MODULE_3__dygraph_interaction_model__["a"].startZoom;
        Dygraph.movePan = __WEBPACK_IMPORTED_MODULE_3__dygraph_interaction_model__["a"].movePan;
        Dygraph.moveZoom = __WEBPACK_IMPORTED_MODULE_3__dygraph_interaction_model__["a"].moveZoom;
        Dygraph.endPan = __WEBPACK_IMPORTED_MODULE_3__dygraph_interaction_model__["a"].endPan;
        Dygraph.endZoom = __WEBPACK_IMPORTED_MODULE_3__dygraph_interaction_model__["a"].endZoom;
        Dygraph.numericLinearTicks = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["d"];
        Dygraph.numericTicks = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["e"];
        Dygraph.dateTicker = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["b"];
        Dygraph.Granularity = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["a"];
        Dygraph.getDateAxis = __WEBPACK_IMPORTED_MODULE_4__dygraph_tickers__["c"];
        Dygraph.floatFormat = __WEBPACK_IMPORTED_MODULE_5__dygraph_utils__["w"];
        __webpack_exports__["a"] = Dygraph
    }).call(__webpack_exports__, __webpack_require__(17))
}, function(module, exports) {
    var process = module.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
        throw new Error("setTimeout has not been defined")
    }
    function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined")
    }
    (function() {
        try {
            if (typeof setTimeout === "function") {
                cachedSetTimeout = setTimeout
            } else {
                cachedSetTimeout = defaultSetTimout
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout
        }
        try {
            if (typeof clearTimeout === "function") {
                cachedClearTimeout = clearTimeout
            } else {
                cachedClearTimeout = defaultClearTimeout
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout
        }
    })();
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0)
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0)
        }
        try {
            return cachedSetTimeout(fun, 0)
        } catch (e) {
            try {
                return cachedSetTimeout.call(null, fun, 0)
            } catch (e) {
                return cachedSetTimeout.call(this, fun, 0)
            }
        }
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker)
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker)
        }
        try {
            return cachedClearTimeout(marker)
        } catch (e) {
            try {
                return cachedClearTimeout.call(null, marker)
            } catch (e) {
                return cachedClearTimeout.call(this, marker)
            }
        }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue)
        } else {
            queueIndex = -1
        }
        if (queue.length) {
            drainQueue()
        }
    }
    function drainQueue() {
        if (draining) {
            return
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run()
                }
            }
            queueIndex = -1;
            len = queue.length
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout)
    }
    process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i]
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue)
        }
    };
    function Item(fun, array) {
        this.fun = fun;
        this.array = array
    }
    Item.prototype.run = function() {
        this.fun.apply(null, this.array)
    };
    process.title = "browser";
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = "";
    process.versions = {};
    function noop() {}
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    process.listeners = function(name) {
        return []
    };
    process.binding = function(name) {
        throw new Error("process.binding is not supported")
    };
    process.cwd = function() {
        return "/"
    };
    process.chdir = function(dir) {
        throw new Error("process.chdir is not supported")
    };
    process.umask = function() {
        return 0
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    __webpack_require__.d(__webpack_exports__, "d", function() {
        return numericLinearTicks
    });
    __webpack_require__.d(__webpack_exports__, "e", function() {
        return numericTicks
    });
    __webpack_require__.d(__webpack_exports__, "b", function() {
        return dateTicker
    });
    __webpack_require__.d(__webpack_exports__, "a", function() {
        return Granularity
    });
    __webpack_require__.d(__webpack_exports__, "c", function() {
        return getDateAxis
    });
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__ = __webpack_require__(6);
    var TickList = undefined;
    var Ticker = undefined;
    var numericLinearTicks = function(a, b, pixels, opts, dygraph, vals) {
        var nonLogscaleOpts = function(opt) {
            if (opt === "logscale")
                return false;
            return opts(opt)
        };
        return numericTicks(a, b, pixels, nonLogscaleOpts, dygraph, vals)
    };
    var numericTicks = function(a, b, pixels, opts, dygraph, vals) {
        var pixels_per_tick = opts("pixelsPerLabel");
        var ticks = [];
        var i,
            j,
            tickV,
            nTicks;
        if (vals) {
            for (i = 0; i < vals.length; i++) {
                ticks.push({
                    v: vals[i]
                })
            }
        } else {
            if (opts("logscale")) {
                nTicks = Math.floor(pixels / pixels_per_tick);
                var minIdx = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["j"](a, PREFERRED_LOG_TICK_VALUES, 1);
                var maxIdx = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["j"](b, PREFERRED_LOG_TICK_VALUES, -1);
                if (minIdx == -1) {
                    minIdx = 0
                }
                if (maxIdx == -1) {
                    maxIdx = PREFERRED_LOG_TICK_VALUES.length - 1
                }
                var lastDisplayed = null;
                if (maxIdx - minIdx >= nTicks / 4) {
                    for (var idx = maxIdx; idx >= minIdx; idx--) {
                        var tickValue = PREFERRED_LOG_TICK_VALUES[idx];
                        var pixel_coord = Math.log(tickValue / a) / Math.log(b / a) * pixels;
                        var tick = {
                            v: tickValue
                        };
                        if (lastDisplayed === null) {
                            lastDisplayed = {
                                tickValue: tickValue,
                                pixel_coord: pixel_coord
                            }
                        } else {
                            if (Math.abs(pixel_coord - lastDisplayed.pixel_coord) >= pixels_per_tick) {
                                lastDisplayed = {
                                    tickValue: tickValue,
                                    pixel_coord: pixel_coord
                                }
                            } else {
                                tick.label = ""
                            }
                        }
                        ticks.push(tick)
                    }
                    ticks.reverse()
                }
            }
            if (ticks.length === 0) {
                var kmg2 = opts("labelsKMG2");
                var mults,
                    base;
                if (kmg2) {
                    mults = [1, 2, 4, 8, 16, 32, 64, 128, 256];
                    base = 16
                } else {
                    mults = [1, 2, 5, 10, 20, 50, 100];
                    base = 10
                }
                var max_ticks = Math.ceil(pixels / pixels_per_tick);
                var units_per_tick = Math.abs(b - a) / max_ticks;
                var base_power = Math.floor(Math.log(units_per_tick) / Math.log(base));
                var base_scale = Math.pow(base, base_power);
                var scale,
                    low_val,
                    high_val,
                    spacing;
                for (j = 0; j < mults.length; j++) {
                    scale = base_scale * mults[j];
                    low_val = Math.floor(a / scale) * scale;
                    high_val = Math.ceil(b / scale) * scale;
                    nTicks = Math.abs(high_val - low_val) / scale;
                    spacing = pixels / nTicks;
                    if (spacing > pixels_per_tick)
                        break
                }
                if (low_val > high_val)
                    scale *= -1;
                for (i = 0; i <= nTicks; i++) {
                    tickV = low_val + i * scale;
                    ticks.push({
                        v: tickV
                    })
                }
            }
        }
        var formatter = opts("axisLabelFormatter");
        for (i = 0; i < ticks.length; i++) {
            if (ticks[i].label !== undefined)
                continue;
            ticks[i].label = formatter.call(dygraph, ticks[i].v, 0, opts, dygraph)
        }
        return ticks
    };
    var dateTicker = function(a, b, pixels, opts, dygraph, vals) {
        var chosen = pickDateTickGranularity(a, b, pixels, opts);
        if (chosen >= 0) {
            return getDateAxis(a, b, chosen, opts, dygraph)
        } else {
            return []
        }
    };
    var Granularity = {
        MILLISECONDLY: 0,
        TWO_MILLISECONDLY: 1,
        FIVE_MILLISECONDLY: 2,
        TEN_MILLISECONDLY: 3,
        FIFTY_MILLISECONDLY: 4,
        HUNDRED_MILLISECONDLY: 5,
        FIVE_HUNDRED_MILLISECONDLY: 6,
        SECONDLY: 7,
        TWO_SECONDLY: 8,
        FIVE_SECONDLY: 9,
        TEN_SECONDLY: 10,
        THIRTY_SECONDLY: 11,
        MINUTELY: 12,
        TWO_MINUTELY: 13,
        FIVE_MINUTELY: 14,
        TEN_MINUTELY: 15,
        THIRTY_MINUTELY: 16,
        HOURLY: 17,
        TWO_HOURLY: 18,
        SIX_HOURLY: 19,
        DAILY: 20,
        TWO_DAILY: 21,
        WEEKLY: 22,
        MONTHLY: 23,
        QUARTERLY: 24,
        BIANNUAL: 25,
        ANNUAL: 26,
        DECADAL: 27,
        CENTENNIAL: 28,
        NUM_GRANULARITIES: 29
    };
    var DateField = {
        DATEFIELD_Y: 0,
        DATEFIELD_M: 1,
        DATEFIELD_D: 2,
        DATEFIELD_HH: 3,
        DATEFIELD_MM: 4,
        DATEFIELD_SS: 5,
        DATEFIELD_MS: 6,
        NUM_DATEFIELDS: 7
    };
    var TICK_PLACEMENT = [];
    TICK_PLACEMENT[Granularity.MILLISECONDLY] = {
        datefield: DateField.DATEFIELD_MS,
        step: 1,
        spacing: 1
    };
    TICK_PLACEMENT[Granularity.TWO_MILLISECONDLY] = {
        datefield: DateField.DATEFIELD_MS,
        step: 2,
        spacing: 2
    };
    TICK_PLACEMENT[Granularity.FIVE_MILLISECONDLY] = {
        datefield: DateField.DATEFIELD_MS,
        step: 5,
        spacing: 5
    };
    TICK_PLACEMENT[Granularity.TEN_MILLISECONDLY] = {
        datefield: DateField.DATEFIELD_MS,
        step: 10,
        spacing: 10
    };
    TICK_PLACEMENT[Granularity.FIFTY_MILLISECONDLY] = {
        datefield: DateField.DATEFIELD_MS,
        step: 50,
        spacing: 50
    };
    TICK_PLACEMENT[Granularity.HUNDRED_MILLISECONDLY] = {
        datefield: DateField.DATEFIELD_MS,
        step: 100,
        spacing: 100
    };
    TICK_PLACEMENT[Granularity.FIVE_HUNDRED_MILLISECONDLY] = {
        datefield: DateField.DATEFIELD_MS,
        step: 500,
        spacing: 500
    };
    TICK_PLACEMENT[Granularity.SECONDLY] = {
        datefield: DateField.DATEFIELD_SS,
        step: 1,
        spacing: 1e3 * 1
    };
    TICK_PLACEMENT[Granularity.TWO_SECONDLY] = {
        datefield: DateField.DATEFIELD_SS,
        step: 2,
        spacing: 1e3 * 2
    };
    TICK_PLACEMENT[Granularity.FIVE_SECONDLY] = {
        datefield: DateField.DATEFIELD_SS,
        step: 5,
        spacing: 1e3 * 5
    };
    TICK_PLACEMENT[Granularity.TEN_SECONDLY] = {
        datefield: DateField.DATEFIELD_SS,
        step: 10,
        spacing: 1e3 * 10
    };
    TICK_PLACEMENT[Granularity.THIRTY_SECONDLY] = {
        datefield: DateField.DATEFIELD_SS,
        step: 30,
        spacing: 1e3 * 30
    };
    TICK_PLACEMENT[Granularity.MINUTELY] = {
        datefield: DateField.DATEFIELD_MM,
        step: 1,
        spacing: 1e3 * 60
    };
    TICK_PLACEMENT[Granularity.TWO_MINUTELY] = {
        datefield: DateField.DATEFIELD_MM,
        step: 2,
        spacing: 1e3 * 60 * 2
    };
    TICK_PLACEMENT[Granularity.FIVE_MINUTELY] = {
        datefield: DateField.DATEFIELD_MM,
        step: 5,
        spacing: 1e3 * 60 * 5
    };
    TICK_PLACEMENT[Granularity.TEN_MINUTELY] = {
        datefield: DateField.DATEFIELD_MM,
        step: 10,
        spacing: 1e3 * 60 * 10
    };
    TICK_PLACEMENT[Granularity.THIRTY_MINUTELY] = {
        datefield: DateField.DATEFIELD_MM,
        step: 30,
        spacing: 1e3 * 60 * 30
    };
    TICK_PLACEMENT[Granularity.HOURLY] = {
        datefield: DateField.DATEFIELD_HH,
        step: 1,
        spacing: 1e3 * 3600
    };
    TICK_PLACEMENT[Granularity.TWO_HOURLY] = {
        datefield: DateField.DATEFIELD_HH,
        step: 2,
        spacing: 1e3 * 3600 * 2
    };
    TICK_PLACEMENT[Granularity.SIX_HOURLY] = {
        datefield: DateField.DATEFIELD_HH,
        step: 6,
        spacing: 1e3 * 3600 * 6
    };
    TICK_PLACEMENT[Granularity.DAILY] = {
        datefield: DateField.DATEFIELD_D,
        step: 1,
        spacing: 1e3 * 86400
    };
    TICK_PLACEMENT[Granularity.TWO_DAILY] = {
        datefield: DateField.DATEFIELD_D,
        step: 2,
        spacing: 1e3 * 86400 * 2
    };
    TICK_PLACEMENT[Granularity.WEEKLY] = {
        datefield: DateField.DATEFIELD_D,
        step: 7,
        spacing: 1e3 * 604800
    };
    TICK_PLACEMENT[Granularity.MONTHLY] = {
        datefield: DateField.DATEFIELD_M,
        step: 1,
        spacing: 1e3 * 7200 * 365.2524
    };
    TICK_PLACEMENT[Granularity.QUARTERLY] = {
        datefield: DateField.DATEFIELD_M,
        step: 3,
        spacing: 1e3 * 21600 * 365.2524
    };
    TICK_PLACEMENT[Granularity.BIANNUAL] = {
        datefield: DateField.DATEFIELD_M,
        step: 6,
        spacing: 1e3 * 43200 * 365.2524
    };
    TICK_PLACEMENT[Granularity.ANNUAL] = {
        datefield: DateField.DATEFIELD_Y,
        step: 1,
        spacing: 1e3 * 86400 * 365.2524
    };
    TICK_PLACEMENT[Granularity.DECADAL] = {
        datefield: DateField.DATEFIELD_Y,
        step: 10,
        spacing: 1e3 * 864e3 * 365.2524
    };
    TICK_PLACEMENT[Granularity.CENTENNIAL] = {
        datefield: DateField.DATEFIELD_Y,
        step: 100,
        spacing: 1e3 * 864e4 * 365.2524
    };
    var PREFERRED_LOG_TICK_VALUES = function() {
        var vals = [];
        for (var power = -39; power <= 39; power++) {
            var range = Math.pow(10, power);
            for (var mult = 1; mult <= 9; mult++) {
                var val = range * mult;
                vals.push(val)
            }
        }
        return vals
    }();
    var pickDateTickGranularity = function(a, b, pixels, opts) {
        var pixels_per_tick = opts("pixelsPerLabel");
        for (var i = 0; i < Granularity.NUM_GRANULARITIES; i++) {
            var num_ticks = numDateTicks(a, b, i);
            if (pixels / num_ticks >= pixels_per_tick) {
                return i
            }
        }
        return -1
    };
    var numDateTicks = function(start_time, end_time, granularity) {
        var spacing = TICK_PLACEMENT[granularity].spacing;
        return Math.round(1 * (end_time - start_time) / spacing)
    };
    var getDateAxis = function(start_time, end_time, granularity, opts, dg) {
        var formatter = opts("axisLabelFormatter");
        var utc = opts("labelsUTC");
        var accessors = utc ? __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["e"] : __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["d"];
        var datefield = TICK_PLACEMENT[granularity].datefield;
        var step = TICK_PLACEMENT[granularity].step;
        var spacing = TICK_PLACEMENT[granularity].spacing;
        var start_date = new Date(start_time);
        var date_array = [];
        date_array[DateField.DATEFIELD_Y] = accessors.getFullYear(start_date);
        date_array[DateField.DATEFIELD_M] = accessors.getMonth(start_date);
        date_array[DateField.DATEFIELD_D] = accessors.getDate(start_date);
        date_array[DateField.DATEFIELD_HH] = accessors.getHours(start_date);
        date_array[DateField.DATEFIELD_MM] = accessors.getMinutes(start_date);
        date_array[DateField.DATEFIELD_SS] = accessors.getSeconds(start_date);
        date_array[DateField.DATEFIELD_MS] = accessors.getMilliseconds(start_date);
        var start_date_offset = date_array[datefield] % step;
        if (granularity == Granularity.WEEKLY) {
            start_date_offset = accessors.getDay(start_date)
        }
        date_array[datefield] -= start_date_offset;
        for (var df = datefield + 1; df < DateField.NUM_DATEFIELDS; df++) {
            date_array[df] = df === DateField.DATEFIELD_D ? 1 : 0
        }
        var ticks = [];
        var tick_date = accessors.makeDate.apply(null, date_array);
        var tick_time = tick_date.getTime();
        if (granularity <= Granularity.HOURLY) {
            if (tick_time < start_time) {
                tick_time += spacing;
                tick_date = new Date(tick_time)
            }
            while (tick_time <= end_time) {
                ticks.push({
                    v: tick_time,
                    label: formatter.call(dg, tick_date, granularity, opts, dg)
                });
                tick_time += spacing;
                tick_date = new Date(tick_time)
            }
        } else {
            if (tick_time < start_time) {
                date_array[datefield] += step;
                tick_date = accessors.makeDate.apply(null, date_array);
                tick_time = tick_date.getTime()
            }
            while (tick_time <= end_time) {
                if (granularity >= Granularity.DAILY || accessors.getHours(tick_date) % step === 0) {
                    ticks.push({
                        v: tick_time,
                        label: formatter.call(dg, tick_date, granularity, opts, dg)
                    })
                }
                date_array[datefield] += step;
                tick_date = accessors.makeDate.apply(null, date_array);
                tick_time = tick_date.getTime()
            }
        }
        return ticks
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__ = __webpack_require__(6);
    var DRAG_EDGE_MARGIN = 100;
    var DygraphInteraction = {};
    DygraphInteraction.maybeTreatMouseOpAsClick = function(event, g, context) {
        context.dragEndX = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["t"](event, context);
        context.dragEndY = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["u"](event, context);
        var regionWidth = Math.abs(context.dragEndX - context.dragStartX);
        var regionHeight = Math.abs(context.dragEndY - context.dragStartY);
        if (regionWidth < 2 && regionHeight < 2 && g.lastx_ !== undefined && g.lastx_ != -1) {
            DygraphInteraction.treatMouseOpAsClick(g, event, context)
        }
        context.regionWidth = regionWidth;
        context.regionHeight = regionHeight
    };
    DygraphInteraction.startPan = function(event, g, context) {
        var i,
            axis;
        context.isPanning = true;
        var xRange = g.xAxisRange();
        if (g.getOptionForAxis("logscale", "x")) {
            context.initialLeftmostDate = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](xRange[0]);
            context.dateRange = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](xRange[1]) - __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](xRange[0])
        } else {
            context.initialLeftmostDate = xRange[0];
            context.dateRange = xRange[1] - xRange[0]
        }
        context.xUnitsPerPixel = context.dateRange / (g.plotter_.area.w - 1);
        if (g.getNumericOption("panEdgeFraction")) {
            var maxXPixelsToDraw = g.width_ * g.getNumericOption("panEdgeFraction");
            var xExtremes = g.xAxisExtremes();
            var boundedLeftX = g.toDomXCoord(xExtremes[0]) - maxXPixelsToDraw;
            var boundedRightX = g.toDomXCoord(xExtremes[1]) + maxXPixelsToDraw;
            var boundedLeftDate = g.toDataXCoord(boundedLeftX);
            var boundedRightDate = g.toDataXCoord(boundedRightX);
            context.boundedDates = [boundedLeftDate, boundedRightDate];
            var boundedValues = [];
            var maxYPixelsToDraw = g.height_ * g.getNumericOption("panEdgeFraction");
            for (i = 0; i < g.axes_.length; i++) {
                axis = g.axes_[i];
                var yExtremes = axis.extremeRange;
                var boundedTopY = g.toDomYCoord(yExtremes[0], i) + maxYPixelsToDraw;
                var boundedBottomY = g.toDomYCoord(yExtremes[1], i) - maxYPixelsToDraw;
                var boundedTopValue = g.toDataYCoord(boundedTopY, i);
                var boundedBottomValue = g.toDataYCoord(boundedBottomY, i);
                boundedValues[i] = [boundedTopValue, boundedBottomValue]
            }
            context.boundedValues = boundedValues
        }
        context.is2DPan = false;
        context.axes = [];
        for (i = 0; i < g.axes_.length; i++) {
            axis = g.axes_[i];
            var axis_data = {};
            var yRange = g.yAxisRange(i);
            var logscale = g.attributes_.getForAxis("logscale", i);
            if (logscale) {
                axis_data.initialTopValue = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](yRange[1]);
                axis_data.dragValueRange = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](yRange[1]) - __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](yRange[0])
            } else {
                axis_data.initialTopValue = yRange[1];
                axis_data.dragValueRange = yRange[1] - yRange[0]
            }
            axis_data.unitsPerPixel = axis_data.dragValueRange / (g.plotter_.area.h - 1);
            context.axes.push(axis_data);
            if (axis.valueRange)
                context.is2DPan = true
        }
    };
    DygraphInteraction.movePan = function(event, g, context) {
        context.dragEndX = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["t"](event, context);
        context.dragEndY = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["u"](event, context);
        var minDate = context.initialLeftmostDate - (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;
        if (context.boundedDates) {
            minDate = Math.max(minDate, context.boundedDates[0])
        }
        var maxDate = minDate + context.dateRange;
        if (context.boundedDates) {
            if (maxDate > context.boundedDates[1]) {
                minDate = minDate - (maxDate - context.boundedDates[1]);
                maxDate = minDate + context.dateRange
            }
        }
        if (g.getOptionForAxis("logscale", "x")) {
            g.dateWindow_ = [Math.pow(__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["g"], minDate), Math.pow(__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["g"], maxDate)]
        } else {
            g.dateWindow_ = [minDate, maxDate]
        }
        if (context.is2DPan) {
            var pixelsDragged = context.dragEndY - context.dragStartY;
            for (var i = 0; i < g.axes_.length; i++) {
                var axis = g.axes_[i];
                var axis_data = context.axes[i];
                var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;
                var boundedValue = context.boundedValues ? context.boundedValues[i] : null;
                var maxValue = axis_data.initialTopValue + unitsDragged;
                if (boundedValue) {
                    maxValue = Math.min(maxValue, boundedValue[1])
                }
                var minValue = maxValue - axis_data.dragValueRange;
                if (boundedValue) {
                    if (minValue < boundedValue[0]) {
                        maxValue = maxValue - (minValue - boundedValue[0]);
                        minValue = maxValue - axis_data.dragValueRange
                    }
                }
                if (g.attributes_.getForAxis("logscale", i)) {
                    axis.valueRange = [Math.pow(__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["g"], minValue), Math.pow(__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["g"], maxValue)]
                } else {
                    axis.valueRange = [minValue, maxValue]
                }
            }
        }
        g.drawGraph_(false)
    };
    DygraphInteraction.endPan = DygraphInteraction.maybeTreatMouseOpAsClick;
    DygraphInteraction.startZoom = function(event, g, context) {
        context.isZooming = true;
        context.zoomMoved = false
    };
    DygraphInteraction.moveZoom = function(event, g, context) {
        context.zoomMoved = true;
        context.dragEndX = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["t"](event, context);
        context.dragEndY = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["u"](event, context);
        var xDelta = Math.abs(context.dragStartX - context.dragEndX);
        var yDelta = Math.abs(context.dragStartY - context.dragEndY);
        context.dragDirection = xDelta < yDelta / 2 ? __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["h"] : __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["f"];
        g.drawZoomRect_(context.dragDirection, context.dragStartX, context.dragEndX, context.dragStartY, context.dragEndY, context.prevDragDirection, context.prevEndX, context.prevEndY);
        context.prevEndX = context.dragEndX;
        context.prevEndY = context.dragEndY;
        context.prevDragDirection = context.dragDirection
    };
    DygraphInteraction.treatMouseOpAsClick = function(g, event, context) {
        var clickCallback = g.getFunctionOption("clickCallback");
        var pointClickCallback = g.getFunctionOption("pointClickCallback");
        var selectedPoint = null;
        var closestIdx = -1;
        var closestDistance = Number.MAX_VALUE;
        for (var i = 0; i < g.selPoints_.length; i++) {
            var p = g.selPoints_[i];
            var distance = Math.pow(p.canvasx - context.dragEndX, 2) + Math.pow(p.canvasy - context.dragEndY, 2);
            if (!isNaN(distance) && (closestIdx == -1 || distance < closestDistance)) {
                closestDistance = distance;
                closestIdx = i
            }
        }
        var radius = g.getNumericOption("highlightCircleSize") + 2;
        if (closestDistance <= radius * radius) {
            selectedPoint = g.selPoints_[closestIdx]
        }
        if (selectedPoint) {
            var e = {
                cancelable: true,
                point: selectedPoint,
                canvasx: context.dragEndX,
                canvasy: context.dragEndY
            };
            var defaultPrevented = g.cascadeEvents_("pointClick", e);
            if (defaultPrevented) {
                return
            }
            if (pointClickCallback) {
                pointClickCallback.call(g, event, selectedPoint)
            }
        }
        var e = {
            cancelable: true,
            xval: g.lastx_,
            pts: g.selPoints_,
            canvasx: context.dragEndX,
            canvasy: context.dragEndY
        };
        if (!g.cascadeEvents_("click", e)) {
            if (clickCallback) {
                clickCallback.call(g, event, g.lastx_, g.selPoints_)
            }
        }
    };
    DygraphInteraction.endZoom = function(event, g, context) {
        g.clearZoomRect_();
        context.isZooming = false;
        DygraphInteraction.maybeTreatMouseOpAsClick(event, g, context);
        var plotArea = g.getArea();
        if (context.regionWidth >= 10 && context.dragDirection == __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["f"]) {
            var left = Math.min(context.dragStartX, context.dragEndX),
                right = Math.max(context.dragStartX, context.dragEndX);
            left = Math.max(left, plotArea.x);
            right = Math.min(right, plotArea.x + plotArea.w);
            if (left < right) {
                g.doZoomX_(left, right)
            }
            context.cancelNextDblclick = true
        } else if (context.regionHeight >= 10 && context.dragDirection == __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["h"]) {
            var top = Math.min(context.dragStartY, context.dragEndY),
                bottom = Math.max(context.dragStartY, context.dragEndY);
            top = Math.max(top, plotArea.y);
            bottom = Math.min(bottom, plotArea.y + plotArea.h);
            if (top < bottom) {
                g.doZoomY_(top, bottom)
            }
            context.cancelNextDblclick = true
        }
        context.dragStartX = null;
        context.dragStartY = null
    };
    DygraphInteraction.startTouch = function(event, g, context) {
        event.preventDefault();
        if (event.touches.length > 1) {
            context.startTimeForDoubleTapMs = null
        }
        var touches = [];
        for (var i = 0; i < event.touches.length; i++) {
            var t = event.touches[i];
            touches.push({
                pageX: t.pageX,
                pageY: t.pageY,
                dataX: g.toDataXCoord(t.pageX),
                dataY: g.toDataYCoord(t.pageY)
            })
        }
        context.initialTouches = touches;
        if (touches.length == 1) {
            context.initialPinchCenter = touches[0];
            context.touchDirections = {
                x: true,
                y: true
            }
        } else if (touches.length >= 2) {
            context.initialPinchCenter = {
                pageX: .5 * (touches[0].pageX + touches[1].pageX),
                pageY: .5 * (touches[0].pageY + touches[1].pageY),
                dataX: .5 * (touches[0].dataX + touches[1].dataX),
                dataY: .5 * (touches[0].dataY + touches[1].dataY)
            };
            var initialAngle = 180 / Math.PI * Math.atan2(context.initialPinchCenter.pageY - touches[0].pageY, touches[0].pageX - context.initialPinchCenter.pageX);
            initialAngle = Math.abs(initialAngle);
            if (initialAngle > 90)
                initialAngle = 90 - initialAngle;
            context.touchDirections = {
                x: initialAngle < 90 - 45 / 2,
                y: initialAngle > 45 / 2
            }
        }
        context.initialRange = {
            x: g.xAxisRange(),
            y: g.yAxisRange()
        }
    };
    DygraphInteraction.moveTouch = function(event, g, context) {
        context.startTimeForDoubleTapMs = null;
        var i,
            touches = [];
        for (i = 0; i < event.touches.length; i++) {
            var t = event.touches[i];
            touches.push({
                pageX: t.pageX,
                pageY: t.pageY
            })
        }
        var initialTouches = context.initialTouches;
        var c_now;
        var c_init = context.initialPinchCenter;
        if (touches.length == 1) {
            c_now = touches[0]
        } else {
            c_now = {
                pageX: .5 * (touches[0].pageX + touches[1].pageX),
                pageY: .5 * (touches[0].pageY + touches[1].pageY)
            }
        }
        var swipe = {
            pageX: c_now.pageX - c_init.pageX,
            pageY: c_now.pageY - c_init.pageY
        };
        var dataWidth = context.initialRange.x[1] - context.initialRange.x[0];
        var dataHeight = context.initialRange.y[0] - context.initialRange.y[1];
        swipe.dataX = swipe.pageX / g.plotter_.area.w * dataWidth;
        swipe.dataY = swipe.pageY / g.plotter_.area.h * dataHeight;
        var xScale,
            yScale;
        if (touches.length == 1) {
            xScale = 1;
            yScale = 1
        } else if (touches.length >= 2) {
            var initHalfWidth = initialTouches[1].pageX - c_init.pageX;
            xScale = (touches[1].pageX - c_now.pageX) / initHalfWidth;
            var initHalfHeight = initialTouches[1].pageY - c_init.pageY;
            yScale = (touches[1].pageY - c_now.pageY) / initHalfHeight
        }
        xScale = Math.min(8, Math.max(.125, xScale));
        yScale = Math.min(8, Math.max(.125, yScale));
        var didZoom = false;
        if (context.touchDirections.x) {
            g.dateWindow_ = [c_init.dataX - swipe.dataX + (context.initialRange.x[0] - c_init.dataX) / xScale, c_init.dataX - swipe.dataX + (context.initialRange.x[1] - c_init.dataX) / xScale];
            didZoom = true
        }
        if (context.touchDirections.y) {
            for (i = 0; i < 1; i++) {
                var axis = g.axes_[i];
                var logscale = g.attributes_.getForAxis("logscale", i);
                if (logscale) {} else {
                    axis.valueRange = [c_init.dataY - swipe.dataY + (context.initialRange.y[0] - c_init.dataY) / yScale, c_init.dataY - swipe.dataY + (context.initialRange.y[1] - c_init.dataY) / yScale];
                    didZoom = true
                }
            }
        }
        g.drawGraph_(false);
        if (didZoom && touches.length > 1 && g.getFunctionOption("zoomCallback")) {
            var viewWindow = g.xAxisRange();
            g.getFunctionOption("zoomCallback").call(g, viewWindow[0], viewWindow[1], g.yAxisRanges())
        }
    };
    DygraphInteraction.endTouch = function(event, g, context) {
        if (event.touches.length !== 0) {
            DygraphInteraction.startTouch(event, g, context)
        } else if (event.changedTouches.length == 1) {
            var now = (new Date).getTime();
            var t = event.changedTouches[0];
            if (context.startTimeForDoubleTapMs && now - context.startTimeForDoubleTapMs < 500 && context.doubleTapX && Math.abs(context.doubleTapX - t.screenX) < 50 && context.doubleTapY && Math.abs(context.doubleTapY - t.screenY) < 50) {
                g.resetZoom()
            } else {
                context.startTimeForDoubleTapMs = now;
                context.doubleTapX = t.screenX;
                context.doubleTapY = t.screenY
            }
        }
    };
    var distanceFromInterval = function(x, left, right) {
        if (x < left) {
            return left - x
        } else if (x > right) {
            return x - right
        } else {
            return 0
        }
    };
    var distanceFromChart = function(event, g) {
        var chartPos = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["v"](g.canvas_);
        var box = {
            left: chartPos.x,
            right: chartPos.x + g.canvas_.offsetWidth,
            top: chartPos.y,
            bottom: chartPos.y + g.canvas_.offsetHeight
        };
        var pt = {
            x: __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["L"](event),
            y: __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["M"](event)
        };
        var dx = distanceFromInterval(pt.x, box.left, box.right),
            dy = distanceFromInterval(pt.y, box.top, box.bottom);
        return Math.max(dx, dy)
    };
    DygraphInteraction.defaultModel = {
        mousedown: function(event, g, context) {
            if (event.button && event.button == 2)
                return;
            context.initializeMouseDown(event, g, context);
            if (event.altKey || event.shiftKey) {
                DygraphInteraction.startPan(event, g, context)
            } else {
                DygraphInteraction.startZoom(event, g, context)
            }
            var mousemove = function(event) {
                if (context.isZooming) {
                    var d = distanceFromChart(event, g);
                    if (d < DRAG_EDGE_MARGIN) {
                        DygraphInteraction.moveZoom(event, g, context)
                    } else {
                        if (context.dragEndX !== null) {
                            context.dragEndX = null;
                            context.dragEndY = null;
                            g.clearZoomRect_()
                        }
                    }
                } else if (context.isPanning) {
                    DygraphInteraction.movePan(event, g, context)
                }
            };
            var mouseup = function(event) {
                if (context.isZooming) {
                    if (context.dragEndX !== null) {
                        DygraphInteraction.endZoom(event, g, context)
                    } else {
                        DygraphInteraction.maybeTreatMouseOpAsClick(event, g, context)
                    }
                } else if (context.isPanning) {
                    DygraphInteraction.endPan(event, g, context)
                }
                __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["O"](document, "mousemove", mousemove);
                __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["O"](document, "mouseup", mouseup);
                context.destroy()
            };
            g.addAndTrackEvent(document, "mousemove", mousemove);
            g.addAndTrackEvent(document, "mouseup", mouseup)
        },
        willDestroyContextMyself: true,
        touchstart: function(event, g, context) {
            DygraphInteraction.startTouch(event, g, context)
        },
        touchmove: function(event, g, context) {
            DygraphInteraction.moveTouch(event, g, context)
        },
        touchend: function(event, g, context) {
            DygraphInteraction.endTouch(event, g, context)
        },
        dblclick: function(event, g, context) {
            if (context.cancelNextDblclick) {
                context.cancelNextDblclick = false;
                return
            }
            var e = {
                canvasx: context.dragEndX,
                canvasy: context.dragEndY,
                cancelable: true
            };
            if (g.cascadeEvents_("dblclick", e)) {
                return
            }
            if (event.altKey || event.shiftKey) {
                return
            }
            g.resetZoom()
        }
    };
    DygraphInteraction.nonInteractiveModel_ = {
        mousedown: function(event, g, context) {
            context.initializeMouseDown(event, g, context)
        },
        mouseup: DygraphInteraction.maybeTreatMouseOpAsClick
    };
    DygraphInteraction.dragIsPanInteractionModel = {
        mousedown: function(event, g, context) {
            context.initializeMouseDown(event, g, context);
            DygraphInteraction.startPan(event, g, context)
        },
        mousemove: function(event, g, context) {
            if (context.isPanning) {
                DygraphInteraction.movePan(event, g, context)
            }
        },
        mouseup: function(event, g, context) {
            if (context.isPanning) {
                DygraphInteraction.endPan(event, g, context)
            }
        }
    };
    __webpack_exports__["a"] = DygraphInteraction
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var DygraphDataHandler = function() {};
    var handler = DygraphDataHandler;
    handler.X = 0;
    handler.Y = 1;
    handler.EXTRAS = 2;
    handler.prototype.extractSeries = function(rawData, seriesIndex, options) {};
    handler.prototype.seriesToPoints = function(series, setName, boundaryIdStart) {
        var points = [];
        for (var i = 0; i < series.length; ++i) {
            var item = series[i];
            var yraw = item[1];
            var yval = yraw === null ? null : handler.parseFloat(yraw);
            var point = {
                x: NaN,
                y: NaN,
                xval: handler.parseFloat(item[0]),
                yval: yval,
                name: setName,
                idx: i + boundaryIdStart
            };
            points.push(point)
        }
        this.onPointsCreated_(series, points);
        return points
    };
    handler.prototype.onPointsCreated_ = function(series, points) {};
    handler.prototype.rollingAverage = function(series, rollPeriod, options) {};
    handler.prototype.getExtremeYValues = function(series, dateWindow, options) {};
    handler.prototype.onLineEvaluated = function(points, axis, logscale) {};
    handler.parseFloat = function(val) {
        if (val === null) {
            return NaN
        }
        return val
    };
    __webpack_exports__["a"] = DygraphDataHandler
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const config = __webpack_require__(1);
    module.exports = {
        sidebarWidth: 280,
        customColors: [],
        sidebarView: C.VIEWS.ADD,
        viewControlsOpen: true,
        showTipOfDay: true,
        tipOfDayIndex: 0,
        dashboardMode: false,
        zoom: 7.66666,
        cameraPosition: [450, 450, 450],
        cameraRotation: .7853981633974483,
        cameraEuler: null,
        cameraIsTopDown: false,
        componentOpacity: 1,
        componentRotation: 0,
        labelFontColor: "#404040",
        labelFontSize: .5,
        labelFontFamily: '"Open Sans",-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif',
        labelFontStyle: {
            bold: false,
            italic: false
        },
        labelTextAlign: "left",
        labelOutlineColor: "#FFFFFF",
        labelOutlineWidth: .1,
        labelRotation: 0,
        metaDataShow: false,
        metaDataFontSize: .5,
        metaDataTextAlign: "left",
        metaDataShowKeys: true,
        metaDataRotation: 0,
        lineColor: "#e61898",
        lineWidth: .05,
        lineDash: C.LINE_DASH.SOLID,
        areaLineColor: "#CCCCCC",
        areaLineWidth: .05,
        areaFillColor: "#FAFAFA",
        areaShadowLevel: 0,
        iconColor: "#404040",
        iconFontSize: .5,
        icon: "star",
        iconRotation: 0,
        iconOutlineColor: "#FFFFFF",
        iconOutlineWidth: .025,
        imageRotation: 0,
        imageStretchToSize: false,
        lastActiveDocId: null,
        genericBackgroundColor: "#FFFFFF",
        genericPrimaryColor: "#999999",
        genericIconColor: "#333333",
        exportDownloadAsImageSettings: {
            rectangle: {
                x1: 600,
                y1: 200,
                x2: 1e3,
                y2: 400
            },
            newImageWidth: 500,
            newImageHeight: 400,
            widthLocked: true,
            heightLocked: false,
            transparentBackground: false,
            mimeType: "image/png",
            quality: 1,
            gridVisible: true
        },
        "aws-access-data": null,
        activePlugIns: [],
        widgetChartLineColor: "#e61898",
        widgetChartFillChart: true,
        widgetChartShowLabels: true,
        widgetChartPlotType: "line",
        widgetScaleGroupLineColor: "#E68818",
        widgetScaleGroupLineWidth: .05,
        widgetScaleGroupFillColor: "#E6AB18",
        widgetScaleGroupShadowLevel: 0
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    const Point = __webpack_require__(8);
    const DrawStep = __webpack_require__(52);
    const EventEmitter = __webpack_require__(2);
    module.exports = class AbstractPlane extends EventEmitter {
        constructor(canvas, yCoord)
        {
            super();
            this.canvas = canvas;
            this.htmlCanvasElement = document.createElement("canvas");
            this.htmlCanvasElement.width = config.textureCanvasWidth;
            this.htmlCanvasElement.height = config.textureCanvasHeight;
            this.ctx = this.htmlCanvasElement.getContext("2d");
            this.ctx.textBaseline = "middle";
            this.ctx.miterLimit = 2;
            this.texture = new THREE.CanvasTexture(this.htmlCanvasElement);
            this.texture.anisotropy = this.canvas.renderer.capabilities.getMaxAnisotropy();
            this.geometry = new THREE.PlaneGeometry(1, 1, 1, 1);
            this.material = new THREE.MeshBasicMaterial({
                map: this.texture,
                transparent: true
            });
            this.mesh = new THREE.Mesh(this.geometry, this.material);
            this.mesh.rotation.x = -Math.PI / 2;
            this.mesh.position.y = yCoord;
            this.canvas.scene.add(this.mesh);
            this.raycaster = new THREE.Raycaster;
            this.calcPlane = new THREE.Plane(new THREE.Vector3(0, 1, 0));
            this.side = null;
            this.canvas.camera.on("change", this.adjustToCamera, this);
            this.steps = [];
            this.redrawing = false;
            this.renderScheduled = false;
            this.toCanvasWidthFn = this.toCanvasWidth.bind(this);
            this.intersectionPoint = new THREE.Vector3;
            requestAnimationFrame(this.adjustToCamera.bind(this))
        }
        scheduleRender()
        {
            this.renderScheduled = true
        }
        render()
        {
            this.clear();
            this.emit("render");
            this.texture.needsUpdate = true;
            this.renderScheduled = false
        }
        enableTextBlending()
        {
            this.material.blending = THREE.CustomBlending;
            this.material.blendSrc = THREE.OneFactor;
            this.material.blendDst = THREE.OneMinusSrcAlphaFactor
        }
        adjustToCamera()
        {
            const a = this.project(-1, -1);
            const b = this.project(1, 1);
            const center = this.project(0, 0);
            this.side = Math.min(config.gridWidth, Math.max(Math.abs(b.x - a.x), Math.abs(a.z - b.z)));
            this.mesh.scale.setX(this.side);
            this.mesh.scale.setY(this.side);
            this.mesh.position.setX(center.x);
            this.mesh.position.setZ(center.z);
            this.redraw()
        }
        redraw()
        {
            if (this.steps.length === 0) {
                return
            }
            this.redrawing = true;
            this.ctx.clearRect(0, 0, config.textureCanvasWidth, config.textureCanvasHeight);
            for (var i = 0; i < this.steps.length; i++) {
                this[this.steps[i].name].apply(this, this.steps[i].args)
            }
            this.redrawing = false;
            this.texture.needsUpdate = true
        }
        project(screenX, screenY)
        {
            this.raycaster.setFromCamera(new THREE.Vector2(screenX, screenY), this.canvas.camera.getThreeObject());
            return this.raycaster.ray.intersectPlane(this.calcPlane, new THREE.Vector3)
        }
        setFont(fontSize, fontFamily, fontStyle)
        {
            var fontStyleString = "";
            if (fontStyle) {
                if (fontStyle.italic && fontStyle.bold) {
                    fontStyleString = "italic bold "
                } else if (fontStyle.italic) {
                    fontStyleString = "italic "
                } else if (fontStyle.bold) {
                    fontStyleString = "bold "
                }
            }
            this.ctx.font = fontStyleString + this.toCanvasWidth(fontSize) + "px " + fontFamily;
            this.addStep("setFont", [fontSize, fontFamily, fontStyle])
        }
        setTextAlign(textAlign)
        {
            this.ctx.textAlign = textAlign;
            this.addStep("setTextAlign", textAlign)
        }
        setLineWidth(lineWidth)
        {
            this.ctx.lineWidth = this.toCanvasHeight(lineWidth);
            this.addStep("setLineWidth", lineWidth)
        }
        setShadowLevel(shadowLevel)
        {
            this.ctx.shadowColor = "#00000044";
            this.ctx.shadowOffsetY = 5 * shadowLevel;
            this.ctx.shadowOffsetX = 5 * shadowLevel;
            this.ctx.shadowBlur = 5 * shadowLevel;
            this.addStep("setShadowLevel", shadowLevel)
        }
        setLineCap(lineCap)
        {
            this.ctx.lineCap = lineCap
        }
        setLineJoin(lineJoin)
        {
            this.ctx.lineJoin = lineJoin
        }
        setLineDash(lineDash)
        {
            this.ctx.setLineDash(lineDash.map(this.toCanvasWidthFn));
            this.addStep("setLineDash", [lineDash])
        }
        setStrokeStyle(strokeStyle)
        {
            this.ctx.strokeStyle = strokeStyle;
            this.addStep("setStrokeStyle", strokeStyle)
        }
        setFillStyle(fillStyle)
        {
            this.ctx.fillStyle = fillStyle;
            this.addStep("setFillStyle", fillStyle)
        }
        beginPath()
        {
            this.ctx.beginPath();
            this.addStep("beginPath")
        }
        closePath()
        {
            this.ctx.closePath();
            this.addStep("closePath")
        }
        stroke()
        {
            this.ctx.stroke();
            this.addStep("stroke")
        }
        fill()
        {
            this.ctx.fill();
            this.addStep("fill")
        }
        moveTo(point)
        {
            this.ctx.moveTo(this.toCanvasX(point.x), this.toCanvasY(point.y));
            this.addStep("moveTo", point)
        }
        lineTo(point)
        {
            this.ctx.lineTo(this.toCanvasX(point.x), this.toCanvasY(point.y));
            this.addStep("lineTo", point)
        }
        clipRectangle(rectangle)
        {
            this.ctx.rect(this.toCanvasX(rectangle.x1), this.toCanvasY(rectangle.y1), this.toCanvasWidth(rectangle.width), this.toCanvasHeight(rectangle.height));
            this.ctx.clip();
            this.addStep("clipRectangle", rectangle)
        }
        drawImage(image, dX, dY, dWidth, dHeight, rotation)
        {
            if (!image || image.naturalWidth === 0) {
                return
            }
            if (rotation) {
                this.ctx.translate(this.toCanvasX(dX + dWidth / 2), this.toCanvasY(dY + dHeight / 2));
                this.ctx.rotate(rotation);
                this.ctx.drawImage(image, this.toCanvasWidth(-(dWidth / 2)), this.toCanvasHeight(-(dHeight / 2)), this.toCanvasWidth(dWidth), this.toCanvasHeight(dHeight));
                this.ctx.resetTransform()
            } else {
                this.ctx.drawImage(image, this.toCanvasX(dX), this.toCanvasY(dY), this.toCanvasWidth(dWidth), this.toCanvasHeight(dHeight))
            }
            this.addStep("drawImage", [image, dX, dY, dWidth, dHeight, rotation])
        }
        drawCircle(center, r, stroke, fill)
        {
            this.ctx.beginPath();
            this.ctx.arc(this.toCanvasX(center.x), this.toCanvasY(center.y), this.toCanvasWidth(r), 0, 2 * Math.PI, false);
            if (stroke) {
                this.ctx.stroke()
            }
            if (fill) {
                this.ctx.fill()
            }
            this.addStep("drawCircle", [center, r, stroke, fill])
        }
        fillText(text, position, rotation, pivotPoint)
        {
            if (rotation) {
                if (pivotPoint) {
                    this.ctx.translate(this.toCanvasX(pivotPoint.x), this.toCanvasY(pivotPoint.y))
                } else {
                    this.ctx.translate(this.toCanvasX(position.x), this.toCanvasY(position.y))
                }
                this.ctx.rotate(rotation);
                this.ctx.fillText(text, 0, 0);
                this.ctx.resetTransform()
            } else {
                this.ctx.fillText(text, this.toCanvasX(position.x) + 2, this.toCanvasY(position.y))
            }
            this.addStep("fillText", [text, position, rotation, pivotPoint])
        }
        strokeText(text, position, rotation)
        {
            if (rotation) {
                this.ctx.translate(this.toCanvasX(position.x) + 2, this.toCanvasY(position.y));
                this.ctx.rotate(rotation);
                this.ctx.strokeText(text, 0, 0);
                this.ctx.resetTransform()
            } else {
                this.ctx.strokeText(text, this.toCanvasX(position.x) + 2, this.toCanvasY(position.y))
            }
            this.addStep("strokeText", [text, position, rotation])
        }
        measureText(text)
        {
            return this.ctx.measureText(text).width / this.toCanvasWidth(1)
        }
        toCanvasX(x)
        {
            const positionOnCanvas = (this.side / 2 + x * config.gridCellSize) / this.side * config.textureCanvasWidth;
            const positionOffset = this.mesh.position.x * (config.textureCanvasWidth / this.side);
            return positionOnCanvas - positionOffset
        }
        toCanvasY(y)
        {
            const positionOnCanvas = (this.side / 2 + y * config.gridCellSize) / this.side * config.textureCanvasHeight;
            const positionOffset = this.mesh.position.z * (config.textureCanvasHeight / this.side);
            return positionOnCanvas - positionOffset
        }
        toCanvasWidth(width)
        {
            return width * config.gridCellSize / this.side * config.textureCanvasWidth
        }
        toCanvasHeight(height)
        {
            return height * config.gridCellSize / this.side * config.textureCanvasHeight
        }
        fillRect(rectangle)
        {
            this.ctx.fillRect(this.toCanvasX(rectangle.x1), this.toCanvasY(rectangle.y1), this.toCanvasWidth(rectangle.width), this.toCanvasHeight(rectangle.height));
            this.addStep("fillRect", rectangle)
        }
        strokeRect(rectangle)
        {
            this.ctx.strokeRect(this.toCanvasX(rectangle.x1), this.toCanvasY(rectangle.y1), this.toCanvasWidth(rectangle.width), this.toCanvasHeight(rectangle.height));
            this.addStep("strokeRect", rectangle)
        }
        clear()
        {
            this.ctx.clearRect(0, 0, config.textureCanvasWidth, config.textureCanvasHeight);
            this.steps = [];
            this.texture.needsUpdate = true
        }
        addStep(name, args)
        {
            if (this.redrawing === false) {
                this.steps.push(new DrawStep(name, args))
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const PixelObject = __webpack_require__(10);
    const C = __webpack_require__(0);
    const Rectangle = __webpack_require__(3);
    const calc = __webpack_require__(12);
    module.exports = class PixelObjectImage extends PixelObject {
        constructor(canvas, id)
        {
            super(canvas, id, C.TYPES.IMAGE);
            this.boundingBox = new Rectangle;
            this.hoveredAnchor = null;
            this.selectedAnchor = null;
            this.selectedAnchorIndex = null;
            this.isDragging = false;
            this.isEditable = false;
            this.dragStartPosition = null;
            this.dragStartState = null;
            this.dragTransaction = null
        }
        computeBoundingBox()
        {
            const data = this.canvas.app.state.getStateForId(this.id);
            this.boundingBox.set(data.position.x, data.position.y, data.position.x + data.dimensions.width, data.position.y + data.dimensions.height);
            return this.boundingBox
        }
        showSelected(isMultiSelection)
        {
            super.showSelected();
            this.isEditable = !isMultiSelection;
            if (this.isEditable) {
                this.canvas.mouseProjector.on(C.EVENTS.RAW_POSITION_CHANGED, this.onMouseMove, this);
                this.canvas.mouseControls.on("mousedown", this.onMouseDown, this, 0)
            }
        }
        hideSelected()
        {
            super.hideSelected();
            this.isEditable = false;
            this.canvas.mouseProjector.off(C.EVENTS.RAW_POSITION_CHANGED, this.onMouseMove, this);
            this.canvas.mouseControls.off("mousedown", this.onMouseDown, this, 0)
        }
        destroy()
        {
            this.canvas.mouseProjector.off(C.EVENTS.RAW_POSITION_CHANGED, this.onMouseMove, this);
            this.canvas.mouseControls.off("mousedown", this.onMouseDown, this, 0);
            this.canvas.mouseProjector.off(C.EVENTS.EIGHTS_CELL_CHANGED, this.onDrag, this);
            this.canvas.mouseControls.off("mouseup", this.endDrag, this);
            super.destroy()
        }
        onMouseMove(point)
        {
            if (this.isDragging) {
                return
            }
            const anchors = this.boundingBox.getAnchors();
            var closestAnchorIndex = null;
            var closestAnchorDistance = Infinity;
            var distance,
                i;
            for (i = 0; i < anchors.length; i++) {
                distance = calc.getDistanceBetweenPoints(point, anchors[i]);
                if (distance < closestAnchorDistance) {
                    closestAnchorIndex = i;
                    closestAnchorDistance = distance
                }
            }
            if (closestAnchorDistance < .4) {
                this.hoveredAnchor = anchors[closestAnchorIndex];
                this.selectedAnchorIndex = closestAnchorIndex;
                document.body.classList.add("hover")
            } else {
                this.hoveredAnchor = null
            }
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        onMouseDown(event)
        {
            this.selectedAnchor = this.hoveredAnchor;
            if (!this.selectedAnchor) {
                return
            }
            this.dragStartPosition = this.canvas.mouseProjector.getPlaneCoordinatesForMouseEvent(event, C.EVENTS.QUARTER_CELL_INTERSECTION_CHANGED);
            this.dragStartState = this.canvas.app.state.getStateForId(this.id, true);
            this.isDragging = true;
            this.canvas.interactionPlane.plane.scheduleRender();
            this.canvas.mouseProjector.on(C.EVENTS.EIGHTS_CELL_CHANGED, this.onDrag, this);
            this.canvas.mouseControls.on("mouseup", this.endDrag, this);
            return false
        }
        onDrag(point)
        {
            var deltaX = point.x - this.dragStartPosition.x;
            var deltaY = point.y - this.dragStartPosition.y;
            var x = this.dragStartState.position.x;
            var y = this.dragStartState.position.y;
            var width = this.dragStartState.dimensions.width;
            var height = this.dragStartState.dimensions.height;
            if (this.selectedAnchorIndex === 0) {
                x += deltaX;
                y += deltaY;
                width -= deltaX;
                height -= deltaY
            } else if (this.selectedAnchorIndex === 1) {
                y += deltaY;
                width += deltaX;
                height -= deltaY
            } else if (this.selectedAnchorIndex === 2) {
                width += deltaX;
                height += deltaY
            } else if (this.selectedAnchorIndex === 3) {
                x += deltaX;
                width -= deltaX;
                height += deltaY
            }
            if (width < .25 || height < .25) {
                return
            }
            this.dragTransaction = {
                id: this.id,
                action: C.ACTIONS.UPDATE,
                isTransient: true,
                data: {
                    position: {
                        x: x,
                        y: y
                    },
                    dimensions: {
                        width: width,
                        height: height
                    }
                }
            };
            this.canvas.app.state.processTransaction(this.dragTransaction)
        }
        endDrag()
        {
            this.canvas.mouseProjector.off(C.EVENTS.EIGHTS_CELL_CHANGED, this.onDrag, this);
            this.canvas.mouseControls.off("mouseup", this.endDrag, this);
            this.selectedAnchor = null;
            this.isDragging = false;
            if (this.dragTransaction) {
                this.dragTransaction.isTransient = false;
                this.canvas.app.state.processTransaction(this.dragTransaction)
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    const calc = __webpack_require__(12);
    const lineTools = __webpack_require__(7);
    module.exports = class LineFinder {
        constructor(lineObject)
        {
            this.lineObject = lineObject
        }
        destroy()
        {
            this.lineObject = null
        }
        intersectsRectangle(rec)
        {
            const data = this.lineObject.canvas.app.state.getStateForId(this.lineObject.id);
            var i,
                ancA,
                ancB;
            for (i = 0; i < data.lines.length; i++) {
                ancA = lineTools.toAnchorPoint(data.anchors[data.lines[i][0]]);
                ancB = lineTools.toAnchorPoint(data.anchors[data.lines[i][1]]);
                if (!ancA || !ancB) {
                    continue
                }
                if (calc.doLinesIntersect(ancA.x, ancA.y, ancB.x, ancB.y, rec.x1, rec.y1, rec.x2, rec.y1) || calc.doLinesIntersect(ancA.x, ancA.y, ancB.x, ancB.y, rec.x2, rec.y1, rec.x2, rec.y2) || calc.doLinesIntersect(ancA.x, ancA.y, ancB.x, ancB.y, rec.x2, rec.y2, rec.x1, rec.y2) || calc.doLinesIntersect(ancA.x, ancA.y, ancB.x, ancB.y, rec.x1, rec.y2, rec.x1, rec.y1)) {
                    return true
                }
            }
            return false
        }
        setClosestSubPartHovered(planeIntersectionPoint)
        {
            var c = this.getClosestAnchorPoint(planeIntersectionPoint);
            if (c.distance < config.lineSelectionProximity) {
                c.type = C.SUB_PART_TYPES.ANCHOR_POINT;
                this.lineObject.subparts.setHovered(c.index, C.SUB_PART_TYPES.ANCHOR_POINT)
            } else {
                c = this.getClosestLineSegment(planeIntersectionPoint);
                if (c.distance < config.lineSelectionProximity) {
                    this.lineObject.subparts.setHovered(c.index, C.SUB_PART_TYPES.LINE_SEGMENT)
                }
            }
        }
        getClosestAnchorPoint(point)
        {
            var minDistance = Infinity,
                distance,
                closestPointIndex,
                i;
            const data = this.lineObject.canvas.app.state.getStateForId(this.lineObject.id);
            for (i = 0; i < data.anchors.length; i++) {
                if (data.anchors[i] === null) {
                    continue
                }
                distance = calc.getDistanceBetweenPoints(point, lineTools.toAnchorPoint(data.anchors[i]));
                if (distance < minDistance) {
                    minDistance = distance;
                    closestPointIndex = i
                }
            }
            return {
                distance: minDistance,
                index: closestPointIndex
            }
        }
        getClosestLineSegment(point)
        {
            var minDistance = Infinity,
                i,
                distance,
                closestLineSegmentIndex;
            const data = this.lineObject.canvas.app.state.getStateForId(this.lineObject.id);
            if (this.lineObject.type === C.TYPES.LINE_GROUP) {
                for (i = 0; i < data.lines.length; i++) {
                    distance = calc.getDistanceToLine(point, lineTools.toAnchorPoint(data.anchors[data.lines[i][0]]), lineTools.toAnchorPoint(data.anchors[data.lines[i][1]]));
                    if (distance < minDistance) {
                        minDistance = distance;
                        closestLineSegmentIndex = i
                    }
                }
            } else if (this.lineObject.type === C.TYPES.AREA) {
                for (i = 0; i < data.anchors.length; i++) {
                    if (i === data.anchors.length - 1) {
                        distance = calc.getDistanceToLine(point, data.anchors[i], data.anchors[0])
                    } else {
                        distance = calc.getDistanceToLine(point, data.anchors[i], data.anchors[i + 1])
                    }
                    if (distance < minDistance) {
                        minDistance = distance;
                        closestLineSegmentIndex = i
                    }
                }
            }
            return {
                distance: minDistance,
                index: closestLineSegmentIndex
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args)
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
        ReflectOwnKeys = R.ownKeys
    } else if (Object.getOwnPropertySymbols) {
        ReflectOwnKeys = function ReflectOwnKeys(target) {
            return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))
        }
    } else {
        ReflectOwnKeys = function ReflectOwnKeys(target) {
            return Object.getOwnPropertyNames(target)
        }
    }
    function ProcessEmitWarning(warning) {
        if (console && console.warn)
            console.warn(warning)
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
        return value !== value
    };
    function EventEmitter() {
        EventEmitter.init.call(this)
    }
    module.exports = EventEmitter;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined;
    var defaultMaxListeners = 10;
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
        enumerable: true,
        get: function() {
            return defaultMaxListeners
        },
        set: function(arg) {
            if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
                throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".")
            }
            defaultMaxListeners = arg
        }
    });
    EventEmitter.init = function() {
        if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
            this._events = Object.create(null);
            this._eventsCount = 0
        }
        this._maxListeners = this._maxListeners || undefined
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
        if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".")
        }
        this._maxListeners = n;
        return this
    };
    function $getMaxListeners(that) {
        if (that._maxListeners === undefined)
            return EventEmitter.defaultMaxListeners;
        return that._maxListeners
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
        return $getMaxListeners(this)
    };
    EventEmitter.prototype.emit = function emit(type) {
        var args = [];
        for (var i = 1; i < arguments.length; i++)
            args.push(arguments[i]);
        var doError = type === "error";
        var events = this._events;
        if (events !== undefined)
            doError = doError && events.error === undefined;
        else if (!doError)
            return false;
        if (doError) {
            var er;
            if (args.length > 0)
                er = args[0];
            if (er instanceof Error) {
                throw er
            }
            var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
            err.context = er;
            throw err
        }
        var handler = events[type];
        if (handler === undefined)
            return false;
        if (typeof handler === "function") {
            ReflectApply(handler, this, args)
        } else {
            var len = handler.length;
            var listeners = arrayClone(handler, len);
            for (var i = 0; i < len; ++i)
                ReflectApply(listeners[i], this, args)
        }
        return true
    };
    function _addListener(target, type, listener, prepend) {
        var m;
        var events;
        var existing;
        if (typeof listener !== "function") {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener)
        }
        events = target._events;
        if (events === undefined) {
            events = target._events = Object.create(null);
            target._eventsCount = 0
        } else {
            if (events.newListener !== undefined) {
                target.emit("newListener", type, listener.listener ? listener.listener : listener);
                events = target._events
            }
            existing = events[type]
        }
        if (existing === undefined) {
            existing = events[type] = listener;
            ++target._eventsCount
        } else {
            if (typeof existing === "function") {
                existing = events[type] = prepend ? [listener, existing] : [existing, listener]
            } else if (prepend) {
                existing.unshift(listener)
            } else {
                existing.push(listener)
            }
            m = $getMaxListeners(target);
            if (m > 0 && existing.length > m && !existing.warned) {
                existing.warned = true;
                var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
                w.name = "MaxListenersExceededWarning";
                w.emitter = target;
                w.type = type;
                w.count = existing.length;
                ProcessEmitWarning(w)
            }
        }
        return target
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
        return _addListener(this, type, listener, false)
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
        return _addListener(this, type, listener, true)
    };
    function onceWrapper() {
        var args = [];
        for (var i = 0; i < arguments.length; i++)
            args.push(arguments[i]);
        if (!this.fired) {
            this.target.removeListener(this.type, this.wrapFn);
            this.fired = true;
            ReflectApply(this.listener, this.target, args)
        }
    }
    function _onceWrap(target, type, listener) {
        var state = {
            fired: false,
            wrapFn: undefined,
            target: target,
            type: type,
            listener: listener
        };
        var wrapped = onceWrapper.bind(state);
        wrapped.listener = listener;
        state.wrapFn = wrapped;
        return wrapped
    }
    EventEmitter.prototype.once = function once(type, listener) {
        if (typeof listener !== "function") {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener)
        }
        this.on(type, _onceWrap(this, type, listener));
        return this
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
        if (typeof listener !== "function") {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener)
        }
        this.prependListener(type, _onceWrap(this, type, listener));
        return this
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
        var list,
            events,
            position,
            i,
            originalListener;
        if (typeof listener !== "function") {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener)
        }
        events = this._events;
        if (events === undefined)
            return this;
        list = events[type];
        if (list === undefined)
            return this;
        if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
                this._events = Object.create(null);
            else {
                delete events[type];
                if (events.removeListener)
                    this.emit("removeListener", type, list.listener || listener)
            }
        } else if (typeof list !== "function") {
            position = -1;
            for (i = list.length - 1; i >= 0; i--) {
                if (list[i] === listener || list[i].listener === listener) {
                    originalListener = list[i].listener;
                    position = i;
                    break
                }
            }
            if (position < 0)
                return this;
            if (position === 0)
                list.shift();
            else {
                spliceOne(list, position)
            }
            if (list.length === 1)
                events[type] = list[0];
            if (events.removeListener !== undefined)
                this.emit("removeListener", type, originalListener || listener)
        }
        return this
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
        var listeners,
            events,
            i;
        events = this._events;
        if (events === undefined)
            return this;
        if (events.removeListener === undefined) {
            if (arguments.length === 0) {
                this._events = Object.create(null);
                this._eventsCount = 0
            } else if (events[type] !== undefined) {
                if (--this._eventsCount === 0)
                    this._events = Object.create(null);
                else
                    delete events[type]
            }
            return this
        }
        if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
                key = keys[i];
                if (key === "removeListener")
                    continue;
                this.removeAllListeners(key)
            }
            this.removeAllListeners("removeListener");
            this._events = Object.create(null);
            this._eventsCount = 0;
            return this
        }
        listeners = events[type];
        if (typeof listeners === "function") {
            this.removeListener(type, listeners)
        } else if (listeners !== undefined) {
            for (i = listeners.length - 1; i >= 0; i--) {
                this.removeListener(type, listeners[i])
            }
        }
        return this
    };
    function _listeners(target, type, unwrap) {
        var events = target._events;
        if (events === undefined)
            return [];
        var evlistener = events[type];
        if (evlistener === undefined)
            return [];
        if (typeof evlistener === "function")
            return unwrap ? [evlistener.listener || evlistener] : [evlistener];
        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length)
    }
    EventEmitter.prototype.listeners = function listeners(type) {
        return _listeners(this, type, true)
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
        return _listeners(this, type, false)
    };
    EventEmitter.listenerCount = function(emitter, type) {
        if (typeof emitter.listenerCount === "function") {
            return emitter.listenerCount(type)
        } else {
            return listenerCount.call(emitter, type)
        }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
        var events = this._events;
        if (events !== undefined) {
            var evlistener = events[type];
            if (typeof evlistener === "function") {
                return 1
            } else if (evlistener !== undefined) {
                return evlistener.length
            }
        }
        return 0
    }
    EventEmitter.prototype.eventNames = function eventNames() {
        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : []
    };
    function arrayClone(arr, n) {
        var copy = new Array(n);
        for (var i = 0; i < n; ++i)
            copy[i] = arr[i];
        return copy
    }
    function spliceOne(list, index) {
        for (; index + 1 < list.length; index++)
            list[index] = list[index + 1];
        list.pop()
    }
    function unwrapListeners(arr) {
        var ret = new Array(arr.length);
        for (var i = 0; i < ret.length; ++i) {
            ret[i] = arr[i].listener || arr[i]
        }
        return ret
    }
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(25).EventEmitter;
    const TIME_SPANS = {
        "1H": 36e5,
        "4H": 144e5,
        "8H": 288e5,
        "1D": 864e5,
        "2D": 1728e5,
        "3D": 2592e5,
        "1W": 6048e5
    };
    module.exports = class CloudwatchChartDatasource extends EventEmitter {
        constructor(settings, componentId, metricId, canvas)
        {
            super();
            this.settings = settings || {};
            this.componentId = componentId;
            this.metricId = metricId;
            this.canvas = canvas;
            this.refreshIntervalId = null;
            this.refreshInterval = null;
            this.data = null;
            this.labels = null;
            this.span = null;
            if (this.settings) {
                this.getData()
            }
        }
        destroy() {}
        updateSettings(settings)
        {
            if (JSON.stringify(settings) === JSON.stringify(this.settings)) {
                return
            }
            for (var key in settings) {
                this.settings[key] = settings[key]
            }
            if (settings.dimensions) {
                for (var i = 0; i < settings.dimensions.length; i++) {
                    delete settings.dimensions[i].id
                }
            }
            this.getData()
        }
        getPluginInstance()
        {
            return this.canvas.plugin.registry.getById("monitoring-aws-cloudwatch").instance
        }
        formatData(data)
        {
            const formattedData = [];
            for (var i = 0; i < data.length; i++) {
                formattedData.push([data[i].Timestamp, data[i][this.settings.statistic]])
            }
            formattedData.sort((a, b) => {
                const timeA = a[0].getTime();
                const timeB = b[0].getTime();
                if (timeA === timeB) {
                    return 0
                }
                if (timeA > timeB) {
                    return 1
                } else {
                    return -1
                }
            });
            return formattedData
        }
        getData()
        {
            if (!this.settings.namespace || !this.settings.metric) {
                return
            }
            this.emit("loading");
            const pluginInstance = this.getPluginInstance();
            if (!pluginInstance.isReady) {
                pluginInstance.once("ready", this.getData.bind(this));
                return
            }
            const span = TIME_SPANS[this.settings.span];
            const endTime = Date.now();
            const params = {
                StartTime: (endTime - span) / 1e3,
                EndTime: endTime / 1e3,
                MetricName: this.settings.metric,
                Namespace: this.settings.namespace,
                Period: Math.floor(span / 15e4 / 60) * 60 || 60,
                Dimensions: this.settings.dimensions,
                Statistics: [this.settings.statistic]
            };
            if (this.refreshInterval !== params.Period) {
                clearInterval(this.refreshIntervalId);
                this.refreshIntervalId = setInterval(this.getData.bind(this), params.Period * 1e3);
                this.refreshInterval = params.Period;
                this.emit("refreshIntervalChanged", this.refreshInterval)
            }
            this.getPluginInstance().client.client.getMetricStatistics(params, (err, data) => {
                if (err) {
                    console.log("ERROR", err)
                } else {
                    const label = data.Label + ": " + params.Statistics[0];
                    this.data = this.formatData(data.Datapoints);
                    this.labels = ["time", label];
                    this.span = this.settings.span;
                    this.emit("data", this.data, this.labels, this.span)
                }
            })
        }
    }
    ;
    function getRandomData() {
        const data = [];
        for (var i = 0; i < 100; i++) {
            data.push([i, Math.floor(Math.random() * 5)])
        }
        return data
    }
}, function(module, exports) {
    module.exports = {
        "aws-amazon-lex": "AWS/Lex",
        "aws-amazon-machine-learning": "AWS/ML",
        "aws-amazon-polly": "AWS/Polly",
        "aws-amazon-sagemaker": "AWS/SageMaker",
        "aws-amazon-translate": "AWS/Translate",
        "aws-glue": "AWS/Glue",
        "aws-elasticache": "AWS/ElastiCache",
        "aws-amazon-elastic-container-service": "AWS/ECS",
        "aws-ec2": ["AWS/EC2", "AWS/EC2Spot"],
        "aws-lambda": "AWS/Lambda",
        "aws-step-functions": "AWS/States",
        "aws-emr": "AWS/ElasticMapReduce",
        "aws-amazon-rds": "AWS/RDS",
        "aws-dynamodb": "AWS/DynamoDB",
        "aws-iot-analytics": "AWS/IoTAnalytics",
        "aws-iot-core": "AWS/IoT",
        "aws-amazon-elastic-transcoder": "AWS/ElasticTranscoder",
        "aws-amazon-kinesis-video-streams": "AWS/KinesisVideo",
        "aws-amazon-simple-notification-service-(sns)": "AWS/SNS",
        "aws-kinesis": "AWS/Kinesis",
        "aws-simple-email-service": "AWS/SES",
        "aws-amazon-cloudwatch": ["AWS/Events", "AWS/Logs"],
        "aws-amazon-cloudfront": "AWS/CloudFront",
        "aws-amazon-route-53": "AWS/Route53",
        "aws-api-gateway": "AWS/ApiGateway",
        "aws-direct-connect": "AWS/DX",
        "aws-elastic-loadbalancer": ["AWS/ELB", "AWS/ApplicationELB", "AWS/NetworkELB"],
        "amazon-sqs": "AWS/SQS",
        "aws-key-management-service": "AWS/KMS",
        "aws-shield": "AWS/DDoSProtection",
        "aws-waf": "WAF",
        "aws-amazon-ebs": "AWS/EBS",
        "aws-amazon-elastic-file-system": "AWS/EFS",
        "aws-ebs": "AWS/EBS",
        "aws-redshift": "AWS/Redshift",
        "aws-s3": "AWS/S3",
        "aws-storage-gateway": "AWS/StorageGateway",
        "aws-vpc": ["AWS/NATGateway", "AWS/VPN"]
    }
}, function(module, exports) {
    Vue.component("loading-overlay", {
        template: `\n    <div class="loading-overlay" :class="{show:isVisible}">\n        <div v-if="isLoading" class="loading">\n            <i class="fas fa-circle-notch fa-spin loading-icon"></i>\n            <span>{{msg}}...</span>\n        </div>\n        <div v-if="isWarning || isSuccess" :class="{warning: isWarning, success: isSuccess}">\n            <p v-html="msg"></p>\n            <div class="btn-container">\n                <div class="btn" @click="onConfirm">OK</div>\n            </div>\n        </div>\n\n        <div v-if="isConfirm" class="confirm">\n            <p v-html="msg"></p>\n            <input type="password" v-model="password" v-if="withPassword" />\n            <div class="btn-container">\n                <div class="btn ok" @click="onConfirm">OK</div>\n                <div class="btn cancel" @click="hide">CANCEL</div>\n            </div>\n        </div>\n\n        <div v-if="isComponent" class="component" :class="[className]">\n            <component ref="dynamicComponent" :is="componentName" :settings="componentSettings"></component>\n            <div class="btn-container">\n                <div class="btn ok" @click="onConfirm">OK</div>\n                <div class="btn cancel" @click="hide">CANCEL</div>\n            </div>\n        </div>\n\n        <div v-if="isCredentials" class="confirm credentials" :class="[className]">\n            <div class="msg-with-logo">\n                <div class="logo">\n                    <img :src="logo" />\n                </div>\n                <p v-html="msg"></p>\n            </div>\n\n            <div v-for="(field, fieldId) in fields">\n                <label>{{field.label}}</label>\n                <select v-if="field.type === 'select'" :ref="fieldId">\n                    <option \n                        v-for="(label, key) in field.options" :value="key">\n                        {{label}}\n                    </option>\n                </select>\n                <input v-if="field.type !== 'select'" :type="field.type" :ref="fieldId" />\n            </div>\n            <div class="btn-container">\n                <div class="btn ok" @click="onCredentialConfirm">OK</div>\n                <div class="btn cancel" @click="onCredentialFail">CANCEL</div>\n            </div>\n        </div>\n    </div>\n    `,
        props: [],
        data: function() {
            return {
                isVisible: false,
                isLoading: false,
                isWarning: false,
                isSuccess: false,
                isConfirm: false,
                isCredentials: false,
                withPassword: false,
                logo: null,
                msg: null,
                username: null,
                password: null,
                fields: null,
                className: null,
                isComponent: false,
                componentName: null,
                componentSettings: null,
                className: null
            }
        },
        methods: {
            reset() {
                this.$data.isVisible = false;
                this.$data.isLoading = false;
                this.$data.isWarning = false;
                this.$data.isSuccess = false;
                this.$data.isConfirm = false;
                this.$data.withPassword = false;
                this.$data.isCredentials = false;
                this.$data.username = null;
                this.$data.password = null;
                this.$data.logo = null;
                this.$data.fields = null;
                this.$data.className = null;
                this.$data.isComponent = false;
                this.$data.componentName = null;
                this.$data.componentSettings = null;
                this.$data.msg = null;
                this.$data.className = null
            },
            showLoading(msg) {
                this.reset();
                this.$data.msg = msg;
                this.$data.isLoading = true;
                this.$data.isVisible = true
            },
            showWarning(msg, callback) {
                this.reset();
                this.$data.msg = msg;
                this.$data.isWarning = true;
                this.$data.isVisible = true;
                this.confirmCallback = callback
            },
            showSuccess(msg) {
                this.reset();
                this.$data.msg = msg;
                this.$data.isSuccess = true;
                this.$data.isVisible = true
            },
            showComponent(componentName, settings, className) {
                this.reset();
                this.$data.componentName = componentName;
                this.$data.componentSettings = settings;
                this.$data.isComponent = true;
                this.$data.isVisible = true;
                this.$data.className = className
            },
            confirm(msg, callback) {
                this.reset();
                this.confirmCallback = callback;
                this.$data.msg = msg;
                this.$data.isConfirm = true;
                this.$data.isVisible = true
            },
            confirmWithPassword(msg, callback) {
                this.reset();
                this.confirmCallback = callback;
                this.$data.msg = msg;
                this.$data.isConfirm = true;
                this.$data.withPassword = true;
                this.$data.isVisible = true
            },
            requestCredentials(logo, msg, fields, className, callback) {
                this.reset();
                this.confirmCallback = callback;
                this.$data.logo = logo;
                this.$data.msg = msg;
                this.$data.fields = fields;
                this.$data.className = className;
                this.$data.isCredentials = true;
                this.isVisible = true
            },
            onCredentialConfirm() {
                const data = {};
                for (var fieldId in this.$data.fields) {
                    data[fieldId] = this.$refs[fieldId][0].value
                }
                this.hide();
                this.confirmCallback(null, data)
            },
            onCredentialFail() {
                this.hide();
                this.confirmCallback("USER_CANCEL")
            },
            onConfirm() {
                if (this.$data.withPassword) {
                    this.confirmCallback(this.$data.password)
                } else if (this.$data.isComponent && this.$refs.dynamicComponent.onConfirm) {
                    this.$refs.dynamicComponent.onConfirm()
                } else if (this.confirmCallback) {
                    this.confirmCallback()
                }
                this.hide();
                this.confirmCallback = null
            },
            hide() {
                this.reset()
            }
        }
    })
}, function(module, exports) {
    module.exports = {
        "American Express": "fab fa-cc-amex",
        "Diners Club": "fab fa-cc-diners-club",
        Discover: "fab fa-cc-discover",
        JCB: "fab fa-cc-jcb",
        MasterCard: "fab fa-cc-mastercard",
        UnionPay: "fas fa-credit-card",
        Visa: "fab fa-cc-visa",
        Unknown: "fas fa-credit-card"
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__ = __webpack_require__(6);
    var DygraphLayout = function(dygraph) {
        this.dygraph_ = dygraph;
        this.points = [];
        this.setNames = [];
        this.annotations = [];
        this.yAxes_ = null;
        this.xTicks_ = null;
        this.yTicks_ = null
    };
    DygraphLayout.prototype.addDataset = function(setname, set_xy) {
        this.points.push(set_xy);
        this.setNames.push(setname)
    };
    DygraphLayout.prototype.getPlotArea = function() {
        return this.area_
    };
    DygraphLayout.prototype.computePlotArea = function() {
        var area = {
            x: 0,
            y: 0
        };
        area.w = this.dygraph_.width_ - area.x - this.dygraph_.getOption("rightGap");
        area.h = this.dygraph_.height_;
        var e = {
            chart_div: this.dygraph_.graphDiv,
            reserveSpaceLeft: function(px) {
                var r = {
                    x: area.x,
                    y: area.y,
                    w: px,
                    h: area.h
                };
                area.x += px;
                area.w -= px;
                return r
            },
            reserveSpaceRight: function(px) {
                var r = {
                    x: area.x + area.w - px,
                    y: area.y,
                    w: px,
                    h: area.h
                };
                area.w -= px;
                return r
            },
            reserveSpaceTop: function(px) {
                var r = {
                    x: area.x,
                    y: area.y,
                    w: area.w,
                    h: px
                };
                area.y += px;
                area.h -= px;
                return r
            },
            reserveSpaceBottom: function(px) {
                var r = {
                    x: area.x,
                    y: area.y + area.h - px,
                    w: area.w,
                    h: px
                };
                area.h -= px;
                return r
            },
            chartRect: function() {
                return {
                    x: area.x,
                    y: area.y,
                    w: area.w,
                    h: area.h
                }
            }
        };
        this.dygraph_.cascadeEvents_("layout", e);
        this.area_ = area
    };
    DygraphLayout.prototype.setAnnotations = function(ann) {
        this.annotations = [];
        var parse = this.dygraph_.getOption("xValueParser") || function(x) {
            return x
        };
        for (var i = 0; i < ann.length; i++) {
            var a = {};
            if (!ann[i].xval && ann[i].x === undefined) {
                console.error("Annotations must have an 'x' property");
                return
            }
            if (ann[i].icon && !(ann[i].hasOwnProperty("width") && ann[i].hasOwnProperty("height"))) {
                console.error("Must set width and height when setting " + "annotation.icon property");
                return
            }
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["R"](a, ann[i]);
            if (!a.xval)
                a.xval = parse(a.x);
            this.annotations.push(a)
        }
    };
    DygraphLayout.prototype.setXTicks = function(xTicks) {
        this.xTicks_ = xTicks
    };
    DygraphLayout.prototype.setYAxes = function(yAxes) {
        this.yAxes_ = yAxes
    };
    DygraphLayout.prototype.evaluate = function() {
        this._xAxis = {};
        this._evaluateLimits();
        this._evaluateLineCharts();
        this._evaluateLineTicks();
        this._evaluateAnnotations()
    };
    DygraphLayout.prototype._evaluateLimits = function() {
        var xlimits = this.dygraph_.xAxisRange();
        this._xAxis.minval = xlimits[0];
        this._xAxis.maxval = xlimits[1];
        var xrange = xlimits[1] - xlimits[0];
        this._xAxis.scale = xrange !== 0 ? 1 / xrange : 1;
        if (this.dygraph_.getOptionForAxis("logscale", "x")) {
            this._xAxis.xlogrange = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](this._xAxis.maxval) - __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](this._xAxis.minval);
            this._xAxis.xlogscale = this._xAxis.xlogrange !== 0 ? 1 / this._xAxis.xlogrange : 1
        }
        for (var i = 0; i < this.yAxes_.length; i++) {
            var axis = this.yAxes_[i];
            axis.minyval = axis.computedValueRange[0];
            axis.maxyval = axis.computedValueRange[1];
            axis.yrange = axis.maxyval - axis.minyval;
            axis.yscale = axis.yrange !== 0 ? 1 / axis.yrange : 1;
            if (this.dygraph_.getOption("logscale")) {
                axis.ylogrange = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](axis.maxyval) - __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](axis.minyval);
                axis.ylogscale = axis.ylogrange !== 0 ? 1 / axis.ylogrange : 1;
                if (!isFinite(axis.ylogrange) || isNaN(axis.ylogrange)) {
                    console.error("axis " + i + " of graph at " + axis.g + " can't be displayed in log scale for range [" + axis.minyval + " - " + axis.maxyval + "]")
                }
            }
        }
    };
    DygraphLayout.calcXNormal_ = function(value, xAxis, logscale) {
        if (logscale) {
            return (__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](value) - __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](xAxis.minval)) * xAxis.xlogscale
        } else {
            return (value - xAxis.minval) * xAxis.scale
        }
    };
    DygraphLayout.calcYNormal_ = function(axis, value, logscale) {
        if (logscale) {
            var x = 1 - (__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](value) - __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](axis.minyval)) * axis.ylogscale;
            return isFinite(x) ? x : NaN
        } else {
            return 1 - (value - axis.minyval) * axis.yscale
        }
    };
    DygraphLayout.prototype._evaluateLineCharts = function() {
        var isStacked = this.dygraph_.getOption("stackedGraph");
        var isLogscaleForX = this.dygraph_.getOptionForAxis("logscale", "x");
        for (var setIdx = 0; setIdx < this.points.length; setIdx++) {
            var points = this.points[setIdx];
            var setName = this.setNames[setIdx];
            var connectSeparated = this.dygraph_.getOption("connectSeparatedPoints", setName);
            var axis = this.dygraph_.axisPropertiesForSeries(setName);
            var logscale = this.dygraph_.attributes_.getForSeries("logscale", setName);
            for (var j = 0; j < points.length; j++) {
                var point = points[j];
                point.x = DygraphLayout.calcXNormal_(point.xval, this._xAxis, isLogscaleForX);
                var yval = point.yval;
                if (isStacked) {
                    point.y_stacked = DygraphLayout.calcYNormal_(axis, point.yval_stacked, logscale);
                    if (yval !== null && !isNaN(yval)) {
                        yval = point.yval_stacked
                    }
                }
                if (yval === null) {
                    yval = NaN;
                    if (!connectSeparated) {
                        point.yval = NaN
                    }
                }
                point.y = DygraphLayout.calcYNormal_(axis, yval, logscale)
            }
            this.dygraph_.dataHandler_.onLineEvaluated(points, axis, logscale)
        }
    };
    DygraphLayout.prototype._evaluateLineTicks = function() {
        var i,
            tick,
            label,
            pos,
            v,
            has_tick;
        this.xticks = [];
        for (i = 0; i < this.xTicks_.length; i++) {
            tick = this.xTicks_[i];
            label = tick.label;
            has_tick = !("label_v" in tick);
            v = has_tick ? tick.v : tick.label_v;
            pos = this.dygraph_.toPercentXCoord(v);
            if (pos >= 0 && pos < 1) {
                this.xticks.push({
                    pos: pos,
                    label: label,
                    has_tick: has_tick
                })
            }
        }
        this.yticks = [];
        for (i = 0; i < this.yAxes_.length; i++) {
            var axis = this.yAxes_[i];
            for (var j = 0; j < axis.ticks.length; j++) {
                tick = axis.ticks[j];
                label = tick.label;
                has_tick = !("label_v" in tick);
                v = has_tick ? tick.v : tick.label_v;
                pos = this.dygraph_.toPercentYCoord(v, i);
                if (pos > 0 && pos <= 1) {
                    this.yticks.push({
                        axis: i,
                        pos: pos,
                        label: label,
                        has_tick: has_tick
                    })
                }
            }
        }
    };
    DygraphLayout.prototype._evaluateAnnotations = function() {
        var i;
        var annotations = {};
        for (i = 0; i < this.annotations.length; i++) {
            var a = this.annotations[i];
            annotations[a.xval + "," + a.series] = a
        }
        this.annotated_points = [];
        if (!this.annotations || !this.annotations.length) {
            return
        }
        for (var setIdx = 0; setIdx < this.points.length; setIdx++) {
            var points = this.points[setIdx];
            for (i = 0; i < points.length; i++) {
                var p = points[i];
                var k = p.xval + "," + p.name;
                if (k in annotations) {
                    p.annotation = annotations[k];
                    this.annotated_points.push(p)
                }
            }
        }
    };
    DygraphLayout.prototype.removeAllDatasets = function() {
        delete this.points;
        delete this.setNames;
        delete this.setPointsLengths;
        delete this.setPointsOffsets;
        this.points = [];
        this.setNames = [];
        this.setPointsLengths = [];
        this.setPointsOffsets = []
    };
    __webpack_exports__["a"] = DygraphLayout
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__ = __webpack_require__(6);
    var __WEBPACK_IMPORTED_MODULE_1__dygraph__ = __webpack_require__(16);
    var DygraphCanvasRenderer = function(dygraph, element, elementContext, layout) {
        this.dygraph_ = dygraph;
        this.layout = layout;
        this.element = element;
        this.elementContext = elementContext;
        this.height = dygraph.height_;
        this.width = dygraph.width_;
        if (!__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["B"](this.element)) {
            throw "Canvas is not supported."
        }
        this.area = layout.getPlotArea();
        var ctx = this.dygraph_.canvas_ctx_;
        ctx.beginPath();
        ctx.rect(this.area.x, this.area.y, this.area.w, this.area.h);
        ctx.clip();
        ctx = this.dygraph_.hidden_ctx_;
        ctx.beginPath();
        ctx.rect(this.area.x, this.area.y, this.area.w, this.area.h);
        ctx.clip()
    };
    DygraphCanvasRenderer.prototype.clear = function() {
        this.elementContext.clearRect(0, 0, this.width, this.height)
    };
    DygraphCanvasRenderer.prototype.render = function() {
        this._updatePoints();
        this._renderLineChart()
    };
    DygraphCanvasRenderer._getIteratorPredicate = function(connectSeparatedPoints) {
        return connectSeparatedPoints ? DygraphCanvasRenderer._predicateThatSkipsEmptyPoints : null
    };
    DygraphCanvasRenderer._predicateThatSkipsEmptyPoints = function(array, idx) {
        return array[idx].yval !== null
    };
    DygraphCanvasRenderer._drawStyledLine = function(e, color, strokeWidth, strokePattern, drawPoints, drawPointCallback, pointSize) {
        var g = e.dygraph;
        var stepPlot = g.getBooleanOption("stepPlot", e.setName);
        if (!__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["A"](strokePattern)) {
            strokePattern = null
        }
        var drawGapPoints = g.getBooleanOption("drawGapEdgePoints", e.setName);
        var points = e.points;
        var setName = e.setName;
        var iter = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["n"](points, 0, points.length, DygraphCanvasRenderer._getIteratorPredicate(g.getBooleanOption("connectSeparatedPoints", setName)));
        var stroking = strokePattern && strokePattern.length >= 2;
        var ctx = e.drawingContext;
        ctx.save();
        if (stroking) {
            if (ctx.setLineDash)
                ctx.setLineDash(strokePattern)
        }
        var pointsOnLine = DygraphCanvasRenderer._drawSeries(e, iter, strokeWidth, pointSize, drawPoints, drawGapPoints, stepPlot, color);
        DygraphCanvasRenderer._drawPointsOnLine(e, pointsOnLine, drawPointCallback, color, pointSize);
        if (stroking) {
            if (ctx.setLineDash)
                ctx.setLineDash([])
        }
        ctx.restore()
    };
    DygraphCanvasRenderer._drawSeries = function(e, iter, strokeWidth, pointSize, drawPoints, drawGapPoints, stepPlot, color) {
        var prevCanvasX = null;
        var prevCanvasY = null;
        var nextCanvasY = null;
        var isIsolated;
        var point;
        var pointsOnLine = [];
        var first = true;
        var ctx = e.drawingContext;
        ctx.beginPath();
        ctx.strokeStyle = color;
        ctx.lineWidth = strokeWidth;
        var arr = iter.array_;
        var limit = iter.end_;
        var predicate = iter.predicate_;
        for (var i = iter.start_; i < limit; i++) {
            point = arr[i];
            if (predicate) {
                while (i < limit && !predicate(arr, i)) {
                    i++
                }
                if (i == limit)
                    break;
                point = arr[i]
            }
            if (point.canvasy === null || point.canvasy != point.canvasy) {
                if (stepPlot && prevCanvasX !== null) {
                    ctx.moveTo(prevCanvasX, prevCanvasY);
                    ctx.lineTo(point.canvasx, prevCanvasY)
                }
                prevCanvasX = prevCanvasY = null
            } else {
                isIsolated = false;
                if (drawGapPoints || prevCanvasX === null) {
                    iter.nextIdx_ = i;
                    iter.next();
                    nextCanvasY = iter.hasNext ? iter.peek.canvasy : null;
                    var isNextCanvasYNullOrNaN = nextCanvasY === null || nextCanvasY != nextCanvasY;
                    isIsolated = prevCanvasX === null && isNextCanvasYNullOrNaN;
                    if (drawGapPoints) {
                        if (!first && prevCanvasX === null || iter.hasNext && isNextCanvasYNullOrNaN) {
                            isIsolated = true
                        }
                    }
                }
                if (prevCanvasX !== null) {
                    if (strokeWidth) {
                        if (stepPlot) {
                            ctx.moveTo(prevCanvasX, prevCanvasY);
                            ctx.lineTo(point.canvasx, prevCanvasY)
                        }
                        ctx.lineTo(point.canvasx, point.canvasy)
                    }
                } else {
                    ctx.moveTo(point.canvasx, point.canvasy)
                }
                if (drawPoints || isIsolated) {
                    pointsOnLine.push([point.canvasx, point.canvasy, point.idx])
                }
                prevCanvasX = point.canvasx;
                prevCanvasY = point.canvasy
            }
            first = false
        }
        ctx.stroke();
        return pointsOnLine
    };
    DygraphCanvasRenderer._drawPointsOnLine = function(e, pointsOnLine, drawPointCallback, color, pointSize) {
        var ctx = e.drawingContext;
        for (var idx = 0; idx < pointsOnLine.length; idx++) {
            var cb = pointsOnLine[idx];
            ctx.save();
            drawPointCallback.call(e.dygraph, e.dygraph, e.setName, ctx, cb[0], cb[1], color, pointSize, cb[2]);
            ctx.restore()
        }
    };
    DygraphCanvasRenderer.prototype._updatePoints = function() {
        var sets = this.layout.points;
        for (var i = sets.length; i--;) {
            var points = sets[i];
            for (var j = points.length; j--;) {
                var point = points[j];
                point.canvasx = this.area.w * point.x + this.area.x;
                point.canvasy = this.area.h * point.y + this.area.y
            }
        }
    };
    DygraphCanvasRenderer.prototype._renderLineChart = function(opt_seriesName, opt_ctx) {
        var ctx = opt_ctx || this.elementContext;
        var i;
        var sets = this.layout.points;
        var setNames = this.layout.setNames;
        var setName;
        this.colors = this.dygraph_.colorsMap_;
        var plotter_attr = this.dygraph_.getOption("plotter");
        var plotters = plotter_attr;
        if (!__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["A"](plotters)) {
            plotters = [plotters]
        }
        var setPlotters = {};
        for (i = 0; i < setNames.length; i++) {
            setName = setNames[i];
            var setPlotter = this.dygraph_.getOption("plotter", setName);
            if (setPlotter == plotter_attr)
                continue;
            setPlotters[setName] = setPlotter
        }
        for (i = 0; i < plotters.length; i++) {
            var plotter = plotters[i];
            var is_last = i == plotters.length - 1;
            for (var j = 0; j < sets.length; j++) {
                setName = setNames[j];
                if (opt_seriesName && setName != opt_seriesName)
                    continue;
                var points = sets[j];
                var p = plotter;
                if (setName in setPlotters) {
                    if (is_last) {
                        p = setPlotters[setName]
                    } else {
                        continue
                    }
                }
                var color = this.colors[setName];
                var strokeWidth = this.dygraph_.getOption("strokeWidth", setName);
                ctx.save();
                ctx.strokeStyle = color;
                ctx.lineWidth = strokeWidth;
                p({
                    points: points,
                    setName: setName,
                    drawingContext: ctx,
                    color: color,
                    strokeWidth: strokeWidth,
                    dygraph: this.dygraph_,
                    axis: this.dygraph_.axisPropertiesForSeries(setName),
                    plotArea: this.area,
                    seriesIndex: j,
                    seriesCount: sets.length,
                    singleSeriesName: opt_seriesName,
                    allSeriesPoints: sets
                });
                ctx.restore()
            }
        }
    };
    DygraphCanvasRenderer._Plotters = {
        linePlotter: function(e) {
            DygraphCanvasRenderer._linePlotter(e)
        },
        fillPlotter: function(e) {
            DygraphCanvasRenderer._fillPlotter(e)
        },
        errorPlotter: function(e) {
            DygraphCanvasRenderer._errorPlotter(e)
        }
    };
    DygraphCanvasRenderer._linePlotter = function(e) {
        var g = e.dygraph;
        var setName = e.setName;
        var strokeWidth = e.strokeWidth;
        var borderWidth = g.getNumericOption("strokeBorderWidth", setName);
        var drawPointCallback = g.getOption("drawPointCallback", setName) || __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["a"].DEFAULT;
        var strokePattern = g.getOption("strokePattern", setName);
        var drawPoints = g.getBooleanOption("drawPoints", setName);
        var pointSize = g.getNumericOption("pointSize", setName);
        if (borderWidth && strokeWidth) {
            DygraphCanvasRenderer._drawStyledLine(e, g.getOption("strokeBorderColor", setName), strokeWidth + 2 * borderWidth, strokePattern, drawPoints, drawPointCallback, pointSize)
        }
        DygraphCanvasRenderer._drawStyledLine(e, e.color, strokeWidth, strokePattern, drawPoints, drawPointCallback, pointSize)
    };
    DygraphCanvasRenderer._errorPlotter = function(e) {
        var g = e.dygraph;
        var setName = e.setName;
        var errorBars = g.getBooleanOption("errorBars") || g.getBooleanOption("customBars");
        if (!errorBars)
            return;
        var fillGraph = g.getBooleanOption("fillGraph", setName);
        if (fillGraph) {
            console.warn("Can't use fillGraph option with error bars")
        }
        var ctx = e.drawingContext;
        var color = e.color;
        var fillAlpha = g.getNumericOption("fillAlpha", setName);
        var stepPlot = g.getBooleanOption("stepPlot", setName);
        var points = e.points;
        var iter = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["n"](points, 0, points.length, DygraphCanvasRenderer._getIteratorPredicate(g.getBooleanOption("connectSeparatedPoints", setName)));
        var newYs;
        var prevX = NaN;
        var prevY = NaN;
        var prevYs = [-1, -1];
        var rgb = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["Q"](color);
        var err_color = "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + fillAlpha + ")";
        ctx.fillStyle = err_color;
        ctx.beginPath();
        var isNullUndefinedOrNaN = function(x) {
            return x === null || x === undefined || isNaN(x)
        };
        while (iter.hasNext) {
            var point = iter.next();
            if (!stepPlot && isNullUndefinedOrNaN(point.y) || stepPlot && !isNaN(prevY) && isNullUndefinedOrNaN(prevY)) {
                prevX = NaN;
                continue
            }
            newYs = [point.y_bottom, point.y_top];
            if (stepPlot) {
                prevY = point.y
            }
            if (isNaN(newYs[0]))
                newYs[0] = point.y;
            if (isNaN(newYs[1]))
                newYs[1] = point.y;
            newYs[0] = e.plotArea.h * newYs[0] + e.plotArea.y;
            newYs[1] = e.plotArea.h * newYs[1] + e.plotArea.y;
            if (!isNaN(prevX)) {
                if (stepPlot) {
                    ctx.moveTo(prevX, prevYs[0]);
                    ctx.lineTo(point.canvasx, prevYs[0]);
                    ctx.lineTo(point.canvasx, prevYs[1])
                } else {
                    ctx.moveTo(prevX, prevYs[0]);
                    ctx.lineTo(point.canvasx, newYs[0]);
                    ctx.lineTo(point.canvasx, newYs[1])
                }
                ctx.lineTo(prevX, prevYs[1]);
                ctx.closePath()
            }
            prevYs = newYs;
            prevX = point.canvasx
        }
        ctx.fill()
    };
    DygraphCanvasRenderer._fastCanvasProxy = function(context) {
        var pendingActions = [];
        var lastRoundedX = null;
        var lastFlushedX = null;
        var LINE_TO = 1,
            MOVE_TO = 2;
        var actionCount = 0;
        var compressActions = function(opt_losslessOnly) {
            if (pendingActions.length <= 1)
                return;
            for (var i = pendingActions.length - 1; i > 0; i--) {
                var action = pendingActions[i];
                if (action[0] == MOVE_TO) {
                    var prevAction = pendingActions[i - 1];
                    if (prevAction[1] == action[1] && prevAction[2] == action[2]) {
                        pendingActions.splice(i, 1)
                    }
                }
            }
            for (var i = 0; i < pendingActions.length - 1;) {
                var action = pendingActions[i];
                if (action[0] == MOVE_TO && pendingActions[i + 1][0] == MOVE_TO) {
                    pendingActions.splice(i, 1)
                } else {
                    i++
                }
            }
            if (pendingActions.length > 2 && !opt_losslessOnly) {
                var startIdx = 0;
                if (pendingActions[0][0] == MOVE_TO)
                    startIdx++;
                var minIdx = null,
                    maxIdx = null;
                for (var i = startIdx; i < pendingActions.length; i++) {
                    var action = pendingActions[i];
                    if (action[0] != LINE_TO)
                        continue;
                    if (minIdx === null && maxIdx === null) {
                        minIdx = i;
                        maxIdx = i
                    } else {
                        var y = action[2];
                        if (y < pendingActions[minIdx][2]) {
                            minIdx = i
                        } else if (y > pendingActions[maxIdx][2]) {
                            maxIdx = i
                        }
                    }
                }
                var minAction = pendingActions[minIdx],
                    maxAction = pendingActions[maxIdx];
                pendingActions.splice(startIdx, pendingActions.length - startIdx);
                if (minIdx < maxIdx) {
                    pendingActions.push(minAction);
                    pendingActions.push(maxAction)
                } else if (minIdx > maxIdx) {
                    pendingActions.push(maxAction);
                    pendingActions.push(minAction)
                } else {
                    pendingActions.push(minAction)
                }
            }
        };
        var flushActions = function(opt_noLossyCompression) {
            compressActions(opt_noLossyCompression);
            for (var i = 0, len = pendingActions.length; i < len; i++) {
                var action = pendingActions[i];
                if (action[0] == LINE_TO) {
                    context.lineTo(action[1], action[2])
                } else if (action[0] == MOVE_TO) {
                    context.moveTo(action[1], action[2])
                }
            }
            if (pendingActions.length) {
                lastFlushedX = pendingActions[pendingActions.length - 1][1]
            }
            actionCount += pendingActions.length;
            pendingActions = []
        };
        var addAction = function(action, x, y) {
            var rx = Math.round(x);
            if (lastRoundedX === null || rx != lastRoundedX) {
                var hasGapOnLeft = lastRoundedX - lastFlushedX > 1,
                    hasGapOnRight = rx - lastRoundedX > 1,
                    hasGap = hasGapOnLeft || hasGapOnRight;
                flushActions(hasGap);
                lastRoundedX = rx
            }
            pendingActions.push([action, x, y])
        };
        return {
            moveTo: function(x, y) {
                addAction(MOVE_TO, x, y)
            },
            lineTo: function(x, y) {
                addAction(LINE_TO, x, y)
            },
            stroke: function() {
                flushActions(true);
                context.stroke()
            },
            fill: function() {
                flushActions(true);
                context.fill()
            },
            beginPath: function() {
                flushActions(true);
                context.beginPath()
            },
            closePath: function() {
                flushActions(true);
                context.closePath()
            },
            _count: function() {
                return actionCount
            }
        }
    };
    DygraphCanvasRenderer._fillPlotter = function(e) {
        if (e.singleSeriesName)
            return;
        if (e.seriesIndex !== 0)
            return;
        var g = e.dygraph;
        var setNames = g.getLabels().slice(1);
        for (var i = setNames.length; i >= 0; i--) {
            if (!g.visibility()[i])
                setNames.splice(i, 1)
        }
        var anySeriesFilled = function() {
            for (var i = 0; i < setNames.length; i++) {
                if (g.getBooleanOption("fillGraph", setNames[i]))
                    return true
            }
            return false
        }();
        if (!anySeriesFilled)
            return;
        var area = e.plotArea;
        var sets = e.allSeriesPoints;
        var setCount = sets.length;
        var stackedGraph = g.getBooleanOption("stackedGraph");
        var colors = g.getColors();
        var baseline = {};
        var currBaseline;
        var prevStepPlot;
        var traceBackPath = function(ctx, baselineX, baselineY, pathBack) {
            ctx.lineTo(baselineX, baselineY);
            if (stackedGraph) {
                for (var i = pathBack.length - 1; i >= 0; i--) {
                    var pt = pathBack[i];
                    ctx.lineTo(pt[0], pt[1])
                }
            }
        };
        for (var setIdx = setCount - 1; setIdx >= 0; setIdx--) {
            var ctx = e.drawingContext;
            var setName = setNames[setIdx];
            if (!g.getBooleanOption("fillGraph", setName))
                continue;
            var fillAlpha = g.getNumericOption("fillAlpha", setName);
            var stepPlot = g.getBooleanOption("stepPlot", setName);
            var color = colors[setIdx];
            var axis = g.axisPropertiesForSeries(setName);
            var axisY = 1 + axis.minyval * axis.yscale;
            if (axisY < 0)
                axisY = 0;
            else if (axisY > 1)
                axisY = 1;
            axisY = area.h * axisY + area.y;
            var points = sets[setIdx];
            var iter = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["n"](points, 0, points.length, DygraphCanvasRenderer._getIteratorPredicate(g.getBooleanOption("connectSeparatedPoints", setName)));
            var prevX = NaN;
            var prevYs = [-1, -1];
            var newYs;
            var rgb = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["Q"](color);
            var err_color = "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + fillAlpha + ")";
            ctx.fillStyle = err_color;
            ctx.beginPath();
            var last_x,
                is_first = true;
            if (points.length > 2 * g.width_ || __WEBPACK_IMPORTED_MODULE_1__dygraph__["a"].FORCE_FAST_PROXY) {
                ctx = DygraphCanvasRenderer._fastCanvasProxy(ctx)
            }
            var pathBack = [];
            var point;
            while (iter.hasNext) {
                point = iter.next();
                if (!__WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["E"](point.y) && !stepPlot) {
                    traceBackPath(ctx, prevX, prevYs[1], pathBack);
                    pathBack = [];
                    prevX = NaN;
                    if (point.y_stacked !== null && !isNaN(point.y_stacked)) {
                        baseline[point.canvasx] = area.h * point.y_stacked + area.y
                    }
                    continue
                }
                if (stackedGraph) {
                    if (!is_first && last_x == point.xval) {
                        continue
                    } else {
                        is_first = false;
                        last_x = point.xval
                    }
                    currBaseline = baseline[point.canvasx];
                    var lastY;
                    if (currBaseline === undefined) {
                        lastY = axisY
                    } else {
                        if (prevStepPlot) {
                            lastY = currBaseline[0]
                        } else {
                            lastY = currBaseline
                        }
                    }
                    newYs = [point.canvasy, lastY];
                    if (stepPlot) {
                        if (prevYs[0] === -1) {
                            baseline[point.canvasx] = [point.canvasy, axisY]
                        } else {
                            baseline[point.canvasx] = [point.canvasy, prevYs[0]]
                        }
                    } else {
                        baseline[point.canvasx] = point.canvasy
                    }
                } else {
                    if (isNaN(point.canvasy) && stepPlot) {
                        newYs = [area.y + area.h, axisY]
                    } else {
                        newYs = [point.canvasy, axisY]
                    }
                }
                if (!isNaN(prevX)) {
                    if (stepPlot) {
                        ctx.lineTo(point.canvasx, prevYs[0]);
                        ctx.lineTo(point.canvasx, newYs[0])
                    } else {
                        ctx.lineTo(point.canvasx, newYs[0])
                    }
                    if (stackedGraph) {
                        pathBack.push([prevX, prevYs[1]]);
                        if (prevStepPlot && currBaseline) {
                            pathBack.push([point.canvasx, currBaseline[1]])
                        } else {
                            pathBack.push([point.canvasx, newYs[1]])
                        }
                    }
                } else {
                    ctx.moveTo(point.canvasx, newYs[1]);
                    ctx.lineTo(point.canvasx, newYs[0])
                }
                prevYs = newYs;
                prevX = point.canvasx
            }
            prevStepPlot = stepPlot;
            if (newYs && point) {
                traceBackPath(ctx, point.canvasx, newYs[1], pathBack);
                pathBack = []
            }
            ctx.fill()
        }
    };
    __webpack_exports__["a"] = DygraphCanvasRenderer
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__ = __webpack_require__(18);
    var __WEBPACK_IMPORTED_MODULE_1__dygraph_interaction_model__ = __webpack_require__(19);
    var __WEBPACK_IMPORTED_MODULE_2__dygraph_canvas__ = __webpack_require__(31);
    var __WEBPACK_IMPORTED_MODULE_3__dygraph_utils__ = __webpack_require__(6);
    var DEFAULT_ATTRS = {
        highlightCircleSize: 3,
        highlightSeriesOpts: null,
        highlightSeriesBackgroundAlpha: .5,
        highlightSeriesBackgroundColor: "rgb(255, 255, 255)",
        labelsSeparateLines: false,
        labelsShowZeroValues: true,
        labelsKMB: false,
        labelsKMG2: false,
        showLabelsOnHighlight: true,
        digitsAfterDecimal: 2,
        maxNumberWidth: 6,
        sigFigs: null,
        strokeWidth: 1,
        strokeBorderWidth: 0,
        strokeBorderColor: "white",
        axisTickSize: 3,
        axisLabelFontSize: 14,
        rightGap: 5,
        showRoller: false,
        xValueParser: undefined,
        delimiter: ",",
        sigma: 2,
        errorBars: false,
        fractions: false,
        wilsonInterval: true,
        customBars: false,
        fillGraph: false,
        fillAlpha: .15,
        connectSeparatedPoints: false,
        stackedGraph: false,
        stackedGraphNaNFill: "all",
        hideOverlayOnMouseOut: true,
        legend: "onmouseover",
        stepPlot: false,
        xRangePad: 0,
        yRangePad: null,
        drawAxesAtZero: false,
        titleHeight: 28,
        xLabelHeight: 18,
        yLabelWidth: 18,
        axisLineColor: "black",
        axisLineWidth: .3,
        gridLineWidth: .3,
        axisLabelWidth: 50,
        gridLineColor: "rgb(128,128,128)",
        interactionModel: __WEBPACK_IMPORTED_MODULE_1__dygraph_interaction_model__["a"].defaultModel,
        animatedZooms: false,
        showRangeSelector: false,
        rangeSelectorHeight: 40,
        rangeSelectorPlotStrokeColor: "#808FAB",
        rangeSelectorPlotFillGradientColor: "white",
        rangeSelectorPlotFillColor: "#A7B1C4",
        rangeSelectorBackgroundStrokeColor: "gray",
        rangeSelectorBackgroundLineWidth: 1,
        rangeSelectorPlotLineWidth: 1.5,
        rangeSelectorForegroundStrokeColor: "black",
        rangeSelectorForegroundLineWidth: 1,
        rangeSelectorAlpha: .6,
        showInRangeSelector: null,
        plotter: [__WEBPACK_IMPORTED_MODULE_2__dygraph_canvas__["a"]._fillPlotter, __WEBPACK_IMPORTED_MODULE_2__dygraph_canvas__["a"]._errorPlotter, __WEBPACK_IMPORTED_MODULE_2__dygraph_canvas__["a"]._linePlotter],
        plugins: [],
        axes: {
            x: {
                pixelsPerLabel: 70,
                axisLabelWidth: 60,
                axisLabelFormatter: __WEBPACK_IMPORTED_MODULE_3__dygraph_utils__["o"],
                valueFormatter: __WEBPACK_IMPORTED_MODULE_3__dygraph_utils__["r"],
                drawGrid: true,
                drawAxis: true,
                independentTicks: true,
                ticker: __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__["b"]
            },
            y: {
                axisLabelWidth: 50,
                pixelsPerLabel: 30,
                valueFormatter: __WEBPACK_IMPORTED_MODULE_3__dygraph_utils__["K"],
                axisLabelFormatter: __WEBPACK_IMPORTED_MODULE_3__dygraph_utils__["J"],
                drawGrid: true,
                drawAxis: true,
                independentTicks: true,
                ticker: __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__["e"]
            },
            y2: {
                axisLabelWidth: 50,
                pixelsPerLabel: 30,
                valueFormatter: __WEBPACK_IMPORTED_MODULE_3__dygraph_utils__["K"],
                axisLabelFormatter: __WEBPACK_IMPORTED_MODULE_3__dygraph_utils__["J"],
                drawAxis: true,
                drawGrid: false,
                independentTicks: false,
                ticker: __WEBPACK_IMPORTED_MODULE_0__dygraph_tickers__["e"]
            }
        }
    };
    __webpack_exports__["a"] = DEFAULT_ATTRS
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    (function(process) {
        var OPTIONS_REFERENCE = null;
        if (typeof process !== "undefined") {
            if (process.env.NODE_ENV != "production") {
                OPTIONS_REFERENCE = {
                    xValueParser: {
                        default: "parseFloat() or Date.parse()*",
                        labels: ["CSV parsing"],
                        type: "function(str) -> number",
                        description: "A function which parses x-values (i.e. the dependent series). Must return a number, even when the values are dates. In this case, millis since epoch are used. This is used primarily for parsing CSV data. *=Dygraphs is slightly more accepting in the dates which it will parse. See code for details."
                    },
                    stackedGraph: {
                        default: "false",
                        labels: ["Data Line display"],
                        type: "boolean",
                        description: "If set, stack series on top of one another rather than drawing them independently. The first series specified in the input data will wind up on top of the chart and the last will be on bottom. NaN values are drawn as white areas without a line on top, see stackedGraphNaNFill for details."
                    },
                    stackedGraphNaNFill: {
                        default: "all",
                        labels: ["Data Line display"],
                        type: "string",
                        description: 'Controls handling of NaN values inside a stacked graph. NaN values are interpolated/extended for stacking purposes, but the actual point value remains NaN in the legend display. Valid option values are "all" (interpolate internally, repeat leftmost and rightmost value as needed), "inside" (interpolate internally only, use zero outside leftmost and rightmost value), and "none" (treat NaN as zero everywhere).'
                    },
                    pointSize: {
                        default: "1",
                        labels: ["Data Line display"],
                        type: "integer",
                        description: 'The size of the dot to draw on each point in pixels (see drawPoints). A dot is always drawn when a point is "isolated", i.e. there is a missing point on either side of it. This also controls the size of those dots.'
                    },
                    drawPoints: {
                        default: "false",
                        labels: ["Data Line display"],
                        type: "boolean",
                        description: "Draw a small dot at each point, in addition to a line going through the point. This makes the individual data points easier to see, but can increase visual clutter in the chart. The small dot can be replaced with a custom rendering by supplying a <a href='#drawPointCallback'>drawPointCallback</a>."
                    },
                    drawGapEdgePoints: {
                        default: "false",
                        labels: ["Data Line display"],
                        type: "boolean",
                        description: "Draw points at the edges of gaps in the data. This improves visibility of small data segments or other data irregularities."
                    },
                    drawPointCallback: {
                        default: "null",
                        labels: ["Data Line display"],
                        type: "function(g, seriesName, canvasContext, cx, cy, color, pointSize)",
                        parameters: [["g", "the reference graph"], ["seriesName", "the name of the series"], ["canvasContext", "the canvas to draw on"], ["cx", "center x coordinate"], ["cy", "center y coordinate"], ["color", "series color"], ["pointSize", "the radius of the image."], ["idx", "the row-index of the point in the data."]],
                        description: "Draw a custom item when drawPoints is enabled. Default is a small dot matching the series color. This method should constrain drawing to within pointSize pixels from (cx, cy).  Also see <a href='#drawHighlightPointCallback'>drawHighlightPointCallback</a>"
                    },
                    height: {
                        default: "320",
                        labels: ["Overall display"],
                        type: "integer",
                        description: "Height, in pixels, of the chart. If the container div has been explicitly sized, this will be ignored."
                    },
                    zoomCallback: {
                        default: "null",
                        labels: ["Callbacks"],
                        type: "function(minDate, maxDate, yRanges)",
                        parameters: [["minDate", "milliseconds since epoch"], ["maxDate", "milliseconds since epoch."], ["yRanges", "is an array of [bottom, top] pairs, one for each y-axis."]],
                        description: "A function to call when the zoom window is changed (either by zooming in or out). When animatedZooms is set, zoomCallback is called once at the end of the transition (it will not be called for intermediate frames)."
                    },
                    pointClickCallback: {
                        snippet: "function(e, point){<br>&nbsp;&nbsp;alert(point);<br>}",
                        default: "null",
                        labels: ["Callbacks", "Interactive Elements"],
                        type: "function(e, point)",
                        parameters: [["e", "the event object for the click"], ["point", "the point that was clicked See <a href='#point_properties'>Point properties</a> for details"]],
                        description: "A function to call when a data point is clicked. and the point that was clicked."
                    },
                    color: {
                        default: "(see description)",
                        labels: ["Data Series Colors"],
                        type: "string",
                        example: "red",
                        description: "A per-series color definition. Used in conjunction with, and overrides, the colors option."
                    },
                    colors: {
                        default: "(see description)",
                        labels: ["Data Series Colors"],
                        type: "array<string>",
                        example: "['red', '#00FF00']",
                        description: 'List of colors for the data series. These can be of the form "#AABBCC" or "rgb(255,100,200)" or "yellow", etc. If not specified, equally-spaced points around a color wheel are used. Overridden by the \'color\' option.'
                    },
                    connectSeparatedPoints: {
                        default: "false",
                        labels: ["Data Line display"],
                        type: "boolean",
                        description: "Usually, when Dygraphs encounters a missing value in a data series, it interprets this as a gap and draws it as such. If, instead, the missing values represents an x-value for which only a different series has data, then you'll want to connect the dots by setting this to true. To explicitly include a gap with this option set, use a value of NaN."
                    },
                    highlightCallback: {
                        default: "null",
                        labels: ["Callbacks"],
                        type: "function(event, x, points, row, seriesName)",
                        description: "When set, this callback gets called every time a new point is highlighted.",
                        parameters: [["event", "the JavaScript mousemove event"], ["x", "the x-coordinate of the highlighted points"], ["points", "an array of highlighted points: <code>[ {name: 'series', yval: y-value}, &hellip; ]</code>"], ["row", "integer index of the highlighted row in the data table, starting from 0"], ["seriesName", "name of the highlighted series, only present if highlightSeriesOpts is set."]]
                    },
                    drawHighlightPointCallback: {
                        default: "null",
                        labels: ["Data Line display"],
                        type: "function(g, seriesName, canvasContext, cx, cy, color, pointSize)",
                        parameters: [["g", "the reference graph"], ["seriesName", "the name of the series"], ["canvasContext", "the canvas to draw on"], ["cx", "center x coordinate"], ["cy", "center y coordinate"], ["color", "series color"], ["pointSize", "the radius of the image."], ["idx", "the row-index of the point in the data."]],
                        description: "Draw a custom item when a point is highlighted.  Default is a small dot matching the series color. This method should constrain drawing to within pointSize pixels from (cx, cy) Also see <a href='#drawPointCallback'>drawPointCallback</a>"
                    },
                    highlightSeriesOpts: {
                        default: "null",
                        labels: ["Interactive Elements"],
                        type: "Object",
                        description: "When set, the options from this object are applied to the timeseries closest to the mouse pointer for interactive highlighting. See also 'highlightCallback'. Example: highlightSeriesOpts: { strokeWidth: 3 }."
                    },
                    highlightSeriesBackgroundAlpha: {
                        default: "0.5",
                        labels: ["Interactive Elements"],
                        type: "float",
                        description: "Fade the background while highlighting series. 1=fully visible background (disable fading), 0=hiddden background (show highlighted series only)."
                    },
                    highlightSeriesBackgroundColor: {
                        default: "rgb(255, 255, 255)",
                        labels: ["Interactive Elements"],
                        type: "string",
                        description: "Sets the background color used to fade out the series in conjunction with 'highlightSeriesBackgroundAlpha'."
                    },
                    includeZero: {
                        default: "false",
                        labels: ["Axis display"],
                        type: "boolean",
                        description: "Usually, dygraphs will use the range of the data plus some padding to set the range of the y-axis. If this option is set, the y-axis will always include zero, typically as the lowest value. This can be used to avoid exaggerating the variance in the data"
                    },
                    rollPeriod: {
                        default: "1",
                        labels: ["Error Bars", "Rolling Averages"],
                        type: "integer &gt;= 1",
                        description: "Number of days over which to average data. Discussed extensively above."
                    },
                    unhighlightCallback: {
                        default: "null",
                        labels: ["Callbacks"],
                        type: "function(event)",
                        parameters: [["event", "the mouse event"]],
                        description: "When set, this callback gets called every time the user stops highlighting any point by mousing out of the graph."
                    },
                    axisTickSize: {
                        default: "3.0",
                        labels: ["Axis display"],
                        type: "number",
                        description: "The size of the line to display next to each tick mark on x- or y-axes."
                    },
                    labelsSeparateLines: {
                        default: "false",
                        labels: ["Legend"],
                        type: "boolean",
                        description: "Put <code>&lt;br/&gt;</code> between lines in the label string. Often used in conjunction with <strong>labelsDiv</strong>."
                    },
                    valueFormatter: {
                        default: "Depends on the type of your data.",
                        labels: ["Legend", "Value display/formatting"],
                        type: "function(num or millis, opts, seriesName, dygraph, row, col)",
                        description: "Function to provide a custom display format for the values displayed on mouseover. This does not affect the values that appear on tick marks next to the axes. To format those, see axisLabelFormatter. This is usually set on a <a href='per-axis.html'>per-axis</a> basis. .",
                        parameters: [["num_or_millis", "The value to be formatted. This is always a number. For date axes, it's millis since epoch. You can call new Date(millis) to get a Date object."], ["opts", "This is a function you can call to access various options (e.g. opts('labelsKMB')). It returns per-axis values for the option when available."], ["seriesName", "The name of the series from which the point came, e.g. 'X', 'Y', 'A', etc."], ["dygraph", "The dygraph object for which the formatting is being done"], ["row", "The row of the data from which this point comes. g.getValue(row, 0) will return the x-value for this point."], ["col", "The column of the data from which this point comes. g.getValue(row, col) will return the original y-value for this point. This can be used to get the full confidence interval for the point, or access un-rolled values for the point."]]
                    },
                    annotationMouseOverHandler: {
                        default: "null",
                        labels: ["Annotations"],
                        type: "function(annotation, point, dygraph, event)",
                        description: "If provided, this function is called whenever the user mouses over an annotation."
                    },
                    annotationMouseOutHandler: {
                        default: "null",
                        labels: ["Annotations"],
                        type: "function(annotation, point, dygraph, event)",
                        parameters: [["annotation", "the annotation left"], ["point", "the point associated with the annotation"], ["dygraph", "the reference graph"], ["event", "the mouse event"]],
                        description: "If provided, this function is called whenever the user mouses out of an annotation."
                    },
                    annotationClickHandler: {
                        default: "null",
                        labels: ["Annotations"],
                        type: "function(annotation, point, dygraph, event)",
                        parameters: [["annotation", "the annotation left"], ["point", "the point associated with the annotation"], ["dygraph", "the reference graph"], ["event", "the mouse event"]],
                        description: "If provided, this function is called whenever the user clicks on an annotation."
                    },
                    annotationDblClickHandler: {
                        default: "null",
                        labels: ["Annotations"],
                        type: "function(annotation, point, dygraph, event)",
                        parameters: [["annotation", "the annotation left"], ["point", "the point associated with the annotation"], ["dygraph", "the reference graph"], ["event", "the mouse event"]],
                        description: "If provided, this function is called whenever the user double-clicks on an annotation."
                    },
                    drawCallback: {
                        default: "null",
                        labels: ["Callbacks"],
                        type: "function(dygraph, is_initial)",
                        parameters: [["dygraph", "The graph being drawn"], ["is_initial", "True if this is the initial draw, false for subsequent draws."]],
                        description: "When set, this callback gets called every time the dygraph is drawn. This includes the initial draw, after zooming and repeatedly while panning."
                    },
                    labelsKMG2: {
                        default: "false",
                        labels: ["Value display/formatting"],
                        type: "boolean",
                        description: "Show k/M/G for kilo/Mega/Giga on y-axis. This is different than <code>labelsKMB</code> in that it uses base 2, not 10."
                    },
                    delimiter: {
                        default: ",",
                        labels: ["CSV parsing"],
                        type: "string",
                        description: "The delimiter to look for when separating fields of a CSV file. Setting this to a tab is not usually necessary, since tab-delimited data is auto-detected."
                    },
                    axisLabelFontSize: {
                        default: "14",
                        labels: ["Axis display"],
                        type: "integer",
                        description: "Size of the font (in pixels) to use in the axis labels, both x- and y-axis."
                    },
                    underlayCallback: {
                        default: "null",
                        labels: ["Callbacks"],
                        type: "function(context, area, dygraph)",
                        parameters: [["context", "the canvas drawing context on which to draw"], ["area", "An object with {x,y,w,h} properties describing the drawing area."], ["dygraph", "the reference graph"]],
                        description: "When set, this callback gets called before the chart is drawn. It details on how to use this."
                    },
                    width: {
                        default: "480",
                        labels: ["Overall display"],
                        type: "integer",
                        description: "Width, in pixels, of the chart. If the container div has been explicitly sized, this will be ignored."
                    },
                    pixelRatio: {
                        default: "(devicePixelRatio / context.backingStoreRatio)",
                        labels: ["Overall display"],
                        type: "float",
                        description: "Overrides the pixel ratio scaling factor for the canvas's 2d context. Ordinarily, this is set to the devicePixelRatio / (context.backingStoreRatio || 1), so on mobile devices, where the devicePixelRatio can be somewhere around 3, performance can be improved by overriding this value to something less precise, like 1, at the expense of resolution."
                    },
                    interactionModel: {
                        default: "...",
                        labels: ["Interactive Elements"],
                        type: "Object",
                        description: "TODO(konigsberg): document this"
                    },
                    ticker: {
                        default: "Dygraph.dateTicker or Dygraph.numericTicks",
                        labels: ["Axis display"],
                        type: "function(min, max, pixels, opts, dygraph, vals) -> [{v: ..., label: ...}, ...]",
                        parameters: [["min", ""], ["max", ""], ["pixels", ""], ["opts", ""], ["dygraph", "the reference graph"], ["vals", ""]],
                        description: "This lets you specify an arbitrary function to generate tick marks on an axis. The tick marks are an array of (value, label) pairs. The built-in functions go to great lengths to choose good tick marks so, if you set this option, you'll most likely want to call one of them and modify the result. See dygraph-tickers.js for an extensive discussion. This is set on a <a href='per-axis.html'>per-axis</a> basis."
                    },
                    xAxisHeight: {
                        default: "(null)",
                        labels: ["Axis display"],
                        type: "integer",
                        description: "Height, in pixels, of the x-axis. If not set explicitly, this is computed based on axisLabelFontSize and axisTickSize."
                    },
                    showLabelsOnHighlight: {
                        default: "true",
                        labels: ["Interactive Elements", "Legend"],
                        type: "boolean",
                        description: "Whether to show the legend upon mouseover."
                    },
                    axis: {
                        default: "(none)",
                        labels: ["Axis display"],
                        type: "string",
                        description: "Set to either 'y1' or 'y2' to assign a series to a y-axis (primary or secondary). Must be set per-series."
                    },
                    pixelsPerLabel: {
                        default: "70 (x-axis) or 30 (y-axes)",
                        labels: ["Axis display", "Grid"],
                        type: "integer",
                        description: "Number of pixels to require between each x- and y-label. Larger values will yield a sparser axis with fewer ticks. This is set on a <a href='per-axis.html'>per-axis</a> basis."
                    },
                    labelsDiv: {
                        default: "null",
                        labels: ["Legend"],
                        type: "DOM element or string",
                        example: "<code style='font-size: small'>document.getElementById('foo')</code>or<code>'foo'",
                        description: "Show data labels in an external div, rather than on the graph.  This value can either be a div element or a div id."
                    },
                    fractions: {
                        default: "false",
                        labels: ["CSV parsing", "Error Bars"],
                        type: "boolean",
                        description: 'When set, attempt to parse each cell in the CSV file as "a/b", where a and b are integers. The ratio will be plotted. This allows computation of Wilson confidence intervals (see below).'
                    },
                    logscale: {
                        default: "false",
                        labels: ["Axis display"],
                        type: "boolean",
                        description: "When set for the y-axis or x-axis, the graph shows that axis in log scale. Any values less than or equal to zero are not displayed. Showing log scale with ranges that go below zero will result in an unviewable graph.\n\n Not compatible with showZero. connectSeparatedPoints is ignored. This is ignored for date-based x-axes."
                    },
                    strokeWidth: {
                        default: "1.0",
                        labels: ["Data Line display"],
                        type: "float",
                        example: "0.5, 2.0",
                        description: "The width of the lines connecting data points. This can be used to increase the contrast or some graphs."
                    },
                    strokePattern: {
                        default: "null",
                        labels: ["Data Line display"],
                        type: "array<integer>",
                        example: "[10, 2, 5, 2]",
                        description: "A custom pattern array where the even index is a draw and odd is a space in pixels. If null then it draws a solid line. The array should have a even length as any odd lengthed array could be expressed as a smaller even length array. This is used to create dashed lines."
                    },
                    strokeBorderWidth: {
                        default: "null",
                        labels: ["Data Line display"],
                        type: "float",
                        example: "1.0",
                        description: "Draw a border around graph lines to make crossing lines more easily distinguishable. Useful for graphs with many lines."
                    },
                    strokeBorderColor: {
                        default: "white",
                        labels: ["Data Line display"],
                        type: "string",
                        example: "red, #ccffdd",
                        description: "Color for the line border used if strokeBorderWidth is set."
                    },
                    wilsonInterval: {
                        default: "true",
                        labels: ["Error Bars"],
                        type: "boolean",
                        description: 'Use in conjunction with the "fractions" option. Instead of plotting +/- N standard deviations, dygraphs will compute a Wilson confidence interval and plot that. This has more reasonable behavior for ratios close to 0 or 1.'
                    },
                    fillGraph: {
                        default: "false",
                        labels: ["Data Line display"],
                        type: "boolean",
                        description: "Should the area underneath the graph be filled? This option is not compatible with error bars. This may be set on a <a href='per-axis.html'>per-series</a> basis."
                    },
                    highlightCircleSize: {
                        default: "3",
                        labels: ["Interactive Elements"],
                        type: "integer",
                        description: "The size in pixels of the dot drawn over highlighted points."
                    },
                    gridLineColor: {
                        default: "rgb(128,128,128)",
                        labels: ["Grid"],
                        type: "red, blue",
                        description: "The color of the gridlines. This may be set on a per-axis basis to define each axis' grid separately."
                    },
                    gridLinePattern: {
                        default: "null",
                        labels: ["Grid"],
                        type: "array<integer>",
                        example: "[10, 2, 5, 2]",
                        description: "A custom pattern array where the even index is a draw and odd is a space in pixels. If null then it draws a solid line. The array should have a even length as any odd lengthed array could be expressed as a smaller even length array. This is used to create dashed gridlines."
                    },
                    visibility: {
                        default: "[true, true, ...]",
                        labels: ["Data Line display"],
                        type: "Array of booleans",
                        description: "Which series should initially be visible? Once the Dygraph has been constructed, you can access and modify the visibility of each series using the <code>visibility</code> and <code>setVisibility</code> methods."
                    },
                    valueRange: {
                        default: "Full range of the input is shown",
                        labels: ["Axis display"],
                        type: "Array of two numbers",
                        example: "[10, 110]",
                        description: "Explicitly set the vertical range of the graph to [low, high]. This may be set on a per-axis basis to define each y-axis separately. If either limit is unspecified, it will be calculated automatically (e.g. [null, 30] to automatically calculate just the lower bound)"
                    },
                    colorSaturation: {
                        default: "1.0",
                        labels: ["Data Series Colors"],
                        type: "float (0.0 - 1.0)",
                        description: "If <strong>colors</strong> is not specified, saturation of the automatically-generated data series colors."
                    },
                    hideOverlayOnMouseOut: {
                        default: "true",
                        labels: ["Interactive Elements", "Legend"],
                        type: "boolean",
                        description: "Whether to hide the legend when the mouse leaves the chart area."
                    },
                    legend: {
                        default: "onmouseover",
                        labels: ["Legend"],
                        type: "string",
                        description: 'When to display the legend. By default, it only appears when a user mouses over the chart. Set it to "always" to always display a legend of some sort. When set to "follow", legend follows highlighted points.'
                    },
                    legendFormatter: {
                        default: "null",
                        labels: ["Legend"],
                        type: "function(data): string",
                        params: [["data", 'An object containing information about the selection (or lack of a selection). This includes formatted values and series information. See <a href="https://github.com/danvk/dygraphs/pull/683">here</a> for sample values.']],
                        description: 'Set this to supply a custom formatter for the legend. See <a href="https://github.com/danvk/dygraphs/pull/683">this comment</a> and the <a href="tests/legend-formatter.html">legendFormatter demo</a> for usage.'
                    },
                    labelsShowZeroValues: {
                        default: "true",
                        labels: ["Legend"],
                        type: "boolean",
                        description: "Show zero value labels in the labelsDiv."
                    },
                    stepPlot: {
                        default: "false",
                        labels: ["Data Line display"],
                        type: "boolean",
                        description: "When set, display the graph as a step plot instead of a line plot. This option may either be set for the whole graph or for single series."
                    },
                    labelsUTC: {
                        default: "false",
                        labels: ["Value display/formatting", "Axis display"],
                        type: "boolean",
                        description: "Show date/time labels according to UTC (instead of local time)."
                    },
                    labelsKMB: {
                        default: "false",
                        labels: ["Value display/formatting"],
                        type: "boolean",
                        description: "Show K/M/B for thousands/millions/billions on y-axis."
                    },
                    rightGap: {
                        default: "5",
                        labels: ["Overall display"],
                        type: "integer",
                        description: "Number of pixels to leave blank at the right edge of the Dygraph. This makes it easier to highlight the right-most data point."
                    },
                    drawAxesAtZero: {
                        default: "false",
                        labels: ["Axis display"],
                        type: "boolean",
                        description: "When set, draw the X axis at the Y=0 position and the Y axis at the X=0 position if those positions are inside the graph's visible area. Otherwise, draw the axes at the bottom or left graph edge as usual."
                    },
                    xRangePad: {
                        default: "0",
                        labels: ["Axis display"],
                        type: "float",
                        description: "Add the specified amount of extra space (in pixels) around the X-axis value range to ensure points at the edges remain visible."
                    },
                    yRangePad: {
                        default: "null",
                        labels: ["Axis display"],
                        type: "float",
                        description: "If set, add the specified amount of extra space (in pixels) around the Y-axis value range to ensure points at the edges remain visible. If unset, use the traditional Y padding algorithm."
                    },
                    axisLabelFormatter: {
                        default: "Depends on the data type",
                        labels: ["Axis display"],
                        type: "function(number or Date, granularity, opts, dygraph)",
                        parameters: [["number or date", "Either a number (for a numeric axis) or a Date object (for a date axis)"], ["granularity", "specifies how fine-grained the axis is. For date axes, this is a reference to the time granularity enumeration, defined in dygraph-tickers.js, e.g. Dygraph.WEEKLY."], ["opts", "a function which provides access to various options on the dygraph, e.g. opts('labelsKMB')."], ["dygraph", "the referenced graph"]],
                        description: "Function to call to format the tick values that appear along an axis. This is usually set on a <a href='per-axis.html'>per-axis</a> basis."
                    },
                    clickCallback: {
                        snippet: "function(e, date_millis){<br>&nbsp;&nbsp;alert(new Date(date_millis));<br>}",
                        default: "null",
                        labels: ["Callbacks"],
                        type: "function(e, x, points)",
                        parameters: [["e", "The event object for the click"], ["x", "The x value that was clicked (for dates, this is milliseconds since epoch)"], ["points", "The closest points along that date. See <a href='#point_properties'>Point properties</a> for details."]],
                        description: "A function to call when the canvas is clicked."
                    },
                    labels: {
                        default: '["X", "Y1", "Y2", ...]*',
                        labels: ["Legend"],
                        type: "array<string>",
                        description: "A name for each data series, including the independent (X) series. For CSV files and DataTable objections, this is determined by context. For raw data, this must be specified. If it is not, default values are supplied and a warning is logged."
                    },
                    dateWindow: {
                        default: "Full range of the input is shown",
                        labels: ["Axis display"],
                        type: "Array of two numbers",
                        example: "[<br>&nbsp;&nbsp;Date.parse('2006-01-01'),<br>&nbsp;&nbsp;(new Date()).valueOf()<br>]",
                        description: "Initially zoom in on a section of the graph. Is of the form [earliest, latest], where earliest/latest are milliseconds since epoch. If the data for the x-axis is numeric, the values in dateWindow must also be numbers."
                    },
                    showRoller: {
                        default: "false",
                        labels: ["Interactive Elements", "Rolling Averages"],
                        type: "boolean",
                        description: "If the rolling average period text box should be shown."
                    },
                    sigma: {
                        default: "2.0",
                        labels: ["Error Bars"],
                        type: "float",
                        description: "When errorBars is set, shade this many standard deviations above/below each point."
                    },
                    customBars: {
                        default: "false",
                        labels: ["CSV parsing", "Error Bars"],
                        type: "boolean",
                        description: 'When set, parse each CSV cell as "low;middle;high". Error bars will be drawn for each point between low and high, with the series itself going through middle.'
                    },
                    colorValue: {
                        default: "1.0",
                        labels: ["Data Series Colors"],
                        type: "float (0.0 - 1.0)",
                        description: "If colors is not specified, value of the data series colors, as in hue/saturation/value. (0.0-1.0, default 0.5)"
                    },
                    errorBars: {
                        default: "false",
                        labels: ["CSV parsing", "Error Bars"],
                        type: "boolean",
                        description: "Does the data contain standard deviations? Setting this to true alters the input format (see above)."
                    },
                    displayAnnotations: {
                        default: "false",
                        labels: ["Annotations"],
                        type: "boolean",
                        description: "Only applies when Dygraphs is used as a GViz chart. Causes string columns following a data series to be interpreted as annotations on points in that series. This is the same format used by Google's AnnotatedTimeLine chart."
                    },
                    panEdgeFraction: {
                        default: "null",
                        labels: ["Axis display", "Interactive Elements"],
                        type: "float",
                        description: "A value representing the farthest a graph may be panned, in percent of the display. For example, a value of 0.1 means that the graph can only be panned 10% passed the edges of the displayed values. null means no bounds."
                    },
                    title: {
                        labels: ["Chart labels"],
                        type: "string",
                        default: "null",
                        description: "Text to display above the chart. You can supply any HTML for this value, not just text. If you wish to style it using CSS, use the 'dygraph-label' or 'dygraph-title' classes."
                    },
                    titleHeight: {
                        default: "18",
                        labels: ["Chart labels"],
                        type: "integer",
                        description: "Height of the chart title, in pixels. This also controls the default font size of the title. If you style the title on your own, this controls how much space is set aside above the chart for the title's div."
                    },
                    xlabel: {
                        labels: ["Chart labels"],
                        type: "string",
                        default: "null",
                        description: "Text to display below the chart's x-axis. You can supply any HTML for this value, not just text. If you wish to style it using CSS, use the 'dygraph-label' or 'dygraph-xlabel' classes."
                    },
                    xLabelHeight: {
                        labels: ["Chart labels"],
                        type: "integer",
                        default: "18",
                        description: "Height of the x-axis label, in pixels. This also controls the default font size of the x-axis label. If you style the label on your own, this controls how much space is set aside below the chart for the x-axis label's div."
                    },
                    ylabel: {
                        labels: ["Chart labels"],
                        type: "string",
                        default: "null",
                        description: "Text to display to the left of the chart's y-axis. You can supply any HTML for this value, not just text. If you wish to style it using CSS, use the 'dygraph-label' or 'dygraph-ylabel' classes. The text will be rotated 90 degrees by default, so CSS rules may behave in unintuitive ways. No additional space is set aside for a y-axis label. If you need more space, increase the width of the y-axis tick labels using the yAxisLabelWidth option. If you need a wider div for the y-axis label, either style it that way with CSS (but remember that it's rotated, so width is controlled by the 'height' property) or set the yLabelWidth option."
                    },
                    y2label: {
                        labels: ["Chart labels"],
                        type: "string",
                        default: "null",
                        description: "Text to display to the right of the chart's secondary y-axis. This label is only displayed if a secondary y-axis is present. See <a href='http://dygraphs.com/tests/two-axes.html'>this test</a> for an example of how to do this. The comments for the 'ylabel' option generally apply here as well. This label gets a 'dygraph-y2label' instead of a 'dygraph-ylabel' class."
                    },
                    yLabelWidth: {
                        labels: ["Chart labels"],
                        type: "integer",
                        default: "18",
                        description: "Width of the div which contains the y-axis label. Since the y-axis label appears rotated 90 degrees, this actually affects the height of its div."
                    },
                    drawGrid: {
                        default: "true for x and y, false for y2",
                        labels: ["Grid"],
                        type: "boolean",
                        description: "Whether to display gridlines in the chart. This may be set on a per-axis basis to define the visibility of each axis' grid separately."
                    },
                    independentTicks: {
                        default: "true for y, false for y2",
                        labels: ["Axis display", "Grid"],
                        type: "boolean",
                        description: "Only valid for y and y2, has no effect on x: This option defines whether the y axes should align their ticks or if they should be independent. Possible combinations: 1.) y=true, y2=false (default): y is the primary axis and the y2 ticks are aligned to the the ones of y. (only 1 grid) 2.) y=false, y2=true: y2 is the primary axis and the y ticks are aligned to the the ones of y2. (only 1 grid) 3.) y=true, y2=true: Both axis are independent and have their own ticks. (2 grids) 4.) y=false, y2=false: Invalid configuration causes an error."
                    },
                    drawAxis: {
                        default: "true for x and y, false for y2",
                        labels: ["Axis display"],
                        type: "boolean",
                        description: "Whether to draw the specified axis. This may be set on a per-axis basis to define the visibility of each axis separately. Setting this to false also prevents axis ticks from being drawn and reclaims the space for the chart grid/lines."
                    },
                    gridLineWidth: {
                        default: "0.3",
                        labels: ["Grid"],
                        type: "float",
                        description: "Thickness (in pixels) of the gridlines drawn under the chart. The vertical/horizontal gridlines can be turned off entirely by using the drawGrid option. This may be set on a per-axis basis to define each axis' grid separately."
                    },
                    axisLineWidth: {
                        default: "0.3",
                        labels: ["Axis display"],
                        type: "float",
                        description: "Thickness (in pixels) of the x- and y-axis lines."
                    },
                    axisLineColor: {
                        default: "black",
                        labels: ["Axis display"],
                        type: "string",
                        description: "Color of the x- and y-axis lines. Accepts any value which the HTML canvas strokeStyle attribute understands, e.g. 'black' or 'rgb(0, 100, 255)'."
                    },
                    fillAlpha: {
                        default: "0.15",
                        labels: ["Error Bars", "Data Series Colors"],
                        type: "float (0.0 - 1.0)",
                        description: "Error bars (or custom bars) for each series are drawn in the same color as the series, but with partial transparency. This sets the transparency. A value of 0.0 means that the error bars will not be drawn, whereas a value of 1.0 means that the error bars will be as dark as the line for the series itself. This can be used to produce chart lines whose thickness varies at each point."
                    },
                    axisLabelWidth: {
                        default: "50 (y-axis), 60 (x-axis)",
                        labels: ["Axis display", "Chart labels"],
                        type: "integer",
                        description: "Width (in pixels) of the containing divs for x- and y-axis labels. For the y-axis, this also controls the width of the y-axis. Note that for the x-axis, this is independent from pixelsPerLabel, which controls the spacing between labels."
                    },
                    sigFigs: {
                        default: "null",
                        labels: ["Value display/formatting"],
                        type: "integer",
                        description: "By default, dygraphs displays numbers with a fixed number of digits after the decimal point. If you'd prefer to have a fixed number of significant figures, set this option to that number of sig figs. A value of 2, for instance, would cause 1 to be display as 1.0 and 1234 to be displayed as 1.23e+3."
                    },
                    digitsAfterDecimal: {
                        default: "2",
                        labels: ["Value display/formatting"],
                        type: "integer",
                        description: "Unless it's run in scientific mode (see the <code>sigFigs</code> option), dygraphs displays numbers with <code>digitsAfterDecimal</code> digits after the decimal point. Trailing zeros are not displayed, so with a value of 2 you'll get '0', '0.1', '0.12', '123.45' but not '123.456' (it will be rounded to '123.46'). Numbers with absolute value less than 0.1^digitsAfterDecimal (i.e. those which would show up as '0.00') will be displayed in scientific notation."
                    },
                    maxNumberWidth: {
                        default: "6",
                        labels: ["Value display/formatting"],
                        type: "integer",
                        description: "When displaying numbers in normal (not scientific) mode, large numbers will be displayed with many trailing zeros (e.g. 100000000 instead of 1e9). This can lead to unwieldy y-axis labels. If there are more than <code>maxNumberWidth</code> digits to the left of the decimal in a number, dygraphs will switch to scientific notation, even when not operating in scientific mode. If you'd like to see all those digits, set this to something large, like 20 or 30."
                    },
                    file: {
                        default: "(set when constructed)",
                        labels: ["Data"],
                        type: "string (URL of CSV or CSV), GViz DataTable or 2D Array",
                        description: "Sets the data being displayed in the chart. This can only be set when calling updateOptions; it cannot be set from the constructor. For a full description of valid data formats, see the <a href='http://dygraphs.com/data.html'>Data Formats</a> page."
                    },
                    timingName: {
                        default: "null",
                        labels: ["Debugging", "Deprecated"],
                        type: "string",
                        description: "Set this option to log timing information. The value of the option will be logged along with the timimg, so that you can distinguish multiple dygraphs on the same page."
                    },
                    showRangeSelector: {
                        default: "false",
                        labels: ["Range Selector"],
                        type: "boolean",
                        description: "Show or hide the range selector widget."
                    },
                    rangeSelectorHeight: {
                        default: "40",
                        labels: ["Range Selector"],
                        type: "integer",
                        description: "Height, in pixels, of the range selector widget. This option can only be specified at Dygraph creation time."
                    },
                    rangeSelectorPlotStrokeColor: {
                        default: "#808FAB",
                        labels: ["Range Selector"],
                        type: "string",
                        description: 'The range selector mini plot stroke color. This can be of the form "#AABBCC" or "rgb(255,100,200)" or "yellow". You can also specify null or "" to turn off stroke.'
                    },
                    rangeSelectorPlotFillColor: {
                        default: "#A7B1C4",
                        labels: ["Range Selector"],
                        type: "string",
                        description: 'The range selector mini plot fill color. This can be of the form "#AABBCC" or "rgb(255,100,200)" or "yellow". You can also specify null or "" to turn off fill.'
                    },
                    rangeSelectorPlotFillGradientColor: {
                        default: "white",
                        labels: ["Range Selector"],
                        type: "string",
                        description: 'The top color for the range selector mini plot fill color gradient. This can be of the form "#AABBCC" or "rgb(255,100,200)" or "rgba(255,100,200,42)" or "yellow". You can also specify null or "" to disable the gradient and fill with one single color.'
                    },
                    rangeSelectorBackgroundStrokeColor: {
                        default: "gray",
                        labels: ["Range Selector"],
                        type: "string",
                        description: 'The color of the lines below and on both sides of the range selector mini plot. This can be of the form "#AABBCC" or "rgb(255,100,200)" or "yellow".'
                    },
                    rangeSelectorBackgroundLineWidth: {
                        default: "1",
                        labels: ["Range Selector"],
                        type: "float",
                        description: "The width of the lines below and on both sides of the range selector mini plot."
                    },
                    rangeSelectorPlotLineWidth: {
                        default: "1.5",
                        labels: ["Range Selector"],
                        type: "float",
                        description: "The width of the range selector mini plot line."
                    },
                    rangeSelectorForegroundStrokeColor: {
                        default: "black",
                        labels: ["Range Selector"],
                        type: "string",
                        description: 'The color of the lines in the interactive layer of the range selector. This can be of the form "#AABBCC" or "rgb(255,100,200)" or "yellow".'
                    },
                    rangeSelectorForegroundLineWidth: {
                        default: "1",
                        labels: ["Range Selector"],
                        type: "float",
                        description: "The width the lines in the interactive layer of the range selector."
                    },
                    rangeSelectorAlpha: {
                        default: "0.6",
                        labels: ["Range Selector"],
                        type: "float (0.0 - 1.0)",
                        description: "The transparency of the veil that is drawn over the unselected portions of the range selector mini plot. A value of 0 represents full transparency and the unselected portions of the mini plot will appear as normal. A value of 1 represents full opacity and the unselected portions of the mini plot will be hidden."
                    },
                    showInRangeSelector: {
                        default: "null",
                        labels: ["Range Selector"],
                        type: "boolean",
                        description: "Mark this series for inclusion in the range selector. The mini plot curve will be an average of all such series. If this is not specified for any series, the default behavior is to average all the visible series. Setting it for one series will result in that series being charted alone in the range selector. Once it's set for a single series, it needs to be set for all series which should be included (regardless of visibility)."
                    },
                    animatedZooms: {
                        default: "false",
                        labels: ["Interactive Elements"],
                        type: "boolean",
                        description: "Set this option to animate the transition between zoom windows. Applies to programmatic and interactive zooms. Note that if you also set a drawCallback, it will be called several times on each zoom. If you set a zoomCallback, it will only be called after the animation is complete."
                    },
                    plotter: {
                        default: "[DygraphCanvasRenderer.Plotters.fillPlotter, DygraphCanvasRenderer.Plotters.errorPlotter, DygraphCanvasRenderer.Plotters.linePlotter]",
                        labels: ["Data Line display"],
                        type: "array or function",
                        description: "A function (or array of functions) which plot each data series on the chart. TODO(danvk): more details! May be set per-series."
                    },
                    axes: {
                        default: "null",
                        labels: ["Configuration"],
                        type: "Object",
                        description: "Defines per-axis options. Valid keys are 'x', 'y' and 'y2'. Only some options may be set on a per-axis basis. If an option may be set in this way, it will be noted on this page. See also documentation on <a href='http://dygraphs.com/per-axis.html'>per-series and per-axis options</a>."
                    },
                    series: {
                        default: "null",
                        labels: ["Series"],
                        type: "Object",
                        description: "Defines per-series options. Its keys match the y-axis label names, and the values are dictionaries themselves that contain options specific to that series."
                    },
                    plugins: {
                        default: "[]",
                        labels: ["Configuration"],
                        type: "Array<plugin>",
                        description: "Defines per-graph plugins. Useful for per-graph customization"
                    },
                    dataHandler: {
                        default: "(depends on data)",
                        labels: ["Data"],
                        type: "Dygraph.DataHandler",
                        description: "Custom DataHandler. This is an advanced customization. See http://bit.ly/151E7Aq."
                    }
                };
                var warn = function(msg) {
                    if (window.console)
                        window.console.warn(msg)
                };
                var flds = ["type", "default", "description"];
                var valid_cats = ["Annotations", "Axis display", "Chart labels", "CSV parsing", "Callbacks", "Data", "Data Line display", "Data Series Colors", "Error Bars", "Grid", "Interactive Elements", "Range Selector", "Legend", "Overall display", "Rolling Averages", "Series", "Value display/formatting", "Zooming", "Debugging", "Configuration", "Deprecated"];
                var i;
                var cats = {};
                for (i = 0; i < valid_cats.length; i++)
                    cats[valid_cats[i]] = true;
                for (var k in OPTIONS_REFERENCE) {
                    if (!OPTIONS_REFERENCE.hasOwnProperty(k))
                        continue;
                    var op = OPTIONS_REFERENCE[k];
                    for (i = 0; i < flds.length; i++) {
                        if (!op.hasOwnProperty(flds[i])) {
                            warn("Option " + k + ' missing "' + flds[i] + '" property')
                        } else if (typeof op[flds[i]] != "string") {
                            warn(k + "." + flds[i] + " must be of type string")
                        }
                    }
                    var labels = op.labels;
                    if (typeof labels !== "object") {
                        warn('Option "' + k + '" is missing a "labels": [...] option')
                    } else {
                        for (i = 0; i < labels.length; i++) {
                            if (!cats.hasOwnProperty(labels[i])) {
                                warn('Option "' + k + '" has label "' + labels[i] + '", which is invalid.')
                            }
                        }
                    }
                }
            }
        }
        __webpack_exports__["a"] = OPTIONS_REFERENCE
    }).call(__webpack_exports__, __webpack_require__(17))
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__ = __webpack_require__(6);
    function IFrameTarp() {
        this.tarps = []
    }
    IFrameTarp.prototype.cover = function() {
        var iframes = document.getElementsByTagName("iframe");
        for (var i = 0; i < iframes.length; i++) {
            var iframe = iframes[i];
            var pos = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["v"](iframe),
                x = pos.x,
                y = pos.y,
                width = iframe.offsetWidth,
                height = iframe.offsetHeight;
            var div = document.createElement("div");
            div.style.position = "absolute";
            div.style.left = x + "px";
            div.style.top = y + "px";
            div.style.width = width + "px";
            div.style.height = height + "px";
            div.style.zIndex = 999;
            document.body.appendChild(div);
            this.tarps.push(div)
        }
    };
    IFrameTarp.prototype.uncover = function() {
        for (var i = 0; i < this.tarps.length; i++) {
            this.tarps[i].parentNode.removeChild(this.tarps[i])
        }
        this.tarps = []
    };
    __webpack_exports__["a"] = IFrameTarp
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__datahandler__ = __webpack_require__(20);
    var DefaultHandler = function() {};
    DefaultHandler.prototype = new __WEBPACK_IMPORTED_MODULE_0__datahandler__["a"];
    DefaultHandler.prototype.extractSeries = function(rawData, i, options) {
        var series = [];
        var logScale = options.get("logscale");
        for (var j = 0; j < rawData.length; j++) {
            var x = rawData[j][0];
            var point = rawData[j][i];
            if (logScale) {
                if (point <= 0) {
                    point = null
                }
            }
            series.push([x, point])
        }
        return series
    };
    DefaultHandler.prototype.rollingAverage = function(originalData, rollPeriod, options) {
        rollPeriod = Math.min(rollPeriod, originalData.length);
        var rollingData = [];
        var i,
            j,
            y,
            sum,
            num_ok;
        if (rollPeriod == 1) {
            return originalData
        }
        for (i = 0; i < originalData.length; i++) {
            sum = 0;
            num_ok = 0;
            for (j = Math.max(0, i - rollPeriod + 1); j < i + 1; j++) {
                y = originalData[j][1];
                if (y === null || isNaN(y))
                    continue;
                num_ok++;
                sum += originalData[j][1]
            }
            if (num_ok) {
                rollingData[i] = [originalData[i][0], sum / num_ok]
            } else {
                rollingData[i] = [originalData[i][0], null]
            }
        }
        return rollingData
    };
    DefaultHandler.prototype.getExtremeYValues = function(series, dateWindow, options) {
        var minY = null,
            maxY = null,
            y;
        var firstIdx = 0,
            lastIdx = series.length - 1;
        for (var j = firstIdx; j <= lastIdx; j++) {
            y = series[j][1];
            if (y === null || isNaN(y))
                continue;
            if (maxY === null || y > maxY) {
                maxY = y
            }
            if (minY === null || y < minY) {
                minY = y
            }
        }
        return [minY, maxY]
    };
    __webpack_exports__["a"] = DefaultHandler
}, function(module, exports) {
    module.exports = [{
        content: "you can pan the canvas by holding the <b>middle mouse button</b> or mousewheel, holding space or clicking the pan button in the bottom right panel.",
        img: "/assets/images/pan.png"
    }, {
        content: "you can branch off an existing line by double-clicking it to add another anchorpoint",
        img: "/assets/images/dblclick-line.png"
    }, {
        content: "generic components allow you to set your own colors, images and icons",
        img: "/assets/images/generic-components.png"
    }, {
        content: "you can double-click the border of an area to add more anchor-points",
        img: "/assets/images/complex-areas.png"
    }, {
        content: "you can stack multiple areas on top of each other using the z-index setting",
        img: "/assets/images/stacked-area.png"
    }]
}, function(module, exports) {
    Vue.component("controls-help", {
        template: `\n        <div class="controls-help">\n            <i class="fas fa-times close" @click="close"></i>\n\n\n            <div class="col">\n                <h2>General</h2>\n                <ul class="keys">\n                    <li>\n                        <div class="key"><div>ESC</div></div>\n                        <div class="desc">Cancel current action</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>DEL</div></div>\n                        <div class="desc">Delete currently selected item(s)</div>\n                    </li>\n                    <li>\n                        <div class="key two"><div>CTRL</div> + <div>Z</div></div>\n                        <div class="desc">Undo last action</div>\n                    </li>\n                    <li>\n                        <div class="key two"><div>CTRL</div> + <div>Y</div></div>\n                        <div class="desc">Redo last undone action</div>\n                    </li>\n                    <li>\n                        <div class="key two"><div>CTRL</div> + <div>A</div></div>\n                        <div class="desc">Select All</div>\n                    </li>\n                </ul>\n\n                <h2>View</h2>\n                <ul class="keys">\n                    <li>\n                        <div class="key"><div>SPACE</div></div>\n                        <div class="desc">Pan Canvas</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>E</div></div>\n                        <div class="desc">Rotate View Left</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>Q</div></div>\n                        <div class="desc">Rotate View Right</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>X</div></div>\n                        <div class="desc">Toggle 2D/3D</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>P</div></div>\n                        <div class="desc">Toggle Presentation Mode</div>\n                    </li>\n                    <li>\n                        <div class="key arrow-keys">\n                            <div class="up"><i class="fas fa-caret-up"></i></div>\n                            <div><i class="fas fa-caret-left"></i></div>\n                            <div><i class="fas fa-caret-down"></i></div>\n                            <div><i class="fas fa-caret-right"></i></div>\n                        </div>\n                        <div class="desc">Pan Canvas</div>\n                    </li>\n                </ul>\n            </div>\n            <div class="col">\n                <h2>Modes</h2>\n                <ul class="keys">\n                    <li>\n                        <div class="key"><div>L</div></div>\n                        <div class="desc">Draw Lines</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>A</div></div>\n                        <div class="desc">Draw Area</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>I</div></div>\n                        <div class="desc">Add Icon</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>B</div></div>\n                        <div class="desc">Add Label</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>M</div></div>\n                        <div class="desc">Add Image</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>G</div></div>\n                        <div class="desc">Add Generic Component</div>\n                    </li>\n                </ul>\n\n                <h2>Items</h2>\n                <ul class="keys">\n                    <li>\n                        <div class="key"><div>S</div></div>\n                        <div class="desc">Rotate Item(s) left</div>\n                    </li>\n                    <li>\n                        <div class="key"><div>D</div></div>\n                        <div class="desc">Rotate Item(s) right</div>\n                    </li>\n                </ul>\n                \n                <div class="mouse-controls">\n                    <h2>Mouse</h2>\n                    <div class="descriptions">\n                        <div>\n                            Select, Drag & Resize\n                        </div>\n                        <div>\n                            Turn: Zoom<br />\n                            Press & Drag: Pan Canvas\n                        </div>\n                        <div>\n                            Cancel current interaction\n                        </div>\n                    </div>\n                    <div class="mouse">\n                        <div class="lmb"></div>\n                        <div class="mmb"><div></div></div>\n                        <div class="rmb"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,
        methods: {
            close() {
                this.$parent.$data.show = false
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    __webpack_require__(39);
    module.exports = __webpack_require__(216)
}, function(module, exports, __webpack_require__) {
    THREE = __webpack_require__(40);
    const Canvas = __webpack_require__(41);
    const State = __webpack_require__(90);
    const ObjectCreator = __webpack_require__(95);
    const InteractionMode = __webpack_require__(102);
    const UserSettings = __webpack_require__(104);
    const AccountData = __webpack_require__(105);
    const ObjectFinder = __webpack_require__(106);
    const ObjectRegistry = __webpack_require__(107);
    const EventEmitter = __webpack_require__(2);
    const ErrorReporter = __webpack_require__(108);
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    __webpack_require__(109);
    __webpack_require__(203);
    __webpack_require__(209);
    __webpack_require__(211);
    __webpack_require__(212);
    __webpack_require__(213);
    Vue.http.options.root = config.httpRoot;
    Vue.http.interceptors.push((request, next) => {
        next(response => {
            response.request = request;
            window.requestAnimationFrame(() => {
                if (response.status !== 200 && response.request.globalCatchError !== false) {
                    window.canvas.app.$refs.fullscreenOverlay.showHttpError(response)
                }
            })
        })
    });
    window.onload = function() {
        if (window.abortLaunch) {
            return
        }
        var app = new Vue({
            el: "#app-container",
            data: {
                view: C.VIEWS.ADD
            }
        });
        app.errorReporter = new ErrorReporter(app.$http, app);
        app.accountData = new AccountData(app.$http);
        app.userSettings = new UserSettings(app.$http);
        app.eventHub = new EventEmitter;
        app.canvas = new Canvas(document.querySelector(".canvas-container"), app);
        app.objects = new ObjectRegistry(app.canvas);
        app.state = new State(app);
        app.objectCreator = new ObjectCreator(app);
        app.interactionMode = new InteractionMode(app.canvas);
        app.objectFinder = new ObjectFinder(app);
        /*app.trackEvent = function(category, action, label, value) {
            /f (!window.ga || typeof ga.getByName !== "function") {
                return
            }
            try {
                const tracker = ga.getByName("arc");
                if (!tracker) {
                    return
                }
                tracker.send({
                    hitType: "event",
                    eventCategory: category,
                    eventAction: action,
                    eventLabel: label,
                    eventValue: value || 0
                })
            } catch (e) {}
        };*/
        var userDataReady = false;
        var userSettingsReady = false;
        var isInitialised = false;
        function checkInit() {
            if (!userDataReady || !userSettingsReady) {
                return
            }
            if (isInitialised) {
                return
            }
            isInitialised = true;
            app.$emit("init");
            app.$emit("userDataChange");
            app.eventHub.emit("init");
            if (app.userSettings.get("showTipOfDay")) {
                app.$refs.fullscreenOverlay.showTipOfDay()
            }
        }
        app.accountData.load(() => {
            /*if (window.ga) {
                ga("set", "userId", app.accountData.get("userId"));
                ga("create", {
                    trackingId: "UA-119530534-1",
                    cookieDomain: "auto",
                    userId: app.accountData.get("userId"),
                    name: "arc"
                })
            }*/
            userDataReady = true;
            checkInit()
        });
        app.userSettings.on("ready", () => {
            userSettingsReady = true;
            checkInit()
        })
    }
}, function(module, exports, __webpack_require__) {
    (function(global, factory) {
        true ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global.THREE = {})
    })(this, function(exports) {
        "use strict";
        if (Number.EPSILON === undefined) {
            Number.EPSILON = Math.pow(2, -52)
        }
        if (Number.isInteger === undefined) {
            Number.isInteger = function(value) {
                return typeof value === "number" && isFinite(value) && Math.floor(value) === value
            }
        }
        if (Math.sign === undefined) {
            Math.sign = function(x) {
                return x < 0 ? -1 : x > 0 ? 1 : +x
            }
        }
        if ("name" in Function.prototype === false) {
            Object.defineProperty(Function.prototype, "name", {
                get: function() {
                    return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]
                }
            })
        }
        if (Object.assign === undefined) {
            (function() {
                Object.assign = function(target) {
                    if (target === undefined || target === null) {
                        throw new TypeError("Cannot convert undefined or null to object")
                    }
                    var output = Object(target);
                    for (var index = 1; index < arguments.length; index++) {
                        var source = arguments[index];
                        if (source !== undefined && source !== null) {
                            for (var nextKey in source) {
                                if (Object.prototype.hasOwnProperty.call(source, nextKey)) {
                                    output[nextKey] = source[nextKey]
                                }
                            }
                        }
                    }
                    return output
                }
            })()
        }
        function EventDispatcher() {}
        Object.assign(EventDispatcher.prototype, {
            addEventListener: function(type, listener) {
                if (this._listeners === undefined)
                    this._listeners = {};
                var listeners = this._listeners;
                if (listeners[type] === undefined) {
                    listeners[type] = []
                }
                if (listeners[type].indexOf(listener) === -1) {
                    listeners[type].push(listener)
                }
            },
            hasEventListener: function(type, listener) {
                if (this._listeners === undefined)
                    return false;
                var listeners = this._listeners;
                return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1
            },
            removeEventListener: function(type, listener) {
                if (this._listeners === undefined)
                    return;
                var listeners = this._listeners;
                var listenerArray = listeners[type];
                if (listenerArray !== undefined) {
                    var index = listenerArray.indexOf(listener);
                    if (index !== -1) {
                        listenerArray.splice(index, 1)
                    }
                }
            },
            dispatchEvent: function(event) {
                if (this._listeners === undefined)
                    return;
                var listeners = this._listeners;
                var listenerArray = listeners[event.type];
                if (listenerArray !== undefined) {
                    event.target = this;
                    var array = listenerArray.slice(0);
                    for (var i = 0, l = array.length; i < l; i++) {
                        array[i].call(this, event)
                    }
                }
            }
        });
        var REVISION = "95";
        var MOUSE = {
            LEFT: 0,
            MIDDLE: 1,
            RIGHT: 2
        };
        var CullFaceNone = 0;
        var CullFaceBack = 1;
        var CullFaceFront = 2;
        var CullFaceFrontBack = 3;
        var FrontFaceDirectionCW = 0;
        var FrontFaceDirectionCCW = 1;
        var BasicShadowMap = 0;
        var PCFShadowMap = 1;
        var PCFSoftShadowMap = 2;
        var FrontSide = 0;
        var BackSide = 1;
        var DoubleSide = 2;
        var FlatShading = 1;
        var SmoothShading = 2;
        var NoColors = 0;
        var FaceColors = 1;
        var VertexColors = 2;
        var NoBlending = 0;
        var NormalBlending = 1;
        var AdditiveBlending = 2;
        var SubtractiveBlending = 3;
        var MultiplyBlending = 4;
        var CustomBlending = 5;
        var AddEquation = 100;
        var SubtractEquation = 101;
        var ReverseSubtractEquation = 102;
        var MinEquation = 103;
        var MaxEquation = 104;
        var ZeroFactor = 200;
        var OneFactor = 201;
        var SrcColorFactor = 202;
        var OneMinusSrcColorFactor = 203;
        var SrcAlphaFactor = 204;
        var OneMinusSrcAlphaFactor = 205;
        var DstAlphaFactor = 206;
        var OneMinusDstAlphaFactor = 207;
        var DstColorFactor = 208;
        var OneMinusDstColorFactor = 209;
        var SrcAlphaSaturateFactor = 210;
        var NeverDepth = 0;
        var AlwaysDepth = 1;
        var LessDepth = 2;
        var LessEqualDepth = 3;
        var EqualDepth = 4;
        var GreaterEqualDepth = 5;
        var GreaterDepth = 6;
        var NotEqualDepth = 7;
        var MultiplyOperation = 0;
        var MixOperation = 1;
        var AddOperation = 2;
        var NoToneMapping = 0;
        var LinearToneMapping = 1;
        var ReinhardToneMapping = 2;
        var Uncharted2ToneMapping = 3;
        var CineonToneMapping = 4;
        var UVMapping = 300;
        var CubeReflectionMapping = 301;
        var CubeRefractionMapping = 302;
        var EquirectangularReflectionMapping = 303;
        var EquirectangularRefractionMapping = 304;
        var SphericalReflectionMapping = 305;
        var CubeUVReflectionMapping = 306;
        var CubeUVRefractionMapping = 307;
        var RepeatWrapping = 1e3;
        var ClampToEdgeWrapping = 1001;
        var MirroredRepeatWrapping = 1002;
        var NearestFilter = 1003;
        var NearestMipMapNearestFilter = 1004;
        var NearestMipMapLinearFilter = 1005;
        var LinearFilter = 1006;
        var LinearMipMapNearestFilter = 1007;
        var LinearMipMapLinearFilter = 1008;
        var UnsignedByteType = 1009;
        var ByteType = 1010;
        var ShortType = 1011;
        var UnsignedShortType = 1012;
        var IntType = 1013;
        var UnsignedIntType = 1014;
        var FloatType = 1015;
        var HalfFloatType = 1016;
        var UnsignedShort4444Type = 1017;
        var UnsignedShort5551Type = 1018;
        var UnsignedShort565Type = 1019;
        var UnsignedInt248Type = 1020;
        var AlphaFormat = 1021;
        var RGBFormat = 1022;
        var RGBAFormat = 1023;
        var LuminanceFormat = 1024;
        var LuminanceAlphaFormat = 1025;
        var RGBEFormat = RGBAFormat;
        var DepthFormat = 1026;
        var DepthStencilFormat = 1027;
        var RGB_S3TC_DXT1_Format = 33776;
        var RGBA_S3TC_DXT1_Format = 33777;
        var RGBA_S3TC_DXT3_Format = 33778;
        var RGBA_S3TC_DXT5_Format = 33779;
        var RGB_PVRTC_4BPPV1_Format = 35840;
        var RGB_PVRTC_2BPPV1_Format = 35841;
        var RGBA_PVRTC_4BPPV1_Format = 35842;
        var RGBA_PVRTC_2BPPV1_Format = 35843;
        var RGB_ETC1_Format = 36196;
        var RGBA_ASTC_4x4_Format = 37808;
        var RGBA_ASTC_5x4_Format = 37809;
        var RGBA_ASTC_5x5_Format = 37810;
        var RGBA_ASTC_6x5_Format = 37811;
        var RGBA_ASTC_6x6_Format = 37812;
        var RGBA_ASTC_8x5_Format = 37813;
        var RGBA_ASTC_8x6_Format = 37814;
        var RGBA_ASTC_8x8_Format = 37815;
        var RGBA_ASTC_10x5_Format = 37816;
        var RGBA_ASTC_10x6_Format = 37817;
        var RGBA_ASTC_10x8_Format = 37818;
        var RGBA_ASTC_10x10_Format = 37819;
        var RGBA_ASTC_12x10_Format = 37820;
        var RGBA_ASTC_12x12_Format = 37821;
        var LoopOnce = 2200;
        var LoopRepeat = 2201;
        var LoopPingPong = 2202;
        var InterpolateDiscrete = 2300;
        var InterpolateLinear = 2301;
        var InterpolateSmooth = 2302;
        var ZeroCurvatureEnding = 2400;
        var ZeroSlopeEnding = 2401;
        var WrapAroundEnding = 2402;
        var TrianglesDrawMode = 0;
        var TriangleStripDrawMode = 1;
        var TriangleFanDrawMode = 2;
        var LinearEncoding = 3e3;
        var sRGBEncoding = 3001;
        var GammaEncoding = 3007;
        var RGBEEncoding = 3002;
        var LogLuvEncoding = 3003;
        var RGBM7Encoding = 3004;
        var RGBM16Encoding = 3005;
        var RGBDEncoding = 3006;
        var BasicDepthPacking = 3200;
        var RGBADepthPacking = 3201;
        var TangentSpaceNormalMap = 0;
        var ObjectSpaceNormalMap = 1;
        var _Math = {
            DEG2RAD: Math.PI / 180,
            RAD2DEG: 180 / Math.PI,
            generateUUID: function() {
                var lut = [];
                for (var i = 0; i < 256; i++) {
                    lut[i] = (i < 16 ? "0" : "") + i.toString(16)
                }
                return function generateUUID() {
                    var d0 = Math.random() * 4294967295 | 0;
                    var d1 = Math.random() * 4294967295 | 0;
                    var d2 = Math.random() * 4294967295 | 0;
                    var d3 = Math.random() * 4294967295 | 0;
                    var uuid = lut[d0 & 255] + lut[d0 >> 8 & 255] + lut[d0 >> 16 & 255] + lut[d0 >> 24 & 255] + "-" + lut[d1 & 255] + lut[d1 >> 8 & 255] + "-" + lut[d1 >> 16 & 15 | 64] + lut[d1 >> 24 & 255] + "-" + lut[d2 & 63 | 128] + lut[d2 >> 8 & 255] + "-" + lut[d2 >> 16 & 255] + lut[d2 >> 24 & 255] + lut[d3 & 255] + lut[d3 >> 8 & 255] + lut[d3 >> 16 & 255] + lut[d3 >> 24 & 255];
                    return uuid.toUpperCase()
                }
            }(),
            clamp: function(value, min, max) {
                return Math.max(min, Math.min(max, value))
            },
            euclideanModulo: function(n, m) {
                return (n % m + m) % m
            },
            mapLinear: function(x, a1, a2, b1, b2) {
                return b1 + (x - a1) * (b2 - b1) / (a2 - a1)
            },
            lerp: function(x, y, t) {
                return (1 - t) * x + t * y
            },
            smoothstep: function(x, min, max) {
                if (x <= min)
                    return 0;
                if (x >= max)
                    return 1;
                x = (x - min) / (max - min);
                return x * x * (3 - 2 * x)
            },
            smootherstep: function(x, min, max) {
                if (x <= min)
                    return 0;
                if (x >= max)
                    return 1;
                x = (x - min) / (max - min);
                return x * x * x * (x * (x * 6 - 15) + 10)
            },
            randInt: function(low, high) {
                return low + Math.floor(Math.random() * (high - low + 1))
            },
            randFloat: function(low, high) {
                return low + Math.random() * (high - low)
            },
            randFloatSpread: function(range) {
                return range * (.5 - Math.random())
            },
            degToRad: function(degrees) {
                return degrees * _Math.DEG2RAD
            },
            radToDeg: function(radians) {
                return radians * _Math.RAD2DEG
            },
            isPowerOfTwo: function(value) {
                return (value & value - 1) === 0 && value !== 0
            },
            ceilPowerOfTwo: function(value) {
                return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2))
            },
            floorPowerOfTwo: function(value) {
                return Math.pow(2, Math.floor(Math.log(value) / Math.LN2))
            }
        };
        function Vector2(x, y) {
            this.x = x || 0;
            this.y = y || 0
        }
        Object.defineProperties(Vector2.prototype, {
            width: {
                get: function() {
                    return this.x
                },
                set: function(value) {
                    this.x = value
                }
            },
            height: {
                get: function() {
                    return this.y
                },
                set: function(value) {
                    this.y = value
                }
            }
        });
        Object.assign(Vector2.prototype, {
            isVector2: true,
            set: function(x, y) {
                this.x = x;
                this.y = y;
                return this
            },
            setScalar: function(scalar) {
                this.x = scalar;
                this.y = scalar;
                return this
            },
            setX: function(x) {
                this.x = x;
                return this
            },
            setY: function(y) {
                this.y = y;
                return this
            },
            setComponent: function(index, value) {
                switch (index) {
                case 0:
                    this.x = value;
                    break;
                case 1:
                    this.y = value;
                    break;
                default:
                    throw new Error("index is out of range: " + index)
                }
                return this
            },
            getComponent: function(index) {
                switch (index) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                default:
                    throw new Error("index is out of range: " + index)
                }
            },
            clone: function() {
                return new this.constructor(this.x, this.y)
            },
            copy: function(v) {
                this.x = v.x;
                this.y = v.y;
                return this
            },
            add: function(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
                    return this.addVectors(v, w)
                }
                this.x += v.x;
                this.y += v.y;
                return this
            },
            addScalar: function(s) {
                this.x += s;
                this.y += s;
                return this
            },
            addVectors: function(a, b) {
                this.x = a.x + b.x;
                this.y = a.y + b.y;
                return this
            },
            addScaledVector: function(v, s) {
                this.x += v.x * s;
                this.y += v.y * s;
                return this
            },
            sub: function(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
                    return this.subVectors(v, w)
                }
                this.x -= v.x;
                this.y -= v.y;
                return this
            },
            subScalar: function(s) {
                this.x -= s;
                this.y -= s;
                return this
            },
            subVectors: function(a, b) {
                this.x = a.x - b.x;
                this.y = a.y - b.y;
                return this
            },
            multiply: function(v) {
                this.x *= v.x;
                this.y *= v.y;
                return this
            },
            multiplyScalar: function(scalar) {
                this.x *= scalar;
                this.y *= scalar;
                return this
            },
            divide: function(v) {
                this.x /= v.x;
                this.y /= v.y;
                return this
            },
            divideScalar: function(scalar) {
                return this.multiplyScalar(1 / scalar)
            },
            applyMatrix3: function(m) {
                var x = this.x,
                    y = this.y;
                var e = m.elements;
                this.x = e[0] * x + e[3] * y + e[6];
                this.y = e[1] * x + e[4] * y + e[7];
                return this
            },
            min: function(v) {
                this.x = Math.min(this.x, v.x);
                this.y = Math.min(this.y, v.y);
                return this
            },
            max: function(v) {
                this.x = Math.max(this.x, v.x);
                this.y = Math.max(this.y, v.y);
                return this
            },
            clamp: function(min, max) {
                this.x = Math.max(min.x, Math.min(max.x, this.x));
                this.y = Math.max(min.y, Math.min(max.y, this.y));
                return this
            },
            clampScalar: function() {
                var min = new Vector2;
                var max = new Vector2;
                return function clampScalar(minVal, maxVal) {
                    min.set(minVal, minVal);
                    max.set(maxVal, maxVal);
                    return this.clamp(min, max)
                }
            }(),
            clampLength: function(min, max) {
                var length = this.length();
                return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)))
            },
            floor: function() {
                this.x = Math.floor(this.x);
                this.y = Math.floor(this.y);
                return this
            },
            ceil: function() {
                this.x = Math.ceil(this.x);
                this.y = Math.ceil(this.y);
                return this
            },
            round: function() {
                this.x = Math.round(this.x);
                this.y = Math.round(this.y);
                return this
            },
            roundToZero: function() {
                this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
                return this
            },
            negate: function() {
                this.x = -this.x;
                this.y = -this.y;
                return this
            },
            dot: function(v) {
                return this.x * v.x + this.y * v.y
            },
            cross: function(v) {
                return this.x * v.y - this.y * v.x
            },
            lengthSq: function() {
                return this.x * this.x + this.y * this.y
            },
            length: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y)
            },
            manhattanLength: function() {
                return Math.abs(this.x) + Math.abs(this.y)
            },
            normalize: function() {
                return this.divideScalar(this.length() || 1)
            },
            angle: function() {
                var angle = Math.atan2(this.y, this.x);
                if (angle < 0)
                    angle += 2 * Math.PI;
                return angle
            },
            distanceTo: function(v) {
                return Math.sqrt(this.distanceToSquared(v))
            },
            distanceToSquared: function(v) {
                var dx = this.x - v.x,
                    dy = this.y - v.y;
                return dx * dx + dy * dy
            },
            manhattanDistanceTo: function(v) {
                return Math.abs(this.x - v.x) + Math.abs(this.y - v.y)
            },
            setLength: function(length) {
                return this.normalize().multiplyScalar(length)
            },
            lerp: function(v, alpha) {
                this.x += (v.x - this.x) * alpha;
                this.y += (v.y - this.y) * alpha;
                return this
            },
            lerpVectors: function(v1, v2, alpha) {
                return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1)
            },
            equals: function(v) {
                return v.x === this.x && v.y === this.y
            },
            fromArray: function(array, offset) {
                if (offset === undefined)
                    offset = 0;
                this.x = array[offset];
                this.y = array[offset + 1];
                return this
            },
            toArray: function(array, offset) {
                if (array === undefined)
                    array = [];
                if (offset === undefined)
                    offset = 0;
                array[offset] = this.x;
                array[offset + 1] = this.y;
                return array
            },
            fromBufferAttribute: function(attribute, index, offset) {
                if (offset !== undefined) {
                    console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().")
                }
                this.x = attribute.getX(index);
                this.y = attribute.getY(index);
                return this
            },
            rotateAround: function(center, angle) {
                var c = Math.cos(angle),
                    s = Math.sin(angle);
                var x = this.x - center.x;
                var y = this.y - center.y;
                this.x = x * c - y * s + center.x;
                this.y = x * s + y * c + center.y;
                return this
            }
        });
        function Matrix4() {
            this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
            if (arguments.length > 0) {
                console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
            }
        }
        Object.assign(Matrix4.prototype, {
            isMatrix4: true,
            set: function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
                var te = this.elements;
                te[0] = n11;
                te[4] = n12;
                te[8] = n13;
                te[12] = n14;
                te[1] = n21;
                te[5] = n22;
                te[9] = n23;
                te[13] = n24;
                te[2] = n31;
                te[6] = n32;
                te[10] = n33;
                te[14] = n34;
                te[3] = n41;
                te[7] = n42;
                te[11] = n43;
                te[15] = n44;
                return this
            },
            identity: function() {
                this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
                return this
            },
            clone: function() {
                return (new Matrix4).fromArray(this.elements)
            },
            copy: function(m) {
                var te = this.elements;
                var me = m.elements;
                te[0] = me[0];
                te[1] = me[1];
                te[2] = me[2];
                te[3] = me[3];
                te[4] = me[4];
                te[5] = me[5];
                te[6] = me[6];
                te[7] = me[7];
                te[8] = me[8];
                te[9] = me[9];
                te[10] = me[10];
                te[11] = me[11];
                te[12] = me[12];
                te[13] = me[13];
                te[14] = me[14];
                te[15] = me[15];
                return this
            },
            copyPosition: function(m) {
                var te = this.elements,
                    me = m.elements;
                te[12] = me[12];
                te[13] = me[13];
                te[14] = me[14];
                return this
            },
            extractBasis: function(xAxis, yAxis, zAxis) {
                xAxis.setFromMatrixColumn(this, 0);
                yAxis.setFromMatrixColumn(this, 1);
                zAxis.setFromMatrixColumn(this, 2);
                return this
            },
            makeBasis: function(xAxis, yAxis, zAxis) {
                this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
                return this
            },
            extractRotation: function() {
                var v1 = new Vector3;
                return function extractRotation(m) {
                    var te = this.elements;
                    var me = m.elements;
                    var scaleX = 1 / v1.setFromMatrixColumn(m, 0).length();
                    var scaleY = 1 / v1.setFromMatrixColumn(m, 1).length();
                    var scaleZ = 1 / v1.setFromMatrixColumn(m, 2).length();
                    te[0] = me[0] * scaleX;
                    te[1] = me[1] * scaleX;
                    te[2] = me[2] * scaleX;
                    te[3] = 0;
                    te[4] = me[4] * scaleY;
                    te[5] = me[5] * scaleY;
                    te[6] = me[6] * scaleY;
                    te[7] = 0;
                    te[8] = me[8] * scaleZ;
                    te[9] = me[9] * scaleZ;
                    te[10] = me[10] * scaleZ;
                    te[11] = 0;
                    te[12] = 0;
                    te[13] = 0;
                    te[14] = 0;
                    te[15] = 1;
                    return this
                }
            }(),
            makeRotationFromEuler: function(euler) {
                if (!(euler && euler.isEuler)) {
                    console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.")
                }
                var te = this.elements;
                var x = euler.x,
                    y = euler.y,
                    z = euler.z;
                var a = Math.cos(x),
                    b = Math.sin(x);
                var c = Math.cos(y),
                    d = Math.sin(y);
                var e = Math.cos(z),
                    f = Math.sin(z);
                if (euler.order === "XYZ") {
                    var ae = a * e,
                        af = a * f,
                        be = b * e,
                        bf = b * f;
                    te[0] = c * e;
                    te[4] = -c * f;
                    te[8] = d;
                    te[1] = af + be * d;
                    te[5] = ae - bf * d;
                    te[9] = -b * c;
                    te[2] = bf - ae * d;
                    te[6] = be + af * d;
                    te[10] = a * c
                } else if (euler.order === "YXZ") {
                    var ce = c * e,
                        cf = c * f,
                        de = d * e,
                        df = d * f;
                    te[0] = ce + df * b;
                    te[4] = de * b - cf;
                    te[8] = a * d;
                    te[1] = a * f;
                    te[5] = a * e;
                    te[9] = -b;
                    te[2] = cf * b - de;
                    te[6] = df + ce * b;
                    te[10] = a * c
                } else if (euler.order === "ZXY") {
                    var ce = c * e,
                        cf = c * f,
                        de = d * e,
                        df = d * f;
                    te[0] = ce - df * b;
                    te[4] = -a * f;
                    te[8] = de + cf * b;
                    te[1] = cf + de * b;
                    te[5] = a * e;
                    te[9] = df - ce * b;
                    te[2] = -a * d;
                    te[6] = b;
                    te[10] = a * c
                } else if (euler.order === "ZYX") {
                    var ae = a * e,
                        af = a * f,
                        be = b * e,
                        bf = b * f;
                    te[0] = c * e;
                    te[4] = be * d - af;
                    te[8] = ae * d + bf;
                    te[1] = c * f;
                    te[5] = bf * d + ae;
                    te[9] = af * d - be;
                    te[2] = -d;
                    te[6] = b * c;
                    te[10] = a * c
                } else if (euler.order === "YZX") {
                    var ac = a * c,
                        ad = a * d,
                        bc = b * c,
                        bd = b * d;
                    te[0] = c * e;
                    te[4] = bd - ac * f;
                    te[8] = bc * f + ad;
                    te[1] = f;
                    te[5] = a * e;
                    te[9] = -b * e;
                    te[2] = -d * e;
                    te[6] = ad * f + bc;
                    te[10] = ac - bd * f
                } else if (euler.order === "XZY") {
                    var ac = a * c,
                        ad = a * d,
                        bc = b * c,
                        bd = b * d;
                    te[0] = c * e;
                    te[4] = -f;
                    te[8] = d * e;
                    te[1] = ac * f + bd;
                    te[5] = a * e;
                    te[9] = ad * f - bc;
                    te[2] = bc * f - ad;
                    te[6] = b * e;
                    te[10] = bd * f + ac
                }
                te[3] = 0;
                te[7] = 0;
                te[11] = 0;
                te[12] = 0;
                te[13] = 0;
                te[14] = 0;
                te[15] = 1;
                return this
            },
            makeRotationFromQuaternion: function() {
                var zero = new Vector3(0, 0, 0);
                var one = new Vector3(1, 1, 1);
                return function makeRotationFromQuaternion(q) {
                    return this.compose(zero, q, one)
                }
            }(),
            lookAt: function() {
                var x = new Vector3;
                var y = new Vector3;
                var z = new Vector3;
                return function lookAt(eye, target, up) {
                    var te = this.elements;
                    z.subVectors(eye, target);
                    if (z.lengthSq() === 0) {
                        z.z = 1
                    }
                    z.normalize();
                    x.crossVectors(up, z);
                    if (x.lengthSq() === 0) {
                        if (Math.abs(up.z) === 1) {
                            z.x += 1e-4
                        } else {
                            z.z += 1e-4
                        }
                        z.normalize();
                        x.crossVectors(up, z)
                    }
                    x.normalize();
                    y.crossVectors(z, x);
                    te[0] = x.x;
                    te[4] = y.x;
                    te[8] = z.x;
                    te[1] = x.y;
                    te[5] = y.y;
                    te[9] = z.y;
                    te[2] = x.z;
                    te[6] = y.z;
                    te[10] = z.z;
                    return this
                }
            }(),
            multiply: function(m, n) {
                if (n !== undefined) {
                    console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");
                    return this.multiplyMatrices(m, n)
                }
                return this.multiplyMatrices(this, m)
            },
            premultiply: function(m) {
                return this.multiplyMatrices(m, this)
            },
            multiplyMatrices: function(a, b) {
                var ae = a.elements;
                var be = b.elements;
                var te = this.elements;
                var a11 = ae[0],
                    a12 = ae[4],
                    a13 = ae[8],
                    a14 = ae[12];
                var a21 = ae[1],
                    a22 = ae[5],
                    a23 = ae[9],
                    a24 = ae[13];
                var a31 = ae[2],
                    a32 = ae[6],
                    a33 = ae[10],
                    a34 = ae[14];
                var a41 = ae[3],
                    a42 = ae[7],
                    a43 = ae[11],
                    a44 = ae[15];
                var b11 = be[0],
                    b12 = be[4],
                    b13 = be[8],
                    b14 = be[12];
                var b21 = be[1],
                    b22 = be[5],
                    b23 = be[9],
                    b24 = be[13];
                var b31 = be[2],
                    b32 = be[6],
                    b33 = be[10],
                    b34 = be[14];
                var b41 = be[3],
                    b42 = be[7],
                    b43 = be[11],
                    b44 = be[15];
                te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
                te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
                te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
                te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
                te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
                te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
                te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
                te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
                te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
                te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
                te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
                te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
                te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
                te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
                te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
                te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
                return this
            },
            multiplyScalar: function(s) {
                var te = this.elements;
                te[0] *= s;
                te[4] *= s;
                te[8] *= s;
                te[12] *= s;
                te[1] *= s;
                te[5] *= s;
                te[9] *= s;
                te[13] *= s;
                te[2] *= s;
                te[6] *= s;
                te[10] *= s;
                te[14] *= s;
                te[3] *= s;
                te[7] *= s;
                te[11] *= s;
                te[15] *= s;
                return this
            },
            applyToBufferAttribute: function() {
                var v1 = new Vector3;
                return function applyToBufferAttribute(attribute) {
                    for (var i = 0, l = attribute.count; i < l; i++) {
                        v1.x = attribute.getX(i);
                        v1.y = attribute.getY(i);
                        v1.z = attribute.getZ(i);
                        v1.applyMatrix4(this);
                        attribute.setXYZ(i, v1.x, v1.y, v1.z)
                    }
                    return attribute
                }
            }(),
            determinant: function() {
                var te = this.elements;
                var n11 = te[0],
                    n12 = te[4],
                    n13 = te[8],
                    n14 = te[12];
                var n21 = te[1],
                    n22 = te[5],
                    n23 = te[9],
                    n24 = te[13];
                var n31 = te[2],
                    n32 = te[6],
                    n33 = te[10],
                    n34 = te[14];
                var n41 = te[3],
                    n42 = te[7],
                    n43 = te[11],
                    n44 = te[15];
                return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31)
            },
            transpose: function() {
                var te = this.elements;
                var tmp;
                tmp = te[1];
                te[1] = te[4];
                te[4] = tmp;
                tmp = te[2];
                te[2] = te[8];
                te[8] = tmp;
                tmp = te[6];
                te[6] = te[9];
                te[9] = tmp;
                tmp = te[3];
                te[3] = te[12];
                te[12] = tmp;
                tmp = te[7];
                te[7] = te[13];
                te[13] = tmp;
                tmp = te[11];
                te[11] = te[14];
                te[14] = tmp;
                return this
            },
            setPosition: function(v) {
                var te = this.elements;
                te[12] = v.x;
                te[13] = v.y;
                te[14] = v.z;
                return this
            },
            getInverse: function(m, throwOnDegenerate) {
                var te = this.elements,
                    me = m.elements,
                    n11 = me[0],
                    n21 = me[1],
                    n31 = me[2],
                    n41 = me[3],
                    n12 = me[4],
                    n22 = me[5],
                    n32 = me[6],
                    n42 = me[7],
                    n13 = me[8],
                    n23 = me[9],
                    n33 = me[10],
                    n43 = me[11],
                    n14 = me[12],
                    n24 = me[13],
                    n34 = me[14],
                    n44 = me[15],
                    t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
                    t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
                    t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
                    t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
                var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
                if (det === 0) {
                    var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                    if (throwOnDegenerate === true) {
                        throw new Error(msg)
                    } else {
                        console.warn(msg)
                    }
                    return this.identity()
                }
                var detInv = 1 / det;
                te[0] = t11 * detInv;
                te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
                te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
                te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
                te[4] = t12 * detInv;
                te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
                te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
                te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
                te[8] = t13 * detInv;
                te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
                te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
                te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
                te[12] = t14 * detInv;
                te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
                te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
                te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
                return this
            },
            scale: function(v) {
                var te = this.elements;
                var x = v.x,
                    y = v.y,
                    z = v.z;
                te[0] *= x;
                te[4] *= y;
                te[8] *= z;
                te[1] *= x;
                te[5] *= y;
                te[9] *= z;
                te[2] *= x;
                te[6] *= y;
                te[10] *= z;
                te[3] *= x;
                te[7] *= y;
                te[11] *= z;
                return this
            },
            getMaxScaleOnAxis: function() {
                var te = this.elements;
                var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
                var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
                var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
                return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq))
            },
            makeTranslation: function(x, y, z) {
                this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
                return this
            },
            makeRotationX: function(theta) {
                var c = Math.cos(theta),
                    s = Math.sin(theta);
                this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
                return this
            },
            makeRotationY: function(theta) {
                var c = Math.cos(theta),
                    s = Math.sin(theta);
                this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
                return this
            },
            makeRotationZ: function(theta) {
                var c = Math.cos(theta),
                    s = Math.sin(theta);
                this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
                return this
            },
            makeRotationAxis: function(axis, angle) {
                var c = Math.cos(angle);
                var s = Math.sin(angle);
                var t = 1 - c;
                var x = axis.x,
                    y = axis.y,
                    z = axis.z;
                var tx = t * x,
                    ty = t * y;
                this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
                return this
            },
            makeScale: function(x, y, z) {
                this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
                return this
            },
            makeShear: function(x, y, z) {
                this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);
                return this
            },
            compose: function(position, quaternion, scale) {
                var te = this.elements;
                var x = quaternion._x,
                    y = quaternion._y,
                    z = quaternion._z,
                    w = quaternion._w;
                var x2 = x + x,
                    y2 = y + y,
                    z2 = z + z;
                var xx = x * x2,
                    xy = x * y2,
                    xz = x * z2;
                var yy = y * y2,
                    yz = y * z2,
                    zz = z * z2;
                var wx = w * x2,
                    wy = w * y2,
                    wz = w * z2;
                var sx = scale.x,
                    sy = scale.y,
                    sz = scale.z;
                te[0] = (1 - (yy + zz)) * sx;
                te[1] = (xy + wz) * sx;
                te[2] = (xz - wy) * sx;
                te[3] = 0;
                te[4] = (xy - wz) * sy;
                te[5] = (1 - (xx + zz)) * sy;
                te[6] = (yz + wx) * sy;
                te[7] = 0;
                te[8] = (xz + wy) * sz;
                te[9] = (yz - wx) * sz;
                te[10] = (1 - (xx + yy)) * sz;
                te[11] = 0;
                te[12] = position.x;
                te[13] = position.y;
                te[14] = position.z;
                te[15] = 1;
                return this
            },
            decompose: function() {
                var vector = new Vector3;
                var matrix = new Matrix4;
                return function decompose(position, quaternion, scale) {
                    var te = this.elements;
                    var sx = vector.set(te[0], te[1], te[2]).length();
                    var sy = vector.set(te[4], te[5], te[6]).length();
                    var sz = vector.set(te[8], te[9], te[10]).length();
                    var det = this.determinant();
                    if (det < 0)
                        sx = -sx;
                    position.x = te[12];
                    position.y = te[13];
                    position.z = te[14];
                    matrix.copy(this);
                    var invSX = 1 / sx;
                    var invSY = 1 / sy;
                    var invSZ = 1 / sz;
                    matrix.elements[0] *= invSX;
                    matrix.elements[1] *= invSX;
                    matrix.elements[2] *= invSX;
                    matrix.elements[4] *= invSY;
                    matrix.elements[5] *= invSY;
                    matrix.elements[6] *= invSY;
                    matrix.elements[8] *= invSZ;
                    matrix.elements[9] *= invSZ;
                    matrix.elements[10] *= invSZ;
                    quaternion.setFromRotationMatrix(matrix);
                    scale.x = sx;
                    scale.y = sy;
                    scale.z = sz;
                    return this
                }
            }(),
            makePerspective: function(left, right, top, bottom, near, far) {
                if (far === undefined) {
                    console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.")
                }
                var te = this.elements;
                var x = 2 * near / (right - left);
                var y = 2 * near / (top - bottom);
                var a = (right + left) / (right - left);
                var b = (top + bottom) / (top - bottom);
                var c = -(far + near) / (far - near);
                var d = -2 * far * near / (far - near);
                te[0] = x;
                te[4] = 0;
                te[8] = a;
                te[12] = 0;
                te[1] = 0;
                te[5] = y;
                te[9] = b;
                te[13] = 0;
                te[2] = 0;
                te[6] = 0;
                te[10] = c;
                te[14] = d;
                te[3] = 0;
                te[7] = 0;
                te[11] = -1;
                te[15] = 0;
                return this
            },
            makeOrthographic: function(left, right, top, bottom, near, far) {
                var te = this.elements;
                var w = 1 / (right - left);
                var h = 1 / (top - bottom);
                var p = 1 / (far - near);
                var x = (right + left) * w;
                var y = (top + bottom) * h;
                var z = (far + near) * p;
                te[0] = 2 * w;
                te[4] = 0;
                te[8] = 0;
                te[12] = -x;
                te[1] = 0;
                te[5] = 2 * h;
                te[9] = 0;
                te[13] = -y;
                te[2] = 0;
                te[6] = 0;
                te[10] = -2 * p;
                te[14] = -z;
                te[3] = 0;
                te[7] = 0;
                te[11] = 0;
                te[15] = 1;
                return this
            },
            equals: function(matrix) {
                var te = this.elements;
                var me = matrix.elements;
                for (var i = 0; i < 16; i++) {
                    if (te[i] !== me[i])
                        return false
                }
                return true
            },
            fromArray: function(array, offset) {
                if (offset === undefined)
                    offset = 0;
                for (var i = 0; i < 16; i++) {
                    this.elements[i] = array[i + offset]
                }
                return this
            },
            toArray: function(array, offset) {
                if (array === undefined)
                    array = [];
                if (offset === undefined)
                    offset = 0;
                var te = this.elements;
                array[offset] = te[0];
                array[offset + 1] = te[1];
                array[offset + 2] = te[2];
                array[offset + 3] = te[3];
                array[offset + 4] = te[4];
                array[offset + 5] = te[5];
                array[offset + 6] = te[6];
                array[offset + 7] = te[7];
                array[offset + 8] = te[8];
                array[offset + 9] = te[9];
                array[offset + 10] = te[10];
                array[offset + 11] = te[11];
                array[offset + 12] = te[12];
                array[offset + 13] = te[13];
                array[offset + 14] = te[14];
                array[offset + 15] = te[15];
                return array
            }
        });
        function Quaternion(x, y, z, w) {
            this._x = x || 0;
            this._y = y || 0;
            this._z = z || 0;
            this._w = w !== undefined ? w : 1
        }
        Object.assign(Quaternion, {
            slerp: function(qa, qb, qm, t) {
                return qm.copy(qa).slerp(qb, t)
            },
            slerpFlat: function(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
                var x0 = src0[srcOffset0 + 0],
                    y0 = src0[srcOffset0 + 1],
                    z0 = src0[srcOffset0 + 2],
                    w0 = src0[srcOffset0 + 3],
                    x1 = src1[srcOffset1 + 0],
                    y1 = src1[srcOffset1 + 1],
                    z1 = src1[srcOffset1 + 2],
                    w1 = src1[srcOffset1 + 3];
                if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
                    var s = 1 - t,
                        cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
                        dir = cos >= 0 ? 1 : -1,
                        sqrSin = 1 - cos * cos;
                    if (sqrSin > Number.EPSILON) {
                        var sin = Math.sqrt(sqrSin),
                            len = Math.atan2(sin, cos * dir);
                        s = Math.sin(s * len) / sin;
                        t = Math.sin(t * len) / sin
                    }
                    var tDir = t * dir;
                    x0 = x0 * s + x1 * tDir;
                    y0 = y0 * s + y1 * tDir;
                    z0 = z0 * s + z1 * tDir;
                    w0 = w0 * s + w1 * tDir;
                    if (s === 1 - t) {
                        var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
                        x0 *= f;
                        y0 *= f;
                        z0 *= f;
                        w0 *= f
                    }
                }
                dst[dstOffset] = x0;
                dst[dstOffset + 1] = y0;
                dst[dstOffset + 2] = z0;
                dst[dstOffset + 3] = w0
            }
        });
        Object.defineProperties(Quaternion.prototype, {
            x: {
                get: function() {
                    return this._x
                },
                set: function(value) {
                    this._x = value;
                    this.onChangeCallback()
                }
            },
            y: {
                get: function() {
                    return this._y
                },
                set: function(value) {
                    this._y = value;
                    this.onChangeCallback()
                }
            },
            z: {
                get: function() {
                    return this._z
                },
                set: function(value) {
                    this._z = value;
                    this.onChangeCallback()
                }
            },
            w: {
                get: function() {
                    return this._w
                },
                set: function(value) {
                    this._w = value;
                    this.onChangeCallback()
                }
            }
        });
        Object.assign(Quaternion.prototype, {
            set: function(x, y, z, w) {
                this._x = x;
                this._y = y;
                this._z = z;
                this._w = w;
                this.onChangeCallback();
                return this
            },
            clone: function() {
                return new this.constructor(this._x, this._y, this._z, this._w)
            },
            copy: function(quaternion) {
                this._x = quaternion.x;
                this._y = quaternion.y;
                this._z = quaternion.z;
                this._w = quaternion.w;
                this.onChangeCallback();
                return this
            },
            setFromEuler: function(euler, update) {
                if (!(euler && euler.isEuler)) {
                    throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.")
                }
                var x = euler._x,
                    y = euler._y,
                    z = euler._z,
                    order = euler.order;
                var cos = Math.cos;
                var sin = Math.sin;
                var c1 = cos(x / 2);
                var c2 = cos(y / 2);
                var c3 = cos(z / 2);
                var s1 = sin(x / 2);
                var s2 = sin(y / 2);
                var s3 = sin(z / 2);
                if (order === "XYZ") {
                    this._x = s1 * c2 * c3 + c1 * s2 * s3;
                    this._y = c1 * s2 * c3 - s1 * c2 * s3;
                    this._z = c1 * c2 * s3 + s1 * s2 * c3;
                    this._w = c1 * c2 * c3 - s1 * s2 * s3
                } else if (order === "YXZ") {
                    this._x = s1 * c2 * c3 + c1 * s2 * s3;
                    this._y = c1 * s2 * c3 - s1 * c2 * s3;
                    this._z = c1 * c2 * s3 - s1 * s2 * c3;
                    this._w = c1 * c2 * c3 + s1 * s2 * s3
                } else if (order === "ZXY") {
                    this._x = s1 * c2 * c3 - c1 * s2 * s3;
                    this._y = c1 * s2 * c3 + s1 * c2 * s3;
                    this._z = c1 * c2 * s3 + s1 * s2 * c3;
                    this._w = c1 * c2 * c3 - s1 * s2 * s3
                } else if (order === "ZYX") {
                    this._x = s1 * c2 * c3 - c1 * s2 * s3;
                    this._y = c1 * s2 * c3 + s1 * c2 * s3;
                    this._z = c1 * c2 * s3 - s1 * s2 * c3;
                    this._w = c1 * c2 * c3 + s1 * s2 * s3
                } else if (order === "YZX") {
                    this._x = s1 * c2 * c3 + c1 * s2 * s3;
                    this._y = c1 * s2 * c3 + s1 * c2 * s3;
                    this._z = c1 * c2 * s3 - s1 * s2 * c3;
                    this._w = c1 * c2 * c3 - s1 * s2 * s3
                } else if (order === "XZY") {
                    this._x = s1 * c2 * c3 - c1 * s2 * s3;
                    this._y = c1 * s2 * c3 - s1 * c2 * s3;
                    this._z = c1 * c2 * s3 + s1 * s2 * c3;
                    this._w = c1 * c2 * c3 + s1 * s2 * s3
                }
                if (update !== false)
                    this.onChangeCallback();
                return this
            },
            setFromAxisAngle: function(axis, angle) {
                var halfAngle = angle / 2,
                    s = Math.sin(halfAngle);
                this._x = axis.x * s;
                this._y = axis.y * s;
                this._z = axis.z * s;
                this._w = Math.cos(halfAngle);
                this.onChangeCallback();
                return this
            },
            setFromRotationMatrix: function(m) {
                var te = m.elements,
                    m11 = te[0],
                    m12 = te[4],
                    m13 = te[8],
                    m21 = te[1],
                    m22 = te[5],
                    m23 = te[9],
                    m31 = te[2],
                    m32 = te[6],
                    m33 = te[10],
                    trace = m11 + m22 + m33,
                    s;
                if (trace > 0) {
                    s = .5 / Math.sqrt(trace + 1);
                    this._w = .25 / s;
                    this._x = (m32 - m23) * s;
                    this._y = (m13 - m31) * s;
                    this._z = (m21 - m12) * s
                } else if (m11 > m22 && m11 > m33) {
                    s = 2 * Math.sqrt(1 + m11 - m22 - m33);
                    this._w = (m32 - m23) / s;
                    this._x = .25 * s;
                    this._y = (m12 + m21) / s;
                    this._z = (m13 + m31) / s
                } else if (m22 > m33) {
                    s = 2 * Math.sqrt(1 + m22 - m11 - m33);
                    this._w = (m13 - m31) / s;
                    this._x = (m12 + m21) / s;
                    this._y = .25 * s;
                    this._z = (m23 + m32) / s
                } else {
                    s = 2 * Math.sqrt(1 + m33 - m11 - m22);
                    this._w = (m21 - m12) / s;
                    this._x = (m13 + m31) / s;
                    this._y = (m23 + m32) / s;
                    this._z = .25 * s
                }
                this.onChangeCallback();
                return this
            },
            setFromUnitVectors: function() {
                var v1 = new Vector3;
                var r;
                var EPS = 1e-6;
                return function setFromUnitVectors(vFrom, vTo) {
                    if (v1 === undefined)
                        v1 = new Vector3;
                    r = vFrom.dot(vTo) + 1;
                    if (r < EPS) {
                        r = 0;
                        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
                            v1.set(-vFrom.y, vFrom.x, 0)
                        } else {
                            v1.set(0, -vFrom.z, vFrom.y)
                        }
                    } else {
                        v1.crossVectors(vFrom, vTo)
                    }
                    this._x = v1.x;
                    this._y = v1.y;
                    this._z = v1.z;
                    this._w = r;
                    return this.normalize()
                }
            }(),
            angleTo: function(q) {
                return 2 * Math.acos(Math.abs(_Math.clamp(this.dot(q), -1, 1)))
            },
            rotateTowards: function(q, step) {
                var angle = this.angleTo(q);
                if (angle === 0)
                    return this;
                var t = Math.min(1, step / angle);
                this.slerp(q, t);
                return this
            },
            inverse: function() {
                return this.conjugate()
            },
            conjugate: function() {
                this._x *= -1;
                this._y *= -1;
                this._z *= -1;
                this.onChangeCallback();
                return this
            },
            dot: function(v) {
                return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w
            },
            lengthSq: function() {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
            },
            length: function() {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
            },
            normalize: function() {
                var l = this.length();
                if (l === 0) {
                    this._x = 0;
                    this._y = 0;
                    this._z = 0;
                    this._w = 1
                } else {
                    l = 1 / l;
                    this._x = this._x * l;
                    this._y = this._y * l;
                    this._z = this._z * l;
                    this._w = this._w * l
                }
                this.onChangeCallback();
                return this
            },
            multiply: function(q, p) {
                if (p !== undefined) {
                    console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");
                    return this.multiplyQuaternions(q, p)
                }
                return this.multiplyQuaternions(this, q)
            },
            premultiply: function(q) {
                return this.multiplyQuaternions(q, this)
            },
            multiplyQuaternions: function(a, b) {
                var qax = a._x,
                    qay = a._y,
                    qaz = a._z,
                    qaw = a._w;
                var qbx = b._x,
                    qby = b._y,
                    qbz = b._z,
                    qbw = b._w;
                this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
                this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
                this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
                this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
                this.onChangeCallback();
                return this
            },
            slerp: function(qb, t) {
                if (t === 0)
                    return this;
                if (t === 1)
                    return this.copy(qb);
                var x = this._x,
                    y = this._y,
                    z = this._z,
                    w = this._w;
                var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
                if (cosHalfTheta < 0) {
                    this._w = -qb._w;
                    this._x = -qb._x;
                    this._y = -qb._y;
                    this._z = -qb._z;
                    cosHalfTheta = -cosHalfTheta
                } else {
                    this.copy(qb)
                }
                if (cosHalfTheta >= 1) {
                    this._w = w;
                    this._x = x;
                    this._y = y;
                    this._z = z;
                    return this
                }
                var sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
                if (sqrSinHalfTheta <= Number.EPSILON) {
                    var s = 1 - t;
                    this._w = s * w + t * this._w;
                    this._x = s * x + t * this._x;
                    this._y = s * y + t * this._y;
                    this._z = s * z + t * this._z;
                    return this.normalize()
                }
                var sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
                var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
                var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
                    ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
                this._w = w * ratioA + this._w * ratioB;
                this._x = x * ratioA + this._x * ratioB;
                this._y = y * ratioA + this._y * ratioB;
                this._z = z * ratioA + this._z * ratioB;
                this.onChangeCallback();
                return this
            },
            equals: function(quaternion) {
                return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w
            },
            fromArray: function(array, offset) {
                if (offset === undefined)
                    offset = 0;
                this._x = array[offset];
                this._y = array[offset + 1];
                this._z = array[offset + 2];
                this._w = array[offset + 3];
                this.onChangeCallback();
                return this
            },
            toArray: function(array, offset) {
                if (array === undefined)
                    array = [];
                if (offset === undefined)
                    offset = 0;
                array[offset] = this._x;
                array[offset + 1] = this._y;
                array[offset + 2] = this._z;
                array[offset + 3] = this._w;
                return array
            },
            onChange: function(callback) {
                this.onChangeCallback = callback;
                return this
            },
            onChangeCallback: function() {}
        });
        function Vector3(x, y, z) {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0
        }
        Object.assign(Vector3.prototype, {
            isVector3: true,
            set: function(x, y, z) {
                this.x = x;
                this.y = y;
                this.z = z;
                return this
            },
            setScalar: function(scalar) {
                this.x = scalar;
                this.y = scalar;
                this.z = scalar;
                return this
            },
            setX: function(x) {
                this.x = x;
                return this
            },
            setY: function(y) {
                this.y = y;
                return this
            },
            setZ: function(z) {
                this.z = z;
                return this
            },
            setComponent: function(index, value) {
                switch (index) {
                case 0:
                    this.x = value;
                    break;
                case 1:
                    this.y = value;
                    break;
                case 2:
                    this.z = value;
                    break;
                default:
                    throw new Error("index is out of range: " + index)
                }
                return this
            },
            getComponent: function(index) {
                switch (index) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw new Error("index is out of range: " + index)
                }
            },
            clone: function() {
                return new this.constructor(this.x, this.y, this.z)
            },
            copy: function(v) {
                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
                return this
            },
            add: function(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
                    return this.addVectors(v, w)
                }
                this.x += v.x;
                this.y += v.y;
                this.z += v.z;
                return this
            },
            addScalar: function(s) {
                this.x += s;
                this.y += s;
                this.z += s;
                return this
            },
            addVectors: function(a, b) {
                this.x = a.x + b.x;
                this.y = a.y + b.y;
                this.z = a.z + b.z;
                return this
            },
            addScaledVector: function(v, s) {
                this.x += v.x * s;
                this.y += v.y * s;
                this.z += v.z * s;
                return this
            },
            sub: function(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
                    return this.subVectors(v, w)
                }
                this.x -= v.x;
                this.y -= v.y;
                this.z -= v.z;
                return this
            },
            subScalar: function(s) {
                this.x -= s;
                this.y -= s;
                this.z -= s;
                return this
            },
            subVectors: function(a, b) {
                this.x = a.x - b.x;
                this.y = a.y - b.y;
                this.z = a.z - b.z;
                return this
            },
            multiply: function(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");
                    return this.multiplyVectors(v, w)
                }
                this.x *= v.x;
                this.y *= v.y;
                this.z *= v.z;
                return this
            },
            multiplyScalar: function(scalar) {
                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
                return this
            },
            multiplyVectors: function(a, b) {
                this.x = a.x * b.x;
                this.y = a.y * b.y;
                this.z = a.z * b.z;
                return this
            },
            applyEuler: function() {
                var quaternion = new Quaternion;
                return function applyEuler(euler) {
                    if (!(euler && euler.isEuler)) {
                        console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.")
                    }
                    return this.applyQuaternion(quaternion.setFromEuler(euler))
                }
            }(),
            applyAxisAngle: function() {
                var quaternion = new Quaternion;
                return function applyAxisAngle(axis, angle) {
                    return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle))
                }
            }(),
            applyMatrix3: function(m) {
                var x = this.x,
                    y = this.y,
                    z = this.z;
                var e = m.elements;
                this.x = e[0] * x + e[3] * y + e[6] * z;
                this.y = e[1] * x + e[4] * y + e[7] * z;
                this.z = e[2] * x + e[5] * y + e[8] * z;
                return this
            },
            applyMatrix4: function(m) {
                var x = this.x,
                    y = this.y,
                    z = this.z;
                var e = m.elements;
                var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
                this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
                this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
                this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
                return this
            },
            applyQuaternion: function(q) {
                var x = this.x,
                    y = this.y,
                    z = this.z;
                var qx = q.x,
                    qy = q.y,
                    qz = q.z,
                    qw = q.w;
                var ix = qw * x + qy * z - qz * y;
                var iy = qw * y + qz * x - qx * z;
                var iz = qw * z + qx * y - qy * x;
                var iw = -qx * x - qy * y - qz * z;
                this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                return this
            },
            project: function() {
                var matrix = new Matrix4;
                return function project(camera) {
                    matrix.multiplyMatrices(camera.projectionMatrix, matrix.getInverse(camera.matrixWorld));
                    return this.applyMatrix4(matrix)
                }
            }(),
            unproject: function() {
                var matrix = new Matrix4;
                return function unproject(camera) {
                    matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix));
                    return this.applyMatrix4(matrix)
                }
            }(),
            transformDirection: function(m) {
                var x = this.x,
                    y = this.y,
                    z = this.z;
                var e = m.elements;
                this.x = e[0] * x + e[4] * y + e[8] * z;
                this.y = e[1] * x + e[5] * y + e[9] * z;
                this.z = e[2] * x + e[6] * y + e[10] * z;
                return this.normalize()
            },
            divide: function(v) {
                this.x /= v.x;
                this.y /= v.y;
                this.z /= v.z;
                return this
            },
            divideScalar: function(scalar) {
                return this.multiplyScalar(1 / scalar)
            },
            min: function(v) {
                this.x = Math.min(this.x, v.x);
                this.y = Math.min(this.y, v.y);
                this.z = Math.min(this.z, v.z);
                return this
            },
            max: function(v) {
                this.x = Math.max(this.x, v.x);
                this.y = Math.max(this.y, v.y);
                this.z = Math.max(this.z, v.z);
                return this
            },
            clamp: function(min, max) {
                this.x = Math.max(min.x, Math.min(max.x, this.x));
                this.y = Math.max(min.y, Math.min(max.y, this.y));
                this.z = Math.max(min.z, Math.min(max.z, this.z));
                return this
            },
            clampScalar: function() {
                var min = new Vector3;
                var max = new Vector3;
                return function clampScalar(minVal, maxVal) {
                    min.set(minVal, minVal, minVal);
                    max.set(maxVal, maxVal, maxVal);
                    return this.clamp(min, max)
                }
            }(),
            clampLength: function(min, max) {
                var length = this.length();
                return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)))
            },
            floor: function() {
                this.x = Math.floor(this.x);
                this.y = Math.floor(this.y);
                this.z = Math.floor(this.z);
                return this
            },
            ceil: function() {
                this.x = Math.ceil(this.x);
                this.y = Math.ceil(this.y);
                this.z = Math.ceil(this.z);
                return this
            },
            round: function() {
                this.x = Math.round(this.x);
                this.y = Math.round(this.y);
                this.z = Math.round(this.z);
                return this
            },
            roundToZero: function() {
                this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
                return this
            },
            negate: function() {
                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;
                return this
            },
            dot: function(v) {
                return this.x * v.x + this.y * v.y + this.z * v.z
            },
            lengthSq: function() {
                return this.x * this.x + this.y * this.y + this.z * this.z
            },
            length: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
            },
            manhattanLength: function() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
            },
            normalize: function() {
                return this.divideScalar(this.length() || 1)
            },
            setLength: function(length) {
                return this.normalize().multiplyScalar(length)
            },
            lerp: function(v, alpha) {
                this.x += (v.x - this.x) * alpha;
                this.y += (v.y - this.y) * alpha;
                this.z += (v.z - this.z) * alpha;
                return this
            },
            lerpVectors: function(v1, v2, alpha) {
                return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1)
            },
            cross: function(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");
                    return this.crossVectors(v, w)
                }
                return this.crossVectors(this, v)
            },
            crossVectors: function(a, b) {
                var ax = a.x,
                    ay = a.y,
                    az = a.z;
                var bx = b.x,
                    by = b.y,
                    bz = b.z;
                this.x = ay * bz - az * by;
                this.y = az * bx - ax * bz;
                this.z = ax * by - ay * bx;
                return this
            },
            projectOnVector: function(vector) {
                var scalar = vector.dot(this) / vector.lengthSq();
                return this.copy(vector).multiplyScalar(scalar)
            },
            projectOnPlane: function() {
                var v1 = new Vector3;
                return function projectOnPlane(planeNormal) {
                    v1.copy(this).projectOnVector(planeNormal);
                    return this.sub(v1)
                }
            }(),
            reflect: function() {
                var v1 = new Vector3;
                return function reflect(normal) {
                    return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)))
                }
            }(),
            angleTo: function(v) {
                var theta = this.dot(v) / Math.sqrt(this.lengthSq() * v.lengthSq());
                return Math.acos(_Math.clamp(theta, -1, 1))
            },
            distanceTo: function(v) {
                return Math.sqrt(this.distanceToSquared(v))
            },
            distanceToSquared: function(v) {
                var dx = this.x - v.x,
                    dy = this.y - v.y,
                    dz = this.z - v.z;
                return dx * dx + dy * dy + dz * dz
            },
            manhattanDistanceTo: function(v) {
                return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z)
            },
            setFromSpherical: function(s) {
                var sinPhiRadius = Math.sin(s.phi) * s.radius;
                this.x = sinPhiRadius * Math.sin(s.theta);
                this.y = Math.cos(s.phi) * s.radius;
                this.z = sinPhiRadius * Math.cos(s.theta);
                return this
            },
            setFromCylindrical: function(c) {
                this.x = c.radius * Math.sin(c.theta);
                this.y = c.y;
                this.z = c.radius * Math.cos(c.theta);
                return this
            },
            setFromMatrixPosition: function(m) {
                var e = m.elements;
                this.x = e[12];
                this.y = e[13];
                this.z = e[14];
                return this
            },
            setFromMatrixScale: function(m) {
                var sx = this.setFromMatrixColumn(m, 0).length();
                var sy = this.setFromMatrixColumn(m, 1).length();
                var sz = this.setFromMatrixColumn(m, 2).length();
                this.x = sx;
                this.y = sy;
                this.z = sz;
                return this
            },
            setFromMatrixColumn: function(m, index) {
                return this.fromArray(m.elements, index * 4)
            },
            equals: function(v) {
                return v.x === this.x && v.y === this.y && v.z === this.z
            },
            fromArray: function(array, offset) {
                if (offset === undefined)
                    offset = 0;
                this.x = array[offset];
                this.y = array[offset + 1];
                this.z = array[offset + 2];
                return this
            },
            toArray: function(array, offset) {
                if (array === undefined)
                    array = [];
                if (offset === undefined)
                    offset = 0;
                array[offset] = this.x;
                array[offset + 1] = this.y;
                array[offset + 2] = this.z;
                return array
            },
            fromBufferAttribute: function(attribute, index, offset) {
                if (offset !== undefined) {
                    console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().")
                }
                this.x = attribute.getX(index);
                this.y = attribute.getY(index);
                this.z = attribute.getZ(index);
                return this
            }
        });
        function Matrix3() {
            this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
            if (arguments.length > 0) {
                console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")
            }
        }
        Object.assign(Matrix3.prototype, {
            isMatrix3: true,
            set: function(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
                var te = this.elements;
                te[0] = n11;
                te[1] = n21;
                te[2] = n31;
                te[3] = n12;
                te[4] = n22;
                te[5] = n32;
                te[6] = n13;
                te[7] = n23;
                te[8] = n33;
                return this
            },
            identity: function() {
                this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
                return this
            },
            clone: function() {
                return (new this.constructor).fromArray(this.elements)
            },
            copy: function(m) {
                var te = this.elements;
                var me = m.elements;
                te[0] = me[0];
                te[1] = me[1];
                te[2] = me[2];
                te[3] = me[3];
                te[4] = me[4];
                te[5] = me[5];
                te[6] = me[6];
                te[7] = me[7];
                te[8] = me[8];
                return this
            },
            setFromMatrix4: function(m) {
                var me = m.elements;
                this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
                return this
            },
            applyToBufferAttribute: function() {
                var v1 = new Vector3;
                return function applyToBufferAttribute(attribute) {
                    for (var i = 0, l = attribute.count; i < l; i++) {
                        v1.x = attribute.getX(i);
                        v1.y = attribute.getY(i);
                        v1.z = attribute.getZ(i);
                        v1.applyMatrix3(this);
                        attribute.setXYZ(i, v1.x, v1.y, v1.z)
                    }
                    return attribute
                }
            }(),
            multiply: function(m) {
                return this.multiplyMatrices(this, m)
            },
            premultiply: function(m) {
                return this.multiplyMatrices(m, this)
            },
            multiplyMatrices: function(a, b) {
                var ae = a.elements;
                var be = b.elements;
                var te = this.elements;
                var a11 = ae[0],
                    a12 = ae[3],
                    a13 = ae[6];
                var a21 = ae[1],
                    a22 = ae[4],
                    a23 = ae[7];
                var a31 = ae[2],
                    a32 = ae[5],
                    a33 = ae[8];
                var b11 = be[0],
                    b12 = be[3],
                    b13 = be[6];
                var b21 = be[1],
                    b22 = be[4],
                    b23 = be[7];
                var b31 = be[2],
                    b32 = be[5],
                    b33 = be[8];
                te[0] = a11 * b11 + a12 * b21 + a13 * b31;
                te[3] = a11 * b12 + a12 * b22 + a13 * b32;
                te[6] = a11 * b13 + a12 * b23 + a13 * b33;
                te[1] = a21 * b11 + a22 * b21 + a23 * b31;
                te[4] = a21 * b12 + a22 * b22 + a23 * b32;
                te[7] = a21 * b13 + a22 * b23 + a23 * b33;
                te[2] = a31 * b11 + a32 * b21 + a33 * b31;
                te[5] = a31 * b12 + a32 * b22 + a33 * b32;
                te[8] = a31 * b13 + a32 * b23 + a33 * b33;
                return this
            },
            multiplyScalar: function(s) {
                var te = this.elements;
                te[0] *= s;
                te[3] *= s;
                te[6] *= s;
                te[1] *= s;
                te[4] *= s;
                te[7] *= s;
                te[2] *= s;
                te[5] *= s;
                te[8] *= s;
                return this
            },
            determinant: function() {
                var te = this.elements;
                var a = te[0],
                    b = te[1],
                    c = te[2],
                    d = te[3],
                    e = te[4],
                    f = te[5],
                    g = te[6],
                    h = te[7],
                    i = te[8];
                return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g
            },
            getInverse: function(matrix, throwOnDegenerate) {
                if (matrix && matrix.isMatrix4) {
                    console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.")
                }
                var me = matrix.elements,
                    te = this.elements,
                    n11 = me[0],
                    n21 = me[1],
                    n31 = me[2],
                    n12 = me[3],
                    n22 = me[4],
                    n32 = me[5],
                    n13 = me[6],
                    n23 = me[7],
                    n33 = me[8],
                    t11 = n33 * n22 - n32 * n23,
                    t12 = n32 * n13 - n33 * n12,
                    t13 = n23 * n12 - n22 * n13,
                    det = n11 * t11 + n21 * t12 + n31 * t13;
                if (det === 0) {
                    var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
                    if (throwOnDegenerate === true) {
                        throw new Error(msg)
                    } else {
                        console.warn(msg)
                    }
                    return this.identity()
                }
                var detInv = 1 / det;
                te[0] = t11 * detInv;
                te[1] = (n31 * n23 - n33 * n21) * detInv;
                te[2] = (n32 * n21 - n31 * n22) * detInv;
                te[3] = t12 * detInv;
                te[4] = (n33 * n11 - n31 * n13) * detInv;
                te[5] = (n31 * n12 - n32 * n11) * detInv;
                te[6] = t13 * detInv;
                te[7] = (n21 * n13 - n23 * n11) * detInv;
                te[8] = (n22 * n11 - n21 * n12) * detInv;
                return this
            },
            transpose: function() {
                var tmp,
                    m = this.elements;
                tmp = m[1];
                m[1] = m[3];
                m[3] = tmp;
                tmp = m[2];
                m[2] = m[6];
                m[6] = tmp;
                tmp = m[5];
                m[5] = m[7];
                m[7] = tmp;
                return this
            },
            getNormalMatrix: function(matrix4) {
                return this.setFromMatrix4(matrix4).getInverse(this).transpose()
            },
            transposeIntoArray: function(r) {
                var m = this.elements;
                r[0] = m[0];
                r[1] = m[3];
                r[2] = m[6];
                r[3] = m[1];
                r[4] = m[4];
                r[5] = m[7];
                r[6] = m[2];
                r[7] = m[5];
                r[8] = m[8];
                return this
            },
            setUvTransform: function(tx, ty, sx, sy, rotation, cx, cy) {
                var c = Math.cos(rotation);
                var s = Math.sin(rotation);
                this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1)
            },
            scale: function(sx, sy) {
                var te = this.elements;
                te[0] *= sx;
                te[3] *= sx;
                te[6] *= sx;
                te[1] *= sy;
                te[4] *= sy;
                te[7] *= sy;
                return this
            },
            rotate: function(theta) {
                var c = Math.cos(theta);
                var s = Math.sin(theta);
                var te = this.elements;
                var a11 = te[0],
                    a12 = te[3],
                    a13 = te[6];
                var a21 = te[1],
                    a22 = te[4],
                    a23 = te[7];
                te[0] = c * a11 + s * a21;
                te[3] = c * a12 + s * a22;
                te[6] = c * a13 + s * a23;
                te[1] = -s * a11 + c * a21;
                te[4] = -s * a12 + c * a22;
                te[7] = -s * a13 + c * a23;
                return this
            },
            translate: function(tx, ty) {
                var te = this.elements;
                te[0] += tx * te[2];
                te[3] += tx * te[5];
                te[6] += tx * te[8];
                te[1] += ty * te[2];
                te[4] += ty * te[5];
                te[7] += ty * te[8];
                return this
            },
            equals: function(matrix) {
                var te = this.elements;
                var me = matrix.elements;
                for (var i = 0; i < 9; i++) {
                    if (te[i] !== me[i])
                        return false
                }
                return true
            },
            fromArray: function(array, offset) {
                if (offset === undefined)
                    offset = 0;
                for (var i = 0; i < 9; i++) {
                    this.elements[i] = array[i + offset]
                }
                return this
            },
            toArray: function(array, offset) {
                if (array === undefined)
                    array = [];
                if (offset === undefined)
                    offset = 0;
                var te = this.elements;
                array[offset] = te[0];
                array[offset + 1] = te[1];
                array[offset + 2] = te[2];
                array[offset + 3] = te[3];
                array[offset + 4] = te[4];
                array[offset + 5] = te[5];
                array[offset + 6] = te[6];
                array[offset + 7] = te[7];
                array[offset + 8] = te[8];
                return array
            }
        });
        var ImageUtils = {
            getDataURL: function(image) {
                var canvas;
                if (image instanceof HTMLCanvasElement) {
                    canvas = image
                } else {
                    if (typeof OffscreenCanvas !== "undefined") {
                        canvas = new OffscreenCanvas(image.width, image.height)
                    } else {
                        canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                        canvas.width = image.width;
                        canvas.height = image.height
                    }
                    var context = canvas.getContext("2d");
                    if (image instanceof ImageData) {
                        context.putImageData(image, 0, 0)
                    } else {
                        context.drawImage(image, 0, 0, image.width, image.height)
                    }
                }
                if (canvas.width > 2048 || canvas.height > 2048) {
                    return canvas.toDataURL("image/jpeg", .6)
                } else {
                    return canvas.toDataURL("image/png")
                }
            }
        };
        var textureId = 0;
        function Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
            Object.defineProperty(this, "id", {
                value: textureId++
            });
            this.uuid = _Math.generateUUID();
            this.name = "";
            this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
            this.mipmaps = [];
            this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;
            this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
            this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;
            this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
            this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;
            this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
            this.format = format !== undefined ? format : RGBAFormat;
            this.type = type !== undefined ? type : UnsignedByteType;
            this.offset = new Vector2(0, 0);
            this.repeat = new Vector2(1, 1);
            this.center = new Vector2(0, 0);
            this.rotation = 0;
            this.matrixAutoUpdate = true;
            this.matrix = new Matrix3;
            this.generateMipmaps = true;
            this.premultiplyAlpha = false;
            this.flipY = true;
            this.unpackAlignment = 4;
            this.encoding = encoding !== undefined ? encoding : LinearEncoding;
            this.version = 0;
            this.onUpdate = null
        }
        Texture.DEFAULT_IMAGE = undefined;
        Texture.DEFAULT_MAPPING = UVMapping;
        Texture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
            constructor: Texture,
            isTexture: true,
            updateMatrix: function() {
                this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y)
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(source) {
                this.name = source.name;
                this.image = source.image;
                this.mipmaps = source.mipmaps.slice(0);
                this.mapping = source.mapping;
                this.wrapS = source.wrapS;
                this.wrapT = source.wrapT;
                this.magFilter = source.magFilter;
                this.minFilter = source.minFilter;
                this.anisotropy = source.anisotropy;
                this.format = source.format;
                this.type = source.type;
                this.offset.copy(source.offset);
                this.repeat.copy(source.repeat);
                this.center.copy(source.center);
                this.rotation = source.rotation;
                this.matrixAutoUpdate = source.matrixAutoUpdate;
                this.matrix.copy(source.matrix);
                this.generateMipmaps = source.generateMipmaps;
                this.premultiplyAlpha = source.premultiplyAlpha;
                this.flipY = source.flipY;
                this.unpackAlignment = source.unpackAlignment;
                this.encoding = source.encoding;
                return this
            },
            toJSON: function(meta) {
                var isRootObject = meta === undefined || typeof meta === "string";
                if (!isRootObject && meta.textures[this.uuid] !== undefined) {
                    return meta.textures[this.uuid]
                }
                var output = {
                    metadata: {
                        version: 4.5,
                        type: "Texture",
                        generator: "Texture.toJSON"
                    },
                    uuid: this.uuid,
                    name: this.name,
                    mapping: this.mapping,
                    repeat: [this.repeat.x, this.repeat.y],
                    offset: [this.offset.x, this.offset.y],
                    center: [this.center.x, this.center.y],
                    rotation: this.rotation,
                    wrap: [this.wrapS, this.wrapT],
                    format: this.format,
                    minFilter: this.minFilter,
                    magFilter: this.magFilter,
                    anisotropy: this.anisotropy,
                    flipY: this.flipY
                };
                if (this.image !== undefined) {
                    var image = this.image;
                    if (image.uuid === undefined) {
                        image.uuid = _Math.generateUUID()
                    }
                    if (!isRootObject && meta.images[image.uuid] === undefined) {
                        var url;
                        if (Array.isArray(image)) {
                            url = [];
                            for (var i = 0, l = image.length; i < l; i++) {
                                url.push(ImageUtils.getDataURL(image[i]))
                            }
                        } else {
                            url = ImageUtils.getDataURL(image)
                        }
                        meta.images[image.uuid] = {
                            uuid: image.uuid,
                            url: url
                        }
                    }
                    output.image = image.uuid
                }
                if (!isRootObject) {
                    meta.textures[this.uuid] = output
                }
                return output
            },
            dispose: function() {
                this.dispatchEvent({
                    type: "dispose"
                })
            },
            transformUv: function(uv) {
                if (this.mapping !== UVMapping)
                    return;
                uv.applyMatrix3(this.matrix);
                if (uv.x < 0 || uv.x > 1) {
                    switch (this.wrapS) {
                    case RepeatWrapping:
                        uv.x = uv.x - Math.floor(uv.x);
                        break;
                    case ClampToEdgeWrapping:
                        uv.x = uv.x < 0 ? 0 : 1;
                        break;
                    case MirroredRepeatWrapping:
                        if (Math.abs(Math.floor(uv.x) % 2) === 1) {
                            uv.x = Math.ceil(uv.x) - uv.x
                        } else {
                            uv.x = uv.x - Math.floor(uv.x)
                        }
                        break
                    }
                }
                if (uv.y < 0 || uv.y > 1) {
                    switch (this.wrapT) {
                    case RepeatWrapping:
                        uv.y = uv.y - Math.floor(uv.y);
                        break;
                    case ClampToEdgeWrapping:
                        uv.y = uv.y < 0 ? 0 : 1;
                        break;
                    case MirroredRepeatWrapping:
                        if (Math.abs(Math.floor(uv.y) % 2) === 1) {
                            uv.y = Math.ceil(uv.y) - uv.y
                        } else {
                            uv.y = uv.y - Math.floor(uv.y)
                        }
                        break
                    }
                }
                if (this.flipY) {
                    uv.y = 1 - uv.y
                }
            }
        });
        Object.defineProperty(Texture.prototype, "needsUpdate", {
            set: function(value) {
                if (value === true)
                    this.version++
            }
        });
        function Vector4(x, y, z, w) {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = w !== undefined ? w : 1
        }
        Object.assign(Vector4.prototype, {
            isVector4: true,
            set: function(x, y, z, w) {
                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;
                return this
            },
            setScalar: function(scalar) {
                this.x = scalar;
                this.y = scalar;
                this.z = scalar;
                this.w = scalar;
                return this
            },
            setX: function(x) {
                this.x = x;
                return this
            },
            setY: function(y) {
                this.y = y;
                return this
            },
            setZ: function(z) {
                this.z = z;
                return this
            },
            setW: function(w) {
                this.w = w;
                return this
            },
            setComponent: function(index, value) {
                switch (index) {
                case 0:
                    this.x = value;
                    break;
                case 1:
                    this.y = value;
                    break;
                case 2:
                    this.z = value;
                    break;
                case 3:
                    this.w = value;
                    break;
                default:
                    throw new Error("index is out of range: " + index)
                }
                return this
            },
            getComponent: function(index) {
                switch (index) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                case 3:
                    return this.w;
                default:
                    throw new Error("index is out of range: " + index)
                }
            },
            clone: function() {
                return new this.constructor(this.x, this.y, this.z, this.w)
            },
            copy: function(v) {
                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
                this.w = v.w !== undefined ? v.w : 1;
                return this
            },
            add: function(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
                    return this.addVectors(v, w)
                }
                this.x += v.x;
                this.y += v.y;
                this.z += v.z;
                this.w += v.w;
                return this
            },
            addScalar: function(s) {
                this.x += s;
                this.y += s;
                this.z += s;
                this.w += s;
                return this
            },
            addVectors: function(a, b) {
                this.x = a.x + b.x;
                this.y = a.y + b.y;
                this.z = a.z + b.z;
                this.w = a.w + b.w;
                return this
            },
            addScaledVector: function(v, s) {
                this.x += v.x * s;
                this.y += v.y * s;
                this.z += v.z * s;
                this.w += v.w * s;
                return this
            },
            sub: function(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
                    return this.subVectors(v, w)
                }
                this.x -= v.x;
                this.y -= v.y;
                this.z -= v.z;
                this.w -= v.w;
                return this
            },
            subScalar: function(s) {
                this.x -= s;
                this.y -= s;
                this.z -= s;
                this.w -= s;
                return this
            },
            subVectors: function(a, b) {
                this.x = a.x - b.x;
                this.y = a.y - b.y;
                this.z = a.z - b.z;
                this.w = a.w - b.w;
                return this
            },
            multiplyScalar: function(scalar) {
                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
                this.w *= scalar;
                return this
            },
            applyMatrix4: function(m) {
                var x = this.x,
                    y = this.y,
                    z = this.z,
                    w = this.w;
                var e = m.elements;
                this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
                this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
                this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
                this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
                return this
            },
            divideScalar: function(scalar) {
                return this.multiplyScalar(1 / scalar)
            },
            setAxisAngleFromQuaternion: function(q) {
                this.w = 2 * Math.acos(q.w);
                var s = Math.sqrt(1 - q.w * q.w);
                if (s < 1e-4) {
                    this.x = 1;
                    this.y = 0;
                    this.z = 0
                } else {
                    this.x = q.x / s;
                    this.y = q.y / s;
                    this.z = q.z / s
                }
                return this
            },
            setAxisAngleFromRotationMatrix: function(m) {
                var angle,
                    x,
                    y,
                    z,
                    epsilon = .01,
                    epsilon2 = .1,
                    te = m.elements,
                    m11 = te[0],
                    m12 = te[4],
                    m13 = te[8],
                    m21 = te[1],
                    m22 = te[5],
                    m23 = te[9],
                    m31 = te[2],
                    m32 = te[6],
                    m33 = te[10];
                if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
                    if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
                        this.set(1, 0, 0, 0);
                        return this
                    }
                    angle = Math.PI;
                    var xx = (m11 + 1) / 2;
                    var yy = (m22 + 1) / 2;
                    var zz = (m33 + 1) / 2;
                    var xy = (m12 + m21) / 4;
                    var xz = (m13 + m31) / 4;
                    var yz = (m23 + m32) / 4;
                    if (xx > yy && xx > zz) {
                        if (xx < epsilon) {
                            x = 0;
                            y = .707106781;
                            z = .707106781
                        } else {
                            x = Math.sqrt(xx);
                            y = xy / x;
                            z = xz / x
                        }
                    } else if (yy > zz) {
                        if (yy < epsilon) {
                            x = .707106781;
                            y = 0;
                            z = .707106781
                        } else {
                            y = Math.sqrt(yy);
                            x = xy / y;
                            z = yz / y
                        }
                    } else {
                        if (zz < epsilon) {
                            x = .707106781;
                            y = .707106781;
                            z = 0
                        } else {
                            z = Math.sqrt(zz);
                            x = xz / z;
                            y = yz / z
                        }
                    }
                    this.set(x, y, z, angle);
                    return this
                }
                var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
                if (Math.abs(s) < .001)
                    s = 1;
                this.x = (m32 - m23) / s;
                this.y = (m13 - m31) / s;
                this.z = (m21 - m12) / s;
                this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
                return this
            },
            min: function(v) {
                this.x = Math.min(this.x, v.x);
                this.y = Math.min(this.y, v.y);
                this.z = Math.min(this.z, v.z);
                this.w = Math.min(this.w, v.w);
                return this
            },
            max: function(v) {
                this.x = Math.max(this.x, v.x);
                this.y = Math.max(this.y, v.y);
                this.z = Math.max(this.z, v.z);
                this.w = Math.max(this.w, v.w);
                return this
            },
            clamp: function(min, max) {
                this.x = Math.max(min.x, Math.min(max.x, this.x));
                this.y = Math.max(min.y, Math.min(max.y, this.y));
                this.z = Math.max(min.z, Math.min(max.z, this.z));
                this.w = Math.max(min.w, Math.min(max.w, this.w));
                return this
            },
            clampScalar: function() {
                var min,
                    max;
                return function clampScalar(minVal, maxVal) {
                    if (min === undefined) {
                        min = new Vector4;
                        max = new Vector4
                    }
                    min.set(minVal, minVal, minVal, minVal);
                    max.set(maxVal, maxVal, maxVal, maxVal);
                    return this.clamp(min, max)
                }
            }(),
            clampLength: function(min, max) {
                var length = this.length();
                return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)))
            },
            floor: function() {
                this.x = Math.floor(this.x);
                this.y = Math.floor(this.y);
                this.z = Math.floor(this.z);
                this.w = Math.floor(this.w);
                return this
            },
            ceil: function() {
                this.x = Math.ceil(this.x);
                this.y = Math.ceil(this.y);
                this.z = Math.ceil(this.z);
                this.w = Math.ceil(this.w);
                return this
            },
            round: function() {
                this.x = Math.round(this.x);
                this.y = Math.round(this.y);
                this.z = Math.round(this.z);
                this.w = Math.round(this.w);
                return this
            },
            roundToZero: function() {
                this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
                this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
                return this
            },
            negate: function() {
                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;
                this.w = -this.w;
                return this
            },
            dot: function(v) {
                return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w
            },
            lengthSq: function() {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
            },
            length: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
            },
            manhattanLength: function() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
            },
            normalize: function() {
                return this.divideScalar(this.length() || 1)
            },
            setLength: function(length) {
                return this.normalize().multiplyScalar(length)
            },
            lerp: function(v, alpha) {
                this.x += (v.x - this.x) * alpha;
                this.y += (v.y - this.y) * alpha;
                this.z += (v.z - this.z) * alpha;
                this.w += (v.w - this.w) * alpha;
                return this
            },
            lerpVectors: function(v1, v2, alpha) {
                return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1)
            },
            equals: function(v) {
                return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w
            },
            fromArray: function(array, offset) {
                if (offset === undefined)
                    offset = 0;
                this.x = array[offset];
                this.y = array[offset + 1];
                this.z = array[offset + 2];
                this.w = array[offset + 3];
                return this
            },
            toArray: function(array, offset) {
                if (array === undefined)
                    array = [];
                if (offset === undefined)
                    offset = 0;
                array[offset] = this.x;
                array[offset + 1] = this.y;
                array[offset + 2] = this.z;
                array[offset + 3] = this.w;
                return array
            },
            fromBufferAttribute: function(attribute, index, offset) {
                if (offset !== undefined) {
                    console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().")
                }
                this.x = attribute.getX(index);
                this.y = attribute.getY(index);
                this.z = attribute.getZ(index);
                this.w = attribute.getW(index);
                return this
            }
        });
        function WebGLRenderTarget(width, height, options) {
            this.width = width;
            this.height = height;
            this.scissor = new Vector4(0, 0, width, height);
            this.scissorTest = false;
            this.viewport = new Vector4(0, 0, width, height);
            options = options || {};
            if (options.minFilter === undefined)
                options.minFilter = LinearFilter;
            this.texture = new Texture(undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
            this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : true;
            this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
            this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
            this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null
        }
        WebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
            constructor: WebGLRenderTarget,
            isWebGLRenderTarget: true,
            setSize: function(width, height) {
                if (this.width !== width || this.height !== height) {
                    this.width = width;
                    this.height = height;
                    this.dispose()
                }
                this.viewport.set(0, 0, width, height);
                this.scissor.set(0, 0, width, height)
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(source) {
                this.width = source.width;
                this.height = source.height;
                this.viewport.copy(source.viewport);
                this.texture = source.texture.clone();
                this.depthBuffer = source.depthBuffer;
                this.stencilBuffer = source.stencilBuffer;
                this.depthTexture = source.depthTexture;
                return this
            },
            dispose: function() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        });
        function WebGLRenderTargetCube(width, height, options) {
            WebGLRenderTarget.call(this, width, height, options);
            this.activeCubeFace = 0;
            this.activeMipMapLevel = 0
        }
        WebGLRenderTargetCube.prototype = Object.create(WebGLRenderTarget.prototype);
        WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;
        WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;
        function DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
            Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
            this.image = {
                data: data,
                width: width,
                height: height
            };
            this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
            this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
            this.generateMipmaps = false;
            this.flipY = false;
            this.unpackAlignment = 1
        }
        DataTexture.prototype = Object.create(Texture.prototype);
        DataTexture.prototype.constructor = DataTexture;
        DataTexture.prototype.isDataTexture = true;
        function Box3(min, max) {
            this.min = min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);
            this.max = max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity)
        }
        Object.assign(Box3.prototype, {
            isBox3: true,
            set: function(min, max) {
                this.min.copy(min);
                this.max.copy(max);
                return this
            },
            setFromArray: function(array) {
                var minX = +Infinity;
                var minY = +Infinity;
                var minZ = +Infinity;
                var maxX = -Infinity;
                var maxY = -Infinity;
                var maxZ = -Infinity;
                for (var i = 0, l = array.length; i < l; i += 3) {
                    var x = array[i];
                    var y = array[i + 1];
                    var z = array[i + 2];
                    if (x < minX)
                        minX = x;
                    if (y < minY)
                        minY = y;
                    if (z < minZ)
                        minZ = z;
                    if (x > maxX)
                        maxX = x;
                    if (y > maxY)
                        maxY = y;
                    if (z > maxZ)
                        maxZ = z
                }
                this.min.set(minX, minY, minZ);
                this.max.set(maxX, maxY, maxZ);
                return this
            },
            setFromBufferAttribute: function(attribute) {
                var minX = +Infinity;
                var minY = +Infinity;
                var minZ = +Infinity;
                var maxX = -Infinity;
                var maxY = -Infinity;
                var maxZ = -Infinity;
                for (var i = 0, l = attribute.count; i < l; i++) {
                    var x = attribute.getX(i);
                    var y = attribute.getY(i);
                    var z = attribute.getZ(i);
                    if (x < minX)
                        minX = x;
                    if (y < minY)
                        minY = y;
                    if (z < minZ)
                        minZ = z;
                    if (x > maxX)
                        maxX = x;
                    if (y > maxY)
                        maxY = y;
                    if (z > maxZ)
                        maxZ = z
                }
                this.min.set(minX, minY, minZ);
                this.max.set(maxX, maxY, maxZ);
                return this
            },
            setFromPoints: function(points) {
                this.makeEmpty();
                for (var i = 0, il = points.length; i < il; i++) {
                    this.expandByPoint(points[i])
                }
                return this
            },
            setFromCenterAndSize: function() {
                var v1 = new Vector3;
                return function setFromCenterAndSize(center, size) {
                    var halfSize = v1.copy(size).multiplyScalar(.5);
                    this.min.copy(center).sub(halfSize);
                    this.max.copy(center).add(halfSize);
                    return this
                }
            }(),
            setFromObject: function(object) {
                this.makeEmpty();
                return this.expandByObject(object)
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(box) {
                this.min.copy(box.min);
                this.max.copy(box.max);
                return this
            },
            makeEmpty: function() {
                this.min.x = this.min.y = this.min.z = +Infinity;
                this.max.x = this.max.y = this.max.z = -Infinity;
                return this
            },
            isEmpty: function() {
                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
            },
            getCenter: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Box3: .getCenter() target is now required");
                    target = new Vector3
                }
                return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(.5)
            },
            getSize: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Box3: .getSize() target is now required");
                    target = new Vector3
                }
                return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min)
            },
            expandByPoint: function(point) {
                this.min.min(point);
                this.max.max(point);
                return this
            },
            expandByVector: function(vector) {
                this.min.sub(vector);
                this.max.add(vector);
                return this
            },
            expandByScalar: function(scalar) {
                this.min.addScalar(-scalar);
                this.max.addScalar(scalar);
                return this
            },
            expandByObject: function() {
                var scope,
                    i,
                    l;
                var v1 = new Vector3;
                function traverse(node) {
                    var geometry = node.geometry;
                    if (geometry !== undefined) {
                        if (geometry.isGeometry) {
                            var vertices = geometry.vertices;
                            for (i = 0, l = vertices.length; i < l; i++) {
                                v1.copy(vertices[i]);
                                v1.applyMatrix4(node.matrixWorld);
                                scope.expandByPoint(v1)
                            }
                        } else if (geometry.isBufferGeometry) {
                            var attribute = geometry.attributes.position;
                            if (attribute !== undefined) {
                                for (i = 0, l = attribute.count; i < l; i++) {
                                    v1.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);
                                    scope.expandByPoint(v1)
                                }
                            }
                        }
                    }
                }
                return function expandByObject(object) {
                    scope = this;
                    object.updateMatrixWorld(true);
                    object.traverse(traverse);
                    return this
                }
            }(),
            containsPoint: function(point) {
                return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true
            },
            containsBox: function(box) {
                return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z
            },
            getParameter: function(point, target) {
                if (target === undefined) {
                    console.warn("THREE.Box3: .getParameter() target is now required");
                    target = new Vector3
                }
                return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z))
            },
            intersectsBox: function(box) {
                return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true
            },
            intersectsSphere: function() {
                var closestPoint = new Vector3;
                return function intersectsSphere(sphere) {
                    this.clampPoint(sphere.center, closestPoint);
                    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius
                }
            }(),
            intersectsPlane: function(plane) {
                var min,
                    max;
                if (plane.normal.x > 0) {
                    min = plane.normal.x * this.min.x;
                    max = plane.normal.x * this.max.x
                } else {
                    min = plane.normal.x * this.max.x;
                    max = plane.normal.x * this.min.x
                }
                if (plane.normal.y > 0) {
                    min += plane.normal.y * this.min.y;
                    max += plane.normal.y * this.max.y
                } else {
                    min += plane.normal.y * this.max.y;
                    max += plane.normal.y * this.min.y
                }
                if (plane.normal.z > 0) {
                    min += plane.normal.z * this.min.z;
                    max += plane.normal.z * this.max.z
                } else {
                    min += plane.normal.z * this.max.z;
                    max += plane.normal.z * this.min.z
                }
                return min <= plane.constant && max >= plane.constant
            },
            intersectsTriangle: function() {
                var v0 = new Vector3;
                var v1 = new Vector3;
                var v2 = new Vector3;
                var f0 = new Vector3;
                var f1 = new Vector3;
                var f2 = new Vector3;
                var testAxis = new Vector3;
                var center = new Vector3;
                var extents = new Vector3;
                var triangleNormal = new Vector3;
                function satForAxes(axes) {
                    var i,
                        j;
                    for (i = 0, j = axes.length - 3; i <= j; i += 3) {
                        testAxis.fromArray(axes, i);
                        var r = extents.x * Math.abs(testAxis.x) + extents.y * Math.abs(testAxis.y) + extents.z * Math.abs(testAxis.z);
                        var p0 = v0.dot(testAxis);
                        var p1 = v1.dot(testAxis);
                        var p2 = v2.dot(testAxis);
                        if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
                            return false
                        }
                    }
                    return true
                }
                return function intersectsTriangle(triangle) {
                    if (this.isEmpty()) {
                        return false
                    }
                    this.getCenter(center);
                    extents.subVectors(this.max, center);
                    v0.subVectors(triangle.a, center);
                    v1.subVectors(triangle.b, center);
                    v2.subVectors(triangle.c, center);
                    f0.subVectors(v1, v0);
                    f1.subVectors(v2, v1);
                    f2.subVectors(v0, v2);
                    var axes = [0, -f0.z, f0.y, 0, -f1.z, f1.y, 0, -f2.z, f2.y, f0.z, 0, -f0.x, f1.z, 0, -f1.x, f2.z, 0, -f2.x, -f0.y, f0.x, 0, -f1.y, f1.x, 0, -f2.y, f2.x, 0];
                    if (!satForAxes(axes)) {
                        return false
                    }
                    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
                    if (!satForAxes(axes)) {
                        return false
                    }
                    triangleNormal.crossVectors(f0, f1);
                    axes = [triangleNormal.x, triangleNormal.y, triangleNormal.z];
                    return satForAxes(axes)
                }
            }(),
            clampPoint: function(point, target) {
                if (target === undefined) {
                    console.warn("THREE.Box3: .clampPoint() target is now required");
                    target = new Vector3
                }
                return target.copy(point).clamp(this.min, this.max)
            },
            distanceToPoint: function() {
                var v1 = new Vector3;
                return function distanceToPoint(point) {
                    var clampedPoint = v1.copy(point).clamp(this.min, this.max);
                    return clampedPoint.sub(point).length()
                }
            }(),
            getBoundingSphere: function() {
                var v1 = new Vector3;
                return function getBoundingSphere(target) {
                    if (target === undefined) {
                        console.warn("THREE.Box3: .getBoundingSphere() target is now required");
                        target = new Sphere
                    }
                    this.getCenter(target.center);
                    target.radius = this.getSize(v1).length() * .5;
                    return target
                }
            }(),
            intersect: function(box) {
                this.min.max(box.min);
                this.max.min(box.max);
                if (this.isEmpty())
                    this.makeEmpty();
                return this
            },
            union: function(box) {
                this.min.min(box.min);
                this.max.max(box.max);
                return this
            },
            applyMatrix4: function(matrix) {
                if (this.isEmpty())
                    return this;
                var m = matrix.elements;
                var xax = m[0] * this.min.x,
                    xay = m[1] * this.min.x,
                    xaz = m[2] * this.min.x;
                var xbx = m[0] * this.max.x,
                    xby = m[1] * this.max.x,
                    xbz = m[2] * this.max.x;
                var yax = m[4] * this.min.y,
                    yay = m[5] * this.min.y,
                    yaz = m[6] * this.min.y;
                var ybx = m[4] * this.max.y,
                    yby = m[5] * this.max.y,
                    ybz = m[6] * this.max.y;
                var zax = m[8] * this.min.z,
                    zay = m[9] * this.min.z,
                    zaz = m[10] * this.min.z;
                var zbx = m[8] * this.max.z,
                    zby = m[9] * this.max.z,
                    zbz = m[10] * this.max.z;
                this.min.x = Math.min(xax, xbx) + Math.min(yax, ybx) + Math.min(zax, zbx) + m[12];
                this.min.y = Math.min(xay, xby) + Math.min(yay, yby) + Math.min(zay, zby) + m[13];
                this.min.z = Math.min(xaz, xbz) + Math.min(yaz, ybz) + Math.min(zaz, zbz) + m[14];
                this.max.x = Math.max(xax, xbx) + Math.max(yax, ybx) + Math.max(zax, zbx) + m[12];
                this.max.y = Math.max(xay, xby) + Math.max(yay, yby) + Math.max(zay, zby) + m[13];
                this.max.z = Math.max(xaz, xbz) + Math.max(yaz, ybz) + Math.max(zaz, zbz) + m[14];
                return this
            },
            translate: function(offset) {
                this.min.add(offset);
                this.max.add(offset);
                return this
            },
            equals: function(box) {
                return box.min.equals(this.min) && box.max.equals(this.max)
            }
        });
        function Sphere(center, radius) {
            this.center = center !== undefined ? center : new Vector3;
            this.radius = radius !== undefined ? radius : 0
        }
        Object.assign(Sphere.prototype, {
            set: function(center, radius) {
                this.center.copy(center);
                this.radius = radius;
                return this
            },
            setFromPoints: function() {
                var box = new Box3;
                return function setFromPoints(points, optionalCenter) {
                    var center = this.center;
                    if (optionalCenter !== undefined) {
                        center.copy(optionalCenter)
                    } else {
                        box.setFromPoints(points).getCenter(center)
                    }
                    var maxRadiusSq = 0;
                    for (var i = 0, il = points.length; i < il; i++) {
                        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]))
                    }
                    this.radius = Math.sqrt(maxRadiusSq);
                    return this
                }
            }(),
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(sphere) {
                this.center.copy(sphere.center);
                this.radius = sphere.radius;
                return this
            },
            empty: function() {
                return this.radius <= 0
            },
            containsPoint: function(point) {
                return point.distanceToSquared(this.center) <= this.radius * this.radius
            },
            distanceToPoint: function(point) {
                return point.distanceTo(this.center) - this.radius
            },
            intersectsSphere: function(sphere) {
                var radiusSum = this.radius + sphere.radius;
                return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum
            },
            intersectsBox: function(box) {
                return box.intersectsSphere(this)
            },
            intersectsPlane: function(plane) {
                return Math.abs(plane.distanceToPoint(this.center)) <= this.radius
            },
            clampPoint: function(point, target) {
                var deltaLengthSq = this.center.distanceToSquared(point);
                if (target === undefined) {
                    console.warn("THREE.Sphere: .clampPoint() target is now required");
                    target = new Vector3
                }
                target.copy(point);
                if (deltaLengthSq > this.radius * this.radius) {
                    target.sub(this.center).normalize();
                    target.multiplyScalar(this.radius).add(this.center)
                }
                return target
            },
            getBoundingBox: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Sphere: .getBoundingBox() target is now required");
                    target = new Box3
                }
                target.set(this.center, this.center);
                target.expandByScalar(this.radius);
                return target
            },
            applyMatrix4: function(matrix) {
                this.center.applyMatrix4(matrix);
                this.radius = this.radius * matrix.getMaxScaleOnAxis();
                return this
            },
            translate: function(offset) {
                this.center.add(offset);
                return this
            },
            equals: function(sphere) {
                return sphere.center.equals(this.center) && sphere.radius === this.radius
            }
        });
        function Plane(normal, constant) {
            this.normal = normal !== undefined ? normal : new Vector3(1, 0, 0);
            this.constant = constant !== undefined ? constant : 0
        }
        Object.assign(Plane.prototype, {
            set: function(normal, constant) {
                this.normal.copy(normal);
                this.constant = constant;
                return this
            },
            setComponents: function(x, y, z, w) {
                this.normal.set(x, y, z);
                this.constant = w;
                return this
            },
            setFromNormalAndCoplanarPoint: function(normal, point) {
                this.normal.copy(normal);
                this.constant = -point.dot(this.normal);
                return this
            },
            setFromCoplanarPoints: function() {
                var v1 = new Vector3;
                var v2 = new Vector3;
                return function setFromCoplanarPoints(a, b, c) {
                    var normal = v1.subVectors(c, b).cross(v2.subVectors(a, b)).normalize();
                    this.setFromNormalAndCoplanarPoint(normal, a);
                    return this
                }
            }(),
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(plane) {
                this.normal.copy(plane.normal);
                this.constant = plane.constant;
                return this
            },
            normalize: function() {
                var inverseNormalLength = 1 / this.normal.length();
                this.normal.multiplyScalar(inverseNormalLength);
                this.constant *= inverseNormalLength;
                return this
            },
            negate: function() {
                this.constant *= -1;
                this.normal.negate();
                return this
            },
            distanceToPoint: function(point) {
                return this.normal.dot(point) + this.constant
            },
            distanceToSphere: function(sphere) {
                return this.distanceToPoint(sphere.center) - sphere.radius
            },
            projectPoint: function(point, target) {
                if (target === undefined) {
                    console.warn("THREE.Plane: .projectPoint() target is now required");
                    target = new Vector3
                }
                return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point)
            },
            intersectLine: function() {
                var v1 = new Vector3;
                return function intersectLine(line, target) {
                    if (target === undefined) {
                        console.warn("THREE.Plane: .intersectLine() target is now required");
                        target = new Vector3
                    }
                    var direction = line.delta(v1);
                    var denominator = this.normal.dot(direction);
                    if (denominator === 0) {
                        if (this.distanceToPoint(line.start) === 0) {
                            return target.copy(line.start)
                        }
                        return undefined
                    }
                    var t = -(line.start.dot(this.normal) + this.constant) / denominator;
                    if (t < 0 || t > 1) {
                        return undefined
                    }
                    return target.copy(direction).multiplyScalar(t).add(line.start)
                }
            }(),
            intersectsLine: function(line) {
                var startSign = this.distanceToPoint(line.start);
                var endSign = this.distanceToPoint(line.end);
                return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0
            },
            intersectsBox: function(box) {
                return box.intersectsPlane(this)
            },
            intersectsSphere: function(sphere) {
                return sphere.intersectsPlane(this)
            },
            coplanarPoint: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Plane: .coplanarPoint() target is now required");
                    target = new Vector3
                }
                return target.copy(this.normal).multiplyScalar(-this.constant)
            },
            applyMatrix4: function() {
                var v1 = new Vector3;
                var m1 = new Matrix3;
                return function applyMatrix4(matrix, optionalNormalMatrix) {
                    var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix(matrix);
                    var referencePoint = this.coplanarPoint(v1).applyMatrix4(matrix);
                    var normal = this.normal.applyMatrix3(normalMatrix).normalize();
                    this.constant = -referencePoint.dot(normal);
                    return this
                }
            }(),
            translate: function(offset) {
                this.constant -= offset.dot(this.normal);
                return this
            },
            equals: function(plane) {
                return plane.normal.equals(this.normal) && plane.constant === this.constant
            }
        });
        function Frustum(p0, p1, p2, p3, p4, p5) {
            this.planes = [p0 !== undefined ? p0 : new Plane, p1 !== undefined ? p1 : new Plane, p2 !== undefined ? p2 : new Plane, p3 !== undefined ? p3 : new Plane, p4 !== undefined ? p4 : new Plane, p5 !== undefined ? p5 : new Plane]
        }
        Object.assign(Frustum.prototype, {
            set: function(p0, p1, p2, p3, p4, p5) {
                var planes = this.planes;
                planes[0].copy(p0);
                planes[1].copy(p1);
                planes[2].copy(p2);
                planes[3].copy(p3);
                planes[4].copy(p4);
                planes[5].copy(p5);
                return this
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(frustum) {
                var planes = this.planes;
                for (var i = 0; i < 6; i++) {
                    planes[i].copy(frustum.planes[i])
                }
                return this
            },
            setFromMatrix: function(m) {
                var planes = this.planes;
                var me = m.elements;
                var me0 = me[0],
                    me1 = me[1],
                    me2 = me[2],
                    me3 = me[3];
                var me4 = me[4],
                    me5 = me[5],
                    me6 = me[6],
                    me7 = me[7];
                var me8 = me[8],
                    me9 = me[9],
                    me10 = me[10],
                    me11 = me[11];
                var me12 = me[12],
                    me13 = me[13],
                    me14 = me[14],
                    me15 = me[15];
                planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
                planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
                planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
                planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
                planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
                planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
                return this
            },
            intersectsObject: function() {
                var sphere = new Sphere;
                return function intersectsObject(object) {
                    var geometry = object.geometry;
                    if (geometry.boundingSphere === null)
                        geometry.computeBoundingSphere();
                    sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
                    return this.intersectsSphere(sphere)
                }
            }(),
            intersectsSprite: function() {
                var sphere = new Sphere;
                return function intersectsSprite(sprite) {
                    sphere.center.set(0, 0, 0);
                    sphere.radius = .7071067811865476;
                    sphere.applyMatrix4(sprite.matrixWorld);
                    return this.intersectsSphere(sphere)
                }
            }(),
            intersectsSphere: function(sphere) {
                var planes = this.planes;
                var center = sphere.center;
                var negRadius = -sphere.radius;
                for (var i = 0; i < 6; i++) {
                    var distance = planes[i].distanceToPoint(center);
                    if (distance < negRadius) {
                        return false
                    }
                }
                return true
            },
            intersectsBox: function() {
                var p = new Vector3;
                return function intersectsBox(box) {
                    var planes = this.planes;
                    for (var i = 0; i < 6; i++) {
                        var plane = planes[i];
                        p.x = plane.normal.x > 0 ? box.max.x : box.min.x;
                        p.y = plane.normal.y > 0 ? box.max.y : box.min.y;
                        p.z = plane.normal.z > 0 ? box.max.z : box.min.z;
                        if (plane.distanceToPoint(p) < 0) {
                            return false
                        }
                    }
                    return true
                }
            }(),
            containsPoint: function(point) {
                var planes = this.planes;
                for (var i = 0; i < 6; i++) {
                    if (planes[i].distanceToPoint(point) < 0) {
                        return false
                    }
                }
                return true
            }
        });
        var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";
        var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";
        var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";
        var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";
        var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
        var begin_vertex = "\nvec3 transformed = vec3( position );\n";
        var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";
        var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";
        var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";
        var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif\n";
        var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";
        var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";
        var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";
        var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";
        var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";
        var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
        var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";
        var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n";
        var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";
        var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";
        var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";
        var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";
        var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";
        var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";
        var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";
        var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";
        var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";
        var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";
        var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";
        var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";
        var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";
        var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";
        var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";
        var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";
        var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";
        var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";
        var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
        var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";
        var lights_pars_begin = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n";
        var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";
        var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";
        var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";
        var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";
        var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";
        var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n";
        var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif\n";
        var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";
        var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
        var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";
        var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";
        var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n";
        var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";
        var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";
        var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";
        var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n";
        var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";
        var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
        var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";
        var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";
        var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";
        var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n";
        var normal_fragment_maps = "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";
        var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif\n";
        var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";
        var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";
        var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";
        var dithering_fragment = "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";
        var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";
        var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";
        var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
        var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";
        var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";
        var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";
        var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";
        var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
        var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";
        var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";
        var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";
        var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
        var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
        var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";
        var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";
        var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";
        var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n";
        var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
        var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
        var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";
        var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";
        var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";
        var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";
        var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n";
        var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";
        var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";
        var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n";
        var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n";
        var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";
        var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";
        var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
        var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";
        var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
        var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";
        var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";
        var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";
        var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";
        var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";
        var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";
        var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";
        var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";
        var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";
        var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
        var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}\n";
        var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n";
        var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";
        var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
        var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tvec4 mvPosition;\n\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";
        var ShaderChunk = {
            alphamap_fragment: alphamap_fragment,
            alphamap_pars_fragment: alphamap_pars_fragment,
            alphatest_fragment: alphatest_fragment,
            aomap_fragment: aomap_fragment,
            aomap_pars_fragment: aomap_pars_fragment,
            begin_vertex: begin_vertex,
            beginnormal_vertex: beginnormal_vertex,
            bsdfs: bsdfs,
            bumpmap_pars_fragment: bumpmap_pars_fragment,
            clipping_planes_fragment: clipping_planes_fragment,
            clipping_planes_pars_fragment: clipping_planes_pars_fragment,
            clipping_planes_pars_vertex: clipping_planes_pars_vertex,
            clipping_planes_vertex: clipping_planes_vertex,
            color_fragment: color_fragment,
            color_pars_fragment: color_pars_fragment,
            color_pars_vertex: color_pars_vertex,
            color_vertex: color_vertex,
            common: common,
            cube_uv_reflection_fragment: cube_uv_reflection_fragment,
            defaultnormal_vertex: defaultnormal_vertex,
            displacementmap_pars_vertex: displacementmap_pars_vertex,
            displacementmap_vertex: displacementmap_vertex,
            emissivemap_fragment: emissivemap_fragment,
            emissivemap_pars_fragment: emissivemap_pars_fragment,
            encodings_fragment: encodings_fragment,
            encodings_pars_fragment: encodings_pars_fragment,
            envmap_fragment: envmap_fragment,
            envmap_pars_fragment: envmap_pars_fragment,
            envmap_pars_vertex: envmap_pars_vertex,
            envmap_physical_pars_fragment: envmap_physical_pars_fragment,
            envmap_vertex: envmap_vertex,
            fog_vertex: fog_vertex,
            fog_pars_vertex: fog_pars_vertex,
            fog_fragment: fog_fragment,
            fog_pars_fragment: fog_pars_fragment,
            gradientmap_pars_fragment: gradientmap_pars_fragment,
            lightmap_fragment: lightmap_fragment,
            lightmap_pars_fragment: lightmap_pars_fragment,
            lights_lambert_vertex: lights_lambert_vertex,
            lights_pars_begin: lights_pars_begin,
            lights_phong_fragment: lights_phong_fragment,
            lights_phong_pars_fragment: lights_phong_pars_fragment,
            lights_physical_fragment: lights_physical_fragment,
            lights_physical_pars_fragment: lights_physical_pars_fragment,
            lights_fragment_begin: lights_fragment_begin,
            lights_fragment_maps: lights_fragment_maps,
            lights_fragment_end: lights_fragment_end,
            logdepthbuf_fragment: logdepthbuf_fragment,
            logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
            logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
            logdepthbuf_vertex: logdepthbuf_vertex,
            map_fragment: map_fragment,
            map_pars_fragment: map_pars_fragment,
            map_particle_fragment: map_particle_fragment,
            map_particle_pars_fragment: map_particle_pars_fragment,
            metalnessmap_fragment: metalnessmap_fragment,
            metalnessmap_pars_fragment: metalnessmap_pars_fragment,
            morphnormal_vertex: morphnormal_vertex,
            morphtarget_pars_vertex: morphtarget_pars_vertex,
            morphtarget_vertex: morphtarget_vertex,
            normal_fragment_begin: normal_fragment_begin,
            normal_fragment_maps: normal_fragment_maps,
            normalmap_pars_fragment: normalmap_pars_fragment,
            packing: packing,
            premultiplied_alpha_fragment: premultiplied_alpha_fragment,
            project_vertex: project_vertex,
            dithering_fragment: dithering_fragment,
            dithering_pars_fragment: dithering_pars_fragment,
            roughnessmap_fragment: roughnessmap_fragment,
            roughnessmap_pars_fragment: roughnessmap_pars_fragment,
            shadowmap_pars_fragment: shadowmap_pars_fragment,
            shadowmap_pars_vertex: shadowmap_pars_vertex,
            shadowmap_vertex: shadowmap_vertex,
            shadowmask_pars_fragment: shadowmask_pars_fragment,
            skinbase_vertex: skinbase_vertex,
            skinning_pars_vertex: skinning_pars_vertex,
            skinning_vertex: skinning_vertex,
            skinnormal_vertex: skinnormal_vertex,
            specularmap_fragment: specularmap_fragment,
            specularmap_pars_fragment: specularmap_pars_fragment,
            tonemapping_fragment: tonemapping_fragment,
            tonemapping_pars_fragment: tonemapping_pars_fragment,
            uv_pars_fragment: uv_pars_fragment,
            uv_pars_vertex: uv_pars_vertex,
            uv_vertex: uv_vertex,
            uv2_pars_fragment: uv2_pars_fragment,
            uv2_pars_vertex: uv2_pars_vertex,
            uv2_vertex: uv2_vertex,
            worldpos_vertex: worldpos_vertex,
            cube_frag: cube_frag,
            cube_vert: cube_vert,
            depth_frag: depth_frag,
            depth_vert: depth_vert,
            distanceRGBA_frag: distanceRGBA_frag,
            distanceRGBA_vert: distanceRGBA_vert,
            equirect_frag: equirect_frag,
            equirect_vert: equirect_vert,
            linedashed_frag: linedashed_frag,
            linedashed_vert: linedashed_vert,
            meshbasic_frag: meshbasic_frag,
            meshbasic_vert: meshbasic_vert,
            meshlambert_frag: meshlambert_frag,
            meshlambert_vert: meshlambert_vert,
            meshphong_frag: meshphong_frag,
            meshphong_vert: meshphong_vert,
            meshphysical_frag: meshphysical_frag,
            meshphysical_vert: meshphysical_vert,
            normal_frag: normal_frag,
            normal_vert: normal_vert,
            points_frag: points_frag,
            points_vert: points_vert,
            shadow_frag: shadow_frag,
            shadow_vert: shadow_vert,
            sprite_frag: sprite_frag,
            sprite_vert: sprite_vert
        };
        var UniformsUtils = {
            merge: function(uniforms) {
                var merged = {};
                for (var u = 0; u < uniforms.length; u++) {
                    var tmp = this.clone(uniforms[u]);
                    for (var p in tmp) {
                        merged[p] = tmp[p]
                    }
                }
                return merged
            },
            clone: function(uniforms_src) {
                var uniforms_dst = {};
                for (var u in uniforms_src) {
                    uniforms_dst[u] = {};
                    for (var p in uniforms_src[u]) {
                        var parameter_src = uniforms_src[u][p];
                        if (parameter_src && (parameter_src.isColor || parameter_src.isMatrix3 || parameter_src.isMatrix4 || parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 || parameter_src.isTexture)) {
                            uniforms_dst[u][p] = parameter_src.clone()
                        } else if (Array.isArray(parameter_src)) {
                            uniforms_dst[u][p] = parameter_src.slice()
                        } else {
                            uniforms_dst[u][p] = parameter_src
                        }
                    }
                }
                return uniforms_dst
            }
        };
        var ColorKeywords = {
            aliceblue: 15792383,
            antiquewhite: 16444375,
            aqua: 65535,
            aquamarine: 8388564,
            azure: 15794175,
            beige: 16119260,
            bisque: 16770244,
            black: 0,
            blanchedalmond: 16772045,
            blue: 255,
            blueviolet: 9055202,
            brown: 10824234,
            burlywood: 14596231,
            cadetblue: 6266528,
            chartreuse: 8388352,
            chocolate: 13789470,
            coral: 16744272,
            cornflowerblue: 6591981,
            cornsilk: 16775388,
            crimson: 14423100,
            cyan: 65535,
            darkblue: 139,
            darkcyan: 35723,
            darkgoldenrod: 12092939,
            darkgray: 11119017,
            darkgreen: 25600,
            darkgrey: 11119017,
            darkkhaki: 12433259,
            darkmagenta: 9109643,
            darkolivegreen: 5597999,
            darkorange: 16747520,
            darkorchid: 10040012,
            darkred: 9109504,
            darksalmon: 15308410,
            darkseagreen: 9419919,
            darkslateblue: 4734347,
            darkslategray: 3100495,
            darkslategrey: 3100495,
            darkturquoise: 52945,
            darkviolet: 9699539,
            deeppink: 16716947,
            deepskyblue: 49151,
            dimgray: 6908265,
            dimgrey: 6908265,
            dodgerblue: 2003199,
            firebrick: 11674146,
            floralwhite: 16775920,
            forestgreen: 2263842,
            fuchsia: 16711935,
            gainsboro: 14474460,
            ghostwhite: 16316671,
            gold: 16766720,
            goldenrod: 14329120,
            gray: 8421504,
            green: 32768,
            greenyellow: 11403055,
            grey: 8421504,
            honeydew: 15794160,
            hotpink: 16738740,
            indianred: 13458524,
            indigo: 4915330,
            ivory: 16777200,
            khaki: 15787660,
            lavender: 15132410,
            lavenderblush: 16773365,
            lawngreen: 8190976,
            lemonchiffon: 16775885,
            lightblue: 11393254,
            lightcoral: 15761536,
            lightcyan: 14745599,
            lightgoldenrodyellow: 16448210,
            lightgray: 13882323,
            lightgreen: 9498256,
            lightgrey: 13882323,
            lightpink: 16758465,
            lightsalmon: 16752762,
            lightseagreen: 2142890,
            lightskyblue: 8900346,
            lightslategray: 7833753,
            lightslategrey: 7833753,
            lightsteelblue: 11584734,
            lightyellow: 16777184,
            lime: 65280,
            limegreen: 3329330,
            linen: 16445670,
            magenta: 16711935,
            maroon: 8388608,
            mediumaquamarine: 6737322,
            mediumblue: 205,
            mediumorchid: 12211667,
            mediumpurple: 9662683,
            mediumseagreen: 3978097,
            mediumslateblue: 8087790,
            mediumspringgreen: 64154,
            mediumturquoise: 4772300,
            mediumvioletred: 13047173,
            midnightblue: 1644912,
            mintcream: 16121850,
            mistyrose: 16770273,
            moccasin: 16770229,
            navajowhite: 16768685,
            navy: 128,
            oldlace: 16643558,
            olive: 8421376,
            olivedrab: 7048739,
            orange: 16753920,
            orangered: 16729344,
            orchid: 14315734,
            palegoldenrod: 15657130,
            palegreen: 10025880,
            paleturquoise: 11529966,
            palevioletred: 14381203,
            papayawhip: 16773077,
            peachpuff: 16767673,
            peru: 13468991,
            pink: 16761035,
            plum: 14524637,
            powderblue: 11591910,
            purple: 8388736,
            rebeccapurple: 6697881,
            red: 16711680,
            rosybrown: 12357519,
            royalblue: 4286945,
            saddlebrown: 9127187,
            salmon: 16416882,
            sandybrown: 16032864,
            seagreen: 3050327,
            seashell: 16774638,
            sienna: 10506797,
            silver: 12632256,
            skyblue: 8900331,
            slateblue: 6970061,
            slategray: 7372944,
            slategrey: 7372944,
            snow: 16775930,
            springgreen: 65407,
            steelblue: 4620980,
            tan: 13808780,
            teal: 32896,
            thistle: 14204888,
            tomato: 16737095,
            turquoise: 4251856,
            violet: 15631086,
            wheat: 16113331,
            white: 16777215,
            whitesmoke: 16119285,
            yellow: 16776960,
            yellowgreen: 10145074
        };
        function Color(r, g, b) {
            if (g === undefined && b === undefined) {
                return this.set(r)
            }
            return this.setRGB(r, g, b)
        }
        Object.assign(Color.prototype, {
            isColor: true,
            r: 1,
            g: 1,
            b: 1,
            set: function(value) {
                if (value && value.isColor) {
                    this.copy(value)
                } else if (typeof value === "number") {
                    this.setHex(value)
                } else if (typeof value === "string") {
                    this.setStyle(value)
                }
                return this
            },
            setScalar: function(scalar) {
                this.r = scalar;
                this.g = scalar;
                this.b = scalar;
                return this
            },
            setHex: function(hex) {
                hex = Math.floor(hex);
                this.r = (hex >> 16 & 255) / 255;
                this.g = (hex >> 8 & 255) / 255;
                this.b = (hex & 255) / 255;
                return this
            },
            setRGB: function(r, g, b) {
                this.r = r;
                this.g = g;
                this.b = b;
                return this
            },
            setHSL: function() {
                function hue2rgb(p, q, t) {
                    if (t < 0)
                        t += 1;
                    if (t > 1)
                        t -= 1;
                    if (t < 1 / 6)
                        return p + (q - p) * 6 * t;
                    if (t < 1 / 2)
                        return q;
                    if (t < 2 / 3)
                        return p + (q - p) * 6 * (2 / 3 - t);
                    return p
                }
                return function setHSL(h, s, l) {
                    h = _Math.euclideanModulo(h, 1);
                    s = _Math.clamp(s, 0, 1);
                    l = _Math.clamp(l, 0, 1);
                    if (s === 0) {
                        this.r = this.g = this.b = l
                    } else {
                        var p = l <= .5 ? l * (1 + s) : l + s - l * s;
                        var q = 2 * l - p;
                        this.r = hue2rgb(q, p, h + 1 / 3);
                        this.g = hue2rgb(q, p, h);
                        this.b = hue2rgb(q, p, h - 1 / 3)
                    }
                    return this
                }
            }(),
            setStyle: function(style) {
                function handleAlpha(string) {
                    if (string === undefined)
                        return;
                    if (parseFloat(string) < 1) {
                        console.warn("THREE.Color: Alpha component of " + style + " will be ignored.")
                    }
                }
                var m;
                if (m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)) {
                    var color;
                    var name = m[1];
                    var components = m[2];
                    switch (name) {
                    case "rgb":
                    case "rgba":
                        if (color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
                            this.r = Math.min(255, parseInt(color[1], 10)) / 255;
                            this.g = Math.min(255, parseInt(color[2], 10)) / 255;
                            this.b = Math.min(255, parseInt(color[3], 10)) / 255;
                            handleAlpha(color[5]);
                            return this
                        }
                        if (color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
                            this.r = Math.min(100, parseInt(color[1], 10)) / 100;
                            this.g = Math.min(100, parseInt(color[2], 10)) / 100;
                            this.b = Math.min(100, parseInt(color[3], 10)) / 100;
                            handleAlpha(color[5]);
                            return this
                        }
                        break;
                    case "hsl":
                    case "hsla":
                        if (color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
                            var h = parseFloat(color[1]) / 360;
                            var s = parseInt(color[2], 10) / 100;
                            var l = parseInt(color[3], 10) / 100;
                            handleAlpha(color[5]);
                            return this.setHSL(h, s, l)
                        }
                        break
                    }
                } else if (m = /^\#([A-Fa-f0-9]+)$/.exec(style)) {
                    var hex = m[1];
                    var size = hex.length;
                    if (size === 3) {
                        this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
                        this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
                        this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
                        return this
                    } else if (size === 6) {
                        this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
                        this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
                        this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
                        return this
                    }
                }
                if (style && style.length > 0) {
                    var hex = ColorKeywords[style];
                    if (hex !== undefined) {
                        this.setHex(hex)
                    } else {
                        console.warn("THREE.Color: Unknown color " + style)
                    }
                }
                return this
            },
            clone: function() {
                return new this.constructor(this.r, this.g, this.b)
            },
            copy: function(color) {
                this.r = color.r;
                this.g = color.g;
                this.b = color.b;
                return this
            },
            copyGammaToLinear: function(color, gammaFactor) {
                if (gammaFactor === undefined)
                    gammaFactor = 2;
                this.r = Math.pow(color.r, gammaFactor);
                this.g = Math.pow(color.g, gammaFactor);
                this.b = Math.pow(color.b, gammaFactor);
                return this
            },
            copyLinearToGamma: function(color, gammaFactor) {
                if (gammaFactor === undefined)
                    gammaFactor = 2;
                var safeInverse = gammaFactor > 0 ? 1 / gammaFactor : 1;
                this.r = Math.pow(color.r, safeInverse);
                this.g = Math.pow(color.g, safeInverse);
                this.b = Math.pow(color.b, safeInverse);
                return this
            },
            convertGammaToLinear: function(gammaFactor) {
                this.copyGammaToLinear(this, gammaFactor);
                return this
            },
            convertLinearToGamma: function(gammaFactor) {
                this.copyLinearToGamma(this, gammaFactor);
                return this
            },
            copySRGBToLinear: function() {
                function SRGBToLinear(c) {
                    return c < .04045 ? c * .0773993808 : Math.pow(c * .9478672986 + .0521327014, 2.4)
                }
                return function copySRGBToLinear(color) {
                    this.r = SRGBToLinear(color.r);
                    this.g = SRGBToLinear(color.g);
                    this.b = SRGBToLinear(color.b);
                    return this
                }
            }(),
            copyLinearToSRGB: function() {
                function LinearToSRGB(c) {
                    return c < .0031308 ? c * 12.92 : 1.055 * Math.pow(c, .41666) - .055
                }
                return function copyLinearToSRGB(color) {
                    this.r = LinearToSRGB(color.r);
                    this.g = LinearToSRGB(color.g);
                    this.b = LinearToSRGB(color.b);
                    return this
                }
            }(),
            convertSRGBToLinear: function() {
                this.copySRGBToLinear(this);
                return this
            },
            convertLinearToSRGB: function() {
                this.copyLinearToSRGB(this);
                return this
            },
            getHex: function() {
                return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0
            },
            getHexString: function() {
                return ("000000" + this.getHex().toString(16)).slice(-6)
            },
            getHSL: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Color: .getHSL() target is now required");
                    target = {
                        h: 0,
                        s: 0,
                        l: 0
                    }
                }
                var r = this.r,
                    g = this.g,
                    b = this.b;
                var max = Math.max(r, g, b);
                var min = Math.min(r, g, b);
                var hue,
                    saturation;
                var lightness = (min + max) / 2;
                if (min === max) {
                    hue = 0;
                    saturation = 0
                } else {
                    var delta = max - min;
                    saturation = lightness <= .5 ? delta / (max + min) : delta / (2 - max - min);
                    switch (max) {
                    case r:
                        hue = (g - b) / delta + (g < b ? 6 : 0);
                        break;
                    case g:
                        hue = (b - r) / delta + 2;
                        break;
                    case b:
                        hue = (r - g) / delta + 4;
                        break
                    }
                    hue /= 6
                }
                target.h = hue;
                target.s = saturation;
                target.l = lightness;
                return target
            },
            getStyle: function() {
                return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")"
            },
            offsetHSL: function() {
                var hsl = {};
                return function(h, s, l) {
                    this.getHSL(hsl);
                    hsl.h += h;
                    hsl.s += s;
                    hsl.l += l;
                    this.setHSL(hsl.h, hsl.s, hsl.l);
                    return this
                }
            }(),
            add: function(color) {
                this.r += color.r;
                this.g += color.g;
                this.b += color.b;
                return this
            },
            addColors: function(color1, color2) {
                this.r = color1.r + color2.r;
                this.g = color1.g + color2.g;
                this.b = color1.b + color2.b;
                return this
            },
            addScalar: function(s) {
                this.r += s;
                this.g += s;
                this.b += s;
                return this
            },
            sub: function(color) {
                this.r = Math.max(0, this.r - color.r);
                this.g = Math.max(0, this.g - color.g);
                this.b = Math.max(0, this.b - color.b);
                return this
            },
            multiply: function(color) {
                this.r *= color.r;
                this.g *= color.g;
                this.b *= color.b;
                return this
            },
            multiplyScalar: function(s) {
                this.r *= s;
                this.g *= s;
                this.b *= s;
                return this
            },
            lerp: function(color, alpha) {
                this.r += (color.r - this.r) * alpha;
                this.g += (color.g - this.g) * alpha;
                this.b += (color.b - this.b) * alpha;
                return this
            },
            equals: function(c) {
                return c.r === this.r && c.g === this.g && c.b === this.b
            },
            fromArray: function(array, offset) {
                if (offset === undefined)
                    offset = 0;
                this.r = array[offset];
                this.g = array[offset + 1];
                this.b = array[offset + 2];
                return this
            },
            toArray: function(array, offset) {
                if (array === undefined)
                    array = [];
                if (offset === undefined)
                    offset = 0;
                array[offset] = this.r;
                array[offset + 1] = this.g;
                array[offset + 2] = this.b;
                return array
            },
            toJSON: function() {
                return this.getHex()
            }
        });
        var UniformsLib = {
            common: {
                diffuse: {
                    value: new Color(15658734)
                },
                opacity: {
                    value: 1
                },
                map: {
                    value: null
                },
                uvTransform: {
                    value: new Matrix3
                },
                alphaMap: {
                    value: null
                }
            },
            specularmap: {
                specularMap: {
                    value: null
                }
            },
            envmap: {
                envMap: {
                    value: null
                },
                flipEnvMap: {
                    value: -1
                },
                reflectivity: {
                    value: 1
                },
                refractionRatio: {
                    value: .98
                },
                maxMipLevel: {
                    value: 0
                }
            },
            aomap: {
                aoMap: {
                    value: null
                },
                aoMapIntensity: {
                    value: 1
                }
            },
            lightmap: {
                lightMap: {
                    value: null
                },
                lightMapIntensity: {
                    value: 1
                }
            },
            emissivemap: {
                emissiveMap: {
                    value: null
                }
            },
            bumpmap: {
                bumpMap: {
                    value: null
                },
                bumpScale: {
                    value: 1
                }
            },
            normalmap: {
                normalMap: {
                    value: null
                },
                normalScale: {
                    value: new Vector2(1, 1)
                }
            },
            displacementmap: {
                displacementMap: {
                    value: null
                },
                displacementScale: {
                    value: 1
                },
                displacementBias: {
                    value: 0
                }
            },
            roughnessmap: {
                roughnessMap: {
                    value: null
                }
            },
            metalnessmap: {
                metalnessMap: {
                    value: null
                }
            },
            gradientmap: {
                gradientMap: {
                    value: null
                }
            },
            fog: {
                fogDensity: {
                    value: 25e-5
                },
                fogNear: {
                    value: 1
                },
                fogFar: {
                    value: 2e3
                },
                fogColor: {
                    value: new Color(16777215)
                }
            },
            lights: {
                ambientLightColor: {
                    value: []
                },
                directionalLights: {
                    value: [],
                    properties: {
                        direction: {},
                        color: {},
                        shadow: {},
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },
                directionalShadowMap: {
                    value: []
                },
                directionalShadowMatrix: {
                    value: []
                },
                spotLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        direction: {},
                        distance: {},
                        coneCos: {},
                        penumbraCos: {},
                        decay: {},
                        shadow: {},
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },
                spotShadowMap: {
                    value: []
                },
                spotShadowMatrix: {
                    value: []
                },
                pointLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        decay: {},
                        distance: {},
                        shadow: {},
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {},
                        shadowCameraNear: {},
                        shadowCameraFar: {}
                    }
                },
                pointShadowMap: {
                    value: []
                },
                pointShadowMatrix: {
                    value: []
                },
                hemisphereLights: {
                    value: [],
                    properties: {
                        direction: {},
                        skyColor: {},
                        groundColor: {}
                    }
                },
                rectAreaLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        width: {},
                        height: {}
                    }
                }
            },
            points: {
                diffuse: {
                    value: new Color(15658734)
                },
                opacity: {
                    value: 1
                },
                size: {
                    value: 1
                },
                scale: {
                    value: 1
                },
                map: {
                    value: null
                },
                uvTransform: {
                    value: new Matrix3
                }
            },
            sprite: {
                diffuse: {
                    value: new Color(15658734)
                },
                opacity: {
                    value: 1
                },
                center: {
                    value: new Vector2(.5, .5)
                },
                rotation: {
                    value: 0
                },
                map: {
                    value: null
                },
                uvTransform: {
                    value: new Matrix3
                }
            }
        };
        var ShaderLib = {
            basic: {
                uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),
                vertexShader: ShaderChunk.meshbasic_vert,
                fragmentShader: ShaderChunk.meshbasic_frag
            },
            lambert: {
                uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {
                    emissive: {
                        value: new Color(0)
                    }
                }]),
                vertexShader: ShaderChunk.meshlambert_vert,
                fragmentShader: ShaderChunk.meshlambert_frag
            },
            phong: {
                uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {
                    emissive: {
                        value: new Color(0)
                    },
                    specular: {
                        value: new Color(1118481)
                    },
                    shininess: {
                        value: 30
                    }
                }]),
                vertexShader: ShaderChunk.meshphong_vert,
                fragmentShader: ShaderChunk.meshphong_frag
            },
            standard: {
                uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {
                    emissive: {
                        value: new Color(0)
                    },
                    roughness: {
                        value: .5
                    },
                    metalness: {
                        value: .5
                    },
                    envMapIntensity: {
                        value: 1
                    }
                }]),
                vertexShader: ShaderChunk.meshphysical_vert,
                fragmentShader: ShaderChunk.meshphysical_frag
            },
            points: {
                uniforms: UniformsUtils.merge([UniformsLib.points, UniformsLib.fog]),
                vertexShader: ShaderChunk.points_vert,
                fragmentShader: ShaderChunk.points_frag
            },
            dashed: {
                uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.fog, {
                    scale: {
                        value: 1
                    },
                    dashSize: {
                        value: 1
                    },
                    totalSize: {
                        value: 2
                    }
                }]),
                vertexShader: ShaderChunk.linedashed_vert,
                fragmentShader: ShaderChunk.linedashed_frag
            },
            depth: {
                uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.displacementmap]),
                vertexShader: ShaderChunk.depth_vert,
                fragmentShader: ShaderChunk.depth_frag
            },
            normal: {
                uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: ShaderChunk.normal_vert,
                fragmentShader: ShaderChunk.normal_frag
            },
            sprite: {
                uniforms: UniformsUtils.merge([UniformsLib.sprite, UniformsLib.fog]),
                vertexShader: ShaderChunk.sprite_vert,
                fragmentShader: ShaderChunk.sprite_frag
            },
            cube: {
                uniforms: {
                    tCube: {
                        value: null
                    },
                    tFlip: {
                        value: -1
                    },
                    opacity: {
                        value: 1
                    }
                },
                vertexShader: ShaderChunk.cube_vert,
                fragmentShader: ShaderChunk.cube_frag
            },
            equirect: {
                uniforms: {
                    tEquirect: {
                        value: null
                    }
                },
                vertexShader: ShaderChunk.equirect_vert,
                fragmentShader: ShaderChunk.equirect_frag
            },
            distanceRGBA: {
                uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.displacementmap, {
                    referencePosition: {
                        value: new Vector3
                    },
                    nearDistance: {
                        value: 1
                    },
                    farDistance: {
                        value: 1e3
                    }
                }]),
                vertexShader: ShaderChunk.distanceRGBA_vert,
                fragmentShader: ShaderChunk.distanceRGBA_frag
            },
            shadow: {
                uniforms: UniformsUtils.merge([UniformsLib.lights, UniformsLib.fog, {
                    color: {
                        value: new Color(0)
                    },
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: ShaderChunk.shadow_vert,
                fragmentShader: ShaderChunk.shadow_frag
            }
        };
        ShaderLib.physical = {
            uniforms: UniformsUtils.merge([ShaderLib.standard.uniforms, {
                clearCoat: {
                    value: 0
                },
                clearCoatRoughness: {
                    value: 0
                }
            }]),
            vertexShader: ShaderChunk.meshphysical_vert,
            fragmentShader: ShaderChunk.meshphysical_frag
        };
        function WebGLAnimation() {
            var context = null;
            var isAnimating = false;
            var animationLoop = null;
            function onAnimationFrame(time, frame) {
                if (isAnimating === false)
                    return;
                animationLoop(time, frame);
                context.requestAnimationFrame(onAnimationFrame)
            }
            return {
                start: function() {
                    if (isAnimating === true)
                        return;
                    if (animationLoop === null)
                        return;
                    context.requestAnimationFrame(onAnimationFrame);
                    isAnimating = true
                },
                stop: function() {
                    isAnimating = false
                },
                setAnimationLoop: function(callback) {
                    animationLoop = callback
                },
                setContext: function(value) {
                    context = value
                }
            }
        }
        function WebGLAttributes(gl) {
            var buffers = new WeakMap;
            function createBuffer(attribute, bufferType) {
                var array = attribute.array;
                var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
                var buffer = gl.createBuffer();
                gl.bindBuffer(bufferType, buffer);
                gl.bufferData(bufferType, array, usage);
                attribute.onUploadCallback();
                var type = gl.FLOAT;
                if (array instanceof Float32Array) {
                    type = gl.FLOAT
                } else if (array instanceof Float64Array) {
                    console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.")
                } else if (array instanceof Uint16Array) {
                    type = gl.UNSIGNED_SHORT
                } else if (array instanceof Int16Array) {
                    type = gl.SHORT
                } else if (array instanceof Uint32Array) {
                    type = gl.UNSIGNED_INT
                } else if (array instanceof Int32Array) {
                    type = gl.INT
                } else if (array instanceof Int8Array) {
                    type = gl.BYTE
                } else if (array instanceof Uint8Array) {
                    type = gl.UNSIGNED_BYTE
                }
                return {
                    buffer: buffer,
                    type: type,
                    bytesPerElement: array.BYTES_PER_ELEMENT,
                    version: attribute.version
                }
            }
            function updateBuffer(buffer, attribute, bufferType) {
                var array = attribute.array;
                var updateRange = attribute.updateRange;
                gl.bindBuffer(bufferType, buffer);
                if (attribute.dynamic === false) {
                    gl.bufferData(bufferType, array, gl.STATIC_DRAW)
                } else if (updateRange.count === -1) {
                    gl.bufferSubData(bufferType, 0, array)
                } else if (updateRange.count === 0) {
                    console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.")
                } else {
                    gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
                    updateRange.count = -1
                }
            }
            function get(attribute) {
                if (attribute.isInterleavedBufferAttribute)
                    attribute = attribute.data;
                return buffers.get(attribute)
            }
            function remove(attribute) {
                if (attribute.isInterleavedBufferAttribute)
                    attribute = attribute.data;
                var data = buffers.get(attribute);
                if (data) {
                    gl.deleteBuffer(data.buffer);
                    buffers.delete(attribute)
                }
            }
            function update(attribute, bufferType) {
                if (attribute.isInterleavedBufferAttribute)
                    attribute = attribute.data;
                var data = buffers.get(attribute);
                if (data === undefined) {
                    buffers.set(attribute, createBuffer(attribute, bufferType))
                } else if (data.version < attribute.version) {
                    updateBuffer(data.buffer, attribute, bufferType);
                    data.version = attribute.version
                }
            }
            return {
                get: get,
                remove: remove,
                update: update
            }
        }
        function Euler(x, y, z, order) {
            this._x = x || 0;
            this._y = y || 0;
            this._z = z || 0;
            this._order = order || Euler.DefaultOrder
        }
        Euler.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
        Euler.DefaultOrder = "XYZ";
        Object.defineProperties(Euler.prototype, {
            x: {
                get: function() {
                    return this._x
                },
                set: function(value) {
                    this._x = value;
                    this.onChangeCallback()
                }
            },
            y: {
                get: function() {
                    return this._y
                },
                set: function(value) {
                    this._y = value;
                    this.onChangeCallback()
                }
            },
            z: {
                get: function() {
                    return this._z
                },
                set: function(value) {
                    this._z = value;
                    this.onChangeCallback()
                }
            },
            order: {
                get: function() {
                    return this._order
                },
                set: function(value) {
                    this._order = value;
                    this.onChangeCallback()
                }
            }
        });
        Object.assign(Euler.prototype, {
            isEuler: true,
            set: function(x, y, z, order) {
                this._x = x;
                this._y = y;
                this._z = z;
                this._order = order || this._order;
                this.onChangeCallback();
                return this
            },
            clone: function() {
                return new this.constructor(this._x, this._y, this._z, this._order)
            },
            copy: function(euler) {
                this._x = euler._x;
                this._y = euler._y;
                this._z = euler._z;
                this._order = euler._order;
                this.onChangeCallback();
                return this
            },
            setFromRotationMatrix: function(m, order, update) {
                var clamp = _Math.clamp;
                var te = m.elements;
                var m11 = te[0],
                    m12 = te[4],
                    m13 = te[8];
                var m21 = te[1],
                    m22 = te[5],
                    m23 = te[9];
                var m31 = te[2],
                    m32 = te[6],
                    m33 = te[10];
                order = order || this._order;
                if (order === "XYZ") {
                    this._y = Math.asin(clamp(m13, -1, 1));
                    if (Math.abs(m13) < .99999) {
                        this._x = Math.atan2(-m23, m33);
                        this._z = Math.atan2(-m12, m11)
                    } else {
                        this._x = Math.atan2(m32, m22);
                        this._z = 0
                    }
                } else if (order === "YXZ") {
                    this._x = Math.asin(-clamp(m23, -1, 1));
                    if (Math.abs(m23) < .99999) {
                        this._y = Math.atan2(m13, m33);
                        this._z = Math.atan2(m21, m22)
                    } else {
                        this._y = Math.atan2(-m31, m11);
                        this._z = 0
                    }
                } else if (order === "ZXY") {
                    this._x = Math.asin(clamp(m32, -1, 1));
                    if (Math.abs(m32) < .99999) {
                        this._y = Math.atan2(-m31, m33);
                        this._z = Math.atan2(-m12, m22)
                    } else {
                        this._y = 0;
                        this._z = Math.atan2(m21, m11)
                    }
                } else if (order === "ZYX") {
                    this._y = Math.asin(-clamp(m31, -1, 1));
                    if (Math.abs(m31) < .99999) {
                        this._x = Math.atan2(m32, m33);
                        this._z = Math.atan2(m21, m11)
                    } else {
                        this._x = 0;
                        this._z = Math.atan2(-m12, m22)
                    }
                } else if (order === "YZX") {
                    this._z = Math.asin(clamp(m21, -1, 1));
                    if (Math.abs(m21) < .99999) {
                        this._x = Math.atan2(-m23, m22);
                        this._y = Math.atan2(-m31, m11)
                    } else {
                        this._x = 0;
                        this._y = Math.atan2(m13, m33)
                    }
                } else if (order === "XZY") {
                    this._z = Math.asin(-clamp(m12, -1, 1));
                    if (Math.abs(m12) < .99999) {
                        this._x = Math.atan2(m32, m22);
                        this._y = Math.atan2(m13, m11)
                    } else {
                        this._x = Math.atan2(-m23, m33);
                        this._y = 0
                    }
                } else {
                    console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + order)
                }
                this._order = order;
                if (update !== false)
                    this.onChangeCallback();
                return this
            },
            setFromQuaternion: function() {
                var matrix = new Matrix4;
                return function setFromQuaternion(q, order, update) {
                    matrix.makeRotationFromQuaternion(q);
                    return this.setFromRotationMatrix(matrix, order, update)
                }
            }(),
            setFromVector3: function(v, order) {
                return this.set(v.x, v.y, v.z, order || this._order)
            },
            reorder: function() {
                var q = new Quaternion;
                return function reorder(newOrder) {
                    q.setFromEuler(this);
                    return this.setFromQuaternion(q, newOrder)
                }
            }(),
            equals: function(euler) {
                return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order
            },
            fromArray: function(array) {
                this._x = array[0];
                this._y = array[1];
                this._z = array[2];
                if (array[3] !== undefined)
                    this._order = array[3];
                this.onChangeCallback();
                return this
            },
            toArray: function(array, offset) {
                if (array === undefined)
                    array = [];
                if (offset === undefined)
                    offset = 0;
                array[offset] = this._x;
                array[offset + 1] = this._y;
                array[offset + 2] = this._z;
                array[offset + 3] = this._order;
                return array
            },
            toVector3: function(optionalResult) {
                if (optionalResult) {
                    return optionalResult.set(this._x, this._y, this._z)
                } else {
                    return new Vector3(this._x, this._y, this._z)
                }
            },
            onChange: function(callback) {
                this.onChangeCallback = callback;
                return this
            },
            onChangeCallback: function() {}
        });
        function Layers() {
            this.mask = 1 | 0
        }
        Object.assign(Layers.prototype, {
            set: function(channel) {
                this.mask = 1 << channel | 0
            },
            enable: function(channel) {
                this.mask |= 1 << channel | 0
            },
            toggle: function(channel) {
                this.mask ^= 1 << channel | 0
            },
            disable: function(channel) {
                this.mask &= ~(1 << channel | 0)
            },
            test: function(layers) {
                return (this.mask & layers.mask) !== 0
            }
        });
        var object3DId = 0;
        function Object3D() {
            Object.defineProperty(this, "id", {
                value: object3DId++
            });
            this.uuid = _Math.generateUUID();
            this.name = "";
            this.type = "Object3D";
            this.parent = null;
            this.children = [];
            this.up = Object3D.DefaultUp.clone();
            var position = new Vector3;
            var rotation = new Euler;
            var quaternion = new Quaternion;
            var scale = new Vector3(1, 1, 1);
            function onRotationChange() {
                quaternion.setFromEuler(rotation, false)
            }
            function onQuaternionChange() {
                rotation.setFromQuaternion(quaternion, undefined, false)
            }
            rotation.onChange(onRotationChange);
            quaternion.onChange(onQuaternionChange);
            Object.defineProperties(this, {
                position: {
                    enumerable: true,
                    value: position
                },
                rotation: {
                    enumerable: true,
                    value: rotation
                },
                quaternion: {
                    enumerable: true,
                    value: quaternion
                },
                scale: {
                    enumerable: true,
                    value: scale
                },
                modelViewMatrix: {
                    value: new Matrix4
                },
                normalMatrix: {
                    value: new Matrix3
                }
            });
            this.matrix = new Matrix4;
            this.matrixWorld = new Matrix4;
            this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
            this.matrixWorldNeedsUpdate = false;
            this.layers = new Layers;
            this.visible = true;
            this.castShadow = false;
            this.receiveShadow = false;
            this.frustumCulled = true;
            this.renderOrder = 0;
            this.userData = {}
        }
        Object3D.DefaultUp = new Vector3(0, 1, 0);
        Object3D.DefaultMatrixAutoUpdate = true;
        Object3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
            constructor: Object3D,
            isObject3D: true,
            onBeforeRender: function() {},
            onAfterRender: function() {},
            applyMatrix: function(matrix) {
                this.matrix.multiplyMatrices(matrix, this.matrix);
                this.matrix.decompose(this.position, this.quaternion, this.scale)
            },
            applyQuaternion: function(q) {
                this.quaternion.premultiply(q);
                return this
            },
            setRotationFromAxisAngle: function(axis, angle) {
                this.quaternion.setFromAxisAngle(axis, angle)
            },
            setRotationFromEuler: function(euler) {
                this.quaternion.setFromEuler(euler, true)
            },
            setRotationFromMatrix: function(m) {
                this.quaternion.setFromRotationMatrix(m)
            },
            setRotationFromQuaternion: function(q) {
                this.quaternion.copy(q)
            },
            rotateOnAxis: function() {
                var q1 = new Quaternion;
                return function rotateOnAxis(axis, angle) {
                    q1.setFromAxisAngle(axis, angle);
                    this.quaternion.multiply(q1);
                    return this
                }
            }(),
            rotateOnWorldAxis: function() {
                var q1 = new Quaternion;
                return function rotateOnWorldAxis(axis, angle) {
                    q1.setFromAxisAngle(axis, angle);
                    this.quaternion.premultiply(q1);
                    return this
                }
            }(),
            rotateX: function() {
                var v1 = new Vector3(1, 0, 0);
                return function rotateX(angle) {
                    return this.rotateOnAxis(v1, angle)
                }
            }(),
            rotateY: function() {
                var v1 = new Vector3(0, 1, 0);
                return function rotateY(angle) {
                    return this.rotateOnAxis(v1, angle)
                }
            }(),
            rotateZ: function() {
                var v1 = new Vector3(0, 0, 1);
                return function rotateZ(angle) {
                    return this.rotateOnAxis(v1, angle)
                }
            }(),
            translateOnAxis: function() {
                var v1 = new Vector3;
                return function translateOnAxis(axis, distance) {
                    v1.copy(axis).applyQuaternion(this.quaternion);
                    this.position.add(v1.multiplyScalar(distance));
                    return this
                }
            }(),
            translateX: function() {
                var v1 = new Vector3(1, 0, 0);
                return function translateX(distance) {
                    return this.translateOnAxis(v1, distance)
                }
            }(),
            translateY: function() {
                var v1 = new Vector3(0, 1, 0);
                return function translateY(distance) {
                    return this.translateOnAxis(v1, distance)
                }
            }(),
            translateZ: function() {
                var v1 = new Vector3(0, 0, 1);
                return function translateZ(distance) {
                    return this.translateOnAxis(v1, distance)
                }
            }(),
            localToWorld: function(vector) {
                return vector.applyMatrix4(this.matrixWorld)
            },
            worldToLocal: function() {
                var m1 = new Matrix4;
                return function worldToLocal(vector) {
                    return vector.applyMatrix4(m1.getInverse(this.matrixWorld))
                }
            }(),
            lookAt: function() {
                var m1 = new Matrix4;
                var vector = new Vector3;
                return function lookAt(x, y, z) {
                    if (x.isVector3) {
                        vector.copy(x)
                    } else {
                        vector.set(x, y, z)
                    }
                    if (this.isCamera) {
                        m1.lookAt(this.position, vector, this.up)
                    } else {
                        m1.lookAt(vector, this.position, this.up)
                    }
                    this.quaternion.setFromRotationMatrix(m1)
                }
            }(),
            add: function(object) {
                if (arguments.length > 1) {
                    for (var i = 0; i < arguments.length; i++) {
                        this.add(arguments[i])
                    }
                    return this
                }
                if (object === this) {
                    console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
                    return this
                }
                if (object && object.isObject3D) {
                    if (object.parent !== null) {
                        object.parent.remove(object)
                    }
                    object.parent = this;
                    object.dispatchEvent({
                        type: "added"
                    });
                    this.children.push(object)
                } else {
                    console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object)
                }
                return this
            },
            remove: function(object) {
                if (arguments.length > 1) {
                    for (var i = 0; i < arguments.length; i++) {
                        this.remove(arguments[i])
                    }
                    return this
                }
                var index = this.children.indexOf(object);
                if (index !== -1) {
                    object.parent = null;
                    object.dispatchEvent({
                        type: "removed"
                    });
                    this.children.splice(index, 1)
                }
                return this
            },
            getObjectById: function(id) {
                return this.getObjectByProperty("id", id)
            },
            getObjectByName: function(name) {
                return this.getObjectByProperty("name", name)
            },
            getObjectByProperty: function(name, value) {
                if (this[name] === value)
                    return this;
                for (var i = 0, l = this.children.length; i < l; i++) {
                    var child = this.children[i];
                    var object = child.getObjectByProperty(name, value);
                    if (object !== undefined) {
                        return object
                    }
                }
                return undefined
            },
            getWorldPosition: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Object3D: .getWorldPosition() target is now required");
                    target = new Vector3
                }
                this.updateMatrixWorld(true);
                return target.setFromMatrixPosition(this.matrixWorld)
            },
            getWorldQuaternion: function() {
                var position = new Vector3;
                var scale = new Vector3;
                return function getWorldQuaternion(target) {
                    if (target === undefined) {
                        console.warn("THREE.Object3D: .getWorldQuaternion() target is now required");
                        target = new Quaternion
                    }
                    this.updateMatrixWorld(true);
                    this.matrixWorld.decompose(position, target, scale);
                    return target
                }
            }(),
            getWorldScale: function() {
                var position = new Vector3;
                var quaternion = new Quaternion;
                return function getWorldScale(target) {
                    if (target === undefined) {
                        console.warn("THREE.Object3D: .getWorldScale() target is now required");
                        target = new Vector3
                    }
                    this.updateMatrixWorld(true);
                    this.matrixWorld.decompose(position, quaternion, target);
                    return target
                }
            }(),
            getWorldDirection: function() {
                var quaternion = new Quaternion;
                return function getWorldDirection(target) {
                    if (target === undefined) {
                        console.warn("THREE.Object3D: .getWorldDirection() target is now required");
                        target = new Vector3
                    }
                    this.getWorldQuaternion(quaternion);
                    return target.set(0, 0, 1).applyQuaternion(quaternion)
                }
            }(),
            raycast: function() {},
            traverse: function(callback) {
                callback(this);
                var children = this.children;
                for (var i = 0, l = children.length; i < l; i++) {
                    children[i].traverse(callback)
                }
            },
            traverseVisible: function(callback) {
                if (this.visible === false)
                    return;
                callback(this);
                var children = this.children;
                for (var i = 0, l = children.length; i < l; i++) {
                    children[i].traverseVisible(callback)
                }
            },
            traverseAncestors: function(callback) {
                var parent = this.parent;
                if (parent !== null) {
                    callback(parent);
                    parent.traverseAncestors(callback)
                }
            },
            updateMatrix: function() {
                this.matrix.compose(this.position, this.quaternion, this.scale);
                this.matrixWorldNeedsUpdate = true
            },
            updateMatrixWorld: function(force) {
                if (this.matrixAutoUpdate)
                    this.updateMatrix();
                if (this.matrixWorldNeedsUpdate || force) {
                    if (this.parent === null) {
                        this.matrixWorld.copy(this.matrix)
                    } else {
                        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)
                    }
                    this.matrixWorldNeedsUpdate = false;
                    force = true
                }
                var children = this.children;
                for (var i = 0, l = children.length; i < l; i++) {
                    children[i].updateMatrixWorld(force)
                }
            },
            toJSON: function(meta) {
                var isRootObject = meta === undefined || typeof meta === "string";
                var output = {};
                if (isRootObject) {
                    meta = {
                        geometries: {},
                        materials: {},
                        textures: {},
                        images: {},
                        shapes: {}
                    };
                    output.metadata = {
                        version: 4.5,
                        type: "Object",
                        generator: "Object3D.toJSON"
                    }
                }
                var object = {};
                object.uuid = this.uuid;
                object.type = this.type;
                if (this.name !== "")
                    object.name = this.name;
                if (this.castShadow === true)
                    object.castShadow = true;
                if (this.receiveShadow === true)
                    object.receiveShadow = true;
                if (this.visible === false)
                    object.visible = false;
                if (this.frustumCulled === false)
                    object.frustumCulled = false;
                if (this.renderOrder !== 0)
                    object.renderOrder = this.renderOrder;
                if (JSON.stringify(this.userData) !== "{}")
                    object.userData = this.userData;
                object.layers = this.layers.mask;
                object.matrix = this.matrix.toArray();
                if (this.matrixAutoUpdate === false)
                    object.matrixAutoUpdate = false;
                function serialize(library, element) {
                    if (library[element.uuid] === undefined) {
                        library[element.uuid] = element.toJSON(meta)
                    }
                    return element.uuid
                }
                if (this.isMesh || this.isLine || this.isPoints) {
                    object.geometry = serialize(meta.geometries, this.geometry);
                    var parameters = this.geometry.parameters;
                    if (parameters !== undefined && parameters.shapes !== undefined) {
                        var shapes = parameters.shapes;
                        if (Array.isArray(shapes)) {
                            for (var i = 0, l = shapes.length; i < l; i++) {
                                var shape = shapes[i];
                                serialize(meta.shapes, shape)
                            }
                        } else {
                            serialize(meta.shapes, shapes)
                        }
                    }
                }
                if (this.material !== undefined) {
                    if (Array.isArray(this.material)) {
                        var uuids = [];
                        for (var i = 0, l = this.material.length; i < l; i++) {
                            uuids.push(serialize(meta.materials, this.material[i]))
                        }
                        object.material = uuids
                    } else {
                        object.material = serialize(meta.materials, this.material)
                    }
                }
                if (this.children.length > 0) {
                    object.children = [];
                    for (var i = 0; i < this.children.length; i++) {
                        object.children.push(this.children[i].toJSON(meta).object)
                    }
                }
                if (isRootObject) {
                    var geometries = extractFromCache(meta.geometries);
                    var materials = extractFromCache(meta.materials);
                    var textures = extractFromCache(meta.textures);
                    var images = extractFromCache(meta.images);
                    var shapes = extractFromCache(meta.shapes);
                    if (geometries.length > 0)
                        output.geometries = geometries;
                    if (materials.length > 0)
                        output.materials = materials;
                    if (textures.length > 0)
                        output.textures = textures;
                    if (images.length > 0)
                        output.images = images;
                    if (shapes.length > 0)
                        output.shapes = shapes
                }
                output.object = object;
                return output;
                function extractFromCache(cache) {
                    var values = [];
                    for (var key in cache) {
                        var data = cache[key];
                        delete data.metadata;
                        values.push(data)
                    }
                    return values
                }
            },
            clone: function(recursive) {
                return (new this.constructor).copy(this, recursive)
            },
            copy: function(source, recursive) {
                if (recursive === undefined)
                    recursive = true;
                this.name = source.name;
                this.up.copy(source.up);
                this.position.copy(source.position);
                this.quaternion.copy(source.quaternion);
                this.scale.copy(source.scale);
                this.matrix.copy(source.matrix);
                this.matrixWorld.copy(source.matrixWorld);
                this.matrixAutoUpdate = source.matrixAutoUpdate;
                this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
                this.layers.mask = source.layers.mask;
                this.visible = source.visible;
                this.castShadow = source.castShadow;
                this.receiveShadow = source.receiveShadow;
                this.frustumCulled = source.frustumCulled;
                this.renderOrder = source.renderOrder;
                this.userData = JSON.parse(JSON.stringify(source.userData));
                if (recursive === true) {
                    for (var i = 0; i < source.children.length; i++) {
                        var child = source.children[i];
                        this.add(child.clone())
                    }
                }
                return this
            }
        });
        function Camera() {
            Object3D.call(this);
            this.type = "Camera";
            this.matrixWorldInverse = new Matrix4;
            this.projectionMatrix = new Matrix4
        }
        Camera.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Camera,
            isCamera: true,
            copy: function(source, recursive) {
                Object3D.prototype.copy.call(this, source, recursive);
                this.matrixWorldInverse.copy(source.matrixWorldInverse);
                this.projectionMatrix.copy(source.projectionMatrix);
                return this
            },
            getWorldDirection: function() {
                var quaternion = new Quaternion;
                return function getWorldDirection(target) {
                    if (target === undefined) {
                        console.warn("THREE.Camera: .getWorldDirection() target is now required");
                        target = new Vector3
                    }
                    this.getWorldQuaternion(quaternion);
                    return target.set(0, 0, -1).applyQuaternion(quaternion)
                }
            }(),
            updateMatrixWorld: function(force) {
                Object3D.prototype.updateMatrixWorld.call(this, force);
                this.matrixWorldInverse.getInverse(this.matrixWorld)
            },
            clone: function() {
                return (new this.constructor).copy(this)
            }
        });
        function OrthographicCamera(left, right, top, bottom, near, far) {
            Camera.call(this);
            this.type = "OrthographicCamera";
            this.zoom = 1;
            this.view = null;
            this.left = left;
            this.right = right;
            this.top = top;
            this.bottom = bottom;
            this.near = near !== undefined ? near : .1;
            this.far = far !== undefined ? far : 2e3;
            this.updateProjectionMatrix()
        }
        OrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {
            constructor: OrthographicCamera,
            isOrthographicCamera: true,
            copy: function(source, recursive) {
                Camera.prototype.copy.call(this, source, recursive);
                this.left = source.left;
                this.right = source.right;
                this.top = source.top;
                this.bottom = source.bottom;
                this.near = source.near;
                this.far = source.far;
                this.zoom = source.zoom;
                this.view = source.view === null ? null : Object.assign({}, source.view);
                return this
            },
            setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
                if (this.view === null) {
                    this.view = {
                        enabled: true,
                        fullWidth: 1,
                        fullHeight: 1,
                        offsetX: 0,
                        offsetY: 0,
                        width: 1,
                        height: 1
                    }
                }
                this.view.enabled = true;
                this.view.fullWidth = fullWidth;
                this.view.fullHeight = fullHeight;
                this.view.offsetX = x;
                this.view.offsetY = y;
                this.view.width = width;
                this.view.height = height;
                this.updateProjectionMatrix()
            },
            clearViewOffset: function() {
                if (this.view !== null) {
                    this.view.enabled = false
                }
                this.updateProjectionMatrix()
            },
            updateProjectionMatrix: function() {
                var dx = (this.right - this.left) / (2 * this.zoom);
                var dy = (this.top - this.bottom) / (2 * this.zoom);
                var cx = (this.right + this.left) / 2;
                var cy = (this.top + this.bottom) / 2;
                var left = cx - dx;
                var right = cx + dx;
                var top = cy + dy;
                var bottom = cy - dy;
                if (this.view !== null && this.view.enabled) {
                    var zoomW = this.zoom / (this.view.width / this.view.fullWidth);
                    var zoomH = this.zoom / (this.view.height / this.view.fullHeight);
                    var scaleW = (this.right - this.left) / this.view.width;
                    var scaleH = (this.top - this.bottom) / this.view.height;
                    left += scaleW * (this.view.offsetX / zoomW);
                    right = left + scaleW * (this.view.width / zoomW);
                    top -= scaleH * (this.view.offsetY / zoomH);
                    bottom = top - scaleH * (this.view.height / zoomH)
                }
                this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far)
            },
            toJSON: function(meta) {
                var data = Object3D.prototype.toJSON.call(this, meta);
                data.object.zoom = this.zoom;
                data.object.left = this.left;
                data.object.right = this.right;
                data.object.top = this.top;
                data.object.bottom = this.bottom;
                data.object.near = this.near;
                data.object.far = this.far;
                if (this.view !== null)
                    data.object.view = Object.assign({}, this.view);
                return data
            }
        });
        function Face3(a, b, c, normal, color, materialIndex) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.normal = normal && normal.isVector3 ? normal : new Vector3;
            this.vertexNormals = Array.isArray(normal) ? normal : [];
            this.color = color && color.isColor ? color : new Color;
            this.vertexColors = Array.isArray(color) ? color : [];
            this.materialIndex = materialIndex !== undefined ? materialIndex : 0
        }
        Object.assign(Face3.prototype, {
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(source) {
                this.a = source.a;
                this.b = source.b;
                this.c = source.c;
                this.normal.copy(source.normal);
                this.color.copy(source.color);
                this.materialIndex = source.materialIndex;
                for (var i = 0, il = source.vertexNormals.length; i < il; i++) {
                    this.vertexNormals[i] = source.vertexNormals[i].clone()
                }
                for (var i = 0, il = source.vertexColors.length; i < il; i++) {
                    this.vertexColors[i] = source.vertexColors[i].clone()
                }
                return this
            }
        });
        var geometryId = 0;
        function Geometry() {
            Object.defineProperty(this, "id", {
                value: geometryId += 2
            });
            this.uuid = _Math.generateUUID();
            this.name = "";
            this.type = "Geometry";
            this.vertices = [];
            this.colors = [];
            this.faces = [];
            this.faceVertexUvs = [[]];
            this.morphTargets = [];
            this.morphNormals = [];
            this.skinWeights = [];
            this.skinIndices = [];
            this.lineDistances = [];
            this.boundingBox = null;
            this.boundingSphere = null;
            this.elementsNeedUpdate = false;
            this.verticesNeedUpdate = false;
            this.uvsNeedUpdate = false;
            this.normalsNeedUpdate = false;
            this.colorsNeedUpdate = false;
            this.lineDistancesNeedUpdate = false;
            this.groupsNeedUpdate = false
        }
        Geometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
            constructor: Geometry,
            isGeometry: true,
            applyMatrix: function(matrix) {
                var normalMatrix = (new Matrix3).getNormalMatrix(matrix);
                for (var i = 0, il = this.vertices.length; i < il; i++) {
                    var vertex = this.vertices[i];
                    vertex.applyMatrix4(matrix)
                }
                for (var i = 0, il = this.faces.length; i < il; i++) {
                    var face = this.faces[i];
                    face.normal.applyMatrix3(normalMatrix).normalize();
                    for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {
                        face.vertexNormals[j].applyMatrix3(normalMatrix).normalize()
                    }
                }
                if (this.boundingBox !== null) {
                    this.computeBoundingBox()
                }
                if (this.boundingSphere !== null) {
                    this.computeBoundingSphere()
                }
                this.verticesNeedUpdate = true;
                this.normalsNeedUpdate = true;
                return this
            },
            rotateX: function() {
                var m1 = new Matrix4;
                return function rotateX(angle) {
                    m1.makeRotationX(angle);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            rotateY: function() {
                var m1 = new Matrix4;
                return function rotateY(angle) {
                    m1.makeRotationY(angle);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            rotateZ: function() {
                var m1 = new Matrix4;
                return function rotateZ(angle) {
                    m1.makeRotationZ(angle);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            translate: function() {
                var m1 = new Matrix4;
                return function translate(x, y, z) {
                    m1.makeTranslation(x, y, z);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            scale: function() {
                var m1 = new Matrix4;
                return function scale(x, y, z) {
                    m1.makeScale(x, y, z);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            lookAt: function() {
                var obj = new Object3D;
                return function lookAt(vector) {
                    obj.lookAt(vector);
                    obj.updateMatrix();
                    this.applyMatrix(obj.matrix)
                }
            }(),
            fromBufferGeometry: function(geometry) {
                var scope = this;
                var indices = geometry.index !== null ? geometry.index.array : undefined;
                var attributes = geometry.attributes;
                var positions = attributes.position.array;
                var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
                var colors = attributes.color !== undefined ? attributes.color.array : undefined;
                var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
                var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;
                if (uvs2 !== undefined)
                    this.faceVertexUvs[1] = [];
                var tempNormals = [];
                var tempUVs = [];
                var tempUVs2 = [];
                for (var i = 0, j = 0; i < positions.length; i += 3, j += 2) {
                    scope.vertices.push(new Vector3(positions[i], positions[i + 1], positions[i + 2]));
                    if (normals !== undefined) {
                        tempNormals.push(new Vector3(normals[i], normals[i + 1], normals[i + 2]))
                    }
                    if (colors !== undefined) {
                        scope.colors.push(new Color(colors[i], colors[i + 1], colors[i + 2]))
                    }
                    if (uvs !== undefined) {
                        tempUVs.push(new Vector2(uvs[j], uvs[j + 1]))
                    }
                    if (uvs2 !== undefined) {
                        tempUVs2.push(new Vector2(uvs2[j], uvs2[j + 1]))
                    }
                }
                function addFace(a, b, c, materialIndex) {
                    var vertexNormals = normals !== undefined ? [tempNormals[a].clone(), tempNormals[b].clone(), tempNormals[c].clone()] : [];
                    var vertexColors = colors !== undefined ? [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()] : [];
                    var face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);
                    scope.faces.push(face);
                    if (uvs !== undefined) {
                        scope.faceVertexUvs[0].push([tempUVs[a].clone(), tempUVs[b].clone(), tempUVs[c].clone()])
                    }
                    if (uvs2 !== undefined) {
                        scope.faceVertexUvs[1].push([tempUVs2[a].clone(), tempUVs2[b].clone(), tempUVs2[c].clone()])
                    }
                }
                var groups = geometry.groups;
                if (groups.length > 0) {
                    for (var i = 0; i < groups.length; i++) {
                        var group = groups[i];
                        var start = group.start;
                        var count = group.count;
                        for (var j = start, jl = start + count; j < jl; j += 3) {
                            if (indices !== undefined) {
                                addFace(indices[j], indices[j + 1], indices[j + 2], group.materialIndex)
                            } else {
                                addFace(j, j + 1, j + 2, group.materialIndex)
                            }
                        }
                    }
                } else {
                    if (indices !== undefined) {
                        for (var i = 0; i < indices.length; i += 3) {
                            addFace(indices[i], indices[i + 1], indices[i + 2])
                        }
                    } else {
                        for (var i = 0; i < positions.length / 3; i += 3) {
                            addFace(i, i + 1, i + 2)
                        }
                    }
                }
                this.computeFaceNormals();
                if (geometry.boundingBox !== null) {
                    this.boundingBox = geometry.boundingBox.clone()
                }
                if (geometry.boundingSphere !== null) {
                    this.boundingSphere = geometry.boundingSphere.clone()
                }
                return this
            },
            center: function() {
                var offset = new Vector3;
                return function center() {
                    this.computeBoundingBox();
                    this.boundingBox.getCenter(offset).negate();
                    this.translate(offset.x, offset.y, offset.z);
                    return this
                }
            }(),
            normalize: function() {
                this.computeBoundingSphere();
                var center = this.boundingSphere.center;
                var radius = this.boundingSphere.radius;
                var s = radius === 0 ? 1 : 1 / radius;
                var matrix = new Matrix4;
                matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);
                this.applyMatrix(matrix);
                return this
            },
            computeFaceNormals: function() {
                var cb = new Vector3,
                    ab = new Vector3;
                for (var f = 0, fl = this.faces.length; f < fl; f++) {
                    var face = this.faces[f];
                    var vA = this.vertices[face.a];
                    var vB = this.vertices[face.b];
                    var vC = this.vertices[face.c];
                    cb.subVectors(vC, vB);
                    ab.subVectors(vA, vB);
                    cb.cross(ab);
                    cb.normalize();
                    face.normal.copy(cb)
                }
            },
            computeVertexNormals: function(areaWeighted) {
                if (areaWeighted === undefined)
                    areaWeighted = true;
                var v,
                    vl,
                    f,
                    fl,
                    face,
                    vertices;
                vertices = new Array(this.vertices.length);
                for (v = 0, vl = this.vertices.length; v < vl; v++) {
                    vertices[v] = new Vector3
                }
                if (areaWeighted) {
                    var vA,
                        vB,
                        vC;
                    var cb = new Vector3,
                        ab = new Vector3;
                    for (f = 0, fl = this.faces.length; f < fl; f++) {
                        face = this.faces[f];
                        vA = this.vertices[face.a];
                        vB = this.vertices[face.b];
                        vC = this.vertices[face.c];
                        cb.subVectors(vC, vB);
                        ab.subVectors(vA, vB);
                        cb.cross(ab);
                        vertices[face.a].add(cb);
                        vertices[face.b].add(cb);
                        vertices[face.c].add(cb)
                    }
                } else {
                    this.computeFaceNormals();
                    for (f = 0, fl = this.faces.length; f < fl; f++) {
                        face = this.faces[f];
                        vertices[face.a].add(face.normal);
                        vertices[face.b].add(face.normal);
                        vertices[face.c].add(face.normal)
                    }
                }
                for (v = 0, vl = this.vertices.length; v < vl; v++) {
                    vertices[v].normalize()
                }
                for (f = 0, fl = this.faces.length; f < fl; f++) {
                    face = this.faces[f];
                    var vertexNormals = face.vertexNormals;
                    if (vertexNormals.length === 3) {
                        vertexNormals[0].copy(vertices[face.a]);
                        vertexNormals[1].copy(vertices[face.b]);
                        vertexNormals[2].copy(vertices[face.c])
                    } else {
                        vertexNormals[0] = vertices[face.a].clone();
                        vertexNormals[1] = vertices[face.b].clone();
                        vertexNormals[2] = vertices[face.c].clone()
                    }
                }
                if (this.faces.length > 0) {
                    this.normalsNeedUpdate = true
                }
            },
            computeFlatVertexNormals: function() {
                var f,
                    fl,
                    face;
                this.computeFaceNormals();
                for (f = 0, fl = this.faces.length; f < fl; f++) {
                    face = this.faces[f];
                    var vertexNormals = face.vertexNormals;
                    if (vertexNormals.length === 3) {
                        vertexNormals[0].copy(face.normal);
                        vertexNormals[1].copy(face.normal);
                        vertexNormals[2].copy(face.normal)
                    } else {
                        vertexNormals[0] = face.normal.clone();
                        vertexNormals[1] = face.normal.clone();
                        vertexNormals[2] = face.normal.clone()
                    }
                }
                if (this.faces.length > 0) {
                    this.normalsNeedUpdate = true
                }
            },
            computeMorphNormals: function() {
                var i,
                    il,
                    f,
                    fl,
                    face;
                for (f = 0, fl = this.faces.length; f < fl; f++) {
                    face = this.faces[f];
                    if (!face.__originalFaceNormal) {
                        face.__originalFaceNormal = face.normal.clone()
                    } else {
                        face.__originalFaceNormal.copy(face.normal)
                    }
                    if (!face.__originalVertexNormals)
                        face.__originalVertexNormals = [];
                    for (i = 0, il = face.vertexNormals.length; i < il; i++) {
                        if (!face.__originalVertexNormals[i]) {
                            face.__originalVertexNormals[i] = face.vertexNormals[i].clone()
                        } else {
                            face.__originalVertexNormals[i].copy(face.vertexNormals[i])
                        }
                    }
                }
                var tmpGeo = new Geometry;
                tmpGeo.faces = this.faces;
                for (i = 0, il = this.morphTargets.length; i < il; i++) {
                    if (!this.morphNormals[i]) {
                        this.morphNormals[i] = {};
                        this.morphNormals[i].faceNormals = [];
                        this.morphNormals[i].vertexNormals = [];
                        var dstNormalsFace = this.morphNormals[i].faceNormals;
                        var dstNormalsVertex = this.morphNormals[i].vertexNormals;
                        var faceNormal,
                            vertexNormals;
                        for (f = 0, fl = this.faces.length; f < fl; f++) {
                            faceNormal = new Vector3;
                            vertexNormals = {
                                a: new Vector3,
                                b: new Vector3,
                                c: new Vector3
                            };
                            dstNormalsFace.push(faceNormal);
                            dstNormalsVertex.push(vertexNormals)
                        }
                    }
                    var morphNormals = this.morphNormals[i];
                    tmpGeo.vertices = this.morphTargets[i].vertices;
                    tmpGeo.computeFaceNormals();
                    tmpGeo.computeVertexNormals();
                    var faceNormal,
                        vertexNormals;
                    for (f = 0, fl = this.faces.length; f < fl; f++) {
                        face = this.faces[f];
                        faceNormal = morphNormals.faceNormals[f];
                        vertexNormals = morphNormals.vertexNormals[f];
                        faceNormal.copy(face.normal);
                        vertexNormals.a.copy(face.vertexNormals[0]);
                        vertexNormals.b.copy(face.vertexNormals[1]);
                        vertexNormals.c.copy(face.vertexNormals[2])
                    }
                }
                for (f = 0, fl = this.faces.length; f < fl; f++) {
                    face = this.faces[f];
                    face.normal = face.__originalFaceNormal;
                    face.vertexNormals = face.__originalVertexNormals
                }
            },
            computeBoundingBox: function() {
                if (this.boundingBox === null) {
                    this.boundingBox = new Box3
                }
                this.boundingBox.setFromPoints(this.vertices)
            },
            computeBoundingSphere: function() {
                if (this.boundingSphere === null) {
                    this.boundingSphere = new Sphere
                }
                this.boundingSphere.setFromPoints(this.vertices)
            },
            merge: function(geometry, matrix, materialIndexOffset) {
                if (!(geometry && geometry.isGeometry)) {
                    console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", geometry);
                    return
                }
                var normalMatrix,
                    vertexOffset = this.vertices.length,
                    vertices1 = this.vertices,
                    vertices2 = geometry.vertices,
                    faces1 = this.faces,
                    faces2 = geometry.faces,
                    uvs1 = this.faceVertexUvs[0],
                    uvs2 = geometry.faceVertexUvs[0],
                    colors1 = this.colors,
                    colors2 = geometry.colors;
                if (materialIndexOffset === undefined)
                    materialIndexOffset = 0;
                if (matrix !== undefined) {
                    normalMatrix = (new Matrix3).getNormalMatrix(matrix)
                }
                for (var i = 0, il = vertices2.length; i < il; i++) {
                    var vertex = vertices2[i];
                    var vertexCopy = vertex.clone();
                    if (matrix !== undefined)
                        vertexCopy.applyMatrix4(matrix);
                    vertices1.push(vertexCopy)
                }
                for (var i = 0, il = colors2.length; i < il; i++) {
                    colors1.push(colors2[i].clone())
                }
                for (i = 0, il = faces2.length; i < il; i++) {
                    var face = faces2[i],
                        faceCopy,
                        normal,
                        color,
                        faceVertexNormals = face.vertexNormals,
                        faceVertexColors = face.vertexColors;
                    faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);
                    faceCopy.normal.copy(face.normal);
                    if (normalMatrix !== undefined) {
                        faceCopy.normal.applyMatrix3(normalMatrix).normalize()
                    }
                    for (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {
                        normal = faceVertexNormals[j].clone();
                        if (normalMatrix !== undefined) {
                            normal.applyMatrix3(normalMatrix).normalize()
                        }
                        faceCopy.vertexNormals.push(normal)
                    }
                    faceCopy.color.copy(face.color);
                    for (var j = 0, jl = faceVertexColors.length; j < jl; j++) {
                        color = faceVertexColors[j];
                        faceCopy.vertexColors.push(color.clone())
                    }
                    faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
                    faces1.push(faceCopy)
                }
                for (i = 0, il = uvs2.length; i < il; i++) {
                    var uv = uvs2[i],
                        uvCopy = [];
                    if (uv === undefined) {
                        continue
                    }
                    for (var j = 0, jl = uv.length; j < jl; j++) {
                        uvCopy.push(uv[j].clone())
                    }
                    uvs1.push(uvCopy)
                }
            },
            mergeMesh: function(mesh) {
                if (!(mesh && mesh.isMesh)) {
                    console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", mesh);
                    return
                }
                if (mesh.matrixAutoUpdate)
                    mesh.updateMatrix();
                this.merge(mesh.geometry, mesh.matrix)
            },
            mergeVertices: function() {
                var verticesMap = {};
                var unique = [],
                    changes = [];
                var v,
                    key;
                var precisionPoints = 4;
                var precision = Math.pow(10, precisionPoints);
                var i,
                    il,
                    face;
                var indices,
                    j,
                    jl;
                for (i = 0, il = this.vertices.length; i < il; i++) {
                    v = this.vertices[i];
                    key = Math.round(v.x * precision) + "_" + Math.round(v.y * precision) + "_" + Math.round(v.z * precision);
                    if (verticesMap[key] === undefined) {
                        verticesMap[key] = i;
                        unique.push(this.vertices[i]);
                        changes[i] = unique.length - 1
                    } else {
                        changes[i] = changes[verticesMap[key]]
                    }
                }
                var faceIndicesToRemove = [];
                for (i = 0, il = this.faces.length; i < il; i++) {
                    face = this.faces[i];
                    face.a = changes[face.a];
                    face.b = changes[face.b];
                    face.c = changes[face.c];
                    indices = [face.a, face.b, face.c];
                    for (var n = 0; n < 3; n++) {
                        if (indices[n] === indices[(n + 1) % 3]) {
                            faceIndicesToRemove.push(i);
                            break
                        }
                    }
                }
                for (i = faceIndicesToRemove.length - 1; i >= 0; i--) {
                    var idx = faceIndicesToRemove[i];
                    this.faces.splice(idx, 1);
                    for (j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {
                        this.faceVertexUvs[j].splice(idx, 1)
                    }
                }
                var diff = this.vertices.length - unique.length;
                this.vertices = unique;
                return diff
            },
            setFromPoints: function(points) {
                this.vertices = [];
                for (var i = 0, l = points.length; i < l; i++) {
                    var point = points[i];
                    this.vertices.push(new Vector3(point.x, point.y, point.z || 0))
                }
                return this
            },
            sortFacesByMaterialIndex: function() {
                var faces = this.faces;
                var length = faces.length;
                for (var i = 0; i < length; i++) {
                    faces[i]._id = i
                }
                function materialIndexSort(a, b) {
                    return a.materialIndex - b.materialIndex
                }
                faces.sort(materialIndexSort);
                var uvs1 = this.faceVertexUvs[0];
                var uvs2 = this.faceVertexUvs[1];
                var newUvs1,
                    newUvs2;
                if (uvs1 && uvs1.length === length)
                    newUvs1 = [];
                if (uvs2 && uvs2.length === length)
                    newUvs2 = [];
                for (var i = 0; i < length; i++) {
                    var id = faces[i]._id;
                    if (newUvs1)
                        newUvs1.push(uvs1[id]);
                    if (newUvs2)
                        newUvs2.push(uvs2[id])
                }
                if (newUvs1)
                    this.faceVertexUvs[0] = newUvs1;
                if (newUvs2)
                    this.faceVertexUvs[1] = newUvs2
            },
            toJSON: function() {
                var data = {
                    metadata: {
                        version: 4.5,
                        type: "Geometry",
                        generator: "Geometry.toJSON"
                    }
                };
                data.uuid = this.uuid;
                data.type = this.type;
                if (this.name !== "")
                    data.name = this.name;
                if (this.parameters !== undefined) {
                    var parameters = this.parameters;
                    for (var key in parameters) {
                        if (parameters[key] !== undefined)
                            data[key] = parameters[key]
                    }
                    return data
                }
                var vertices = [];
                for (var i = 0; i < this.vertices.length; i++) {
                    var vertex = this.vertices[i];
                    vertices.push(vertex.x, vertex.y, vertex.z)
                }
                var faces = [];
                var normals = [];
                var normalsHash = {};
                var colors = [];
                var colorsHash = {};
                var uvs = [];
                var uvsHash = {};
                for (var i = 0; i < this.faces.length; i++) {
                    var face = this.faces[i];
                    var hasMaterial = true;
                    var hasFaceUv = false;
                    var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;
                    var hasFaceNormal = face.normal.length() > 0;
                    var hasFaceVertexNormal = face.vertexNormals.length > 0;
                    var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
                    var hasFaceVertexColor = face.vertexColors.length > 0;
                    var faceType = 0;
                    faceType = setBit(faceType, 0, 0);
                    faceType = setBit(faceType, 1, hasMaterial);
                    faceType = setBit(faceType, 2, hasFaceUv);
                    faceType = setBit(faceType, 3, hasFaceVertexUv);
                    faceType = setBit(faceType, 4, hasFaceNormal);
                    faceType = setBit(faceType, 5, hasFaceVertexNormal);
                    faceType = setBit(faceType, 6, hasFaceColor);
                    faceType = setBit(faceType, 7, hasFaceVertexColor);
                    faces.push(faceType);
                    faces.push(face.a, face.b, face.c);
                    faces.push(face.materialIndex);
                    if (hasFaceVertexUv) {
                        var faceVertexUvs = this.faceVertexUvs[0][i];
                        faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]))
                    }
                    if (hasFaceNormal) {
                        faces.push(getNormalIndex(face.normal))
                    }
                    if (hasFaceVertexNormal) {
                        var vertexNormals = face.vertexNormals;
                        faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]))
                    }
                    if (hasFaceColor) {
                        faces.push(getColorIndex(face.color))
                    }
                    if (hasFaceVertexColor) {
                        var vertexColors = face.vertexColors;
                        faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]))
                    }
                }
                function setBit(value, position, enabled) {
                    return enabled ? value | 1 << position : value & ~(1 << position)
                }
                function getNormalIndex(normal) {
                    var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
                    if (normalsHash[hash] !== undefined) {
                        return normalsHash[hash]
                    }
                    normalsHash[hash] = normals.length / 3;
                    normals.push(normal.x, normal.y, normal.z);
                    return normalsHash[hash]
                }
                function getColorIndex(color) {
                    var hash = color.r.toString() + color.g.toString() + color.b.toString();
                    if (colorsHash[hash] !== undefined) {
                        return colorsHash[hash]
                    }
                    colorsHash[hash] = colors.length;
                    colors.push(color.getHex());
                    return colorsHash[hash]
                }
                function getUvIndex(uv) {
                    var hash = uv.x.toString() + uv.y.toString();
                    if (uvsHash[hash] !== undefined) {
                        return uvsHash[hash]
                    }
                    uvsHash[hash] = uvs.length / 2;
                    uvs.push(uv.x, uv.y);
                    return uvsHash[hash]
                }
                data.data = {};
                data.data.vertices = vertices;
                data.data.normals = normals;
                if (colors.length > 0)
                    data.data.colors = colors;
                if (uvs.length > 0)
                    data.data.uvs = [uvs];
                data.data.faces = faces;
                return data
            },
            clone: function() {
                return (new Geometry).copy(this)
            },
            copy: function(source) {
                var i,
                    il,
                    j,
                    jl,
                    k,
                    kl;
                this.vertices = [];
                this.colors = [];
                this.faces = [];
                this.faceVertexUvs = [[]];
                this.morphTargets = [];
                this.morphNormals = [];
                this.skinWeights = [];
                this.skinIndices = [];
                this.lineDistances = [];
                this.boundingBox = null;
                this.boundingSphere = null;
                this.name = source.name;
                var vertices = source.vertices;
                for (i = 0, il = vertices.length; i < il; i++) {
                    this.vertices.push(vertices[i].clone())
                }
                var colors = source.colors;
                for (i = 0, il = colors.length; i < il; i++) {
                    this.colors.push(colors[i].clone())
                }
                var faces = source.faces;
                for (i = 0, il = faces.length; i < il; i++) {
                    this.faces.push(faces[i].clone())
                }
                for (i = 0, il = source.faceVertexUvs.length; i < il; i++) {
                    var faceVertexUvs = source.faceVertexUvs[i];
                    if (this.faceVertexUvs[i] === undefined) {
                        this.faceVertexUvs[i] = []
                    }
                    for (j = 0, jl = faceVertexUvs.length; j < jl; j++) {
                        var uvs = faceVertexUvs[j],
                            uvsCopy = [];
                        for (k = 0, kl = uvs.length; k < kl; k++) {
                            var uv = uvs[k];
                            uvsCopy.push(uv.clone())
                        }
                        this.faceVertexUvs[i].push(uvsCopy)
                    }
                }
                var morphTargets = source.morphTargets;
                for (i = 0, il = morphTargets.length; i < il; i++) {
                    var morphTarget = {};
                    morphTarget.name = morphTargets[i].name;
                    if (morphTargets[i].vertices !== undefined) {
                        morphTarget.vertices = [];
                        for (j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {
                            morphTarget.vertices.push(morphTargets[i].vertices[j].clone())
                        }
                    }
                    if (morphTargets[i].normals !== undefined) {
                        morphTarget.normals = [];
                        for (j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {
                            morphTarget.normals.push(morphTargets[i].normals[j].clone())
                        }
                    }
                    this.morphTargets.push(morphTarget)
                }
                var morphNormals = source.morphNormals;
                for (i = 0, il = morphNormals.length; i < il; i++) {
                    var morphNormal = {};
                    if (morphNormals[i].vertexNormals !== undefined) {
                        morphNormal.vertexNormals = [];
                        for (j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {
                            var srcVertexNormal = morphNormals[i].vertexNormals[j];
                            var destVertexNormal = {};
                            destVertexNormal.a = srcVertexNormal.a.clone();
                            destVertexNormal.b = srcVertexNormal.b.clone();
                            destVertexNormal.c = srcVertexNormal.c.clone();
                            morphNormal.vertexNormals.push(destVertexNormal)
                        }
                    }
                    if (morphNormals[i].faceNormals !== undefined) {
                        morphNormal.faceNormals = [];
                        for (j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {
                            morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone())
                        }
                    }
                    this.morphNormals.push(morphNormal)
                }
                var skinWeights = source.skinWeights;
                for (i = 0, il = skinWeights.length; i < il; i++) {
                    this.skinWeights.push(skinWeights[i].clone())
                }
                var skinIndices = source.skinIndices;
                for (i = 0, il = skinIndices.length; i < il; i++) {
                    this.skinIndices.push(skinIndices[i].clone())
                }
                var lineDistances = source.lineDistances;
                for (i = 0, il = lineDistances.length; i < il; i++) {
                    this.lineDistances.push(lineDistances[i])
                }
                var boundingBox = source.boundingBox;
                if (boundingBox !== null) {
                    this.boundingBox = boundingBox.clone()
                }
                var boundingSphere = source.boundingSphere;
                if (boundingSphere !== null) {
                    this.boundingSphere = boundingSphere.clone()
                }
                this.elementsNeedUpdate = source.elementsNeedUpdate;
                this.verticesNeedUpdate = source.verticesNeedUpdate;
                this.uvsNeedUpdate = source.uvsNeedUpdate;
                this.normalsNeedUpdate = source.normalsNeedUpdate;
                this.colorsNeedUpdate = source.colorsNeedUpdate;
                this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
                this.groupsNeedUpdate = source.groupsNeedUpdate;
                return this
            },
            dispose: function() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        });
        function BufferAttribute(array, itemSize, normalized) {
            if (Array.isArray(array)) {
                throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")
            }
            this.name = "";
            this.array = array;
            this.itemSize = itemSize;
            this.count = array !== undefined ? array.length / itemSize : 0;
            this.normalized = normalized === true;
            this.dynamic = false;
            this.updateRange = {
                offset: 0,
                count: -1
            };
            this.version = 0
        }
        Object.defineProperty(BufferAttribute.prototype, "needsUpdate", {
            set: function(value) {
                if (value === true)
                    this.version++
            }
        });
        Object.assign(BufferAttribute.prototype, {
            isBufferAttribute: true,
            onUploadCallback: function() {},
            setArray: function(array) {
                if (Array.isArray(array)) {
                    throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")
                }
                this.count = array !== undefined ? array.length / this.itemSize : 0;
                this.array = array;
                return this
            },
            setDynamic: function(value) {
                this.dynamic = value;
                return this
            },
            copy: function(source) {
                this.name = source.name;
                this.array = new source.array.constructor(source.array);
                this.itemSize = source.itemSize;
                this.count = source.count;
                this.normalized = source.normalized;
                this.dynamic = source.dynamic;
                return this
            },
            copyAt: function(index1, attribute, index2) {
                index1 *= this.itemSize;
                index2 *= attribute.itemSize;
                for (var i = 0, l = this.itemSize; i < l; i++) {
                    this.array[index1 + i] = attribute.array[index2 + i]
                }
                return this
            },
            copyArray: function(array) {
                this.array.set(array);
                return this
            },
            copyColorsArray: function(colors) {
                var array = this.array,
                    offset = 0;
                for (var i = 0, l = colors.length; i < l; i++) {
                    var color = colors[i];
                    if (color === undefined) {
                        console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i);
                        color = new Color
                    }
                    array[offset++] = color.r;
                    array[offset++] = color.g;
                    array[offset++] = color.b
                }
                return this
            },
            copyVector2sArray: function(vectors) {
                var array = this.array,
                    offset = 0;
                for (var i = 0, l = vectors.length; i < l; i++) {
                    var vector = vectors[i];
                    if (vector === undefined) {
                        console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i);
                        vector = new Vector2
                    }
                    array[offset++] = vector.x;
                    array[offset++] = vector.y
                }
                return this
            },
            copyVector3sArray: function(vectors) {
                var array = this.array,
                    offset = 0;
                for (var i = 0, l = vectors.length; i < l; i++) {
                    var vector = vectors[i];
                    if (vector === undefined) {
                        console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i);
                        vector = new Vector3
                    }
                    array[offset++] = vector.x;
                    array[offset++] = vector.y;
                    array[offset++] = vector.z
                }
                return this
            },
            copyVector4sArray: function(vectors) {
                var array = this.array,
                    offset = 0;
                for (var i = 0, l = vectors.length; i < l; i++) {
                    var vector = vectors[i];
                    if (vector === undefined) {
                        console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i);
                        vector = new Vector4
                    }
                    array[offset++] = vector.x;
                    array[offset++] = vector.y;
                    array[offset++] = vector.z;
                    array[offset++] = vector.w
                }
                return this
            },
            set: function(value, offset) {
                if (offset === undefined)
                    offset = 0;
                this.array.set(value, offset);
                return this
            },
            getX: function(index) {
                return this.array[index * this.itemSize]
            },
            setX: function(index, x) {
                this.array[index * this.itemSize] = x;
                return this
            },
            getY: function(index) {
                return this.array[index * this.itemSize + 1]
            },
            setY: function(index, y) {
                this.array[index * this.itemSize + 1] = y;
                return this
            },
            getZ: function(index) {
                return this.array[index * this.itemSize + 2]
            },
            setZ: function(index, z) {
                this.array[index * this.itemSize + 2] = z;
                return this
            },
            getW: function(index) {
                return this.array[index * this.itemSize + 3]
            },
            setW: function(index, w) {
                this.array[index * this.itemSize + 3] = w;
                return this
            },
            setXY: function(index, x, y) {
                index *= this.itemSize;
                this.array[index + 0] = x;
                this.array[index + 1] = y;
                return this
            },
            setXYZ: function(index, x, y, z) {
                index *= this.itemSize;
                this.array[index + 0] = x;
                this.array[index + 1] = y;
                this.array[index + 2] = z;
                return this
            },
            setXYZW: function(index, x, y, z, w) {
                index *= this.itemSize;
                this.array[index + 0] = x;
                this.array[index + 1] = y;
                this.array[index + 2] = z;
                this.array[index + 3] = w;
                return this
            },
            onUpload: function(callback) {
                this.onUploadCallback = callback;
                return this
            },
            clone: function() {
                return new this.constructor(this.array, this.itemSize).copy(this)
            }
        });
        function Int8BufferAttribute(array, itemSize, normalized) {
            BufferAttribute.call(this, new Int8Array(array), itemSize, normalized)
        }
        Int8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
        function Uint8BufferAttribute(array, itemSize, normalized) {
            BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized)
        }
        Uint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
        function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
            BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized)
        }
        Uint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
        function Int16BufferAttribute(array, itemSize, normalized) {
            BufferAttribute.call(this, new Int16Array(array), itemSize, normalized)
        }
        Int16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
        function Uint16BufferAttribute(array, itemSize, normalized) {
            BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized)
        }
        Uint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
        function Int32BufferAttribute(array, itemSize, normalized) {
            BufferAttribute.call(this, new Int32Array(array), itemSize, normalized)
        }
        Int32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
        function Uint32BufferAttribute(array, itemSize, normalized) {
            BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized)
        }
        Uint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
        function Float32BufferAttribute(array, itemSize, normalized) {
            BufferAttribute.call(this, new Float32Array(array), itemSize, normalized)
        }
        Float32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
        function Float64BufferAttribute(array, itemSize, normalized) {
            BufferAttribute.call(this, new Float64Array(array), itemSize, normalized)
        }
        Float64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
        function DirectGeometry() {
            this.vertices = [];
            this.normals = [];
            this.colors = [];
            this.uvs = [];
            this.uvs2 = [];
            this.groups = [];
            this.morphTargets = {};
            this.skinWeights = [];
            this.skinIndices = [];
            this.boundingBox = null;
            this.boundingSphere = null;
            this.verticesNeedUpdate = false;
            this.normalsNeedUpdate = false;
            this.colorsNeedUpdate = false;
            this.uvsNeedUpdate = false;
            this.groupsNeedUpdate = false
        }
        Object.assign(DirectGeometry.prototype, {
            computeGroups: function(geometry) {
                var group;
                var groups = [];
                var materialIndex = undefined;
                var faces = geometry.faces;
                for (var i = 0; i < faces.length; i++) {
                    var face = faces[i];
                    if (face.materialIndex !== materialIndex) {
                        materialIndex = face.materialIndex;
                        if (group !== undefined) {
                            group.count = i * 3 - group.start;
                            groups.push(group)
                        }
                        group = {
                            start: i * 3,
                            materialIndex: materialIndex
                        }
                    }
                }
                if (group !== undefined) {
                    group.count = i * 3 - group.start;
                    groups.push(group)
                }
                this.groups = groups
            },
            fromGeometry: function(geometry) {
                var faces = geometry.faces;
                var vertices = geometry.vertices;
                var faceVertexUvs = geometry.faceVertexUvs;
                var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;
                var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;
                var morphTargets = geometry.morphTargets;
                var morphTargetsLength = morphTargets.length;
                var morphTargetsPosition;
                if (morphTargetsLength > 0) {
                    morphTargetsPosition = [];
                    for (var i = 0; i < morphTargetsLength; i++) {
                        morphTargetsPosition[i] = []
                    }
                    this.morphTargets.position = morphTargetsPosition
                }
                var morphNormals = geometry.morphNormals;
                var morphNormalsLength = morphNormals.length;
                var morphTargetsNormal;
                if (morphNormalsLength > 0) {
                    morphTargetsNormal = [];
                    for (var i = 0; i < morphNormalsLength; i++) {
                        morphTargetsNormal[i] = []
                    }
                    this.morphTargets.normal = morphTargetsNormal
                }
                var skinIndices = geometry.skinIndices;
                var skinWeights = geometry.skinWeights;
                var hasSkinIndices = skinIndices.length === vertices.length;
                var hasSkinWeights = skinWeights.length === vertices.length;
                if (vertices.length > 0 && faces.length === 0) {
                    console.error("THREE.DirectGeometry: Faceless geometries are not supported.")
                }
                for (var i = 0; i < faces.length; i++) {
                    var face = faces[i];
                    this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);
                    var vertexNormals = face.vertexNormals;
                    if (vertexNormals.length === 3) {
                        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2])
                    } else {
                        var normal = face.normal;
                        this.normals.push(normal, normal, normal)
                    }
                    var vertexColors = face.vertexColors;
                    if (vertexColors.length === 3) {
                        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2])
                    } else {
                        var color = face.color;
                        this.colors.push(color, color, color)
                    }
                    if (hasFaceVertexUv === true) {
                        var vertexUvs = faceVertexUvs[0][i];
                        if (vertexUvs !== undefined) {
                            this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2])
                        } else {
                            console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", i);
                            this.uvs.push(new Vector2, new Vector2, new Vector2)
                        }
                    }
                    if (hasFaceVertexUv2 === true) {
                        var vertexUvs = faceVertexUvs[1][i];
                        if (vertexUvs !== undefined) {
                            this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2])
                        } else {
                            console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", i);
                            this.uvs2.push(new Vector2, new Vector2, new Vector2)
                        }
                    }
                    for (var j = 0; j < morphTargetsLength; j++) {
                        var morphTarget = morphTargets[j].vertices;
                        morphTargetsPosition[j].push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c])
                    }
                    for (var j = 0; j < morphNormalsLength; j++) {
                        var morphNormal = morphNormals[j].vertexNormals[i];
                        morphTargetsNormal[j].push(morphNormal.a, morphNormal.b, morphNormal.c)
                    }
                    if (hasSkinIndices) {
                        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c])
                    }
                    if (hasSkinWeights) {
                        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c])
                    }
                }
                this.computeGroups(geometry);
                this.verticesNeedUpdate = geometry.verticesNeedUpdate;
                this.normalsNeedUpdate = geometry.normalsNeedUpdate;
                this.colorsNeedUpdate = geometry.colorsNeedUpdate;
                this.uvsNeedUpdate = geometry.uvsNeedUpdate;
                this.groupsNeedUpdate = geometry.groupsNeedUpdate;
                return this
            }
        });
        function arrayMax(array) {
            if (array.length === 0)
                return -Infinity;
            var max = array[0];
            for (var i = 1, l = array.length; i < l; ++i) {
                if (array[i] > max)
                    max = array[i]
            }
            return max
        }
        var bufferGeometryId = 1;
        function BufferGeometry() {
            Object.defineProperty(this, "id", {
                value: bufferGeometryId += 2
            });
            this.uuid = _Math.generateUUID();
            this.name = "";
            this.type = "BufferGeometry";
            this.index = null;
            this.attributes = {};
            this.morphAttributes = {};
            this.groups = [];
            this.boundingBox = null;
            this.boundingSphere = null;
            this.drawRange = {
                start: 0,
                count: Infinity
            };
            this.userData = {}
        }
        BufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
            constructor: BufferGeometry,
            isBufferGeometry: true,
            getIndex: function() {
                return this.index
            },
            setIndex: function(index) {
                if (Array.isArray(index)) {
                    this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1)
                } else {
                    this.index = index
                }
            },
            addAttribute: function(name, attribute) {
                if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
                    console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");
                    return this.addAttribute(name, new BufferAttribute(arguments[1], arguments[2]))
                }
                if (name === "index") {
                    console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");
                    this.setIndex(attribute);
                    return this
                }
                this.attributes[name] = attribute;
                return this
            },
            getAttribute: function(name) {
                return this.attributes[name]
            },
            removeAttribute: function(name) {
                delete this.attributes[name];
                return this
            },
            addGroup: function(start, count, materialIndex) {
                this.groups.push({
                    start: start,
                    count: count,
                    materialIndex: materialIndex !== undefined ? materialIndex : 0
                })
            },
            clearGroups: function() {
                this.groups = []
            },
            setDrawRange: function(start, count) {
                this.drawRange.start = start;
                this.drawRange.count = count
            },
            applyMatrix: function(matrix) {
                var position = this.attributes.position;
                if (position !== undefined) {
                    matrix.applyToBufferAttribute(position);
                    position.needsUpdate = true
                }
                var normal = this.attributes.normal;
                if (normal !== undefined) {
                    var normalMatrix = (new Matrix3).getNormalMatrix(matrix);
                    normalMatrix.applyToBufferAttribute(normal);
                    normal.needsUpdate = true
                }
                if (this.boundingBox !== null) {
                    this.computeBoundingBox()
                }
                if (this.boundingSphere !== null) {
                    this.computeBoundingSphere()
                }
                return this
            },
            rotateX: function() {
                var m1 = new Matrix4;
                return function rotateX(angle) {
                    m1.makeRotationX(angle);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            rotateY: function() {
                var m1 = new Matrix4;
                return function rotateY(angle) {
                    m1.makeRotationY(angle);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            rotateZ: function() {
                var m1 = new Matrix4;
                return function rotateZ(angle) {
                    m1.makeRotationZ(angle);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            translate: function() {
                var m1 = new Matrix4;
                return function translate(x, y, z) {
                    m1.makeTranslation(x, y, z);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            scale: function() {
                var m1 = new Matrix4;
                return function scale(x, y, z) {
                    m1.makeScale(x, y, z);
                    this.applyMatrix(m1);
                    return this
                }
            }(),
            lookAt: function() {
                var obj = new Object3D;
                return function lookAt(vector) {
                    obj.lookAt(vector);
                    obj.updateMatrix();
                    this.applyMatrix(obj.matrix)
                }
            }(),
            center: function() {
                var offset = new Vector3;
                return function center() {
                    this.computeBoundingBox();
                    this.boundingBox.getCenter(offset).negate();
                    this.translate(offset.x, offset.y, offset.z);
                    return this
                }
            }(),
            setFromObject: function(object) {
                var geometry = object.geometry;
                if (object.isPoints || object.isLine) {
                    var positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);
                    var colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);
                    this.addAttribute("position", positions.copyVector3sArray(geometry.vertices));
                    this.addAttribute("color", colors.copyColorsArray(geometry.colors));
                    if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {
                        var lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);
                        this.addAttribute("lineDistance", lineDistances.copyArray(geometry.lineDistances))
                    }
                    if (geometry.boundingSphere !== null) {
                        this.boundingSphere = geometry.boundingSphere.clone()
                    }
                    if (geometry.boundingBox !== null) {
                        this.boundingBox = geometry.boundingBox.clone()
                    }
                } else if (object.isMesh) {
                    if (geometry && geometry.isGeometry) {
                        this.fromGeometry(geometry)
                    }
                }
                return this
            },
            setFromPoints: function(points) {
                var position = [];
                for (var i = 0, l = points.length; i < l; i++) {
                    var point = points[i];
                    position.push(point.x, point.y, point.z || 0)
                }
                this.addAttribute("position", new Float32BufferAttribute(position, 3));
                return this
            },
            updateFromObject: function(object) {
                var geometry = object.geometry;
                if (object.isMesh) {
                    var direct = geometry.__directGeometry;
                    if (geometry.elementsNeedUpdate === true) {
                        direct = undefined;
                        geometry.elementsNeedUpdate = false
                    }
                    if (direct === undefined) {
                        return this.fromGeometry(geometry)
                    }
                    direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
                    direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
                    direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
                    direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
                    direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
                    geometry.verticesNeedUpdate = false;
                    geometry.normalsNeedUpdate = false;
                    geometry.colorsNeedUpdate = false;
                    geometry.uvsNeedUpdate = false;
                    geometry.groupsNeedUpdate = false;
                    geometry = direct
                }
                var attribute;
                if (geometry.verticesNeedUpdate === true) {
                    attribute = this.attributes.position;
                    if (attribute !== undefined) {
                        attribute.copyVector3sArray(geometry.vertices);
                        attribute.needsUpdate = true
                    }
                    geometry.verticesNeedUpdate = false
                }
                if (geometry.normalsNeedUpdate === true) {
                    attribute = this.attributes.normal;
                    if (attribute !== undefined) {
                        attribute.copyVector3sArray(geometry.normals);
                        attribute.needsUpdate = true
                    }
                    geometry.normalsNeedUpdate = false
                }
                if (geometry.colorsNeedUpdate === true) {
                    attribute = this.attributes.color;
                    if (attribute !== undefined) {
                        attribute.copyColorsArray(geometry.colors);
                        attribute.needsUpdate = true
                    }
                    geometry.colorsNeedUpdate = false
                }
                if (geometry.uvsNeedUpdate) {
                    attribute = this.attributes.uv;
                    if (attribute !== undefined) {
                        attribute.copyVector2sArray(geometry.uvs);
                        attribute.needsUpdate = true
                    }
                    geometry.uvsNeedUpdate = false
                }
                if (geometry.lineDistancesNeedUpdate) {
                    attribute = this.attributes.lineDistance;
                    if (attribute !== undefined) {
                        attribute.copyArray(geometry.lineDistances);
                        attribute.needsUpdate = true
                    }
                    geometry.lineDistancesNeedUpdate = false
                }
                if (geometry.groupsNeedUpdate) {
                    geometry.computeGroups(object.geometry);
                    this.groups = geometry.groups;
                    geometry.groupsNeedUpdate = false
                }
                return this
            },
            fromGeometry: function(geometry) {
                geometry.__directGeometry = (new DirectGeometry).fromGeometry(geometry);
                return this.fromDirectGeometry(geometry.__directGeometry)
            },
            fromDirectGeometry: function(geometry) {
                var positions = new Float32Array(geometry.vertices.length * 3);
                this.addAttribute("position", new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));
                if (geometry.normals.length > 0) {
                    var normals = new Float32Array(geometry.normals.length * 3);
                    this.addAttribute("normal", new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals))
                }
                if (geometry.colors.length > 0) {
                    var colors = new Float32Array(geometry.colors.length * 3);
                    this.addAttribute("color", new BufferAttribute(colors, 3).copyColorsArray(geometry.colors))
                }
                if (geometry.uvs.length > 0) {
                    var uvs = new Float32Array(geometry.uvs.length * 2);
                    this.addAttribute("uv", new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs))
                }
                if (geometry.uvs2.length > 0) {
                    var uvs2 = new Float32Array(geometry.uvs2.length * 2);
                    this.addAttribute("uv2", new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2))
                }
                this.groups = geometry.groups;
                for (var name in geometry.morphTargets) {
                    var array = [];
                    var morphTargets = geometry.morphTargets[name];
                    for (var i = 0, l = morphTargets.length; i < l; i++) {
                        var morphTarget = morphTargets[i];
                        var attribute = new Float32BufferAttribute(morphTarget.length * 3, 3);
                        array.push(attribute.copyVector3sArray(morphTarget))
                    }
                    this.morphAttributes[name] = array
                }
                if (geometry.skinIndices.length > 0) {
                    var skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);
                    this.addAttribute("skinIndex", skinIndices.copyVector4sArray(geometry.skinIndices))
                }
                if (geometry.skinWeights.length > 0) {
                    var skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);
                    this.addAttribute("skinWeight", skinWeights.copyVector4sArray(geometry.skinWeights))
                }
                if (geometry.boundingSphere !== null) {
                    this.boundingSphere = geometry.boundingSphere.clone()
                }
                if (geometry.boundingBox !== null) {
                    this.boundingBox = geometry.boundingBox.clone()
                }
                return this
            },
            computeBoundingBox: function() {
                if (this.boundingBox === null) {
                    this.boundingBox = new Box3
                }
                var position = this.attributes.position;
                if (position !== undefined) {
                    this.boundingBox.setFromBufferAttribute(position)
                } else {
                    this.boundingBox.makeEmpty()
                }
                if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
                    console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this)
                }
            },
            computeBoundingSphere: function() {
                var box = new Box3;
                var vector = new Vector3;
                return function computeBoundingSphere() {
                    if (this.boundingSphere === null) {
                        this.boundingSphere = new Sphere
                    }
                    var position = this.attributes.position;
                    if (position) {
                        var center = this.boundingSphere.center;
                        box.setFromBufferAttribute(position);
                        box.getCenter(center);
                        var maxRadiusSq = 0;
                        for (var i = 0, il = position.count; i < il; i++) {
                            vector.x = position.getX(i);
                            vector.y = position.getY(i);
                            vector.z = position.getZ(i);
                            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector))
                        }
                        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
                        if (isNaN(this.boundingSphere.radius)) {
                            console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this)
                        }
                    }
                }
            }(),
            computeFaceNormals: function() {},
            computeVertexNormals: function() {
                var index = this.index;
                var attributes = this.attributes;
                var groups = this.groups;
                if (attributes.position) {
                    var positions = attributes.position.array;
                    if (attributes.normal === undefined) {
                        this.addAttribute("normal", new BufferAttribute(new Float32Array(positions.length), 3))
                    } else {
                        var array = attributes.normal.array;
                        for (var i = 0, il = array.length; i < il; i++) {
                            array[i] = 0
                        }
                    }
                    var normals = attributes.normal.array;
                    var vA,
                        vB,
                        vC;
                    var pA = new Vector3,
                        pB = new Vector3,
                        pC = new Vector3;
                    var cb = new Vector3,
                        ab = new Vector3;
                    if (index) {
                        var indices = index.array;
                        if (groups.length === 0) {
                            this.addGroup(0, indices.length)
                        }
                        for (var j = 0, jl = groups.length; j < jl; ++j) {
                            var group = groups[j];
                            var start = group.start;
                            var count = group.count;
                            for (var i = start, il = start + count; i < il; i += 3) {
                                vA = indices[i + 0] * 3;
                                vB = indices[i + 1] * 3;
                                vC = indices[i + 2] * 3;
                                pA.fromArray(positions, vA);
                                pB.fromArray(positions, vB);
                                pC.fromArray(positions, vC);
                                cb.subVectors(pC, pB);
                                ab.subVectors(pA, pB);
                                cb.cross(ab);
                                normals[vA] += cb.x;
                                normals[vA + 1] += cb.y;
                                normals[vA + 2] += cb.z;
                                normals[vB] += cb.x;
                                normals[vB + 1] += cb.y;
                                normals[vB + 2] += cb.z;
                                normals[vC] += cb.x;
                                normals[vC + 1] += cb.y;
                                normals[vC + 2] += cb.z
                            }
                        }
                    } else {
                        for (var i = 0, il = positions.length; i < il; i += 9) {
                            pA.fromArray(positions, i);
                            pB.fromArray(positions, i + 3);
                            pC.fromArray(positions, i + 6);
                            cb.subVectors(pC, pB);
                            ab.subVectors(pA, pB);
                            cb.cross(ab);
                            normals[i] = cb.x;
                            normals[i + 1] = cb.y;
                            normals[i + 2] = cb.z;
                            normals[i + 3] = cb.x;
                            normals[i + 4] = cb.y;
                            normals[i + 5] = cb.z;
                            normals[i + 6] = cb.x;
                            normals[i + 7] = cb.y;
                            normals[i + 8] = cb.z
                        }
                    }
                    this.normalizeNormals();
                    attributes.normal.needsUpdate = true
                }
            },
            merge: function(geometry, offset) {
                if (!(geometry && geometry.isBufferGeometry)) {
                    console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", geometry);
                    return
                }
                if (offset === undefined) {
                    offset = 0;
                    console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. " + "Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.")
                }
                var attributes = this.attributes;
                for (var key in attributes) {
                    if (geometry.attributes[key] === undefined)
                        continue;
                    var attribute1 = attributes[key];
                    var attributeArray1 = attribute1.array;
                    var attribute2 = geometry.attributes[key];
                    var attributeArray2 = attribute2.array;
                    var attributeSize = attribute2.itemSize;
                    for (var i = 0, j = attributeSize * offset; i < attributeArray2.length; i++, j++) {
                        attributeArray1[j] = attributeArray2[i]
                    }
                }
                return this
            },
            normalizeNormals: function() {
                var vector = new Vector3;
                return function normalizeNormals() {
                    var normals = this.attributes.normal;
                    for (var i = 0, il = normals.count; i < il; i++) {
                        vector.x = normals.getX(i);
                        vector.y = normals.getY(i);
                        vector.z = normals.getZ(i);
                        vector.normalize();
                        normals.setXYZ(i, vector.x, vector.y, vector.z)
                    }
                }
            }(),
            toNonIndexed: function() {
                if (this.index === null) {
                    console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.");
                    return this
                }
                var geometry2 = new BufferGeometry;
                var indices = this.index.array;
                var attributes = this.attributes;
                for (var name in attributes) {
                    var attribute = attributes[name];
                    var array = attribute.array;
                    var itemSize = attribute.itemSize;
                    var array2 = new array.constructor(indices.length * itemSize);
                    var index = 0,
                        index2 = 0;
                    for (var i = 0, l = indices.length; i < l; i++) {
                        index = indices[i] * itemSize;
                        for (var j = 0; j < itemSize; j++) {
                            array2[index2++] = array[index++]
                        }
                    }
                    geometry2.addAttribute(name, new BufferAttribute(array2, itemSize))
                }
                var groups = this.groups;
                for (var i = 0, l = groups.length; i < l; i++) {
                    var group = groups[i];
                    geometry2.addGroup(group.start, group.count, group.materialIndex)
                }
                return geometry2
            },
            toJSON: function() {
                var data = {
                    metadata: {
                        version: 4.5,
                        type: "BufferGeometry",
                        generator: "BufferGeometry.toJSON"
                    }
                };
                data.uuid = this.uuid;
                data.type = this.type;
                if (this.name !== "")
                    data.name = this.name;
                if (Object.keys(this.userData).length > 0)
                    data.userData = this.userData;
                if (this.parameters !== undefined) {
                    var parameters = this.parameters;
                    for (var key in parameters) {
                        if (parameters[key] !== undefined)
                            data[key] = parameters[key]
                    }
                    return data
                }
                data.data = {
                    attributes: {}
                };
                var index = this.index;
                if (index !== null) {
                    var array = Array.prototype.slice.call(index.array);
                    data.data.index = {
                        type: index.array.constructor.name,
                        array: array
                    }
                }
                var attributes = this.attributes;
                for (var key in attributes) {
                    var attribute = attributes[key];
                    var array = Array.prototype.slice.call(attribute.array);
                    data.data.attributes[key] = {
                        itemSize: attribute.itemSize,
                        type: attribute.array.constructor.name,
                        array: array,
                        normalized: attribute.normalized
                    }
                }
                var groups = this.groups;
                if (groups.length > 0) {
                    data.data.groups = JSON.parse(JSON.stringify(groups))
                }
                var boundingSphere = this.boundingSphere;
                if (boundingSphere !== null) {
                    data.data.boundingSphere = {
                        center: boundingSphere.center.toArray(),
                        radius: boundingSphere.radius
                    }
                }
                return data
            },
            clone: function() {
                return (new BufferGeometry).copy(this)
            },
            copy: function(source) {
                var name,
                    i,
                    l;
                this.index = null;
                this.attributes = {};
                this.morphAttributes = {};
                this.groups = [];
                this.boundingBox = null;
                this.boundingSphere = null;
                this.name = source.name;
                var index = source.index;
                if (index !== null) {
                    this.setIndex(index.clone())
                }
                var attributes = source.attributes;
                for (name in attributes) {
                    var attribute = attributes[name];
                    this.addAttribute(name, attribute.clone())
                }
                var morphAttributes = source.morphAttributes;
                for (name in morphAttributes) {
                    var array = [];
                    var morphAttribute = morphAttributes[name];
                    for (i = 0, l = morphAttribute.length; i < l; i++) {
                        array.push(morphAttribute[i].clone())
                    }
                    this.morphAttributes[name] = array
                }
                var groups = source.groups;
                for (i = 0, l = groups.length; i < l; i++) {
                    var group = groups[i];
                    this.addGroup(group.start, group.count, group.materialIndex)
                }
                var boundingBox = source.boundingBox;
                if (boundingBox !== null) {
                    this.boundingBox = boundingBox.clone()
                }
                var boundingSphere = source.boundingSphere;
                if (boundingSphere !== null) {
                    this.boundingSphere = boundingSphere.clone()
                }
                this.drawRange.start = source.drawRange.start;
                this.drawRange.count = source.drawRange.count;
                this.userData = source.userData;
                return this
            },
            dispose: function() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        });
        function BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {
            Geometry.call(this);
            this.type = "BoxGeometry";
            this.parameters = {
                width: width,
                height: height,
                depth: depth,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                depthSegments: depthSegments
            };
            this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));
            this.mergeVertices()
        }
        BoxGeometry.prototype = Object.create(Geometry.prototype);
        BoxGeometry.prototype.constructor = BoxGeometry;
        function BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {
            BufferGeometry.call(this);
            this.type = "BoxBufferGeometry";
            this.parameters = {
                width: width,
                height: height,
                depth: depth,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                depthSegments: depthSegments
            };
            var scope = this;
            width = width || 1;
            height = height || 1;
            depth = depth || 1;
            widthSegments = Math.floor(widthSegments) || 1;
            heightSegments = Math.floor(heightSegments) || 1;
            depthSegments = Math.floor(depthSegments) || 1;
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            var numberOfVertices = 0;
            var groupStart = 0;
            buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
            buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
            buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
            buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
            buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
            buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2));
            function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
                var segmentWidth = width / gridX;
                var segmentHeight = height / gridY;
                var widthHalf = width / 2;
                var heightHalf = height / 2;
                var depthHalf = depth / 2;
                var gridX1 = gridX + 1;
                var gridY1 = gridY + 1;
                var vertexCounter = 0;
                var groupCount = 0;
                var ix,
                    iy;
                var vector = new Vector3;
                for (iy = 0; iy < gridY1; iy++) {
                    var y = iy * segmentHeight - heightHalf;
                    for (ix = 0; ix < gridX1; ix++) {
                        var x = ix * segmentWidth - widthHalf;
                        vector[u] = x * udir;
                        vector[v] = y * vdir;
                        vector[w] = depthHalf;
                        vertices.push(vector.x, vector.y, vector.z);
                        vector[u] = 0;
                        vector[v] = 0;
                        vector[w] = depth > 0 ? 1 : -1;
                        normals.push(vector.x, vector.y, vector.z);
                        uvs.push(ix / gridX);
                        uvs.push(1 - iy / gridY);
                        vertexCounter += 1
                    }
                }
                for (iy = 0; iy < gridY; iy++) {
                    for (ix = 0; ix < gridX; ix++) {
                        var a = numberOfVertices + ix + gridX1 * iy;
                        var b = numberOfVertices + ix + gridX1 * (iy + 1);
                        var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
                        var d = numberOfVertices + (ix + 1) + gridX1 * iy;
                        indices.push(a, b, d);
                        indices.push(b, c, d);
                        groupCount += 6
                    }
                }
                scope.addGroup(groupStart, groupCount, materialIndex);
                groupStart += groupCount;
                numberOfVertices += vertexCounter
            }
        }
        BoxBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;
        function PlaneGeometry(width, height, widthSegments, heightSegments) {
            Geometry.call(this);
            this.type = "PlaneGeometry";
            this.parameters = {
                width: width,
                height: height,
                widthSegments: widthSegments,
                heightSegments: heightSegments
            };
            this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));
            this.mergeVertices()
        }
        PlaneGeometry.prototype = Object.create(Geometry.prototype);
        PlaneGeometry.prototype.constructor = PlaneGeometry;
        function PlaneBufferGeometry(width, height, widthSegments, heightSegments) {
            BufferGeometry.call(this);
            this.type = "PlaneBufferGeometry";
            this.parameters = {
                width: width,
                height: height,
                widthSegments: widthSegments,
                heightSegments: heightSegments
            };
            width = width || 1;
            height = height || 1;
            var width_half = width / 2;
            var height_half = height / 2;
            var gridX = Math.floor(widthSegments) || 1;
            var gridY = Math.floor(heightSegments) || 1;
            var gridX1 = gridX + 1;
            var gridY1 = gridY + 1;
            var segment_width = width / gridX;
            var segment_height = height / gridY;
            var ix,
                iy;
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            for (iy = 0; iy < gridY1; iy++) {
                var y = iy * segment_height - height_half;
                for (ix = 0; ix < gridX1; ix++) {
                    var x = ix * segment_width - width_half;
                    vertices.push(x, -y, 0);
                    normals.push(0, 0, 1);
                    uvs.push(ix / gridX);
                    uvs.push(1 - iy / gridY)
                }
            }
            for (iy = 0; iy < gridY; iy++) {
                for (ix = 0; ix < gridX; ix++) {
                    var a = ix + gridX1 * iy;
                    var b = ix + gridX1 * (iy + 1);
                    var c = ix + 1 + gridX1 * (iy + 1);
                    var d = ix + 1 + gridX1 * iy;
                    indices.push(a, b, d);
                    indices.push(b, c, d)
                }
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2))
        }
        PlaneBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;
        var materialId = 0;
        function Material() {
            Object.defineProperty(this, "id", {
                value: materialId++
            });
            this.uuid = _Math.generateUUID();
            this.name = "";
            this.type = "Material";
            this.fog = true;
            this.lights = true;
            this.blending = NormalBlending;
            this.side = FrontSide;
            this.flatShading = false;
            this.vertexColors = NoColors;
            this.opacity = 1;
            this.transparent = false;
            this.blendSrc = SrcAlphaFactor;
            this.blendDst = OneMinusSrcAlphaFactor;
            this.blendEquation = AddEquation;
            this.blendSrcAlpha = null;
            this.blendDstAlpha = null;
            this.blendEquationAlpha = null;
            this.depthFunc = LessEqualDepth;
            this.depthTest = true;
            this.depthWrite = true;
            this.clippingPlanes = null;
            this.clipIntersection = false;
            this.clipShadows = false;
            this.shadowSide = null;
            this.colorWrite = true;
            this.precision = null;
            this.polygonOffset = false;
            this.polygonOffsetFactor = 0;
            this.polygonOffsetUnits = 0;
            this.dithering = false;
            this.alphaTest = 0;
            this.premultipliedAlpha = false;
            this.overdraw = 0;
            this.visible = true;
            this.userData = {};
            this.needsUpdate = true
        }
        Material.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
            constructor: Material,
            isMaterial: true,
            onBeforeCompile: function() {},
            setValues: function(values) {
                if (values === undefined)
                    return;
                for (var key in values) {
                    var newValue = values[key];
                    if (newValue === undefined) {
                        console.warn("THREE.Material: '" + key + "' parameter is undefined.");
                        continue
                    }
                    if (key === "shading") {
                        console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
                        this.flatShading = newValue === FlatShading ? true : false;
                        continue
                    }
                    var currentValue = this[key];
                    if (currentValue === undefined) {
                        console.warn("THREE." + this.type + ": '" + key + "' is not a property of this material.");
                        continue
                    }
                    if (currentValue && currentValue.isColor) {
                        currentValue.set(newValue)
                    } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
                        currentValue.copy(newValue)
                    } else if (key === "overdraw") {
                        this[key] = Number(newValue)
                    } else {
                        this[key] = newValue
                    }
                }
            },
            toJSON: function(meta) {
                var isRoot = meta === undefined || typeof meta === "string";
                if (isRoot) {
                    meta = {
                        textures: {},
                        images: {}
                    }
                }
                var data = {
                    metadata: {
                        version: 4.5,
                        type: "Material",
                        generator: "Material.toJSON"
                    }
                };
                data.uuid = this.uuid;
                data.type = this.type;
                if (this.name !== "")
                    data.name = this.name;
                if (this.color && this.color.isColor)
                    data.color = this.color.getHex();
                if (this.roughness !== undefined)
                    data.roughness = this.roughness;
                if (this.metalness !== undefined)
                    data.metalness = this.metalness;
                if (this.emissive && this.emissive.isColor)
                    data.emissive = this.emissive.getHex();
                if (this.emissiveIntensity !== 1)
                    data.emissiveIntensity = this.emissiveIntensity;
                if (this.specular && this.specular.isColor)
                    data.specular = this.specular.getHex();
                if (this.shininess !== undefined)
                    data.shininess = this.shininess;
                if (this.clearCoat !== undefined)
                    data.clearCoat = this.clearCoat;
                if (this.clearCoatRoughness !== undefined)
                    data.clearCoatRoughness = this.clearCoatRoughness;
                if (this.map && this.map.isTexture)
                    data.map = this.map.toJSON(meta).uuid;
                if (this.alphaMap && this.alphaMap.isTexture)
                    data.alphaMap = this.alphaMap.toJSON(meta).uuid;
                if (this.lightMap && this.lightMap.isTexture)
                    data.lightMap = this.lightMap.toJSON(meta).uuid;
                if (this.aoMap && this.aoMap.isTexture) {
                    data.aoMap = this.aoMap.toJSON(meta).uuid;
                    data.aoMapIntensity = this.aoMapIntensity
                }
                if (this.bumpMap && this.bumpMap.isTexture) {
                    data.bumpMap = this.bumpMap.toJSON(meta).uuid;
                    data.bumpScale = this.bumpScale
                }
                if (this.normalMap && this.normalMap.isTexture) {
                    data.normalMap = this.normalMap.toJSON(meta).uuid;
                    data.normalMapType = this.normalMapType;
                    data.normalScale = this.normalScale.toArray()
                }
                if (this.displacementMap && this.displacementMap.isTexture) {
                    data.displacementMap = this.displacementMap.toJSON(meta).uuid;
                    data.displacementScale = this.displacementScale;
                    data.displacementBias = this.displacementBias
                }
                if (this.roughnessMap && this.roughnessMap.isTexture)
                    data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
                if (this.metalnessMap && this.metalnessMap.isTexture)
                    data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
                if (this.emissiveMap && this.emissiveMap.isTexture)
                    data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
                if (this.specularMap && this.specularMap.isTexture)
                    data.specularMap = this.specularMap.toJSON(meta).uuid;
                if (this.envMap && this.envMap.isTexture) {
                    data.envMap = this.envMap.toJSON(meta).uuid;
                    data.reflectivity = this.reflectivity
                }
                if (this.gradientMap && this.gradientMap.isTexture) {
                    data.gradientMap = this.gradientMap.toJSON(meta).uuid
                }
                if (this.size !== undefined)
                    data.size = this.size;
                if (this.sizeAttenuation !== undefined)
                    data.sizeAttenuation = this.sizeAttenuation;
                if (this.blending !== NormalBlending)
                    data.blending = this.blending;
                if (this.flatShading === true)
                    data.flatShading = this.flatShading;
                if (this.side !== FrontSide)
                    data.side = this.side;
                if (this.vertexColors !== NoColors)
                    data.vertexColors = this.vertexColors;
                if (this.opacity < 1)
                    data.opacity = this.opacity;
                if (this.transparent === true)
                    data.transparent = this.transparent;
                data.depthFunc = this.depthFunc;
                data.depthTest = this.depthTest;
                data.depthWrite = this.depthWrite;
                if (this.rotation !== 0)
                    data.rotation = this.rotation;
                if (this.linewidth !== 1)
                    data.linewidth = this.linewidth;
                if (this.dashSize !== undefined)
                    data.dashSize = this.dashSize;
                if (this.gapSize !== undefined)
                    data.gapSize = this.gapSize;
                if (this.scale !== undefined)
                    data.scale = this.scale;
                if (this.dithering === true)
                    data.dithering = true;
                if (this.alphaTest > 0)
                    data.alphaTest = this.alphaTest;
                if (this.premultipliedAlpha === true)
                    data.premultipliedAlpha = this.premultipliedAlpha;
                if (this.wireframe === true)
                    data.wireframe = this.wireframe;
                if (this.wireframeLinewidth > 1)
                    data.wireframeLinewidth = this.wireframeLinewidth;
                if (this.wireframeLinecap !== "round")
                    data.wireframeLinecap = this.wireframeLinecap;
                if (this.wireframeLinejoin !== "round")
                    data.wireframeLinejoin = this.wireframeLinejoin;
                if (this.morphTargets === true)
                    data.morphTargets = true;
                if (this.skinning === true)
                    data.skinning = true;
                if (this.visible === false)
                    data.visible = false;
                if (JSON.stringify(this.userData) !== "{}")
                    data.userData = this.userData;
                function extractFromCache(cache) {
                    var values = [];
                    for (var key in cache) {
                        var data = cache[key];
                        delete data.metadata;
                        values.push(data)
                    }
                    return values
                }
                if (isRoot) {
                    var textures = extractFromCache(meta.textures);
                    var images = extractFromCache(meta.images);
                    if (textures.length > 0)
                        data.textures = textures;
                    if (images.length > 0)
                        data.images = images
                }
                return data
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(source) {
                this.name = source.name;
                this.fog = source.fog;
                this.lights = source.lights;
                this.blending = source.blending;
                this.side = source.side;
                this.flatShading = source.flatShading;
                this.vertexColors = source.vertexColors;
                this.opacity = source.opacity;
                this.transparent = source.transparent;
                this.blendSrc = source.blendSrc;
                this.blendDst = source.blendDst;
                this.blendEquation = source.blendEquation;
                this.blendSrcAlpha = source.blendSrcAlpha;
                this.blendDstAlpha = source.blendDstAlpha;
                this.blendEquationAlpha = source.blendEquationAlpha;
                this.depthFunc = source.depthFunc;
                this.depthTest = source.depthTest;
                this.depthWrite = source.depthWrite;
                this.colorWrite = source.colorWrite;
                this.precision = source.precision;
                this.polygonOffset = source.polygonOffset;
                this.polygonOffsetFactor = source.polygonOffsetFactor;
                this.polygonOffsetUnits = source.polygonOffsetUnits;
                this.dithering = source.dithering;
                this.alphaTest = source.alphaTest;
                this.premultipliedAlpha = source.premultipliedAlpha;
                this.overdraw = source.overdraw;
                this.visible = source.visible;
                this.userData = JSON.parse(JSON.stringify(source.userData));
                this.clipShadows = source.clipShadows;
                this.clipIntersection = source.clipIntersection;
                var srcPlanes = source.clippingPlanes,
                    dstPlanes = null;
                if (srcPlanes !== null) {
                    var n = srcPlanes.length;
                    dstPlanes = new Array(n);
                    for (var i = 0; i !== n; ++i)
                        dstPlanes[i] = srcPlanes[i].clone()
                }
                this.clippingPlanes = dstPlanes;
                this.shadowSide = source.shadowSide;
                return this
            },
            dispose: function() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        });
        function MeshBasicMaterial(parameters) {
            Material.call(this);
            this.type = "MeshBasicMaterial";
            this.color = new Color(16777215);
            this.map = null;
            this.lightMap = null;
            this.lightMapIntensity = 1;
            this.aoMap = null;
            this.aoMapIntensity = 1;
            this.specularMap = null;
            this.alphaMap = null;
            this.envMap = null;
            this.combine = MultiplyOperation;
            this.reflectivity = 1;
            this.refractionRatio = .98;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = "round";
            this.wireframeLinejoin = "round";
            this.skinning = false;
            this.morphTargets = false;
            this.lights = false;
            this.setValues(parameters)
        }
        MeshBasicMaterial.prototype = Object.create(Material.prototype);
        MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
        MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
        MeshBasicMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.color.copy(source.color);
            this.map = source.map;
            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;
            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;
            this.specularMap = source.specularMap;
            this.alphaMap = source.alphaMap;
            this.envMap = source.envMap;
            this.combine = source.combine;
            this.reflectivity = source.reflectivity;
            this.refractionRatio = source.refractionRatio;
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            return this
        };
        function ShaderMaterial(parameters) {
            Material.call(this);
            this.type = "ShaderMaterial";
            this.defines = {};
            this.uniforms = {};
            this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
            this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
            this.linewidth = 1;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.fog = false;
            this.lights = false;
            this.clipping = false;
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
            this.extensions = {
                derivatives: false,
                fragDepth: false,
                drawBuffers: false,
                shaderTextureLOD: false
            };
            this.defaultAttributeValues = {
                color: [1, 1, 1],
                uv: [0, 0],
                uv2: [0, 0]
            };
            this.index0AttributeName = undefined;
            this.uniformsNeedUpdate = false;
            if (parameters !== undefined) {
                if (parameters.attributes !== undefined) {
                    console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.")
                }
                this.setValues(parameters)
            }
        }
        ShaderMaterial.prototype = Object.create(Material.prototype);
        ShaderMaterial.prototype.constructor = ShaderMaterial;
        ShaderMaterial.prototype.isShaderMaterial = true;
        ShaderMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.fragmentShader = source.fragmentShader;
            this.vertexShader = source.vertexShader;
            this.uniforms = UniformsUtils.clone(source.uniforms);
            this.defines = Object.assign({}, source.defines);
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.lights = source.lights;
            this.clipping = source.clipping;
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
            this.extensions = source.extensions;
            return this
        };
        ShaderMaterial.prototype.toJSON = function(meta) {
            var data = Material.prototype.toJSON.call(this, meta);
            data.uniforms = this.uniforms;
            data.vertexShader = this.vertexShader;
            data.fragmentShader = this.fragmentShader;
            return data
        };
        function Ray(origin, direction) {
            this.origin = origin !== undefined ? origin : new Vector3;
            this.direction = direction !== undefined ? direction : new Vector3
        }
        Object.assign(Ray.prototype, {
            set: function(origin, direction) {
                this.origin.copy(origin);
                this.direction.copy(direction);
                return this
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(ray) {
                this.origin.copy(ray.origin);
                this.direction.copy(ray.direction);
                return this
            },
            at: function(t, target) {
                if (target === undefined) {
                    console.warn("THREE.Ray: .at() target is now required");
                    target = new Vector3
                }
                return target.copy(this.direction).multiplyScalar(t).add(this.origin)
            },
            lookAt: function(v) {
                this.direction.copy(v).sub(this.origin).normalize();
                return this
            },
            recast: function() {
                var v1 = new Vector3;
                return function recast(t) {
                    this.origin.copy(this.at(t, v1));
                    return this
                }
            }(),
            closestPointToPoint: function(point, target) {
                if (target === undefined) {
                    console.warn("THREE.Ray: .closestPointToPoint() target is now required");
                    target = new Vector3
                }
                target.subVectors(point, this.origin);
                var directionDistance = target.dot(this.direction);
                if (directionDistance < 0) {
                    return target.copy(this.origin)
                }
                return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin)
            },
            distanceToPoint: function(point) {
                return Math.sqrt(this.distanceSqToPoint(point))
            },
            distanceSqToPoint: function() {
                var v1 = new Vector3;
                return function distanceSqToPoint(point) {
                    var directionDistance = v1.subVectors(point, this.origin).dot(this.direction);
                    if (directionDistance < 0) {
                        return this.origin.distanceToSquared(point)
                    }
                    v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
                    return v1.distanceToSquared(point)
                }
            }(),
            distanceSqToSegment: function() {
                var segCenter = new Vector3;
                var segDir = new Vector3;
                var diff = new Vector3;
                return function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
                    segCenter.copy(v0).add(v1).multiplyScalar(.5);
                    segDir.copy(v1).sub(v0).normalize();
                    diff.copy(this.origin).sub(segCenter);
                    var segExtent = v0.distanceTo(v1) * .5;
                    var a01 = -this.direction.dot(segDir);
                    var b0 = diff.dot(this.direction);
                    var b1 = -diff.dot(segDir);
                    var c = diff.lengthSq();
                    var det = Math.abs(1 - a01 * a01);
                    var s0,
                        s1,
                        sqrDist,
                        extDet;
                    if (det > 0) {
                        s0 = a01 * b1 - b0;
                        s1 = a01 * b0 - b1;
                        extDet = segExtent * det;
                        if (s0 >= 0) {
                            if (s1 >= -extDet) {
                                if (s1 <= extDet) {
                                    var invDet = 1 / det;
                                    s0 *= invDet;
                                    s1 *= invDet;
                                    sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c
                                } else {
                                    s1 = segExtent;
                                    s0 = Math.max(0, -(a01 * s1 + b0));
                                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c
                                }
                            } else {
                                s1 = -segExtent;
                                s0 = Math.max(0, -(a01 * s1 + b0));
                                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c
                            }
                        } else {
                            if (s1 <= -extDet) {
                                s0 = Math.max(0, -(-a01 * segExtent + b0));
                                s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c
                            } else if (s1 <= extDet) {
                                s0 = 0;
                                s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
                                sqrDist = s1 * (s1 + 2 * b1) + c
                            } else {
                                s0 = Math.max(0, -(a01 * segExtent + b0));
                                s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c
                            }
                        }
                    } else {
                        s1 = a01 > 0 ? -segExtent : segExtent;
                        s0 = Math.max(0, -(a01 * s1 + b0));
                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c
                    }
                    if (optionalPointOnRay) {
                        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin)
                    }
                    if (optionalPointOnSegment) {
                        optionalPointOnSegment.copy(segDir).multiplyScalar(s1).add(segCenter)
                    }
                    return sqrDist
                }
            }(),
            intersectSphere: function() {
                var v1 = new Vector3;
                return function intersectSphere(sphere, target) {
                    v1.subVectors(sphere.center, this.origin);
                    var tca = v1.dot(this.direction);
                    var d2 = v1.dot(v1) - tca * tca;
                    var radius2 = sphere.radius * sphere.radius;
                    if (d2 > radius2)
                        return null;
                    var thc = Math.sqrt(radius2 - d2);
                    var t0 = tca - thc;
                    var t1 = tca + thc;
                    if (t0 < 0 && t1 < 0)
                        return null;
                    if (t0 < 0)
                        return this.at(t1, target);
                    return this.at(t0, target)
                }
            }(),
            intersectsSphere: function(sphere) {
                return this.distanceToPoint(sphere.center) <= sphere.radius
            },
            distanceToPlane: function(plane) {
                var denominator = plane.normal.dot(this.direction);
                if (denominator === 0) {
                    if (plane.distanceToPoint(this.origin) === 0) {
                        return 0
                    }
                    return null
                }
                var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
                return t >= 0 ? t : null
            },
            intersectPlane: function(plane, target) {
                var t = this.distanceToPlane(plane);
                if (t === null) {
                    return null
                }
                return this.at(t, target)
            },
            intersectsPlane: function(plane) {
                var distToPoint = plane.distanceToPoint(this.origin);
                if (distToPoint === 0) {
                    return true
                }
                var denominator = plane.normal.dot(this.direction);
                if (denominator * distToPoint < 0) {
                    return true
                }
                return false
            },
            intersectBox: function(box, target) {
                var tmin,
                    tmax,
                    tymin,
                    tymax,
                    tzmin,
                    tzmax;
                var invdirx = 1 / this.direction.x,
                    invdiry = 1 / this.direction.y,
                    invdirz = 1 / this.direction.z;
                var origin = this.origin;
                if (invdirx >= 0) {
                    tmin = (box.min.x - origin.x) * invdirx;
                    tmax = (box.max.x - origin.x) * invdirx
                } else {
                    tmin = (box.max.x - origin.x) * invdirx;
                    tmax = (box.min.x - origin.x) * invdirx
                }
                if (invdiry >= 0) {
                    tymin = (box.min.y - origin.y) * invdiry;
                    tymax = (box.max.y - origin.y) * invdiry
                } else {
                    tymin = (box.max.y - origin.y) * invdiry;
                    tymax = (box.min.y - origin.y) * invdiry
                }
                if (tmin > tymax || tymin > tmax)
                    return null;
                if (tymin > tmin || tmin !== tmin)
                    tmin = tymin;
                if (tymax < tmax || tmax !== tmax)
                    tmax = tymax;
                if (invdirz >= 0) {
                    tzmin = (box.min.z - origin.z) * invdirz;
                    tzmax = (box.max.z - origin.z) * invdirz
                } else {
                    tzmin = (box.max.z - origin.z) * invdirz;
                    tzmax = (box.min.z - origin.z) * invdirz
                }
                if (tmin > tzmax || tzmin > tmax)
                    return null;
                if (tzmin > tmin || tmin !== tmin)
                    tmin = tzmin;
                if (tzmax < tmax || tmax !== tmax)
                    tmax = tzmax;
                if (tmax < 0)
                    return null;
                return this.at(tmin >= 0 ? tmin : tmax, target)
            },
            intersectsBox: function() {
                var v = new Vector3;
                return function intersectsBox(box) {
                    return this.intersectBox(box, v) !== null
                }
            }(),
            intersectTriangle: function() {
                var diff = new Vector3;
                var edge1 = new Vector3;
                var edge2 = new Vector3;
                var normal = new Vector3;
                return function intersectTriangle(a, b, c, backfaceCulling, target) {
                    edge1.subVectors(b, a);
                    edge2.subVectors(c, a);
                    normal.crossVectors(edge1, edge2);
                    var DdN = this.direction.dot(normal);
                    var sign;
                    if (DdN > 0) {
                        if (backfaceCulling)
                            return null;
                        sign = 1
                    } else if (DdN < 0) {
                        sign = -1;
                        DdN = -DdN
                    } else {
                        return null
                    }
                    diff.subVectors(this.origin, a);
                    var DdQxE2 = sign * this.direction.dot(edge2.crossVectors(diff, edge2));
                    if (DdQxE2 < 0) {
                        return null
                    }
                    var DdE1xQ = sign * this.direction.dot(edge1.cross(diff));
                    if (DdE1xQ < 0) {
                        return null
                    }
                    if (DdQxE2 + DdE1xQ > DdN) {
                        return null
                    }
                    var QdN = -sign * diff.dot(normal);
                    if (QdN < 0) {
                        return null
                    }
                    return this.at(QdN / DdN, target)
                }
            }(),
            applyMatrix4: function(matrix4) {
                this.origin.applyMatrix4(matrix4);
                this.direction.transformDirection(matrix4);
                return this
            },
            equals: function(ray) {
                return ray.origin.equals(this.origin) && ray.direction.equals(this.direction)
            }
        });
        function Triangle(a, b, c) {
            this.a = a !== undefined ? a : new Vector3;
            this.b = b !== undefined ? b : new Vector3;
            this.c = c !== undefined ? c : new Vector3
        }
        Object.assign(Triangle, {
            getNormal: function() {
                var v0 = new Vector3;
                return function getNormal(a, b, c, target) {
                    if (target === undefined) {
                        console.warn("THREE.Triangle: .getNormal() target is now required");
                        target = new Vector3
                    }
                    target.subVectors(c, b);
                    v0.subVectors(a, b);
                    target.cross(v0);
                    var targetLengthSq = target.lengthSq();
                    if (targetLengthSq > 0) {
                        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq))
                    }
                    return target.set(0, 0, 0)
                }
            }(),
            getBarycoord: function() {
                var v0 = new Vector3;
                var v1 = new Vector3;
                var v2 = new Vector3;
                return function getBarycoord(point, a, b, c, target) {
                    v0.subVectors(c, a);
                    v1.subVectors(b, a);
                    v2.subVectors(point, a);
                    var dot00 = v0.dot(v0);
                    var dot01 = v0.dot(v1);
                    var dot02 = v0.dot(v2);
                    var dot11 = v1.dot(v1);
                    var dot12 = v1.dot(v2);
                    var denom = dot00 * dot11 - dot01 * dot01;
                    if (target === undefined) {
                        console.warn("THREE.Triangle: .getBarycoord() target is now required");
                        target = new Vector3
                    }
                    if (denom === 0) {
                        return target.set(-2, -1, -1)
                    }
                    var invDenom = 1 / denom;
                    var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
                    var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
                    return target.set(1 - u - v, v, u)
                }
            }(),
            containsPoint: function() {
                var v1 = new Vector3;
                return function containsPoint(point, a, b, c) {
                    Triangle.getBarycoord(point, a, b, c, v1);
                    return v1.x >= 0 && v1.y >= 0 && v1.x + v1.y <= 1
                }
            }()
        });
        Object.assign(Triangle.prototype, {
            set: function(a, b, c) {
                this.a.copy(a);
                this.b.copy(b);
                this.c.copy(c);
                return this
            },
            setFromPointsAndIndices: function(points, i0, i1, i2) {
                this.a.copy(points[i0]);
                this.b.copy(points[i1]);
                this.c.copy(points[i2]);
                return this
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(triangle) {
                this.a.copy(triangle.a);
                this.b.copy(triangle.b);
                this.c.copy(triangle.c);
                return this
            },
            getArea: function() {
                var v0 = new Vector3;
                var v1 = new Vector3;
                return function getArea() {
                    v0.subVectors(this.c, this.b);
                    v1.subVectors(this.a, this.b);
                    return v0.cross(v1).length() * .5
                }
            }(),
            getMidpoint: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Triangle: .getMidpoint() target is now required");
                    target = new Vector3
                }
                return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3)
            },
            getNormal: function(target) {
                return Triangle.getNormal(this.a, this.b, this.c, target)
            },
            getPlane: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Triangle: .getPlane() target is now required");
                    target = new Vector3
                }
                return target.setFromCoplanarPoints(this.a, this.b, this.c)
            },
            getBarycoord: function(point, target) {
                return Triangle.getBarycoord(point, this.a, this.b, this.c, target)
            },
            containsPoint: function(point) {
                return Triangle.containsPoint(point, this.a, this.b, this.c)
            },
            intersectsBox: function(box) {
                return box.intersectsTriangle(this)
            },
            closestPointToPoint: function() {
                var vab = new Vector3;
                var vac = new Vector3;
                var vbc = new Vector3;
                var vap = new Vector3;
                var vbp = new Vector3;
                var vcp = new Vector3;
                return function closestPointToPoint(p, target) {
                    if (target === undefined) {
                        console.warn("THREE.Triangle: .closestPointToPoint() target is now required");
                        target = new Vector3
                    }
                    var a = this.a,
                        b = this.b,
                        c = this.c;
                    var v,
                        w;
                    vab.subVectors(b, a);
                    vac.subVectors(c, a);
                    vap.subVectors(p, a);
                    var d1 = vab.dot(vap);
                    var d2 = vac.dot(vap);
                    if (d1 <= 0 && d2 <= 0) {
                        return target.copy(a)
                    }
                    vbp.subVectors(p, b);
                    var d3 = vab.dot(vbp);
                    var d4 = vac.dot(vbp);
                    if (d3 >= 0 && d4 <= d3) {
                        return target.copy(b)
                    }
                    var vc = d1 * d4 - d3 * d2;
                    if (vc <= 0 && d1 >= 0 && d3 <= 0) {
                        v = d1 / (d1 - d3);
                        return target.copy(a).addScaledVector(vab, v)
                    }
                    vcp.subVectors(p, c);
                    var d5 = vab.dot(vcp);
                    var d6 = vac.dot(vcp);
                    if (d6 >= 0 && d5 <= d6) {
                        return target.copy(c)
                    }
                    var vb = d5 * d2 - d1 * d6;
                    if (vb <= 0 && d2 >= 0 && d6 <= 0) {
                        w = d2 / (d2 - d6);
                        return target.copy(a).addScaledVector(vac, w)
                    }
                    var va = d3 * d6 - d5 * d4;
                    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
                        vbc.subVectors(c, b);
                        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
                        return target.copy(b).addScaledVector(vbc, w)
                    }
                    var denom = 1 / (va + vb + vc);
                    v = vb * denom;
                    w = vc * denom;
                    return target.copy(a).addScaledVector(vab, v).addScaledVector(vac, w)
                }
            }(),
            equals: function(triangle) {
                return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c)
            }
        });
        function Mesh(geometry, material) {
            Object3D.call(this);
            this.type = "Mesh";
            this.geometry = geometry !== undefined ? geometry : new BufferGeometry;
            this.material = material !== undefined ? material : new MeshBasicMaterial({
                color: Math.random() * 16777215
            });
            this.drawMode = TrianglesDrawMode;
            this.updateMorphTargets()
        }
        Mesh.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Mesh,
            isMesh: true,
            setDrawMode: function(value) {
                this.drawMode = value
            },
            copy: function(source) {
                Object3D.prototype.copy.call(this, source);
                this.drawMode = source.drawMode;
                if (source.morphTargetInfluences !== undefined) {
                    this.morphTargetInfluences = source.morphTargetInfluences.slice()
                }
                if (source.morphTargetDictionary !== undefined) {
                    this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary)
                }
                return this
            },
            updateMorphTargets: function() {
                var geometry = this.geometry;
                var m,
                    ml,
                    name;
                if (geometry.isBufferGeometry) {
                    var morphAttributes = geometry.morphAttributes;
                    var keys = Object.keys(morphAttributes);
                    if (keys.length > 0) {
                        var morphAttribute = morphAttributes[keys[0]];
                        if (morphAttribute !== undefined) {
                            this.morphTargetInfluences = [];
                            this.morphTargetDictionary = {};
                            for (m = 0, ml = morphAttribute.length; m < ml; m++) {
                                name = morphAttribute[m].name || String(m);
                                this.morphTargetInfluences.push(0);
                                this.morphTargetDictionary[name] = m
                            }
                        }
                    }
                } else {
                    var morphTargets = geometry.morphTargets;
                    if (morphTargets !== undefined && morphTargets.length > 0) {
                        this.morphTargetInfluences = [];
                        this.morphTargetDictionary = {};
                        for (m = 0, ml = morphTargets.length; m < ml; m++) {
                            name = morphTargets[m].name || String(m);
                            this.morphTargetInfluences.push(0);
                            this.morphTargetDictionary[name] = m
                        }
                    }
                }
            },
            raycast: function() {
                var inverseMatrix = new Matrix4;
                var ray = new Ray;
                var sphere = new Sphere;
                var vA = new Vector3;
                var vB = new Vector3;
                var vC = new Vector3;
                var tempA = new Vector3;
                var tempB = new Vector3;
                var tempC = new Vector3;
                var uvA = new Vector2;
                var uvB = new Vector2;
                var uvC = new Vector2;
                var barycoord = new Vector3;
                var intersectionPoint = new Vector3;
                var intersectionPointWorld = new Vector3;
                function uvIntersection(point, p1, p2, p3, uv1, uv2, uv3) {
                    Triangle.getBarycoord(point, p1, p2, p3, barycoord);
                    uv1.multiplyScalar(barycoord.x);
                    uv2.multiplyScalar(barycoord.y);
                    uv3.multiplyScalar(barycoord.z);
                    uv1.add(uv2).add(uv3);
                    return uv1.clone()
                }
                function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
                    var intersect;
                    if (material.side === BackSide) {
                        intersect = ray.intersectTriangle(pC, pB, pA, true, point)
                    } else {
                        intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point)
                    }
                    if (intersect === null)
                        return null;
                    intersectionPointWorld.copy(point);
                    intersectionPointWorld.applyMatrix4(object.matrixWorld);
                    var distance = raycaster.ray.origin.distanceTo(intersectionPointWorld);
                    if (distance < raycaster.near || distance > raycaster.far)
                        return null;
                    return {
                        distance: distance,
                        point: intersectionPointWorld.clone(),
                        object: object
                    }
                }
                function checkBufferGeometryIntersection(object, material, raycaster, ray, position, uv, a, b, c) {
                    vA.fromBufferAttribute(position, a);
                    vB.fromBufferAttribute(position, b);
                    vC.fromBufferAttribute(position, c);
                    var intersection = checkIntersection(object, material, raycaster, ray, vA, vB, vC, intersectionPoint);
                    if (intersection) {
                        if (uv) {
                            uvA.fromBufferAttribute(uv, a);
                            uvB.fromBufferAttribute(uv, b);
                            uvC.fromBufferAttribute(uv, c);
                            intersection.uv = uvIntersection(intersectionPoint, vA, vB, vC, uvA, uvB, uvC)
                        }
                        var face = new Face3(a, b, c);
                        Triangle.getNormal(vA, vB, vC, face.normal);
                        intersection.face = face
                    }
                    return intersection
                }
                return function raycast(raycaster, intersects) {
                    var geometry = this.geometry;
                    var material = this.material;
                    var matrixWorld = this.matrixWorld;
                    if (material === undefined)
                        return;
                    if (geometry.boundingSphere === null)
                        geometry.computeBoundingSphere();
                    sphere.copy(geometry.boundingSphere);
                    sphere.applyMatrix4(matrixWorld);
                    if (raycaster.ray.intersectsSphere(sphere) === false)
                        return;
                    inverseMatrix.getInverse(matrixWorld);
                    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);
                    if (geometry.boundingBox !== null) {
                        if (ray.intersectsBox(geometry.boundingBox) === false)
                            return
                    }
                    var intersection;
                    if (geometry.isBufferGeometry) {
                        var a,
                            b,
                            c;
                        var index = geometry.index;
                        var position = geometry.attributes.position;
                        var uv = geometry.attributes.uv;
                        var groups = geometry.groups;
                        var drawRange = geometry.drawRange;
                        var i,
                            j,
                            il,
                            jl;
                        var group,
                            groupMaterial;
                        var start,
                            end;
                        if (index !== null) {
                            if (Array.isArray(material)) {
                                for (i = 0, il = groups.length; i < il; i++) {
                                    group = groups[i];
                                    groupMaterial = material[group.materialIndex];
                                    start = Math.max(group.start, drawRange.start);
                                    end = Math.min(group.start + group.count, drawRange.start + drawRange.count);
                                    for (j = start, jl = end; j < jl; j += 3) {
                                        a = index.getX(j);
                                        b = index.getX(j + 1);
                                        c = index.getX(j + 2);
                                        intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, ray, position, uv, a, b, c);
                                        if (intersection) {
                                            intersection.faceIndex = Math.floor(j / 3);
                                            intersects.push(intersection)
                                        }
                                    }
                                }
                            } else {
                                start = Math.max(0, drawRange.start);
                                end = Math.min(index.count, drawRange.start + drawRange.count);
                                for (i = start, il = end; i < il; i += 3) {
                                    a = index.getX(i);
                                    b = index.getX(i + 1);
                                    c = index.getX(i + 2);
                                    intersection = checkBufferGeometryIntersection(this, material, raycaster, ray, position, uv, a, b, c);
                                    if (intersection) {
                                        intersection.faceIndex = Math.floor(i / 3);
                                        intersects.push(intersection)
                                    }
                                }
                            }
                        } else if (position !== undefined) {
                            if (Array.isArray(material)) {
                                for (i = 0, il = groups.length; i < il; i++) {
                                    group = groups[i];
                                    groupMaterial = material[group.materialIndex];
                                    start = Math.max(group.start, drawRange.start);
                                    end = Math.min(group.start + group.count, drawRange.start + drawRange.count);
                                    for (j = start, jl = end; j < jl; j += 3) {
                                        a = j;
                                        b = j + 1;
                                        c = j + 2;
                                        intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, ray, position, uv, a, b, c);
                                        if (intersection) {
                                            intersection.faceIndex = Math.floor(j / 3);
                                            intersects.push(intersection)
                                        }
                                    }
                                }
                            } else {
                                start = Math.max(0, drawRange.start);
                                end = Math.min(position.count, drawRange.start + drawRange.count);
                                for (i = start, il = end; i < il; i += 3) {
                                    a = i;
                                    b = i + 1;
                                    c = i + 2;
                                    intersection = checkBufferGeometryIntersection(this, material, raycaster, ray, position, uv, a, b, c);
                                    if (intersection) {
                                        intersection.faceIndex = Math.floor(i / 3);
                                        intersects.push(intersection)
                                    }
                                }
                            }
                        }
                    } else if (geometry.isGeometry) {
                        var fvA,
                            fvB,
                            fvC;
                        var isMultiMaterial = Array.isArray(material);
                        var vertices = geometry.vertices;
                        var faces = geometry.faces;
                        var uvs;
                        var faceVertexUvs = geometry.faceVertexUvs[0];
                        if (faceVertexUvs.length > 0)
                            uvs = faceVertexUvs;
                        for (var f = 0, fl = faces.length; f < fl; f++) {
                            var face = faces[f];
                            var faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;
                            if (faceMaterial === undefined)
                                continue;
                            fvA = vertices[face.a];
                            fvB = vertices[face.b];
                            fvC = vertices[face.c];
                            if (faceMaterial.morphTargets === true) {
                                var morphTargets = geometry.morphTargets;
                                var morphInfluences = this.morphTargetInfluences;
                                vA.set(0, 0, 0);
                                vB.set(0, 0, 0);
                                vC.set(0, 0, 0);
                                for (var t = 0, tl = morphTargets.length; t < tl; t++) {
                                    var influence = morphInfluences[t];
                                    if (influence === 0)
                                        continue;
                                    var targets = morphTargets[t].vertices;
                                    vA.addScaledVector(tempA.subVectors(targets[face.a], fvA), influence);
                                    vB.addScaledVector(tempB.subVectors(targets[face.b], fvB), influence);
                                    vC.addScaledVector(tempC.subVectors(targets[face.c], fvC), influence)
                                }
                                vA.add(fvA);
                                vB.add(fvB);
                                vC.add(fvC);
                                fvA = vA;
                                fvB = vB;
                                fvC = vC
                            }
                            intersection = checkIntersection(this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint);
                            if (intersection) {
                                if (uvs && uvs[f]) {
                                    var uvs_f = uvs[f];
                                    uvA.copy(uvs_f[0]);
                                    uvB.copy(uvs_f[1]);
                                    uvC.copy(uvs_f[2]);
                                    intersection.uv = uvIntersection(intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC)
                                }
                                intersection.face = face;
                                intersection.faceIndex = f;
                                intersects.push(intersection)
                            }
                        }
                    }
                }
            }(),
            clone: function() {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        });
        function WebGLBackground(renderer, state, objects, premultipliedAlpha) {
            var clearColor = new Color(0);
            var clearAlpha = 0;
            var planeCamera,
                planeMesh;
            var boxMesh;
            function render(renderList, scene, camera, forceClear) {
                var background = scene.background;
                if (background === null) {
                    setClear(clearColor, clearAlpha)
                } else if (background && background.isColor) {
                    setClear(background, 1);
                    forceClear = true
                }
                if (renderer.autoClear || forceClear) {
                    renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil)
                }
                if (background && background.isCubeTexture) {
                    if (boxMesh === undefined) {
                        boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({
                            uniforms: ShaderLib.cube.uniforms,
                            vertexShader: ShaderLib.cube.vertexShader,
                            fragmentShader: ShaderLib.cube.fragmentShader,
                            side: BackSide,
                            depthTest: true,
                            depthWrite: false,
                            fog: false
                        }));
                        boxMesh.geometry.removeAttribute("normal");
                        boxMesh.geometry.removeAttribute("uv");
                        boxMesh.onBeforeRender = function(renderer, scene, camera) {
                            this.matrixWorld.copyPosition(camera.matrixWorld)
                        };
                        objects.update(boxMesh)
                    }
                    boxMesh.material.uniforms.tCube.value = background;
                    renderList.push(boxMesh, boxMesh.geometry, boxMesh.material, 0, null)
                } else if (background && background.isTexture) {
                    if (planeCamera === undefined) {
                        planeCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
                        planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new MeshBasicMaterial({
                            depthTest: false,
                            depthWrite: false,
                            fog: false
                        }));
                        objects.update(planeMesh)
                    }
                    planeMesh.material.map = background;
                    renderer.renderBufferDirect(planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null)
                }
            }
            function setClear(color, alpha) {
                state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha)
            }
            return {
                getClearColor: function() {
                    return clearColor
                },
                setClearColor: function(color, alpha) {
                    clearColor.set(color);
                    clearAlpha = alpha !== undefined ? alpha : 1;
                    setClear(clearColor, clearAlpha)
                },
                getClearAlpha: function() {
                    return clearAlpha
                },
                setClearAlpha: function(alpha) {
                    clearAlpha = alpha;
                    setClear(clearColor, clearAlpha)
                },
                render: render
            }
        }
        function WebGLBufferRenderer(gl, extensions, info, capabilities) {
            var mode;
            function setMode(value) {
                mode = value
            }
            function render(start, count) {
                gl.drawArrays(mode, start, count);
                info.update(count, mode)
            }
            function renderInstances(geometry, start, count) {
                var extension;
                if (capabilities.isWebGL2) {
                    extension = gl
                } else {
                    extension = extensions.get("ANGLE_instanced_arrays");
                    if (extension === null) {
                        console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                        return
                    }
                }
                extension[capabilities.isWebGL2 ? "drawArraysInstanced" : "drawArraysInstancedANGLE"](mode, start, count, geometry.maxInstancedCount);
                info.update(count, mode, geometry.maxInstancedCount)
            }
            this.setMode = setMode;
            this.render = render;
            this.renderInstances = renderInstances
        }
        function WebGLCapabilities(gl, extensions, parameters) {
            var maxAnisotropy;
            function getMaxAnisotropy() {
                if (maxAnisotropy !== undefined)
                    return maxAnisotropy;
                var extension = extensions.get("EXT_texture_filter_anisotropic");
                if (extension !== null) {
                    maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT)
                } else {
                    maxAnisotropy = 0
                }
                return maxAnisotropy
            }
            function getMaxPrecision(precision) {
                if (precision === "highp") {
                    if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
                        return "highp"
                    }
                    precision = "mediump"
                }
                if (precision === "mediump") {
                    if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
                        return "mediump"
                    }
                }
                return "lowp"
            }
            var isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext;
            var precision = parameters.precision !== undefined ? parameters.precision : "highp";
            var maxPrecision = getMaxPrecision(precision);
            if (maxPrecision !== precision) {
                console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
                precision = maxPrecision
            }
            var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
            var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            var maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
            var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            var maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
            var maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
            var maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
            var maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
            var maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
            var vertexTextures = maxVertexTextures > 0;
            var floatFragmentTextures = isWebGL2 || !!extensions.get("OES_texture_float");
            var floatVertexTextures = vertexTextures && floatFragmentTextures;
            return {
                isWebGL2: isWebGL2,
                getMaxAnisotropy: getMaxAnisotropy,
                getMaxPrecision: getMaxPrecision,
                precision: precision,
                logarithmicDepthBuffer: logarithmicDepthBuffer,
                maxTextures: maxTextures,
                maxVertexTextures: maxVertexTextures,
                maxTextureSize: maxTextureSize,
                maxCubemapSize: maxCubemapSize,
                maxAttributes: maxAttributes,
                maxVertexUniforms: maxVertexUniforms,
                maxVaryings: maxVaryings,
                maxFragmentUniforms: maxFragmentUniforms,
                vertexTextures: vertexTextures,
                floatFragmentTextures: floatFragmentTextures,
                floatVertexTextures: floatVertexTextures
            }
        }
        function WebGLClipping() {
            var scope = this,
                globalState = null,
                numGlobalPlanes = 0,
                localClippingEnabled = false,
                renderingShadows = false,
                plane = new Plane,
                viewNormalMatrix = new Matrix3,
                uniform = {
                    value: null,
                    needsUpdate: false
                };
            this.uniform = uniform;
            this.numPlanes = 0;
            this.numIntersection = 0;
            this.init = function(planes, enableLocalClipping, camera) {
                var enabled = planes.length !== 0 || enableLocalClipping || numGlobalPlanes !== 0 || localClippingEnabled;
                localClippingEnabled = enableLocalClipping;
                globalState = projectPlanes(planes, camera, 0);
                numGlobalPlanes = planes.length;
                return enabled
            };
            this.beginShadows = function() {
                renderingShadows = true;
                projectPlanes(null)
            };
            this.endShadows = function() {
                renderingShadows = false;
                resetGlobalState()
            };
            this.setState = function(planes, clipIntersection, clipShadows, camera, cache, fromCache) {
                if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
                    if (renderingShadows) {
                        projectPlanes(null)
                    } else {
                        resetGlobalState()
                    }
                } else {
                    var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
                        lGlobal = nGlobal * 4,
                        dstArray = cache.clippingState || null;
                    uniform.value = dstArray;
                    dstArray = projectPlanes(planes, camera, lGlobal, fromCache);
                    for (var i = 0; i !== lGlobal; ++i) {
                        dstArray[i] = globalState[i]
                    }
                    cache.clippingState = dstArray;
                    this.numIntersection = clipIntersection ? this.numPlanes : 0;
                    this.numPlanes += nGlobal
                }
            };
            function resetGlobalState() {
                if (uniform.value !== globalState) {
                    uniform.value = globalState;
                    uniform.needsUpdate = numGlobalPlanes > 0
                }
                scope.numPlanes = numGlobalPlanes;
                scope.numIntersection = 0
            }
            function projectPlanes(planes, camera, dstOffset, skipTransform) {
                var nPlanes = planes !== null ? planes.length : 0,
                    dstArray = null;
                if (nPlanes !== 0) {
                    dstArray = uniform.value;
                    if (skipTransform !== true || dstArray === null) {
                        var flatSize = dstOffset + nPlanes * 4,
                            viewMatrix = camera.matrixWorldInverse;
                        viewNormalMatrix.getNormalMatrix(viewMatrix);
                        if (dstArray === null || dstArray.length < flatSize) {
                            dstArray = new Float32Array(flatSize)
                        }
                        for (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
                            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
                            plane.normal.toArray(dstArray, i4);
                            dstArray[i4 + 3] = plane.constant
                        }
                    }
                    uniform.value = dstArray;
                    uniform.needsUpdate = true
                }
                scope.numPlanes = nPlanes;
                return dstArray
            }
        }
        function WebGLExtensions(gl) {
            var extensions = {};
            return {
                get: function(name) {
                    if (extensions[name] !== undefined) {
                        return extensions[name]
                    }
                    var extension;
                    switch (name) {
                    case "WEBGL_depth_texture":
                        extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
                        break;
                    case "EXT_texture_filter_anisotropic":
                        extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                        break;
                    case "WEBGL_compressed_texture_s3tc":
                        extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                        break;
                    case "WEBGL_compressed_texture_pvrtc":
                        extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                        break;
                    default:
                        extension = gl.getExtension(name)
                    }
                    if (extension === null) {
                        console.warn("THREE.WebGLRenderer: " + name + " extension not supported.")
                    }
                    extensions[name] = extension;
                    return extension
                }
            }
        }
        function WebGLGeometries(gl, attributes, info) {
            var geometries = {};
            var wireframeAttributes = {};
            function onGeometryDispose(event) {
                var geometry = event.target;
                var buffergeometry = geometries[geometry.id];
                if (buffergeometry.index !== null) {
                    attributes.remove(buffergeometry.index)
                }
                for (var name in buffergeometry.attributes) {
                    attributes.remove(buffergeometry.attributes[name])
                }
                geometry.removeEventListener("dispose", onGeometryDispose);
                delete geometries[geometry.id];
                var attribute = wireframeAttributes[buffergeometry.id];
                if (attribute) {
                    attributes.remove(attribute);
                    delete wireframeAttributes[buffergeometry.id]
                }
                info.memory.geometries--
            }
            function get(object, geometry) {
                var buffergeometry = geometries[geometry.id];
                if (buffergeometry)
                    return buffergeometry;
                geometry.addEventListener("dispose", onGeometryDispose);
                if (geometry.isBufferGeometry) {
                    buffergeometry = geometry
                } else if (geometry.isGeometry) {
                    if (geometry._bufferGeometry === undefined) {
                        geometry._bufferGeometry = (new BufferGeometry).setFromObject(object)
                    }
                    buffergeometry = geometry._bufferGeometry
                }
                geometries[geometry.id] = buffergeometry;
                info.memory.geometries++;
                return buffergeometry
            }
            function update(geometry) {
                var index = geometry.index;
                var geometryAttributes = geometry.attributes;
                if (index !== null) {
                    attributes.update(index, gl.ELEMENT_ARRAY_BUFFER)
                }
                for (var name in geometryAttributes) {
                    attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER)
                }
                var morphAttributes = geometry.morphAttributes;
                for (var name in morphAttributes) {
                    var array = morphAttributes[name];
                    for (var i = 0, l = array.length; i < l; i++) {
                        attributes.update(array[i], gl.ARRAY_BUFFER)
                    }
                }
            }
            function getWireframeAttribute(geometry) {
                var attribute = wireframeAttributes[geometry.id];
                if (attribute)
                    return attribute;
                var indices = [];
                var geometryIndex = geometry.index;
                var geometryAttributes = geometry.attributes;
                if (geometryIndex !== null) {
                    var array = geometryIndex.array;
                    for (var i = 0, l = array.length; i < l; i += 3) {
                        var a = array[i + 0];
                        var b = array[i + 1];
                        var c = array[i + 2];
                        indices.push(a, b, b, c, c, a)
                    }
                } else {
                    var array = geometryAttributes.position.array;
                    for (var i = 0, l = array.length / 3 - 1; i < l; i += 3) {
                        var a = i + 0;
                        var b = i + 1;
                        var c = i + 2;
                        indices.push(a, b, b, c, c, a)
                    }
                }
                attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
                attributes.update(attribute, gl.ELEMENT_ARRAY_BUFFER);
                wireframeAttributes[geometry.id] = attribute;
                return attribute
            }
            return {
                get: get,
                update: update,
                getWireframeAttribute: getWireframeAttribute
            }
        }
        function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
            var mode;
            function setMode(value) {
                mode = value
            }
            var type,
                bytesPerElement;
            function setIndex(value) {
                type = value.type;
                bytesPerElement = value.bytesPerElement
            }
            function render(start, count) {
                gl.drawElements(mode, count, type, start * bytesPerElement);
                info.update(count, mode)
            }
            function renderInstances(geometry, start, count) {
                var extension;
                if (capabilities.isWebGL2) {
                    extension = gl
                } else {
                    var extension = extensions.get("ANGLE_instanced_arrays");
                    if (extension === null) {
                        console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                        return
                    }
                }
                extension[capabilities.isWebGL2 ? "drawElementsInstanced" : "drawElementsInstancedANGLE"](mode, count, type, start * bytesPerElement, geometry.maxInstancedCount);
                info.update(count, mode, geometry.maxInstancedCount)
            }
            this.setMode = setMode;
            this.setIndex = setIndex;
            this.render = render;
            this.renderInstances = renderInstances
        }
        function WebGLInfo(gl) {
            var memory = {
                geometries: 0,
                textures: 0
            };
            var render = {
                frame: 0,
                calls: 0,
                triangles: 0,
                points: 0,
                lines: 0
            };
            function update(count, mode, instanceCount) {
                instanceCount = instanceCount || 1;
                render.calls++;
                switch (mode) {
                case gl.TRIANGLES:
                    render.triangles += instanceCount * (count / 3);
                    break;
                case gl.TRIANGLE_STRIP:
                case gl.TRIANGLE_FAN:
                    render.triangles += instanceCount * (count - 2);
                    break;
                case gl.LINES:
                    render.lines += instanceCount * (count / 2);
                    break;
                case gl.LINE_STRIP:
                    render.lines += instanceCount * (count - 1);
                    break;
                case gl.LINE_LOOP:
                    render.lines += instanceCount * count;
                    break;
                case gl.POINTS:
                    render.points += instanceCount * count;
                    break;
                default:
                    console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
                    break
                }
            }
            function reset() {
                render.frame++;
                render.calls = 0;
                render.triangles = 0;
                render.points = 0;
                render.lines = 0
            }
            return {
                memory: memory,
                render: render,
                programs: null,
                autoReset: true,
                reset: reset,
                update: update
            }
        }
        function absNumericalSort(a, b) {
            return Math.abs(b[1]) - Math.abs(a[1])
        }
        function WebGLMorphtargets(gl) {
            var influencesList = {};
            var morphInfluences = new Float32Array(8);
            function update(object, geometry, material, program) {
                var objectInfluences = object.morphTargetInfluences;
                var length = objectInfluences.length;
                var influences = influencesList[geometry.id];
                if (influences === undefined) {
                    influences = [];
                    for (var i = 0; i < length; i++) {
                        influences[i] = [i, 0]
                    }
                    influencesList[geometry.id] = influences
                }
                var morphTargets = material.morphTargets && geometry.morphAttributes.position;
                var morphNormals = material.morphNormals && geometry.morphAttributes.normal;
                for (var i = 0; i < length; i++) {
                    var influence = influences[i];
                    if (influence[1] !== 0) {
                        if (morphTargets)
                            geometry.removeAttribute("morphTarget" + i);
                        if (morphNormals)
                            geometry.removeAttribute("morphNormal" + i)
                    }
                }
                for (var i = 0; i < length; i++) {
                    var influence = influences[i];
                    influence[0] = i;
                    influence[1] = objectInfluences[i]
                }
                influences.sort(absNumericalSort);
                for (var i = 0; i < 8; i++) {
                    var influence = influences[i];
                    if (influence) {
                        var index = influence[0];
                        var value = influence[1];
                        if (value) {
                            if (morphTargets)
                                geometry.addAttribute("morphTarget" + i, morphTargets[index]);
                            if (morphNormals)
                                geometry.addAttribute("morphNormal" + i, morphNormals[index]);
                            morphInfluences[i] = value;
                            continue
                        }
                    }
                    morphInfluences[i] = 0
                }
                program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences)
            }
            return {
                update: update
            }
        }
        function WebGLObjects(geometries, info) {
            var updateList = {};
            function update(object) {
                var frame = info.render.frame;
                var geometry = object.geometry;
                var buffergeometry = geometries.get(object, geometry);
                if (updateList[buffergeometry.id] !== frame) {
                    if (geometry.isGeometry) {
                        buffergeometry.updateFromObject(object)
                    }
                    geometries.update(buffergeometry);
                    updateList[buffergeometry.id] = frame
                }
                return buffergeometry
            }
            function dispose() {
                updateList = {}
            }
            return {
                update: update,
                dispose: dispose
            }
        }
        function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
            images = images !== undefined ? images : [];
            mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
            Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
            this.flipY = false
        }
        CubeTexture.prototype = Object.create(Texture.prototype);
        CubeTexture.prototype.constructor = CubeTexture;
        CubeTexture.prototype.isCubeTexture = true;
        Object.defineProperty(CubeTexture.prototype, "images", {
            get: function() {
                return this.image
            },
            set: function(value) {
                this.image = value
            }
        });
        var emptyTexture = new Texture;
        var emptyCubeTexture = new CubeTexture;
        function UniformContainer() {
            this.seq = [];
            this.map = {}
        }
        var arrayCacheF32 = [];
        var arrayCacheI32 = [];
        var mat4array = new Float32Array(16);
        var mat3array = new Float32Array(9);
        var mat2array = new Float32Array(4);
        function flatten(array, nBlocks, blockSize) {
            var firstElem = array[0];
            if (firstElem <= 0 || firstElem > 0)
                return array;
            var n = nBlocks * blockSize,
                r = arrayCacheF32[n];
            if (r === undefined) {
                r = new Float32Array(n);
                arrayCacheF32[n] = r
            }
            if (nBlocks !== 0) {
                firstElem.toArray(r, 0);
                for (var i = 1, offset = 0; i !== nBlocks; ++i) {
                    offset += blockSize;
                    array[i].toArray(r, offset)
                }
            }
            return r
        }
        function arraysEqual(a, b) {
            if (a.length !== b.length)
                return false;
            for (var i = 0, l = a.length; i < l; i++) {
                if (a[i] !== b[i])
                    return false
            }
            return true
        }
        function copyArray(a, b) {
            for (var i = 0, l = b.length; i < l; i++) {
                a[i] = b[i]
            }
        }
        function allocTexUnits(renderer, n) {
            var r = arrayCacheI32[n];
            if (r === undefined) {
                r = new Int32Array(n);
                arrayCacheI32[n] = r
            }
            for (var i = 0; i !== n; ++i)
                r[i] = renderer.allocTextureUnit();
            return r
        }
        function setValue1f(gl, v) {
            var cache = this.cache;
            if (cache[0] === v)
                return;
            gl.uniform1f(this.addr, v);
            cache[0] = v
        }
        function setValue1i(gl, v) {
            var cache = this.cache;
            if (cache[0] === v)
                return;
            gl.uniform1i(this.addr, v);
            cache[0] = v
        }
        function setValue2fv(gl, v) {
            var cache = this.cache;
            if (v.x !== undefined) {
                if (cache[0] !== v.x || cache[1] !== v.y) {
                    gl.uniform2f(this.addr, v.x, v.y);
                    cache[0] = v.x;
                    cache[1] = v.y
                }
            } else {
                if (arraysEqual(cache, v))
                    return;
                gl.uniform2fv(this.addr, v);
                copyArray(cache, v)
            }
        }
        function setValue3fv(gl, v) {
            var cache = this.cache;
            if (v.x !== undefined) {
                if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
                    gl.uniform3f(this.addr, v.x, v.y, v.z);
                    cache[0] = v.x;
                    cache[1] = v.y;
                    cache[2] = v.z
                }
            } else if (v.r !== undefined) {
                if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
                    gl.uniform3f(this.addr, v.r, v.g, v.b);
                    cache[0] = v.r;
                    cache[1] = v.g;
                    cache[2] = v.b
                }
            } else {
                if (arraysEqual(cache, v))
                    return;
                gl.uniform3fv(this.addr, v);
                copyArray(cache, v)
            }
        }
        function setValue4fv(gl, v) {
            var cache = this.cache;
            if (v.x !== undefined) {
                if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
                    gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
                    cache[0] = v.x;
                    cache[1] = v.y;
                    cache[2] = v.z;
                    cache[3] = v.w
                }
            } else {
                if (arraysEqual(cache, v))
                    return;
                gl.uniform4fv(this.addr, v);
                copyArray(cache, v)
            }
        }
        function setValue2fm(gl, v) {
            var cache = this.cache;
            var elements = v.elements;
            if (elements === undefined) {
                if (arraysEqual(cache, v))
                    return;
                gl.uniformMatrix2fv(this.addr, false, v);
                copyArray(cache, v)
            } else {
                if (arraysEqual(cache, elements))
                    return;
                mat2array.set(elements);
                gl.uniformMatrix2fv(this.addr, false, mat2array);
                copyArray(cache, elements)
            }
        }
        function setValue3fm(gl, v) {
            var cache = this.cache;
            var elements = v.elements;
            if (elements === undefined) {
                if (arraysEqual(cache, v))
                    return;
                gl.uniformMatrix3fv(this.addr, false, v);
                copyArray(cache, v)
            } else {
                if (arraysEqual(cache, elements))
                    return;
                mat3array.set(elements);
                gl.uniformMatrix3fv(this.addr, false, mat3array);
                copyArray(cache, elements)
            }
        }
        function setValue4fm(gl, v) {
            var cache = this.cache;
            var elements = v.elements;
            if (elements === undefined) {
                if (arraysEqual(cache, v))
                    return;
                gl.uniformMatrix4fv(this.addr, false, v);
                copyArray(cache, v)
            } else {
                if (arraysEqual(cache, elements))
                    return;
                mat4array.set(elements);
                gl.uniformMatrix4fv(this.addr, false, mat4array);
                copyArray(cache, elements)
            }
        }
        function setValueT1(gl, v, renderer) {
            var cache = this.cache;
            var unit = renderer.allocTextureUnit();
            if (cache[0] !== unit) {
                gl.uniform1i(this.addr, unit);
                cache[0] = unit
            }
            renderer.setTexture2D(v || emptyTexture, unit)
        }
        function setValueT6(gl, v, renderer) {
            var cache = this.cache;
            var unit = renderer.allocTextureUnit();
            if (cache[0] !== unit) {
                gl.uniform1i(this.addr, unit);
                cache[0] = unit
            }
            renderer.setTextureCube(v || emptyCubeTexture, unit)
        }
        function setValue2iv(gl, v) {
            var cache = this.cache;
            if (arraysEqual(cache, v))
                return;
            gl.uniform2iv(this.addr, v);
            copyArray(cache, v)
        }
        function setValue3iv(gl, v) {
            var cache = this.cache;
            if (arraysEqual(cache, v))
                return;
            gl.uniform3iv(this.addr, v);
            copyArray(cache, v)
        }
        function setValue4iv(gl, v) {
            var cache = this.cache;
            if (arraysEqual(cache, v))
                return;
            gl.uniform4iv(this.addr, v);
            copyArray(cache, v)
        }
        function getSingularSetter(type) {
            switch (type) {
            case 5126:
                return setValue1f;
            case 35664:
                return setValue2fv;
            case 35665:
                return setValue3fv;
            case 35666:
                return setValue4fv;
            case 35674:
                return setValue2fm;
            case 35675:
                return setValue3fm;
            case 35676:
                return setValue4fm;
            case 35678:
            case 36198:
                return setValueT1;
            case 35680:
                return setValueT6;
            case 5124:
            case 35670:
                return setValue1i;
            case 35667:
            case 35671:
                return setValue2iv;
            case 35668:
            case 35672:
                return setValue3iv;
            case 35669:
            case 35673:
                return setValue4iv
            }
        }
        function setValue1fv(gl, v) {
            var cache = this.cache;
            if (arraysEqual(cache, v))
                return;
            gl.uniform1fv(this.addr, v);
            copyArray(cache, v)
        }
        function setValue1iv(gl, v) {
            var cache = this.cache;
            if (arraysEqual(cache, v))
                return;
            gl.uniform1iv(this.addr, v);
            copyArray(cache, v)
        }
        function setValueV2a(gl, v) {
            var cache = this.cache;
            var data = flatten(v, this.size, 2);
            if (arraysEqual(cache, data))
                return;
            gl.uniform2fv(this.addr, data);
            this.updateCache(data)
        }
        function setValueV3a(gl, v) {
            var cache = this.cache;
            var data = flatten(v, this.size, 3);
            if (arraysEqual(cache, data))
                return;
            gl.uniform3fv(this.addr, data);
            this.updateCache(data)
        }
        function setValueV4a(gl, v) {
            var cache = this.cache;
            var data = flatten(v, this.size, 4);
            if (arraysEqual(cache, data))
                return;
            gl.uniform4fv(this.addr, data);
            this.updateCache(data)
        }
        function setValueM2a(gl, v) {
            var cache = this.cache;
            var data = flatten(v, this.size, 4);
            if (arraysEqual(cache, data))
                return;
            gl.uniformMatrix2fv(this.addr, false, data);
            this.updateCache(data)
        }
        function setValueM3a(gl, v) {
            var cache = this.cache;
            var data = flatten(v, this.size, 9);
            if (arraysEqual(cache, data))
                return;
            gl.uniformMatrix3fv(this.addr, false, data);
            this.updateCache(data)
        }
        function setValueM4a(gl, v) {
            var cache = this.cache;
            var data = flatten(v, this.size, 16);
            if (arraysEqual(cache, data))
                return;
            gl.uniformMatrix4fv(this.addr, false, data);
            this.updateCache(data)
        }
        function setValueT1a(gl, v, renderer) {
            var cache = this.cache;
            var n = v.length;
            var units = allocTexUnits(renderer, n);
            if (arraysEqual(cache, units) === false) {
                gl.uniform1iv(this.addr, units);
                copyArray(cache, units)
            }
            for (var i = 0; i !== n; ++i) {
                renderer.setTexture2D(v[i] || emptyTexture, units[i])
            }
        }
        function setValueT6a(gl, v, renderer) {
            var cache = this.cache;
            var n = v.length;
            var units = allocTexUnits(renderer, n);
            if (arraysEqual(cache, units) === false) {
                gl.uniform1iv(this.addr, units);
                copyArray(cache, units)
            }
            for (var i = 0; i !== n; ++i) {
                renderer.setTextureCube(v[i] || emptyCubeTexture, units[i])
            }
        }
        function getPureArraySetter(type) {
            switch (type) {
            case 5126:
                return setValue1fv;
            case 35664:
                return setValueV2a;
            case 35665:
                return setValueV3a;
            case 35666:
                return setValueV4a;
            case 35674:
                return setValueM2a;
            case 35675:
                return setValueM3a;
            case 35676:
                return setValueM4a;
            case 35678:
                return setValueT1a;
            case 35680:
                return setValueT6a;
            case 5124:
            case 35670:
                return setValue1iv;
            case 35667:
            case 35671:
                return setValue2iv;
            case 35668:
            case 35672:
                return setValue3iv;
            case 35669:
            case 35673:
                return setValue4iv
            }
        }
        function SingleUniform(id, activeInfo, addr) {
            this.id = id;
            this.addr = addr;
            this.cache = [];
            this.setValue = getSingularSetter(activeInfo.type)
        }
        function PureArrayUniform(id, activeInfo, addr) {
            this.id = id;
            this.addr = addr;
            this.cache = [];
            this.size = activeInfo.size;
            this.setValue = getPureArraySetter(activeInfo.type)
        }
        PureArrayUniform.prototype.updateCache = function(data) {
            var cache = this.cache;
            if (data instanceof Float32Array && cache.length !== data.length) {
                this.cache = new Float32Array(data.length)
            }
            copyArray(cache, data)
        };
        function StructuredUniform(id) {
            this.id = id;
            UniformContainer.call(this)
        }
        StructuredUniform.prototype.setValue = function(gl, value, renderer) {
            var seq = this.seq;
            for (var i = 0, n = seq.length; i !== n; ++i) {
                var u = seq[i];
                u.setValue(gl, value[u.id], renderer)
            }
        };
        var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
        function addUniform(container, uniformObject) {
            container.seq.push(uniformObject);
            container.map[uniformObject.id] = uniformObject
        }
        function parseUniform(activeInfo, addr, container) {
            var path = activeInfo.name,
                pathLength = path.length;
            RePathPart.lastIndex = 0;
            while (true) {
                var match = RePathPart.exec(path),
                    matchEnd = RePathPart.lastIndex,
                    id = match[1],
                    idIsIndex = match[2] === "]",
                    subscript = match[3];
                if (idIsIndex)
                    id = id | 0;
                if (subscript === undefined || subscript === "[" && matchEnd + 2 === pathLength) {
                    addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
                    break
                } else {
                    var map = container.map,
                        next = map[id];
                    if (next === undefined) {
                        next = new StructuredUniform(id);
                        addUniform(container, next)
                    }
                    container = next
                }
            }
        }
        function WebGLUniforms(gl, program, renderer) {
            UniformContainer.call(this);
            this.renderer = renderer;
            var n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
            for (var i = 0; i < n; ++i) {
                var info = gl.getActiveUniform(program, i),
                    addr = gl.getUniformLocation(program, info.name);
                parseUniform(info, addr, this)
            }
        }
        WebGLUniforms.prototype.setValue = function(gl, name, value) {
            var u = this.map[name];
            if (u !== undefined)
                u.setValue(gl, value, this.renderer)
        };
        WebGLUniforms.prototype.setOptional = function(gl, object, name) {
            var v = object[name];
            if (v !== undefined)
                this.setValue(gl, name, v)
        };
        WebGLUniforms.upload = function(gl, seq, values, renderer) {
            for (var i = 0, n = seq.length; i !== n; ++i) {
                var u = seq[i],
                    v = values[u.id];
                if (v.needsUpdate !== false) {
                    u.setValue(gl, v.value, renderer)
                }
            }
        };
        WebGLUniforms.seqWithValue = function(seq, values) {
            var r = [];
            for (var i = 0, n = seq.length; i !== n; ++i) {
                var u = seq[i];
                if (u.id in values)
                    r.push(u)
            }
            return r
        };
        function addLineNumbers(string) {
            var lines = string.split("\n");
            for (var i = 0; i < lines.length; i++) {
                lines[i] = i + 1 + ": " + lines[i]
            }
            return lines.join("\n")
        }
        function WebGLShader(gl, type, string) {
            var shader = gl.createShader(type);
            gl.shaderSource(shader, string);
            gl.compileShader(shader);
            if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {
                console.error("THREE.WebGLShader: Shader couldn't compile.")
            }
            if (gl.getShaderInfoLog(shader) !== "") {
                console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", type === gl.VERTEX_SHADER ? "vertex" : "fragment", gl.getShaderInfoLog(shader), addLineNumbers(string))
            }
            return shader
        }
        var programIdCount = 0;
        function getEncodingComponents(encoding) {
            switch (encoding) {
            case LinearEncoding:
                return ["Linear", "( value )"];
            case sRGBEncoding:
                return ["sRGB", "( value )"];
            case RGBEEncoding:
                return ["RGBE", "( value )"];
            case RGBM7Encoding:
                return ["RGBM", "( value, 7.0 )"];
            case RGBM16Encoding:
                return ["RGBM", "( value, 16.0 )"];
            case RGBDEncoding:
                return ["RGBD", "( value, 256.0 )"];
            case GammaEncoding:
                return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
            default:
                throw new Error("unsupported encoding: " + encoding)
            }
        }
        function getTexelDecodingFunction(functionName, encoding) {
            var components = getEncodingComponents(encoding);
            return "vec4 " + functionName + "( vec4 value ) { return " + components[0] + "ToLinear" + components[1] + "; }"
        }
        function getTexelEncodingFunction(functionName, encoding) {
            var components = getEncodingComponents(encoding);
            return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }"
        }
        function getToneMappingFunction(functionName, toneMapping) {
            var toneMappingName;
            switch (toneMapping) {
            case LinearToneMapping:
                toneMappingName = "Linear";
                break;
            case ReinhardToneMapping:
                toneMappingName = "Reinhard";
                break;
            case Uncharted2ToneMapping:
                toneMappingName = "Uncharted2";
                break;
            case CineonToneMapping:
                toneMappingName = "OptimizedCineon";
                break;
            default:
                throw new Error("unsupported toneMapping: " + toneMapping)
            }
            return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }"
        }
        function generateExtensions(extensions, parameters, rendererExtensions) {
            extensions = extensions || {};
            var chunks = [extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap && !parameters.objectSpaceNormalMap || parameters.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (extensions.fragDepth || parameters.logarithmicDepthBuffer) && rendererExtensions.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", extensions.drawBuffers && rendererExtensions.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (extensions.shaderTextureLOD || parameters.envMap) && rendererExtensions.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""];
            return chunks.filter(filterEmptyLine).join("\n")
        }
        function generateDefines(defines) {
            var chunks = [];
            for (var name in defines) {
                var value = defines[name];
                if (value === false)
                    continue;
                chunks.push("#define " + name + " " + value)
            }
            return chunks.join("\n")
        }
        function fetchAttributeLocations(gl, program) {
            var attributes = {};
            var n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
            for (var i = 0; i < n; i++) {
                var info = gl.getActiveAttrib(program, i);
                var name = info.name;
                attributes[name] = gl.getAttribLocation(program, name)
            }
            return attributes
        }
        function filterEmptyLine(string) {
            return string !== ""
        }
        function replaceLightNums(string, parameters) {
            return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights)
        }
        function replaceClippingPlaneNums(string, parameters) {
            return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection)
        }
        function parseIncludes(string) {
            var pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
            function replace(match, include) {
                var replace = ShaderChunk[include];
                if (replace === undefined) {
                    throw new Error("Can not resolve #include <" + include + ">")
                }
                return parseIncludes(replace)
            }
            return string.replace(pattern, replace)
        }
        function unrollLoops(string) {
            var pattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
            function replace(match, start, end, snippet) {
                var unroll = "";
                for (var i = parseInt(start); i < parseInt(end); i++) {
                    unroll += snippet.replace(/\[ i \]/g, "[ " + i + " ]")
                }
                return unroll
            }
            return string.replace(pattern, replace)
        }
        function WebGLProgram(renderer, extensions, code, material, shader, parameters, capabilities) {
            var gl = renderer.context;
            var defines = material.defines;
            var vertexShader = shader.vertexShader;
            var fragmentShader = shader.fragmentShader;
            var shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
            if (parameters.shadowMapType === PCFShadowMap) {
                shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF"
            } else if (parameters.shadowMapType === PCFSoftShadowMap) {
                shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT"
            }
            var envMapTypeDefine = "ENVMAP_TYPE_CUBE";
            var envMapModeDefine = "ENVMAP_MODE_REFLECTION";
            var envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
            if (parameters.envMap) {
                switch (material.envMap.mapping) {
                case CubeReflectionMapping:
                case CubeRefractionMapping:
                    envMapTypeDefine = "ENVMAP_TYPE_CUBE";
                    break;
                case CubeUVReflectionMapping:
                case CubeUVRefractionMapping:
                    envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
                    break;
                case EquirectangularReflectionMapping:
                case EquirectangularRefractionMapping:
                    envMapTypeDefine = "ENVMAP_TYPE_EQUIREC";
                    break;
                case SphericalReflectionMapping:
                    envMapTypeDefine = "ENVMAP_TYPE_SPHERE";
                    break
                }
                switch (material.envMap.mapping) {
                case CubeRefractionMapping:
                case EquirectangularRefractionMapping:
                    envMapModeDefine = "ENVMAP_MODE_REFRACTION";
                    break
                }
                switch (material.combine) {
                case MultiplyOperation:
                    envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
                    break;
                case MixOperation:
                    envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
                    break;
                case AddOperation:
                    envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
                    break
                }
            }
            var gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1;
            var customExtensions = capabilities.isWebGL2 ? "" : generateExtensions(material.extensions, parameters, extensions);
            var customDefines = generateDefines(defines);
            var program = gl.createProgram();
            var prefixVertex,
                prefixFragment;
            if (material.isRawShaderMaterial) {
                prefixVertex = [customDefines].filter(filterEmptyLine).join("\n");
                if (prefixVertex.length > 0) {
                    prefixVertex += "\n"
                }
                prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join("\n");
                if (prefixFragment.length > 0) {
                    prefixFragment += "\n"
                }
            } else {
                prefixVertex = ["precision " + parameters.precision + " float;", "precision " + parameters.precision + " int;", "#define SHADER_NAME " + shader.name, customDefines, parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + gammaFactorDefine, "#define MAX_BONES " + parameters.maxBones, parameters.useFog && parameters.fog ? "#define USE_FOG" : "", parameters.useFog && parameters.fogExp ? "#define FOG_EXP2" : "", parameters.map ? "#define USE_MAP" : "", parameters.envMap ? "#define USE_ENVMAP" : "", parameters.envMap ? "#define " + envMapModeDefine : "", parameters.lightMap ? "#define USE_LIGHTMAP" : "", parameters.aoMap ? "#define USE_AOMAP" : "", parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "", parameters.bumpMap ? "#define USE_BUMPMAP" : "", parameters.normalMap ? "#define USE_NORMALMAP" : "", parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", parameters.displacementMap && parameters.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", parameters.specularMap ? "#define USE_SPECULARMAP" : "", parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", parameters.metalnessMap ? "#define USE_METALNESSMAP" : "", parameters.alphaMap ? "#define USE_ALPHAMAP" : "", parameters.vertexColors ? "#define USE_COLOR" : "", parameters.flatShading ? "#define FLAT_SHADED" : "", parameters.skinning ? "#define USE_SKINNING" : "", parameters.useVertexTexture ? "#define BONE_TEXTURE" : "", parameters.morphTargets ? "#define USE_MORPHTARGETS" : "", parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "", parameters.doubleSided ? "#define DOUBLE_SIDED" : "", parameters.flipSided ? "#define FLIP_SIDED" : "", parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "", parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", parameters.logarithmicDepthBuffer && (capabilities.isWebGL2 || extensions.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(filterEmptyLine).join("\n");
                prefixFragment = [customExtensions, "precision " + parameters.precision + " float;", "precision " + parameters.precision + " int;", "#define SHADER_NAME " + shader.name, customDefines, parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest + (parameters.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + gammaFactorDefine, parameters.useFog && parameters.fog ? "#define USE_FOG" : "", parameters.useFog && parameters.fogExp ? "#define FOG_EXP2" : "", parameters.map ? "#define USE_MAP" : "", parameters.envMap ? "#define USE_ENVMAP" : "", parameters.envMap ? "#define " + envMapTypeDefine : "", parameters.envMap ? "#define " + envMapModeDefine : "", parameters.envMap ? "#define " + envMapBlendingDefine : "", parameters.lightMap ? "#define USE_LIGHTMAP" : "", parameters.aoMap ? "#define USE_AOMAP" : "", parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "", parameters.bumpMap ? "#define USE_BUMPMAP" : "", parameters.normalMap ? "#define USE_NORMALMAP" : "", parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", parameters.specularMap ? "#define USE_SPECULARMAP" : "", parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", parameters.metalnessMap ? "#define USE_METALNESSMAP" : "", parameters.alphaMap ? "#define USE_ALPHAMAP" : "", parameters.vertexColors ? "#define USE_COLOR" : "", parameters.gradientMap ? "#define USE_GRADIENTMAP" : "", parameters.flatShading ? "#define FLAT_SHADED" : "", parameters.doubleSided ? "#define DOUBLE_SIDED" : "", parameters.flipSided ? "#define FLIP_SIDED" : "", parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "", parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", parameters.logarithmicDepthBuffer && (capabilities.isWebGL2 || extensions.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", parameters.envMap && (capabilities.isWebGL2 || extensions.get("EXT_shader_texture_lod")) ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "", parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "", parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "", parameters.dithering ? "#define DITHERING" : "", parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ? ShaderChunk["encodings_pars_fragment"] : "", parameters.mapEncoding ? getTexelDecodingFunction("mapTexelToLinear", parameters.mapEncoding) : "", parameters.envMapEncoding ? getTexelDecodingFunction("envMapTexelToLinear", parameters.envMapEncoding) : "", parameters.emissiveMapEncoding ? getTexelDecodingFunction("emissiveMapTexelToLinear", parameters.emissiveMapEncoding) : "", parameters.outputEncoding ? getTexelEncodingFunction("linearToOutputTexel", parameters.outputEncoding) : "", parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : "", "\n"].filter(filterEmptyLine).join("\n")
            }
            vertexShader = parseIncludes(vertexShader);
            vertexShader = replaceLightNums(vertexShader, parameters);
            vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
            fragmentShader = parseIncludes(fragmentShader);
            fragmentShader = replaceLightNums(fragmentShader, parameters);
            fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
            vertexShader = unrollLoops(vertexShader);
            fragmentShader = unrollLoops(fragmentShader);
            if (capabilities.isWebGL2 && !material.isRawShaderMaterial) {
                var isGLSL3ShaderMaterial = false;
                var versionRegex = /^\s*#version\s+300\s+es\s*\n/;
                if (material.isShaderMaterial && vertexShader.match(versionRegex) !== null && fragmentShader.match(versionRegex) !== null) {
                    isGLSL3ShaderMaterial = true;
                    vertexShader = vertexShader.replace(versionRegex, "");
                    fragmentShader = fragmentShader.replace(versionRegex, "")
                }
                prefixVertex = ["#version 300 es\n", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + prefixVertex;
                prefixFragment = ["#version 300 es\n", "#define varying in", isGLSL3ShaderMaterial ? "" : "out highp vec4 pc_fragColor;", isGLSL3ShaderMaterial ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + prefixFragment
            }
            var vertexGlsl = prefixVertex + vertexShader;
            var fragmentGlsl = prefixFragment + fragmentShader;
            var glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
            var glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
            gl.attachShader(program, glVertexShader);
            gl.attachShader(program, glFragmentShader);
            if (material.index0AttributeName !== undefined) {
                gl.bindAttribLocation(program, 0, material.index0AttributeName)
            } else if (parameters.morphTargets === true) {
                gl.bindAttribLocation(program, 0, "position")
            }
            gl.linkProgram(program);
            var programLog = gl.getProgramInfoLog(program).trim();
            var vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
            var fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
            var runnable = true;
            var haveDiagnostics = true;
            if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
                runnable = false;
                console.error("THREE.WebGLProgram: shader error: ", gl.getError(), "gl.VALIDATE_STATUS", gl.getProgramParameter(program, gl.VALIDATE_STATUS), "gl.getProgramInfoLog", programLog, vertexLog, fragmentLog)
            } else if (programLog !== "") {
                console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", programLog)
            } else if (vertexLog === "" || fragmentLog === "") {
                haveDiagnostics = false
            }
            if (haveDiagnostics) {
                this.diagnostics = {
                    runnable: runnable,
                    material: material,
                    programLog: programLog,
                    vertexShader: {
                        log: vertexLog,
                        prefix: prefixVertex
                    },
                    fragmentShader: {
                        log: fragmentLog,
                        prefix: prefixFragment
                    }
                }
            }
            gl.deleteShader(glVertexShader);
            gl.deleteShader(glFragmentShader);
            var cachedUniforms;
            this.getUniforms = function() {
                if (cachedUniforms === undefined) {
                    cachedUniforms = new WebGLUniforms(gl, program, renderer)
                }
                return cachedUniforms
            };
            var cachedAttributes;
            this.getAttributes = function() {
                if (cachedAttributes === undefined) {
                    cachedAttributes = fetchAttributeLocations(gl, program)
                }
                return cachedAttributes
            };
            this.destroy = function() {
                gl.deleteProgram(program);
                this.program = undefined
            };
            Object.defineProperties(this, {
                uniforms: {
                    get: function() {
                        console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");
                        return this.getUniforms()
                    }
                },
                attributes: {
                    get: function() {
                        console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");
                        return this.getAttributes()
                    }
                }
            });
            this.name = shader.name;
            this.id = programIdCount++;
            this.code = code;
            this.usedTimes = 1;
            this.program = program;
            this.vertexShader = glVertexShader;
            this.fragmentShader = glFragmentShader;
            return this
        }
        function WebGLPrograms(renderer, extensions, capabilities) {
            var programs = [];
            var shaderIDs = {
                MeshDepthMaterial: "depth",
                MeshDistanceMaterial: "distanceRGBA",
                MeshNormalMaterial: "normal",
                MeshBasicMaterial: "basic",
                MeshLambertMaterial: "lambert",
                MeshPhongMaterial: "phong",
                MeshToonMaterial: "phong",
                MeshStandardMaterial: "physical",
                MeshPhysicalMaterial: "physical",
                LineBasicMaterial: "basic",
                LineDashedMaterial: "dashed",
                PointsMaterial: "points",
                ShadowMaterial: "shadow",
                SpriteMaterial: "sprite"
            };
            var parameterNames = ["precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding", "lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"];
            function allocateBones(object) {
                var skeleton = object.skeleton;
                var bones = skeleton.bones;
                if (capabilities.floatVertexTextures) {
                    return 1024
                } else {
                    var nVertexUniforms = capabilities.maxVertexUniforms;
                    var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
                    var maxBones = Math.min(nVertexMatrices, bones.length);
                    if (maxBones < bones.length) {
                        console.warn("THREE.WebGLRenderer: Skeleton has " + bones.length + " bones. This GPU supports " + maxBones + ".");
                        return 0
                    }
                    return maxBones
                }
            }
            function getTextureEncodingFromMap(map, gammaOverrideLinear) {
                var encoding;
                if (!map) {
                    encoding = LinearEncoding
                } else if (map.isTexture) {
                    encoding = map.encoding
                } else if (map.isWebGLRenderTarget) {
                    console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");
                    encoding = map.texture.encoding
                }
                if (encoding === LinearEncoding && gammaOverrideLinear) {
                    encoding = GammaEncoding
                }
                return encoding
            }
            this.getParameters = function(material, lights, shadows, fog, nClipPlanes, nClipIntersection, object) {
                var shaderID = shaderIDs[material.type];
                var maxBones = object.isSkinnedMesh ? allocateBones(object) : 0;
                var precision = capabilities.precision;
                if (material.precision !== null) {
                    precision = capabilities.getMaxPrecision(material.precision);
                    if (precision !== material.precision) {
                        console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.")
                    }
                }
                var currentRenderTarget = renderer.getRenderTarget();
                var parameters = {
                    shaderID: shaderID,
                    precision: precision,
                    supportsVertexTextures: capabilities.vertexTextures,
                    outputEncoding: getTextureEncodingFromMap(!currentRenderTarget ? null : currentRenderTarget.texture, renderer.gammaOutput),
                    map: !!material.map,
                    mapEncoding: getTextureEncodingFromMap(material.map, renderer.gammaInput),
                    envMap: !!material.envMap,
                    envMapMode: material.envMap && material.envMap.mapping,
                    envMapEncoding: getTextureEncodingFromMap(material.envMap, renderer.gammaInput),
                    envMapCubeUV: !!material.envMap && (material.envMap.mapping === CubeUVReflectionMapping || material.envMap.mapping === CubeUVRefractionMapping),
                    lightMap: !!material.lightMap,
                    aoMap: !!material.aoMap,
                    emissiveMap: !!material.emissiveMap,
                    emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap, renderer.gammaInput),
                    bumpMap: !!material.bumpMap,
                    normalMap: !!material.normalMap,
                    objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
                    displacementMap: !!material.displacementMap,
                    roughnessMap: !!material.roughnessMap,
                    metalnessMap: !!material.metalnessMap,
                    specularMap: !!material.specularMap,
                    alphaMap: !!material.alphaMap,
                    gradientMap: !!material.gradientMap,
                    combine: material.combine,
                    vertexColors: material.vertexColors,
                    fog: !!fog,
                    useFog: material.fog,
                    fogExp: fog && fog.isFogExp2,
                    flatShading: material.flatShading,
                    sizeAttenuation: material.sizeAttenuation,
                    logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,
                    skinning: material.skinning && maxBones > 0,
                    maxBones: maxBones,
                    useVertexTexture: capabilities.floatVertexTextures,
                    morphTargets: material.morphTargets,
                    morphNormals: material.morphNormals,
                    maxMorphTargets: renderer.maxMorphTargets,
                    maxMorphNormals: renderer.maxMorphNormals,
                    numDirLights: lights.directional.length,
                    numPointLights: lights.point.length,
                    numSpotLights: lights.spot.length,
                    numRectAreaLights: lights.rectArea.length,
                    numHemiLights: lights.hemi.length,
                    numClippingPlanes: nClipPlanes,
                    numClipIntersection: nClipIntersection,
                    dithering: material.dithering,
                    shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
                    shadowMapType: renderer.shadowMap.type,
                    toneMapping: renderer.toneMapping,
                    physicallyCorrectLights: renderer.physicallyCorrectLights,
                    premultipliedAlpha: material.premultipliedAlpha,
                    alphaTest: material.alphaTest,
                    doubleSided: material.side === DoubleSide,
                    flipSided: material.side === BackSide,
                    depthPacking: material.depthPacking !== undefined ? material.depthPacking : false
                };
                return parameters
            };
            this.getProgramCode = function(material, parameters) {
                var array = [];
                if (parameters.shaderID) {
                    array.push(parameters.shaderID)
                } else {
                    array.push(material.fragmentShader);
                    array.push(material.vertexShader)
                }
                if (material.defines !== undefined) {
                    for (var name in material.defines) {
                        array.push(name);
                        array.push(material.defines[name])
                    }
                }
                for (var i = 0; i < parameterNames.length; i++) {
                    array.push(parameters[parameterNames[i]])
                }
                array.push(material.onBeforeCompile.toString());
                array.push(renderer.gammaOutput);
                return array.join()
            };
            this.acquireProgram = function(material, shader, parameters, code) {
                var program;
                for (var p = 0, pl = programs.length; p < pl; p++) {
                    var programInfo = programs[p];
                    if (programInfo.code === code) {
                        program = programInfo;
                        ++program.usedTimes;
                        break
                    }
                }
                if (program === undefined) {
                    program = new WebGLProgram(renderer, extensions, code, material, shader, parameters, capabilities);
                    programs.push(program)
                }
                return program
            };
            this.releaseProgram = function(program) {
                if (--program.usedTimes === 0) {
                    var i = programs.indexOf(program);
                    programs[i] = programs[programs.length - 1];
                    programs.pop();
                    program.destroy()
                }
            };
            this.programs = programs
        }
        function WebGLProperties() {
            var properties = new WeakMap;
            function get(object) {
                var map = properties.get(object);
                if (map === undefined) {
                    map = {};
                    properties.set(object, map)
                }
                return map
            }
            function remove(object) {
                properties.delete(object)
            }
            function update(object, key, value) {
                properties.get(object)[key] = value
            }
            function dispose() {
                properties = new WeakMap
            }
            return {
                get: get,
                remove: remove,
                update: update,
                dispose: dispose
            }
        }
        function painterSortStable(a, b) {
            if (a.renderOrder !== b.renderOrder) {
                return a.renderOrder - b.renderOrder
            } else if (a.program && b.program && a.program !== b.program) {
                return a.program.id - b.program.id
            } else if (a.material.id !== b.material.id) {
                return a.material.id - b.material.id
            } else if (a.z !== b.z) {
                return a.z - b.z
            } else {
                return a.id - b.id
            }
        }
        function reversePainterSortStable(a, b) {
            if (a.renderOrder !== b.renderOrder) {
                return a.renderOrder - b.renderOrder
            }
            if (a.z !== b.z) {
                return b.z - a.z
            } else {
                return a.id - b.id
            }
        }
        function WebGLRenderList() {
            var renderItems = [];
            var renderItemsIndex = 0;
            var opaque = [];
            var transparent = [];
            function init() {
                renderItemsIndex = 0;
                opaque.length = 0;
                transparent.length = 0
            }
            function push(object, geometry, material, z, group) {
                var renderItem = renderItems[renderItemsIndex];
                if (renderItem === undefined) {
                    renderItem = {
                        id: object.id,
                        object: object,
                        geometry: geometry,
                        material: material,
                        program: material.program,
                        renderOrder: object.renderOrder,
                        z: z,
                        group: group
                    };
                    renderItems[renderItemsIndex] = renderItem
                } else {
                    renderItem.id = object.id;
                    renderItem.object = object;
                    renderItem.geometry = geometry;
                    renderItem.material = material;
                    renderItem.program = material.program;
                    renderItem.renderOrder = object.renderOrder;
                    renderItem.z = z;
                    renderItem.group = group
                }
                (material.transparent === true ? transparent : opaque).push(renderItem);
                renderItemsIndex++
            }
            function sort() {
                if (opaque.length > 1)
                    opaque.sort(painterSortStable);
                if (transparent.length > 1)
                    transparent.sort(reversePainterSortStable)
            }
            return {
                opaque: opaque,
                transparent: transparent,
                init: init,
                push: push,
                sort: sort
            }
        }
        function WebGLRenderLists() {
            var lists = {};
            function get(scene, camera) {
                var hash = scene.id + "," + camera.id;
                var list = lists[hash];
                if (list === undefined) {
                    list = new WebGLRenderList;
                    lists[hash] = list
                }
                return list
            }
            function dispose() {
                lists = {}
            }
            return {
                get: get,
                dispose: dispose
            }
        }
        function UniformsCache() {
            var lights = {};
            return {
                get: function(light) {
                    if (lights[light.id] !== undefined) {
                        return lights[light.id]
                    }
                    var uniforms;
                    switch (light.type) {
                    case "DirectionalLight":
                        uniforms = {
                            direction: new Vector3,
                            color: new Color,
                            shadow: false,
                            shadowBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new Vector2
                        };
                        break;
                    case "SpotLight":
                        uniforms = {
                            position: new Vector3,
                            direction: new Vector3,
                            color: new Color,
                            distance: 0,
                            coneCos: 0,
                            penumbraCos: 0,
                            decay: 0,
                            shadow: false,
                            shadowBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new Vector2
                        };
                        break;
                    case "PointLight":
                        uniforms = {
                            position: new Vector3,
                            color: new Color,
                            distance: 0,
                            decay: 0,
                            shadow: false,
                            shadowBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new Vector2,
                            shadowCameraNear: 1,
                            shadowCameraFar: 1e3
                        };
                        break;
                    case "HemisphereLight":
                        uniforms = {
                            direction: new Vector3,
                            skyColor: new Color,
                            groundColor: new Color
                        };
                        break;
                    case "RectAreaLight":
                        uniforms = {
                            color: new Color,
                            position: new Vector3,
                            halfWidth: new Vector3,
                            halfHeight: new Vector3
                        };
                        break
                    }
                    lights[light.id] = uniforms;
                    return uniforms
                }
            }
        }
        var count = 0;
        function WebGLLights() {
            var cache = new UniformsCache;
            var state = {
                id: count++,
                hash: {
                    stateID: -1,
                    directionalLength: -1,
                    pointLength: -1,
                    spotLength: -1,
                    rectAreaLength: -1,
                    hemiLength: -1,
                    shadowsLength: -1
                },
                ambient: [0, 0, 0],
                directional: [],
                directionalShadowMap: [],
                directionalShadowMatrix: [],
                spot: [],
                spotShadowMap: [],
                spotShadowMatrix: [],
                rectArea: [],
                point: [],
                pointShadowMap: [],
                pointShadowMatrix: [],
                hemi: []
            };
            var vector3 = new Vector3;
            var matrix4 = new Matrix4;
            var matrix42 = new Matrix4;
            function setup(lights, shadows, camera) {
                var r = 0,
                    g = 0,
                    b = 0;
                var directionalLength = 0;
                var pointLength = 0;
                var spotLength = 0;
                var rectAreaLength = 0;
                var hemiLength = 0;
                var viewMatrix = camera.matrixWorldInverse;
                for (var i = 0, l = lights.length; i < l; i++) {
                    var light = lights[i];
                    var color = light.color;
                    var intensity = light.intensity;
                    var distance = light.distance;
                    var shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
                    if (light.isAmbientLight) {
                        r += color.r * intensity;
                        g += color.g * intensity;
                        b += color.b * intensity
                    } else if (light.isDirectionalLight) {
                        var uniforms = cache.get(light);
                        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
                        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                        vector3.setFromMatrixPosition(light.target.matrixWorld);
                        uniforms.direction.sub(vector3);
                        uniforms.direction.transformDirection(viewMatrix);
                        uniforms.shadow = light.castShadow;
                        if (light.castShadow) {
                            var shadow = light.shadow;
                            uniforms.shadowBias = shadow.bias;
                            uniforms.shadowRadius = shadow.radius;
                            uniforms.shadowMapSize = shadow.mapSize
                        }
                        state.directionalShadowMap[directionalLength] = shadowMap;
                        state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
                        state.directional[directionalLength] = uniforms;
                        directionalLength++
                    } else if (light.isSpotLight) {
                        var uniforms = cache.get(light);
                        uniforms.position.setFromMatrixPosition(light.matrixWorld);
                        uniforms.position.applyMatrix4(viewMatrix);
                        uniforms.color.copy(color).multiplyScalar(intensity);
                        uniforms.distance = distance;
                        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                        vector3.setFromMatrixPosition(light.target.matrixWorld);
                        uniforms.direction.sub(vector3);
                        uniforms.direction.transformDirection(viewMatrix);
                        uniforms.coneCos = Math.cos(light.angle);
                        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
                        uniforms.decay = light.distance === 0 ? 0 : light.decay;
                        uniforms.shadow = light.castShadow;
                        if (light.castShadow) {
                            var shadow = light.shadow;
                            uniforms.shadowBias = shadow.bias;
                            uniforms.shadowRadius = shadow.radius;
                            uniforms.shadowMapSize = shadow.mapSize
                        }
                        state.spotShadowMap[spotLength] = shadowMap;
                        state.spotShadowMatrix[spotLength] = light.shadow.matrix;
                        state.spot[spotLength] = uniforms;
                        spotLength++
                    } else if (light.isRectAreaLight) {
                        var uniforms = cache.get(light);
                        uniforms.color.copy(color).multiplyScalar(intensity);
                        uniforms.position.setFromMatrixPosition(light.matrixWorld);
                        uniforms.position.applyMatrix4(viewMatrix);
                        matrix42.identity();
                        matrix4.copy(light.matrixWorld);
                        matrix4.premultiply(viewMatrix);
                        matrix42.extractRotation(matrix4);
                        uniforms.halfWidth.set(light.width * .5, 0, 0);
                        uniforms.halfHeight.set(0, light.height * .5, 0);
                        uniforms.halfWidth.applyMatrix4(matrix42);
                        uniforms.halfHeight.applyMatrix4(matrix42);
                        state.rectArea[rectAreaLength] = uniforms;
                        rectAreaLength++
                    } else if (light.isPointLight) {
                        var uniforms = cache.get(light);
                        uniforms.position.setFromMatrixPosition(light.matrixWorld);
                        uniforms.position.applyMatrix4(viewMatrix);
                        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
                        uniforms.distance = light.distance;
                        uniforms.decay = light.distance === 0 ? 0 : light.decay;
                        uniforms.shadow = light.castShadow;
                        if (light.castShadow) {
                            var shadow = light.shadow;
                            uniforms.shadowBias = shadow.bias;
                            uniforms.shadowRadius = shadow.radius;
                            uniforms.shadowMapSize = shadow.mapSize;
                            uniforms.shadowCameraNear = shadow.camera.near;
                            uniforms.shadowCameraFar = shadow.camera.far
                        }
                        state.pointShadowMap[pointLength] = shadowMap;
                        state.pointShadowMatrix[pointLength] = light.shadow.matrix;
                        state.point[pointLength] = uniforms;
                        pointLength++
                    } else if (light.isHemisphereLight) {
                        var uniforms = cache.get(light);
                        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                        uniforms.direction.transformDirection(viewMatrix);
                        uniforms.direction.normalize();
                        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
                        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
                        state.hemi[hemiLength] = uniforms;
                        hemiLength++
                    }
                }
                state.ambient[0] = r;
                state.ambient[1] = g;
                state.ambient[2] = b;
                state.directional.length = directionalLength;
                state.spot.length = spotLength;
                state.rectArea.length = rectAreaLength;
                state.point.length = pointLength;
                state.hemi.length = hemiLength;
                state.hash.stateID = state.id;
                state.hash.directionalLength = directionalLength;
                state.hash.pointLength = pointLength;
                state.hash.spotLength = spotLength;
                state.hash.rectAreaLength = rectAreaLength;
                state.hash.hemiLength = hemiLength;
                state.hash.shadowsLength = shadows.length
            }
            return {
                setup: setup,
                state: state
            }
        }
        function WebGLRenderState() {
            var lights = new WebGLLights;
            var lightsArray = [];
            var shadowsArray = [];
            function init() {
                lightsArray.length = 0;
                shadowsArray.length = 0
            }
            function pushLight(light) {
                lightsArray.push(light)
            }
            function pushShadow(shadowLight) {
                shadowsArray.push(shadowLight)
            }
            function setupLights(camera) {
                lights.setup(lightsArray, shadowsArray, camera)
            }
            var state = {
                lightsArray: lightsArray,
                shadowsArray: shadowsArray,
                lights: lights
            };
            return {
                init: init,
                state: state,
                setupLights: setupLights,
                pushLight: pushLight,
                pushShadow: pushShadow
            }
        }
        function WebGLRenderStates() {
            var renderStates = {};
            function get(scene, camera) {
                var renderState;
                if (renderStates[scene.id] === undefined) {
                    renderState = new WebGLRenderState;
                    renderStates[scene.id] = {};
                    renderStates[scene.id][camera.id] = renderState
                } else {
                    if (renderStates[scene.id][camera.id] === undefined) {
                        renderState = new WebGLRenderState;
                        renderStates[scene.id][camera.id] = renderState
                    } else {
                        renderState = renderStates[scene.id][camera.id]
                    }
                }
                return renderState
            }
            function dispose() {
                renderStates = {}
            }
            return {
                get: get,
                dispose: dispose
            }
        }
        function MeshDepthMaterial(parameters) {
            Material.call(this);
            this.type = "MeshDepthMaterial";
            this.depthPacking = BasicDepthPacking;
            this.skinning = false;
            this.morphTargets = false;
            this.map = null;
            this.alphaMap = null;
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.fog = false;
            this.lights = false;
            this.setValues(parameters)
        }
        MeshDepthMaterial.prototype = Object.create(Material.prototype);
        MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
        MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
        MeshDepthMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.depthPacking = source.depthPacking;
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.map = source.map;
            this.alphaMap = source.alphaMap;
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            return this
        };
        function MeshDistanceMaterial(parameters) {
            Material.call(this);
            this.type = "MeshDistanceMaterial";
            this.referencePosition = new Vector3;
            this.nearDistance = 1;
            this.farDistance = 1e3;
            this.skinning = false;
            this.morphTargets = false;
            this.map = null;
            this.alphaMap = null;
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.fog = false;
            this.lights = false;
            this.setValues(parameters)
        }
        MeshDistanceMaterial.prototype = Object.create(Material.prototype);
        MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
        MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
        MeshDistanceMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.referencePosition.copy(source.referencePosition);
            this.nearDistance = source.nearDistance;
            this.farDistance = source.farDistance;
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.map = source.map;
            this.alphaMap = source.alphaMap;
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
            return this
        };
        function WebGLShadowMap(_renderer, _objects, maxTextureSize) {
            var _frustum = new Frustum,
                _projScreenMatrix = new Matrix4,
                _shadowMapSize = new Vector2,
                _maxShadowMapSize = new Vector2(maxTextureSize, maxTextureSize),
                _lookTarget = new Vector3,
                _lightPositionWorld = new Vector3,
                _MorphingFlag = 1,
                _SkinningFlag = 2,
                _NumberOfMaterialVariants = (_MorphingFlag | _SkinningFlag) + 1,
                _depthMaterials = new Array(_NumberOfMaterialVariants),
                _distanceMaterials = new Array(_NumberOfMaterialVariants),
                _materialCache = {};
            var shadowSide = {
                0: BackSide,
                1: FrontSide,
                2: DoubleSide
            };
            var cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];
            var cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];
            var cube2DViewPorts = [new Vector4, new Vector4, new Vector4, new Vector4, new Vector4, new Vector4];
            for (var i = 0; i !== _NumberOfMaterialVariants; ++i) {
                var useMorphing = (i & _MorphingFlag) !== 0;
                var useSkinning = (i & _SkinningFlag) !== 0;
                var depthMaterial = new MeshDepthMaterial({
                    depthPacking: RGBADepthPacking,
                    morphTargets: useMorphing,
                    skinning: useSkinning
                });
                _depthMaterials[i] = depthMaterial;
                var distanceMaterial = new MeshDistanceMaterial({
                    morphTargets: useMorphing,
                    skinning: useSkinning
                });
                _distanceMaterials[i] = distanceMaterial
            }
            var scope = this;
            this.enabled = false;
            this.autoUpdate = true;
            this.needsUpdate = false;
            this.type = PCFShadowMap;
            this.render = function(lights, scene, camera) {
                if (scope.enabled === false)
                    return;
                if (scope.autoUpdate === false && scope.needsUpdate === false)
                    return;
                if (lights.length === 0)
                    return;
                var _gl = _renderer.context;
                var _state = _renderer.state;
                _state.disable(_gl.BLEND);
                _state.buffers.color.setClear(1, 1, 1, 1);
                _state.buffers.depth.setTest(true);
                _state.setScissorTest(false);
                var faceCount;
                for (var i = 0, il = lights.length; i < il; i++) {
                    var light = lights[i];
                    var shadow = light.shadow;
                    var isPointLight = light && light.isPointLight;
                    if (shadow === undefined) {
                        console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
                        continue
                    }
                    var shadowCamera = shadow.camera;
                    _shadowMapSize.copy(shadow.mapSize);
                    _shadowMapSize.min(_maxShadowMapSize);
                    if (isPointLight) {
                        var vpWidth = _shadowMapSize.x;
                        var vpHeight = _shadowMapSize.y;
                        cube2DViewPorts[0].set(vpWidth * 2, vpHeight, vpWidth, vpHeight);
                        cube2DViewPorts[1].set(0, vpHeight, vpWidth, vpHeight);
                        cube2DViewPorts[2].set(vpWidth * 3, vpHeight, vpWidth, vpHeight);
                        cube2DViewPorts[3].set(vpWidth, vpHeight, vpWidth, vpHeight);
                        cube2DViewPorts[4].set(vpWidth * 3, 0, vpWidth, vpHeight);
                        cube2DViewPorts[5].set(vpWidth, 0, vpWidth, vpHeight);
                        _shadowMapSize.x *= 4;
                        _shadowMapSize.y *= 2
                    }
                    if (shadow.map === null) {
                        var pars = {
                            minFilter: NearestFilter,
                            magFilter: NearestFilter,
                            format: RGBAFormat
                        };
                        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
                        shadow.map.texture.name = light.name + ".shadowMap";
                        shadowCamera.updateProjectionMatrix()
                    }
                    if (shadow.isSpotLightShadow) {
                        shadow.update(light)
                    }
                    var shadowMap = shadow.map;
                    var shadowMatrix = shadow.matrix;
                    _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
                    shadowCamera.position.copy(_lightPositionWorld);
                    if (isPointLight) {
                        faceCount = 6;
                        shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z)
                    } else {
                        faceCount = 1;
                        _lookTarget.setFromMatrixPosition(light.target.matrixWorld);
                        shadowCamera.lookAt(_lookTarget);
                        shadowCamera.updateMatrixWorld();
                        shadowMatrix.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1);
                        shadowMatrix.multiply(shadowCamera.projectionMatrix);
                        shadowMatrix.multiply(shadowCamera.matrixWorldInverse)
                    }
                    _renderer.setRenderTarget(shadowMap);
                    _renderer.clear();
                    for (var face = 0; face < faceCount; face++) {
                        if (isPointLight) {
                            _lookTarget.copy(shadowCamera.position);
                            _lookTarget.add(cubeDirections[face]);
                            shadowCamera.up.copy(cubeUps[face]);
                            shadowCamera.lookAt(_lookTarget);
                            shadowCamera.updateMatrixWorld();
                            var vpDimensions = cube2DViewPorts[face];
                            _state.viewport(vpDimensions)
                        }
                        _projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
                        _frustum.setFromMatrix(_projScreenMatrix);
                        renderObject(scene, camera, shadowCamera, isPointLight)
                    }
                }
                scope.needsUpdate = false
            };
            function getDepthMaterial(object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar) {
                var geometry = object.geometry;
                var result = null;
                var materialVariants = _depthMaterials;
                var customMaterial = object.customDepthMaterial;
                if (isPointLight) {
                    materialVariants = _distanceMaterials;
                    customMaterial = object.customDistanceMaterial
                }
                if (!customMaterial) {
                    var useMorphing = false;
                    if (material.morphTargets) {
                        if (geometry && geometry.isBufferGeometry) {
                            useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0
                        } else if (geometry && geometry.isGeometry) {
                            useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0
                        }
                    }
                    if (object.isSkinnedMesh && material.skinning === false) {
                        console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", object)
                    }
                    var useSkinning = object.isSkinnedMesh && material.skinning;
                    var variantIndex = 0;
                    if (useMorphing)
                        variantIndex |= _MorphingFlag;
                    if (useSkinning)
                        variantIndex |= _SkinningFlag;
                    result = materialVariants[variantIndex]
                } else {
                    result = customMaterial
                }
                if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {
                    var keyA = result.uuid,
                        keyB = material.uuid;
                    var materialsForVariant = _materialCache[keyA];
                    if (materialsForVariant === undefined) {
                        materialsForVariant = {};
                        _materialCache[keyA] = materialsForVariant
                    }
                    var cachedMaterial = materialsForVariant[keyB];
                    if (cachedMaterial === undefined) {
                        cachedMaterial = result.clone();
                        materialsForVariant[keyB] = cachedMaterial
                    }
                    result = cachedMaterial
                }
                result.visible = material.visible;
                result.wireframe = material.wireframe;
                result.side = material.shadowSide != null ? material.shadowSide : shadowSide[material.side];
                result.clipShadows = material.clipShadows;
                result.clippingPlanes = material.clippingPlanes;
                result.clipIntersection = material.clipIntersection;
                result.wireframeLinewidth = material.wireframeLinewidth;
                result.linewidth = material.linewidth;
                if (isPointLight && result.isMeshDistanceMaterial) {
                    result.referencePosition.copy(lightPositionWorld);
                    result.nearDistance = shadowCameraNear;
                    result.farDistance = shadowCameraFar
                }
                return result
            }
            function renderObject(object, camera, shadowCamera, isPointLight) {
                if (object.visible === false)
                    return;
                var visible = object.layers.test(camera.layers);
                if (visible && (object.isMesh || object.isLine || object.isPoints)) {
                    if (object.castShadow && (!object.frustumCulled || _frustum.intersectsObject(object))) {
                        object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
                        var geometry = _objects.update(object);
                        var material = object.material;
                        if (Array.isArray(material)) {
                            var groups = geometry.groups;
                            for (var k = 0, kl = groups.length; k < kl; k++) {
                                var group = groups[k];
                                var groupMaterial = material[group.materialIndex];
                                if (groupMaterial && groupMaterial.visible) {
                                    var depthMaterial = getDepthMaterial(object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far);
                                    _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group)
                                }
                            }
                        } else if (material.visible) {
                            var depthMaterial = getDepthMaterial(object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far);
                            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null)
                        }
                    }
                }
                var children = object.children;
                for (var i = 0, l = children.length; i < l; i++) {
                    renderObject(children[i], camera, shadowCamera, isPointLight)
                }
            }
        }
        function WebGLState(gl, extensions, utils, capabilities) {
            function ColorBuffer() {
                var locked = false;
                var color = new Vector4;
                var currentColorMask = null;
                var currentColorClear = new Vector4(0, 0, 0, 0);
                return {
                    setMask: function(colorMask) {
                        if (currentColorMask !== colorMask && !locked) {
                            gl.colorMask(colorMask, colorMask, colorMask, colorMask);
                            currentColorMask = colorMask
                        }
                    },
                    setLocked: function(lock) {
                        locked = lock
                    },
                    setClear: function(r, g, b, a, premultipliedAlpha) {
                        if (premultipliedAlpha === true) {
                            r *= a;
                            g *= a;
                            b *= a
                        }
                        color.set(r, g, b, a);
                        if (currentColorClear.equals(color) === false) {
                            gl.clearColor(r, g, b, a);
                            currentColorClear.copy(color)
                        }
                    },
                    reset: function() {
                        locked = false;
                        currentColorMask = null;
                        currentColorClear.set(-1, 0, 0, 0)
                    }
                }
            }
            function DepthBuffer() {
                var locked = false;
                var currentDepthMask = null;
                var currentDepthFunc = null;
                var currentDepthClear = null;
                return {
                    setTest: function(depthTest) {
                        if (depthTest) {
                            enable(gl.DEPTH_TEST)
                        } else {
                            disable(gl.DEPTH_TEST)
                        }
                    },
                    setMask: function(depthMask) {
                        if (currentDepthMask !== depthMask && !locked) {
                            gl.depthMask(depthMask);
                            currentDepthMask = depthMask
                        }
                    },
                    setFunc: function(depthFunc) {
                        if (currentDepthFunc !== depthFunc) {
                            if (depthFunc) {
                                switch (depthFunc) {
                                case NeverDepth:
                                    gl.depthFunc(gl.NEVER);
                                    break;
                                case AlwaysDepth:
                                    gl.depthFunc(gl.ALWAYS);
                                    break;
                                case LessDepth:
                                    gl.depthFunc(gl.LESS);
                                    break;
                                case LessEqualDepth:
                                    gl.depthFunc(gl.LEQUAL);
                                    break;
                                case EqualDepth:
                                    gl.depthFunc(gl.EQUAL);
                                    break;
                                case GreaterEqualDepth:
                                    gl.depthFunc(gl.GEQUAL);
                                    break;
                                case GreaterDepth:
                                    gl.depthFunc(gl.GREATER);
                                    break;
                                case NotEqualDepth:
                                    gl.depthFunc(gl.NOTEQUAL);
                                    break;
                                default:
                                    gl.depthFunc(gl.LEQUAL)
                                }
                            } else {
                                gl.depthFunc(gl.LEQUAL)
                            }
                            currentDepthFunc = depthFunc
                        }
                    },
                    setLocked: function(lock) {
                        locked = lock
                    },
                    setClear: function(depth) {
                        if (currentDepthClear !== depth) {
                            gl.clearDepth(depth);
                            currentDepthClear = depth
                        }
                    },
                    reset: function() {
                        locked = false;
                        currentDepthMask = null;
                        currentDepthFunc = null;
                        currentDepthClear = null
                    }
                }
            }
            function StencilBuffer() {
                var locked = false;
                var currentStencilMask = null;
                var currentStencilFunc = null;
                var currentStencilRef = null;
                var currentStencilFuncMask = null;
                var currentStencilFail = null;
                var currentStencilZFail = null;
                var currentStencilZPass = null;
                var currentStencilClear = null;
                return {
                    setTest: function(stencilTest) {
                        if (stencilTest) {
                            enable(gl.STENCIL_TEST)
                        } else {
                            disable(gl.STENCIL_TEST)
                        }
                    },
                    setMask: function(stencilMask) {
                        if (currentStencilMask !== stencilMask && !locked) {
                            gl.stencilMask(stencilMask);
                            currentStencilMask = stencilMask
                        }
                    },
                    setFunc: function(stencilFunc, stencilRef, stencilMask) {
                        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
                            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
                            currentStencilFunc = stencilFunc;
                            currentStencilRef = stencilRef;
                            currentStencilFuncMask = stencilMask
                        }
                    },
                    setOp: function(stencilFail, stencilZFail, stencilZPass) {
                        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
                            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
                            currentStencilFail = stencilFail;
                            currentStencilZFail = stencilZFail;
                            currentStencilZPass = stencilZPass
                        }
                    },
                    setLocked: function(lock) {
                        locked = lock
                    },
                    setClear: function(stencil) {
                        if (currentStencilClear !== stencil) {
                            gl.clearStencil(stencil);
                            currentStencilClear = stencil
                        }
                    },
                    reset: function() {
                        locked = false;
                        currentStencilMask = null;
                        currentStencilFunc = null;
                        currentStencilRef = null;
                        currentStencilFuncMask = null;
                        currentStencilFail = null;
                        currentStencilZFail = null;
                        currentStencilZPass = null;
                        currentStencilClear = null
                    }
                }
            }
            var colorBuffer = new ColorBuffer;
            var depthBuffer = new DepthBuffer;
            var stencilBuffer = new StencilBuffer;
            var maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
            var newAttributes = new Uint8Array(maxVertexAttributes);
            var enabledAttributes = new Uint8Array(maxVertexAttributes);
            var attributeDivisors = new Uint8Array(maxVertexAttributes);
            var enabledCapabilities = {};
            var compressedTextureFormats = null;
            var currentProgram = null;
            var currentBlending = null;
            var currentBlendEquation = null;
            var currentBlendSrc = null;
            var currentBlendDst = null;
            var currentBlendEquationAlpha = null;
            var currentBlendSrcAlpha = null;
            var currentBlendDstAlpha = null;
            var currentPremultipledAlpha = false;
            var currentFlipSided = null;
            var currentCullFace = null;
            var currentLineWidth = null;
            var currentPolygonOffsetFactor = null;
            var currentPolygonOffsetUnits = null;
            var maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
            var lineWidthAvailable = false;
            var version = 0;
            var glVersion = gl.getParameter(gl.VERSION);
            if (glVersion.indexOf("WebGL") !== -1) {
                version = parseFloat(/^WebGL\ ([0-9])/.exec(glVersion)[1]);
                lineWidthAvailable = version >= 1
            } else if (glVersion.indexOf("OpenGL ES") !== -1) {
                version = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(glVersion)[1]);
                lineWidthAvailable = version >= 2
            }
            var currentTextureSlot = null;
            var currentBoundTextures = {};
            var currentScissor = new Vector4;
            var currentViewport = new Vector4;
            function createTexture(type, target, count) {
                var data = new Uint8Array(4);
                var texture = gl.createTexture();
                gl.bindTexture(type, texture);
                gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                for (var i = 0; i < count; i++) {
                    gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data)
                }
                return texture
            }
            var emptyTextures = {};
            emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
            emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
            colorBuffer.setClear(0, 0, 0, 1);
            depthBuffer.setClear(1);
            stencilBuffer.setClear(0);
            enable(gl.DEPTH_TEST);
            depthBuffer.setFunc(LessEqualDepth);
            setFlipSided(false);
            setCullFace(CullFaceBack);
            enable(gl.CULL_FACE);
            enable(gl.BLEND);
            setBlending(NormalBlending);
            function initAttributes() {
                for (var i = 0, l = newAttributes.length; i < l; i++) {
                    newAttributes[i] = 0
                }
            }
            function enableAttribute(attribute) {
                enableAttributeAndDivisor(attribute, 0)
            }
            function enableAttributeAndDivisor(attribute, meshPerAttribute) {
                newAttributes[attribute] = 1;
                if (enabledAttributes[attribute] === 0) {
                    gl.enableVertexAttribArray(attribute);
                    enabledAttributes[attribute] = 1
                }
                if (attributeDivisors[attribute] !== meshPerAttribute) {
                    var extension = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
                    extension[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
                    attributeDivisors[attribute] = meshPerAttribute
                }
            }
            function disableUnusedAttributes() {
                for (var i = 0, l = enabledAttributes.length; i !== l; ++i) {
                    if (enabledAttributes[i] !== newAttributes[i]) {
                        gl.disableVertexAttribArray(i);
                        enabledAttributes[i] = 0
                    }
                }
            }
            function enable(id) {
                if (enabledCapabilities[id] !== true) {
                    gl.enable(id);
                    enabledCapabilities[id] = true
                }
            }
            function disable(id) {
                if (enabledCapabilities[id] !== false) {
                    gl.disable(id);
                    enabledCapabilities[id] = false
                }
            }
            function getCompressedTextureFormats() {
                if (compressedTextureFormats === null) {
                    compressedTextureFormats = [];
                    if (extensions.get("WEBGL_compressed_texture_pvrtc") || extensions.get("WEBGL_compressed_texture_s3tc") || extensions.get("WEBGL_compressed_texture_etc1") || extensions.get("WEBGL_compressed_texture_astc")) {
                        var formats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
                        for (var i = 0; i < formats.length; i++) {
                            compressedTextureFormats.push(formats[i])
                        }
                    }
                }
                return compressedTextureFormats
            }
            function useProgram(program) {
                if (currentProgram !== program) {
                    gl.useProgram(program);
                    currentProgram = program;
                    return true
                }
                return false
            }
            function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
                if (blending !== NoBlending) {
                    enable(gl.BLEND)
                } else {
                    disable(gl.BLEND)
                }
                if (blending !== CustomBlending) {
                    if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
                        switch (blending) {
                        case AdditiveBlending:
                            if (premultipliedAlpha) {
                                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                                gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE)
                            } else {
                                gl.blendEquation(gl.FUNC_ADD);
                                gl.blendFunc(gl.SRC_ALPHA, gl.ONE)
                            }
                            break;
                        case SubtractiveBlending:
                            if (premultipliedAlpha) {
                                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                                gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA)
                            } else {
                                gl.blendEquation(gl.FUNC_ADD);
                                gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR)
                            }
                            break;
                        case MultiplyBlending:
                            if (premultipliedAlpha) {
                                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA)
                            } else {
                                gl.blendEquation(gl.FUNC_ADD);
                                gl.blendFunc(gl.ZERO, gl.SRC_COLOR)
                            }
                            break;
                        default:
                            if (premultipliedAlpha) {
                                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                                gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA)
                            } else {
                                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA)
                            }
                        }
                    }
                    currentBlendEquation = null;
                    currentBlendSrc = null;
                    currentBlendDst = null;
                    currentBlendEquationAlpha = null;
                    currentBlendSrcAlpha = null;
                    currentBlendDstAlpha = null
                } else {
                    blendEquationAlpha = blendEquationAlpha || blendEquation;
                    blendSrcAlpha = blendSrcAlpha || blendSrc;
                    blendDstAlpha = blendDstAlpha || blendDst;
                    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
                        gl.blendEquationSeparate(utils.convert(blendEquation), utils.convert(blendEquationAlpha));
                        currentBlendEquation = blendEquation;
                        currentBlendEquationAlpha = blendEquationAlpha
                    }
                    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
                        gl.blendFuncSeparate(utils.convert(blendSrc), utils.convert(blendDst), utils.convert(blendSrcAlpha), utils.convert(blendDstAlpha));
                        currentBlendSrc = blendSrc;
                        currentBlendDst = blendDst;
                        currentBlendSrcAlpha = blendSrcAlpha;
                        currentBlendDstAlpha = blendDstAlpha
                    }
                }
                currentBlending = blending;
                currentPremultipledAlpha = premultipliedAlpha
            }
            function setMaterial(material, frontFaceCW) {
                material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
                var flipSided = material.side === BackSide;
                if (frontFaceCW)
                    flipSided = !flipSided;
                setFlipSided(flipSided);
                material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
                depthBuffer.setFunc(material.depthFunc);
                depthBuffer.setTest(material.depthTest);
                depthBuffer.setMask(material.depthWrite);
                colorBuffer.setMask(material.colorWrite);
                setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits)
            }
            function setFlipSided(flipSided) {
                if (currentFlipSided !== flipSided) {
                    if (flipSided) {
                        gl.frontFace(gl.CW)
                    } else {
                        gl.frontFace(gl.CCW)
                    }
                    currentFlipSided = flipSided
                }
            }
            function setCullFace(cullFace) {
                if (cullFace !== CullFaceNone) {
                    enable(gl.CULL_FACE);
                    if (cullFace !== currentCullFace) {
                        if (cullFace === CullFaceBack) {
                            gl.cullFace(gl.BACK)
                        } else if (cullFace === CullFaceFront) {
                            gl.cullFace(gl.FRONT)
                        } else {
                            gl.cullFace(gl.FRONT_AND_BACK)
                        }
                    }
                } else {
                    disable(gl.CULL_FACE)
                }
                currentCullFace = cullFace
            }
            function setLineWidth(width) {
                if (width !== currentLineWidth) {
                    if (lineWidthAvailable)
                        gl.lineWidth(width);
                    currentLineWidth = width
                }
            }
            function setPolygonOffset(polygonOffset, factor, units) {
                if (polygonOffset) {
                    enable(gl.POLYGON_OFFSET_FILL);
                    if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
                        gl.polygonOffset(factor, units);
                        currentPolygonOffsetFactor = factor;
                        currentPolygonOffsetUnits = units
                    }
                } else {
                    disable(gl.POLYGON_OFFSET_FILL)
                }
            }
            function setScissorTest(scissorTest) {
                if (scissorTest) {
                    enable(gl.SCISSOR_TEST)
                } else {
                    disable(gl.SCISSOR_TEST)
                }
            }
            function activeTexture(webglSlot) {
                if (webglSlot === undefined)
                    webglSlot = gl.TEXTURE0 + maxTextures - 1;
                if (currentTextureSlot !== webglSlot) {
                    gl.activeTexture(webglSlot);
                    currentTextureSlot = webglSlot
                }
            }
            function bindTexture(webglType, webglTexture) {
                if (currentTextureSlot === null) {
                    activeTexture()
                }
                var boundTexture = currentBoundTextures[currentTextureSlot];
                if (boundTexture === undefined) {
                    boundTexture = {
                        type: undefined,
                        texture: undefined
                    };
                    currentBoundTextures[currentTextureSlot] = boundTexture
                }
                if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
                    gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
                    boundTexture.type = webglType;
                    boundTexture.texture = webglTexture
                }
            }
            function compressedTexImage2D() {
                try {
                    gl.compressedTexImage2D.apply(gl, arguments)
                } catch (error) {
                    console.error("THREE.WebGLState:", error)
                }
            }
            function texImage2D() {
                try {
                    gl.texImage2D.apply(gl, arguments)
                } catch (error) {
                    console.error("THREE.WebGLState:", error)
                }
            }
            function scissor(scissor) {
                if (currentScissor.equals(scissor) === false) {
                    gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
                    currentScissor.copy(scissor)
                }
            }
            function viewport(viewport) {
                if (currentViewport.equals(viewport) === false) {
                    gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
                    currentViewport.copy(viewport)
                }
            }
            function reset() {
                for (var i = 0; i < enabledAttributes.length; i++) {
                    if (enabledAttributes[i] === 1) {
                        gl.disableVertexAttribArray(i);
                        enabledAttributes[i] = 0
                    }
                }
                enabledCapabilities = {};
                compressedTextureFormats = null;
                currentTextureSlot = null;
                currentBoundTextures = {};
                currentProgram = null;
                currentBlending = null;
                currentFlipSided = null;
                currentCullFace = null;
                colorBuffer.reset();
                depthBuffer.reset();
                stencilBuffer.reset()
            }
            return {
                buffers: {
                    color: colorBuffer,
                    depth: depthBuffer,
                    stencil: stencilBuffer
                },
                initAttributes: initAttributes,
                enableAttribute: enableAttribute,
                enableAttributeAndDivisor: enableAttributeAndDivisor,
                disableUnusedAttributes: disableUnusedAttributes,
                enable: enable,
                disable: disable,
                getCompressedTextureFormats: getCompressedTextureFormats,
                useProgram: useProgram,
                setBlending: setBlending,
                setMaterial: setMaterial,
                setFlipSided: setFlipSided,
                setCullFace: setCullFace,
                setLineWidth: setLineWidth,
                setPolygonOffset: setPolygonOffset,
                setScissorTest: setScissorTest,
                activeTexture: activeTexture,
                bindTexture: bindTexture,
                compressedTexImage2D: compressedTexImage2D,
                texImage2D: texImage2D,
                scissor: scissor,
                viewport: viewport,
                reset: reset
            }
        }
        function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
            var _videoTextures = {};
            var _canvas;
            function clampToMaxSize(image, maxSize) {
                if (image.width > maxSize || image.height > maxSize) {
                    if ("data" in image) {
                        console.warn("THREE.WebGLRenderer: image in DataTexture is too big (" + image.width + "x" + image.height + ").");
                        return
                    }
                    var scale = maxSize / Math.max(image.width, image.height);
                    var canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                    canvas.width = Math.floor(image.width * scale);
                    canvas.height = Math.floor(image.height * scale);
                    var context = canvas.getContext("2d");
                    context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);
                    console.warn("THREE.WebGLRenderer: image is too big (" + image.width + "x" + image.height + "). Resized to " + canvas.width + "x" + canvas.height);
                    return canvas
                }
                return image
            }
            function isPowerOfTwo(image) {
                return _Math.isPowerOfTwo(image.width) && _Math.isPowerOfTwo(image.height)
            }
            function makePowerOfTwo(image) {
                if (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap) {
                    if (_canvas === undefined)
                        _canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                    _canvas.width = _Math.floorPowerOfTwo(image.width);
                    _canvas.height = _Math.floorPowerOfTwo(image.height);
                    var context = _canvas.getContext("2d");
                    context.drawImage(image, 0, 0, _canvas.width, _canvas.height);
                    console.warn("THREE.WebGLRenderer: image is not power of two (" + image.width + "x" + image.height + "). Resized to " + _canvas.width + "x" + _canvas.height);
                    return _canvas
                }
                return image
            }
            function textureNeedsPowerOfTwo(texture) {
                if (capabilities.isWebGL2)
                    return false;
                return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter
            }
            function textureNeedsGenerateMipmaps(texture, isPowerOfTwo) {
                return texture.generateMipmaps && isPowerOfTwo && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter
            }
            function generateMipmap(target, texture, width, height) {
                _gl.generateMipmap(target);
                var textureProperties = properties.get(texture);
                textureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E
            }
            function getInternalFormat(glFormat, glType) {
                if (!capabilities.isWebGL2)
                    return glFormat;
                if (glFormat === _gl.RGB) {
                    if (glType === _gl.FLOAT)
                        return _gl.RGB32F;
                    if (glType === _gl.HALF_FLOAT)
                        return _gl.RGB16F;
                    if (glType === _gl.UNSIGNED_BYTE)
                        return _gl.RGB8
                }
                if (glFormat === _gl.RGBA) {
                    if (glType === _gl.FLOAT)
                        return _gl.RGBA32F;
                    if (glType === _gl.HALF_FLOAT)
                        return _gl.RGBA16F;
                    if (glType === _gl.UNSIGNED_BYTE)
                        return _gl.RGBA8
                }
                return glFormat
            }
            function filterFallback(f) {
                if (f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter) {
                    return _gl.NEAREST
                }
                return _gl.LINEAR
            }
            function onTextureDispose(event) {
                var texture = event.target;
                texture.removeEventListener("dispose", onTextureDispose);
                deallocateTexture(texture);
                if (texture.isVideoTexture) {
                    delete _videoTextures[texture.id]
                }
                info.memory.textures--
            }
            function onRenderTargetDispose(event) {
                var renderTarget = event.target;
                renderTarget.removeEventListener("dispose", onRenderTargetDispose);
                deallocateRenderTarget(renderTarget);
                info.memory.textures--
            }
            function deallocateTexture(texture) {
                var textureProperties = properties.get(texture);
                if (texture.image && textureProperties.__image__webglTextureCube) {
                    _gl.deleteTexture(textureProperties.__image__webglTextureCube)
                } else {
                    if (textureProperties.__webglInit === undefined)
                        return;
                    _gl.deleteTexture(textureProperties.__webglTexture)
                }
                properties.remove(texture)
            }
            function deallocateRenderTarget(renderTarget) {
                var renderTargetProperties = properties.get(renderTarget);
                var textureProperties = properties.get(renderTarget.texture);
                if (!renderTarget)
                    return;
                if (textureProperties.__webglTexture !== undefined) {
                    _gl.deleteTexture(textureProperties.__webglTexture)
                }
                if (renderTarget.depthTexture) {
                    renderTarget.depthTexture.dispose()
                }
                if (renderTarget.isWebGLRenderTargetCube) {
                    for (var i = 0; i < 6; i++) {
                        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
                        if (renderTargetProperties.__webglDepthbuffer)
                            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i])
                    }
                } else {
                    _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
                    if (renderTargetProperties.__webglDepthbuffer)
                        _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer)
                }
                properties.remove(renderTarget.texture);
                properties.remove(renderTarget)
            }
            function setTexture2D(texture, slot) {
                var textureProperties = properties.get(texture);
                if (texture.isVideoTexture)
                    updateVideoTexture(texture);
                if (texture.version > 0 && textureProperties.__version !== texture.version) {
                    var image = texture.image;
                    if (image === undefined) {
                        console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined")
                    } else if (image.complete === false) {
                        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")
                    } else {
                        uploadTexture(textureProperties, texture, slot);
                        return
                    }
                }
                state.activeTexture(_gl.TEXTURE0 + slot);
                state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture)
            }
            function setTextureCube(texture, slot) {
                var textureProperties = properties.get(texture);
                if (texture.image.length === 6) {
                    if (texture.version > 0 && textureProperties.__version !== texture.version) {
                        if (!textureProperties.__image__webglTextureCube) {
                            texture.addEventListener("dispose", onTextureDispose);
                            textureProperties.__image__webglTextureCube = _gl.createTexture();
                            info.memory.textures++
                        }
                        state.activeTexture(_gl.TEXTURE0 + slot);
                        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);
                        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
                        var isCompressed = texture && texture.isCompressedTexture;
                        var isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
                        var cubeImage = [];
                        for (var i = 0; i < 6; i++) {
                            if (!isCompressed && !isDataTexture) {
                                cubeImage[i] = clampToMaxSize(texture.image[i], capabilities.maxCubemapSize)
                            } else {
                                cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i]
                            }
                        }
                        var image = cubeImage[0],
                            isPowerOfTwoImage = isPowerOfTwo(image),
                            glFormat = utils.convert(texture.format),
                            glType = utils.convert(texture.type),
                            glInternalFormat = getInternalFormat(glFormat, glType);
                        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage);
                        for (var i = 0; i < 6; i++) {
                            if (!isCompressed) {
                                if (isDataTexture) {
                                    state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data)
                                } else {
                                    state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i])
                                }
                            } else {
                                var mipmap,
                                    mipmaps = cubeImage[i].mipmaps;
                                for (var j = 0, jl = mipmaps.length; j < jl; j++) {
                                    mipmap = mipmaps[j];
                                    if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
                                        if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {
                                            state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data)
                                        } else {
                                            console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")
                                        }
                                    } else {
                                        state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data)
                                    }
                                }
                            }
                        }
                        if (!isCompressed) {
                            textureProperties.__maxMipLevel = 0
                        } else {
                            textureProperties.__maxMipLevel = mipmaps.length - 1
                        }
                        if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage)) {
                            generateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height)
                        }
                        textureProperties.__version = texture.version;
                        if (texture.onUpdate)
                            texture.onUpdate(texture)
                    } else {
                        state.activeTexture(_gl.TEXTURE0 + slot);
                        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube)
                    }
                }
            }
            function setTextureCubeDynamic(texture, slot) {
                state.activeTexture(_gl.TEXTURE0 + slot);
                state.bindTexture(_gl.TEXTURE_CUBE_MAP, properties.get(texture).__webglTexture)
            }
            function setTextureParameters(textureType, texture, isPowerOfTwoImage) {
                var extension;
                if (isPowerOfTwoImage) {
                    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, utils.convert(texture.wrapS));
                    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, utils.convert(texture.wrapT));
                    _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, utils.convert(texture.magFilter));
                    _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, utils.convert(texture.minFilter))
                } else {
                    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
                    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
                    if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
                        console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.")
                    }
                    _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
                    _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));
                    if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
                        console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")
                    }
                }
                extension = extensions.get("EXT_texture_filter_anisotropic");
                if (extension) {
                    if (texture.type === FloatType && extensions.get("OES_texture_float_linear") === null)
                        return;
                    if (texture.type === HalfFloatType && (capabilities.isWebGL2 || extensions.get("OES_texture_half_float_linear")) === null)
                        return;
                    if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
                        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
                        properties.get(texture).__currentAnisotropy = texture.anisotropy
                    }
                }
            }
            function uploadTexture(textureProperties, texture, slot) {
                if (textureProperties.__webglInit === undefined) {
                    textureProperties.__webglInit = true;
                    texture.addEventListener("dispose", onTextureDispose);
                    textureProperties.__webglTexture = _gl.createTexture();
                    info.memory.textures++
                }
                state.activeTexture(_gl.TEXTURE0 + slot);
                state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);
                _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
                _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
                _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
                var image = clampToMaxSize(texture.image, capabilities.maxTextureSize);
                if (textureNeedsPowerOfTwo(texture) && isPowerOfTwo(image) === false) {
                    image = makePowerOfTwo(image)
                }
                var isPowerOfTwoImage = isPowerOfTwo(image),
                    glFormat = utils.convert(texture.format),
                    glType = utils.convert(texture.type),
                    glInternalFormat = getInternalFormat(glFormat, glType);
                setTextureParameters(_gl.TEXTURE_2D, texture, isPowerOfTwoImage);
                var mipmap,
                    mipmaps = texture.mipmaps;
                if (texture.isDepthTexture) {
                    glInternalFormat = _gl.DEPTH_COMPONENT;
                    if (texture.type === FloatType) {
                        if (!capabilities.isWebGL2)
                            throw new Error("Float Depth Texture only supported in WebGL2.0");
                        glInternalFormat = _gl.DEPTH_COMPONENT32F
                    } else if (capabilities.isWebGL2) {
                        glInternalFormat = _gl.DEPTH_COMPONENT16
                    }
                    if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
                        if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
                            console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
                            texture.type = UnsignedShortType;
                            glType = utils.convert(texture.type)
                        }
                    }
                    if (texture.format === DepthStencilFormat) {
                        glInternalFormat = _gl.DEPTH_STENCIL;
                        if (texture.type !== UnsignedInt248Type) {
                            console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
                            texture.type = UnsignedInt248Type;
                            glType = utils.convert(texture.type)
                        }
                    }
                    state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null)
                } else if (texture.isDataTexture) {
                    if (mipmaps.length > 0 && isPowerOfTwoImage) {
                        for (var i = 0, il = mipmaps.length; i < il; i++) {
                            mipmap = mipmaps[i];
                            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data)
                        }
                        texture.generateMipmaps = false;
                        textureProperties.__maxMipLevel = mipmaps.length - 1
                    } else {
                        state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
                        textureProperties.__maxMipLevel = 0
                    }
                } else if (texture.isCompressedTexture) {
                    for (var i = 0, il = mipmaps.length; i < il; i++) {
                        mipmap = mipmaps[i];
                        if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
                            if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {
                                state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data)
                            } else {
                                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")
                            }
                        } else {
                            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data)
                        }
                    }
                    textureProperties.__maxMipLevel = mipmaps.length - 1
                } else {
                    if (mipmaps.length > 0 && isPowerOfTwoImage) {
                        for (var i = 0, il = mipmaps.length; i < il; i++) {
                            mipmap = mipmaps[i];
                            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap)
                        }
                        texture.generateMipmaps = false;
                        textureProperties.__maxMipLevel = mipmaps.length - 1
                    } else {
                        state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
                        textureProperties.__maxMipLevel = 0
                    }
                }
                if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage)) {
                    generateMipmap(_gl.TEXTURE_2D, texture, image.width, image.height)
                }
                textureProperties.__version = texture.version;
                if (texture.onUpdate)
                    texture.onUpdate(texture)
            }
            function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {
                var glFormat = utils.convert(renderTarget.texture.format);
                var glType = utils.convert(renderTarget.texture.type);
                var glInternalFormat = getInternalFormat(glFormat, glType);
                state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
                _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);
                _gl.bindFramebuffer(_gl.FRAMEBUFFER, null)
            }
            function setupRenderBufferStorage(renderbuffer, renderTarget) {
                _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
                if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
                    _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);
                    _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer)
                } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
                    _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
                    _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer)
                } else {
                    _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height)
                }
                _gl.bindRenderbuffer(_gl.RENDERBUFFER, null)
            }
            function setupDepthTexture(framebuffer, renderTarget) {
                var isCube = renderTarget && renderTarget.isWebGLRenderTargetCube;
                if (isCube)
                    throw new Error("Depth Texture with cube render targets is not supported");
                _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
                    throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture")
                }
                if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
                    renderTarget.depthTexture.image.width = renderTarget.width;
                    renderTarget.depthTexture.image.height = renderTarget.height;
                    renderTarget.depthTexture.needsUpdate = true
                }
                setTexture2D(renderTarget.depthTexture, 0);
                var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
                if (renderTarget.depthTexture.format === DepthFormat) {
                    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0)
                } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
                    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0)
                } else {
                    throw new Error("Unknown depthTexture format")
                }
            }
            function setupDepthRenderbuffer(renderTarget) {
                var renderTargetProperties = properties.get(renderTarget);
                var isCube = renderTarget.isWebGLRenderTargetCube === true;
                if (renderTarget.depthTexture) {
                    if (isCube)
                        throw new Error("target.depthTexture not supported in Cube render targets");
                    setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget)
                } else {
                    if (isCube) {
                        renderTargetProperties.__webglDepthbuffer = [];
                        for (var i = 0; i < 6; i++) {
                            _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
                            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
                            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget)
                        }
                    } else {
                        _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
                        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
                        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget)
                    }
                }
                _gl.bindFramebuffer(_gl.FRAMEBUFFER, null)
            }
            function setupRenderTarget(renderTarget) {
                var renderTargetProperties = properties.get(renderTarget);
                var textureProperties = properties.get(renderTarget.texture);
                renderTarget.addEventListener("dispose", onRenderTargetDispose);
                textureProperties.__webglTexture = _gl.createTexture();
                info.memory.textures++;
                var isCube = renderTarget.isWebGLRenderTargetCube === true;
                var isTargetPowerOfTwo = isPowerOfTwo(renderTarget);
                if (isCube) {
                    renderTargetProperties.__webglFramebuffer = [];
                    for (var i = 0; i < 6; i++) {
                        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer()
                    }
                } else {
                    renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer()
                }
                if (isCube) {
                    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
                    setTextureParameters(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo);
                    for (var i = 0; i < 6; i++) {
                        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i)
                    }
                    if (textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo)) {
                        generateMipmap(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height)
                    }
                    state.bindTexture(_gl.TEXTURE_CUBE_MAP, null)
                } else {
                    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);
                    setTextureParameters(_gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo);
                    setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);
                    if (textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo)) {
                        generateMipmap(_gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height)
                    }
                    state.bindTexture(_gl.TEXTURE_2D, null)
                }
                if (renderTarget.depthBuffer) {
                    setupDepthRenderbuffer(renderTarget)
                }
            }
            function updateRenderTargetMipmap(renderTarget) {
                var texture = renderTarget.texture;
                var isTargetPowerOfTwo = isPowerOfTwo(renderTarget);
                if (textureNeedsGenerateMipmaps(texture, isTargetPowerOfTwo)) {
                    var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
                    var webglTexture = properties.get(texture).__webglTexture;
                    state.bindTexture(target, webglTexture);
                    generateMipmap(target, texture, renderTarget.width, renderTarget.height);
                    state.bindTexture(target, null)
                }
            }
            function updateVideoTexture(texture) {
                var id = texture.id;
                var frame = info.render.frame;
                if (_videoTextures[id] !== frame) {
                    _videoTextures[id] = frame;
                    texture.update()
                }
            }
            this.setTexture2D = setTexture2D;
            this.setTextureCube = setTextureCube;
            this.setTextureCubeDynamic = setTextureCubeDynamic;
            this.setupRenderTarget = setupRenderTarget;
            this.updateRenderTargetMipmap = updateRenderTargetMipmap
        }
        function WebGLUtils(gl, extensions, capabilities) {
            function convert(p) {
                var extension;
                if (p === RepeatWrapping)
                    return gl.REPEAT;
                if (p === ClampToEdgeWrapping)
                    return gl.CLAMP_TO_EDGE;
                if (p === MirroredRepeatWrapping)
                    return gl.MIRRORED_REPEAT;
                if (p === NearestFilter)
                    return gl.NEAREST;
                if (p === NearestMipMapNearestFilter)
                    return gl.NEAREST_MIPMAP_NEAREST;
                if (p === NearestMipMapLinearFilter)
                    return gl.NEAREST_MIPMAP_LINEAR;
                if (p === LinearFilter)
                    return gl.LINEAR;
                if (p === LinearMipMapNearestFilter)
                    return gl.LINEAR_MIPMAP_NEAREST;
                if (p === LinearMipMapLinearFilter)
                    return gl.LINEAR_MIPMAP_LINEAR;
                if (p === UnsignedByteType)
                    return gl.UNSIGNED_BYTE;
                if (p === UnsignedShort4444Type)
                    return gl.UNSIGNED_SHORT_4_4_4_4;
                if (p === UnsignedShort5551Type)
                    return gl.UNSIGNED_SHORT_5_5_5_1;
                if (p === UnsignedShort565Type)
                    return gl.UNSIGNED_SHORT_5_6_5;
                if (p === ByteType)
                    return gl.BYTE;
                if (p === ShortType)
                    return gl.SHORT;
                if (p === UnsignedShortType)
                    return gl.UNSIGNED_SHORT;
                if (p === IntType)
                    return gl.INT;
                if (p === UnsignedIntType)
                    return gl.UNSIGNED_INT;
                if (p === FloatType)
                    return gl.FLOAT;
                if (p === HalfFloatType) {
                    if (capabilities.isWebGL2)
                        return gl.HALF_FLOAT;
                    extension = extensions.get("OES_texture_half_float");
                    if (extension !== null)
                        return extension.HALF_FLOAT_OES
                }
                if (p === AlphaFormat)
                    return gl.ALPHA;
                if (p === RGBFormat)
                    return gl.RGB;
                if (p === RGBAFormat)
                    return gl.RGBA;
                if (p === LuminanceFormat)
                    return gl.LUMINANCE;
                if (p === LuminanceAlphaFormat)
                    return gl.LUMINANCE_ALPHA;
                if (p === DepthFormat)
                    return gl.DEPTH_COMPONENT;
                if (p === DepthStencilFormat)
                    return gl.DEPTH_STENCIL;
                if (p === AddEquation)
                    return gl.FUNC_ADD;
                if (p === SubtractEquation)
                    return gl.FUNC_SUBTRACT;
                if (p === ReverseSubtractEquation)
                    return gl.FUNC_REVERSE_SUBTRACT;
                if (p === ZeroFactor)
                    return gl.ZERO;
                if (p === OneFactor)
                    return gl.ONE;
                if (p === SrcColorFactor)
                    return gl.SRC_COLOR;
                if (p === OneMinusSrcColorFactor)
                    return gl.ONE_MINUS_SRC_COLOR;
                if (p === SrcAlphaFactor)
                    return gl.SRC_ALPHA;
                if (p === OneMinusSrcAlphaFactor)
                    return gl.ONE_MINUS_SRC_ALPHA;
                if (p === DstAlphaFactor)
                    return gl.DST_ALPHA;
                if (p === OneMinusDstAlphaFactor)
                    return gl.ONE_MINUS_DST_ALPHA;
                if (p === DstColorFactor)
                    return gl.DST_COLOR;
                if (p === OneMinusDstColorFactor)
                    return gl.ONE_MINUS_DST_COLOR;
                if (p === SrcAlphaSaturateFactor)
                    return gl.SRC_ALPHA_SATURATE;
                if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
                    extension = extensions.get("WEBGL_compressed_texture_s3tc");
                    if (extension !== null) {
                        if (p === RGB_S3TC_DXT1_Format)
                            return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                        if (p === RGBA_S3TC_DXT1_Format)
                            return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                        if (p === RGBA_S3TC_DXT3_Format)
                            return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                        if (p === RGBA_S3TC_DXT5_Format)
                            return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT
                    }
                }
                if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
                    extension = extensions.get("WEBGL_compressed_texture_pvrtc");
                    if (extension !== null) {
                        if (p === RGB_PVRTC_4BPPV1_Format)
                            return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                        if (p === RGB_PVRTC_2BPPV1_Format)
                            return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                        if (p === RGBA_PVRTC_4BPPV1_Format)
                            return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                        if (p === RGBA_PVRTC_2BPPV1_Format)
                            return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
                    }
                }
                if (p === RGB_ETC1_Format) {
                    extension = extensions.get("WEBGL_compressed_texture_etc1");
                    if (extension !== null)
                        return extension.COMPRESSED_RGB_ETC1_WEBGL
                }
                if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
                    extension = extensions.get("WEBGL_compressed_texture_astc");
                    if (extension !== null) {
                        return p
                    }
                }
                if (p === MinEquation || p === MaxEquation) {
                    if (capabilities.isWebGL2) {
                        if (p === MinEquation)
                            return gl.MIN;
                        if (p === MaxEquation)
                            return gl.MAX
                    }
                    extension = extensions.get("EXT_blend_minmax");
                    if (extension !== null) {
                        if (p === MinEquation)
                            return extension.MIN_EXT;
                        if (p === MaxEquation)
                            return extension.MAX_EXT
                    }
                }
                if (p === UnsignedInt248Type) {
                    if (capabilities.isWebGL2)
                        return gl.UNSIGNED_INT_24_8;
                    extension = extensions.get("WEBGL_depth_texture");
                    if (extension !== null)
                        return extension.UNSIGNED_INT_24_8_WEBGL
                }
                return 0
            }
            return {
                convert: convert
            }
        }
        function Group() {
            Object3D.call(this);
            this.type = "Group"
        }
        Group.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Group,
            isGroup: true
        });
        function PerspectiveCamera(fov, aspect, near, far) {
            Camera.call(this);
            this.type = "PerspectiveCamera";
            this.fov = fov !== undefined ? fov : 50;
            this.zoom = 1;
            this.near = near !== undefined ? near : .1;
            this.far = far !== undefined ? far : 2e3;
            this.focus = 10;
            this.aspect = aspect !== undefined ? aspect : 1;
            this.view = null;
            this.filmGauge = 35;
            this.filmOffset = 0;
            this.updateProjectionMatrix()
        }
        PerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {
            constructor: PerspectiveCamera,
            isPerspectiveCamera: true,
            copy: function(source, recursive) {
                Camera.prototype.copy.call(this, source, recursive);
                this.fov = source.fov;
                this.zoom = source.zoom;
                this.near = source.near;
                this.far = source.far;
                this.focus = source.focus;
                this.aspect = source.aspect;
                this.view = source.view === null ? null : Object.assign({}, source.view);
                this.filmGauge = source.filmGauge;
                this.filmOffset = source.filmOffset;
                return this
            },
            setFocalLength: function(focalLength) {
                var vExtentSlope = .5 * this.getFilmHeight() / focalLength;
                this.fov = _Math.RAD2DEG * 2 * Math.atan(vExtentSlope);
                this.updateProjectionMatrix()
            },
            getFocalLength: function() {
                var vExtentSlope = Math.tan(_Math.DEG2RAD * .5 * this.fov);
                return .5 * this.getFilmHeight() / vExtentSlope
            },
            getEffectiveFOV: function() {
                return _Math.RAD2DEG * 2 * Math.atan(Math.tan(_Math.DEG2RAD * .5 * this.fov) / this.zoom)
            },
            getFilmWidth: function() {
                return this.filmGauge * Math.min(this.aspect, 1)
            },
            getFilmHeight: function() {
                return this.filmGauge / Math.max(this.aspect, 1)
            },
            setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
                this.aspect = fullWidth / fullHeight;
                if (this.view === null) {
                    this.view = {
                        enabled: true,
                        fullWidth: 1,
                        fullHeight: 1,
                        offsetX: 0,
                        offsetY: 0,
                        width: 1,
                        height: 1
                    }
                }
                this.view.enabled = true;
                this.view.fullWidth = fullWidth;
                this.view.fullHeight = fullHeight;
                this.view.offsetX = x;
                this.view.offsetY = y;
                this.view.width = width;
                this.view.height = height;
                this.updateProjectionMatrix()
            },
            clearViewOffset: function() {
                if (this.view !== null) {
                    this.view.enabled = false
                }
                this.updateProjectionMatrix()
            },
            updateProjectionMatrix: function() {
                var near = this.near,
                    top = near * Math.tan(_Math.DEG2RAD * .5 * this.fov) / this.zoom,
                    height = 2 * top,
                    width = this.aspect * height,
                    left = -.5 * width,
                    view = this.view;
                if (this.view !== null && this.view.enabled) {
                    var fullWidth = view.fullWidth,
                        fullHeight = view.fullHeight;
                    left += view.offsetX * width / fullWidth;
                    top -= view.offsetY * height / fullHeight;
                    width *= view.width / fullWidth;
                    height *= view.height / fullHeight
                }
                var skew = this.filmOffset;
                if (skew !== 0)
                    left += near * skew / this.getFilmWidth();
                this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far)
            },
            toJSON: function(meta) {
                var data = Object3D.prototype.toJSON.call(this, meta);
                data.object.fov = this.fov;
                data.object.zoom = this.zoom;
                data.object.near = this.near;
                data.object.far = this.far;
                data.object.focus = this.focus;
                data.object.aspect = this.aspect;
                if (this.view !== null)
                    data.object.view = Object.assign({}, this.view);
                data.object.filmGauge = this.filmGauge;
                data.object.filmOffset = this.filmOffset;
                return data
            }
        });
        function ArrayCamera(array) {
            PerspectiveCamera.call(this);
            this.cameras = array || []
        }
        ArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {
            constructor: ArrayCamera,
            isArrayCamera: true
        });
        function WebVRManager(renderer) {
            var scope = this;
            var device = null;
            var frameData = null;
            var poseTarget = null;
            var controllers = [];
            var standingMatrix = new Matrix4;
            var standingMatrixInverse = new Matrix4;
            if (typeof window !== "undefined" && "VRFrameData" in window) {
                frameData = new window.VRFrameData;
                window.addEventListener("vrdisplaypresentchange", onVRDisplayPresentChange, false)
            }
            var matrixWorldInverse = new Matrix4;
            var tempQuaternion = new Quaternion;
            var tempPosition = new Vector3;
            var cameraL = new PerspectiveCamera;
            cameraL.bounds = new Vector4(0, 0, .5, 1);
            cameraL.layers.enable(1);
            var cameraR = new PerspectiveCamera;
            cameraR.bounds = new Vector4(.5, 0, .5, 1);
            cameraR.layers.enable(2);
            var cameraVR = new ArrayCamera([cameraL, cameraR]);
            cameraVR.layers.enable(1);
            cameraVR.layers.enable(2);
            function isPresenting() {
                return device !== null && device.isPresenting === true
            }
            var currentSize,
                currentPixelRatio;
            function onVRDisplayPresentChange() {
                if (isPresenting()) {
                    var eyeParameters = device.getEyeParameters("left");
                    var renderWidth = eyeParameters.renderWidth;
                    var renderHeight = eyeParameters.renderHeight;
                    currentPixelRatio = renderer.getPixelRatio();
                    currentSize = renderer.getSize();
                    renderer.setDrawingBufferSize(renderWidth * 2, renderHeight, 1);
                    animation.start()
                } else if (scope.enabled) {
                    renderer.setDrawingBufferSize(currentSize.width, currentSize.height, currentPixelRatio);
                    animation.stop()
                }
            }
            var triggers = [];
            function findGamepad(id) {
                var gamepads = navigator.getGamepads && navigator.getGamepads();
                for (var i = 0, j = 0, l = gamepads.length; i < l; i++) {
                    var gamepad = gamepads[i];
                    if (gamepad && (gamepad.id === "Daydream Controller" || gamepad.id === "Gear VR Controller" || gamepad.id === "Oculus Go Controller" || gamepad.id === "OpenVR Gamepad" || gamepad.id.startsWith("Oculus Touch") || gamepad.id.startsWith("Spatial Controller"))) {
                        if (j === id)
                            return gamepad;
                        j++
                    }
                }
            }
            function updateControllers() {
                for (var i = 0; i < controllers.length; i++) {
                    var controller = controllers[i];
                    var gamepad = findGamepad(i);
                    if (gamepad !== undefined && gamepad.pose !== undefined) {
                        if (gamepad.pose === null)
                            return;
                        var pose = gamepad.pose;
                        if (pose.hasPosition === false)
                            controller.position.set(.2, -.6, -.05);
                        if (pose.position !== null)
                            controller.position.fromArray(pose.position);
                        if (pose.orientation !== null)
                            controller.quaternion.fromArray(pose.orientation);
                        controller.matrix.compose(controller.position, controller.quaternion, controller.scale);
                        controller.matrix.premultiply(standingMatrix);
                        controller.matrix.decompose(controller.position, controller.quaternion, controller.scale);
                        controller.matrixWorldNeedsUpdate = true;
                        controller.visible = true;
                        var buttonId = gamepad.id === "Daydream Controller" ? 0 : 1;
                        if (triggers[i] !== gamepad.buttons[buttonId].pressed) {
                            triggers[i] = gamepad.buttons[buttonId].pressed;
                            if (triggers[i] === true) {
                                controller.dispatchEvent({
                                    type: "selectstart"
                                })
                            } else {
                                controller.dispatchEvent({
                                    type: "selectend"
                                });
                                controller.dispatchEvent({
                                    type: "select"
                                })
                            }
                        }
                    } else {
                        controller.visible = false
                    }
                }
            }
            this.enabled = false;
            this.userHeight = 1.6;
            this.getController = function(id) {
                var controller = controllers[id];
                if (controller === undefined) {
                    controller = new Group;
                    controller.matrixAutoUpdate = false;
                    controller.visible = false;
                    controllers[id] = controller
                }
                return controller
            };
            this.getDevice = function() {
                return device
            };
            this.setDevice = function(value) {
                if (value !== undefined)
                    device = value;
                animation.setContext(value)
            };
            this.setPoseTarget = function(object) {
                if (object !== undefined)
                    poseTarget = object
            };
            this.getCamera = function(camera) {
                if (device === null) {
                    camera.position.set(0, scope.userHeight, 0);
                    return camera
                }
                device.depthNear = camera.near;
                device.depthFar = camera.far;
                device.getFrameData(frameData);
                var stageParameters = device.stageParameters;
                if (stageParameters) {
                    standingMatrix.fromArray(stageParameters.sittingToStandingTransform)
                } else {
                    standingMatrix.makeTranslation(0, scope.userHeight, 0)
                }
                var pose = frameData.pose;
                var poseObject = poseTarget !== null ? poseTarget : camera;
                poseObject.matrix.copy(standingMatrix);
                poseObject.matrix.decompose(poseObject.position, poseObject.quaternion, poseObject.scale);
                if (pose.orientation !== null) {
                    tempQuaternion.fromArray(pose.orientation);
                    poseObject.quaternion.multiply(tempQuaternion)
                }
                if (pose.position !== null) {
                    tempQuaternion.setFromRotationMatrix(standingMatrix);
                    tempPosition.fromArray(pose.position);
                    tempPosition.applyQuaternion(tempQuaternion);
                    poseObject.position.add(tempPosition)
                }
                poseObject.updateMatrixWorld();
                if (device.isPresenting === false)
                    return camera;
                cameraL.near = camera.near;
                cameraR.near = camera.near;
                cameraL.far = camera.far;
                cameraR.far = camera.far;
                cameraVR.matrixWorld.copy(camera.matrixWorld);
                cameraVR.matrixWorldInverse.copy(camera.matrixWorldInverse);
                cameraL.matrixWorldInverse.fromArray(frameData.leftViewMatrix);
                cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix);
                standingMatrixInverse.getInverse(standingMatrix);
                cameraL.matrixWorldInverse.multiply(standingMatrixInverse);
                cameraR.matrixWorldInverse.multiply(standingMatrixInverse);
                var parent = poseObject.parent;
                if (parent !== null) {
                    matrixWorldInverse.getInverse(parent.matrixWorld);
                    cameraL.matrixWorldInverse.multiply(matrixWorldInverse);
                    cameraR.matrixWorldInverse.multiply(matrixWorldInverse)
                }
                cameraL.matrixWorld.getInverse(cameraL.matrixWorldInverse);
                cameraR.matrixWorld.getInverse(cameraR.matrixWorldInverse);
                cameraL.projectionMatrix.fromArray(frameData.leftProjectionMatrix);
                cameraR.projectionMatrix.fromArray(frameData.rightProjectionMatrix);
                cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
                var layers = device.getLayers();
                if (layers.length) {
                    var layer = layers[0];
                    if (layer.leftBounds !== null && layer.leftBounds.length === 4) {
                        cameraL.bounds.fromArray(layer.leftBounds)
                    }
                    if (layer.rightBounds !== null && layer.rightBounds.length === 4) {
                        cameraR.bounds.fromArray(layer.rightBounds)
                    }
                }
                updateControllers();
                return cameraVR
            };
            this.getStandingMatrix = function() {
                return standingMatrix
            };
            this.isPresenting = isPresenting;
            var animation = new WebGLAnimation;
            this.setAnimationLoop = function(callback) {
                animation.setAnimationLoop(callback)
            };
            this.submitFrame = function() {
                if (isPresenting())
                    device.submitFrame()
            };
            this.dispose = function() {
                if (typeof window !== "undefined") {
                    window.removeEventListener("vrdisplaypresentchange", onVRDisplayPresentChange)
                }
            }
        }
        function WebXRManager(renderer) {
            var gl = renderer.context;
            var device = null;
            var session = null;
            var frameOfRef = null;
            var pose = null;
            var controllers = [];
            var inputSources = [];
            function isPresenting() {
                return session !== null && frameOfRef !== null
            }
            var cameraL = new PerspectiveCamera;
            cameraL.layers.enable(1);
            cameraL.viewport = new Vector4;
            var cameraR = new PerspectiveCamera;
            cameraR.layers.enable(2);
            cameraR.viewport = new Vector4;
            var cameraVR = new ArrayCamera([cameraL, cameraR]);
            cameraVR.layers.enable(1);
            cameraVR.layers.enable(2);
            this.enabled = false;
            this.getController = function(id) {
                var controller = controllers[id];
                if (controller === undefined) {
                    controller = new Group;
                    controller.matrixAutoUpdate = false;
                    controller.visible = false;
                    controllers[id] = controller
                }
                return controller
            };
            this.getDevice = function() {
                return device
            };
            this.setDevice = function(value) {
                if (value !== undefined)
                    device = value;
                if (value instanceof XRDevice)
                    gl.setCompatibleXRDevice(value)
            };
            function onSessionEvent(event) {
                var controller = controllers[inputSources.indexOf(event.inputSource)];
                if (controller)
                    controller.dispatchEvent({
                        type: event.type
                    })
            }
            function onSessionEnd() {
                renderer.setFramebuffer(null);
                animation.stop()
            }
            this.setSession = function(value, options) {
                session = value;
                if (session !== null) {
                    session.addEventListener("select", onSessionEvent);
                    session.addEventListener("selectstart", onSessionEvent);
                    session.addEventListener("selectend", onSessionEvent);
                    session.addEventListener("end", onSessionEnd);
                    session.baseLayer = new XRWebGLLayer(session, gl);
                    session.requestFrameOfReference(options.frameOfReferenceType).then(function(value) {
                        frameOfRef = value;
                        renderer.setFramebuffer(session.baseLayer.framebuffer);
                        animation.setContext(session);
                        animation.start()
                    });
                    inputSources = session.getInputSources();
                    session.addEventListener("inputsourceschange", function() {
                        inputSources = session.getInputSources();
                        console.log(inputSources)
                    })
                }
            };
            function updateCamera(camera, parent) {
                if (parent === null) {
                    camera.matrixWorld.copy(camera.matrix)
                } else {
                    camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix)
                }
                camera.matrixWorldInverse.getInverse(camera.matrixWorld)
            }
            this.getCamera = function(camera) {
                if (isPresenting()) {
                    var parent = camera.parent;
                    var cameras = cameraVR.cameras;
                    updateCamera(cameraVR, parent);
                    for (var i = 0; i < cameras.length; i++) {
                        updateCamera(cameras[i], parent)
                    }
                    camera.matrixWorld.copy(cameraVR.matrixWorld);
                    var children = camera.children;
                    for (var i = 0, l = children.length; i < l; i++) {
                        children[i].updateMatrixWorld(true)
                    }
                    return cameraVR
                }
                return camera
            };
            this.isPresenting = isPresenting;
            var onAnimationFrameCallback = null;
            function onAnimationFrame(time, frame) {
                pose = frame.getDevicePose(frameOfRef);
                if (pose !== null) {
                    var layer = session.baseLayer;
                    var views = frame.views;
                    for (var i = 0; i < views.length; i++) {
                        var view = views[i];
                        var viewport = layer.getViewport(view);
                        var viewMatrix = pose.getViewMatrix(view);
                        var camera = cameraVR.cameras[i];
                        camera.matrix.fromArray(viewMatrix).getInverse(camera.matrix);
                        camera.projectionMatrix.fromArray(view.projectionMatrix);
                        camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
                        if (i === 0) {
                            cameraVR.matrix.copy(camera.matrix);
                            cameraVR.projectionMatrix.copy(camera.projectionMatrix)
                        }
                    }
                }
                for (var i = 0; i < controllers.length; i++) {
                    var controller = controllers[i];
                    var inputSource = inputSources[i];
                    if (inputSource) {
                        var inputPose = frame.getInputPose(inputSource, frameOfRef);
                        if (inputPose !== null) {
                            controller.matrix.elements = inputPose.pointerMatrix;
                            controller.matrix.decompose(controller.position, controller.rotation, controller.scale);
                            controller.visible = true;
                            continue
                        }
                    }
                    controller.visible = false
                }
                if (onAnimationFrameCallback)
                    onAnimationFrameCallback(time)
            }
            var animation = new WebGLAnimation;
            animation.setAnimationLoop(onAnimationFrame);
            this.setAnimationLoop = function(callback) {
                onAnimationFrameCallback = callback
            };
            this.dispose = function() {};
            this.getStandingMatrix = function() {
                console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed.");
                return new THREE.Matrix4
            };
            this.submitFrame = function() {}
        }
        function WebGLRenderer(parameters) {
            console.log("THREE.WebGLRenderer", REVISION);
            parameters = parameters || {};
            var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
                _context = parameters.context !== undefined ? parameters.context : null,
                _alpha = parameters.alpha !== undefined ? parameters.alpha : false,
                _depth = parameters.depth !== undefined ? parameters.depth : true,
                _stencil = parameters.stencil !== undefined ? parameters.stencil : true,
                _antialias = parameters.antialias !== undefined ? parameters.antialias : false,
                _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
                _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
                _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : "default";
            var currentRenderList = null;
            var currentRenderState = null;
            this.domElement = _canvas;
            this.context = null;
            this.autoClear = true;
            this.autoClearColor = true;
            this.autoClearDepth = true;
            this.autoClearStencil = true;
            this.sortObjects = true;
            this.clippingPlanes = [];
            this.localClippingEnabled = false;
            this.gammaFactor = 2;
            this.gammaInput = false;
            this.gammaOutput = false;
            this.physicallyCorrectLights = false;
            this.toneMapping = LinearToneMapping;
            this.toneMappingExposure = 1;
            this.toneMappingWhitePoint = 1;
            this.maxMorphTargets = 8;
            this.maxMorphNormals = 4;
            var _this = this,
                _isContextLost = false,
                _framebuffer = null,
                _currentRenderTarget = null,
                _currentFramebuffer = null,
                _currentMaterialId = -1,
                _currentGeometryProgram = {
                    geometry: null,
                    program: null,
                    wireframe: false
                },
                _currentCamera = null,
                _currentArrayCamera = null,
                _currentViewport = new Vector4,
                _currentScissor = new Vector4,
                _currentScissorTest = null,
                _usedTextureUnits = 0,
                _width = _canvas.width,
                _height = _canvas.height,
                _pixelRatio = 1,
                _viewport = new Vector4(0, 0, _width, _height),
                _scissor = new Vector4(0, 0, _width, _height),
                _scissorTest = false,
                _frustum = new Frustum,
                _clipping = new WebGLClipping,
                _clippingEnabled = false,
                _localClippingEnabled = false,
                _projScreenMatrix = new Matrix4,
                _vector3 = new Vector3;
            function getTargetPixelRatio() {
                return _currentRenderTarget === null ? _pixelRatio : 1
            }
            var _gl;
            try {
                var contextAttributes = {
                    alpha: _alpha,
                    depth: _depth,
                    stencil: _stencil,
                    antialias: _antialias,
                    premultipliedAlpha: _premultipliedAlpha,
                    preserveDrawingBuffer: _preserveDrawingBuffer,
                    powerPreference: _powerPreference
                };
                _canvas.addEventListener("webglcontextlost", onContextLost, false);
                _canvas.addEventListener("webglcontextrestored", onContextRestore, false);
                _gl = _context || _canvas.getContext("webgl", contextAttributes) || _canvas.getContext("experimental-webgl", contextAttributes);
                if (_gl === null) {
                    if (_canvas.getContext("webgl") !== null) {
                        throw new Error("Error creating WebGL context with your selected attributes.")
                    } else {
                        throw new Error("Error creating WebGL context.")
                    }
                }
                if (_gl.getShaderPrecisionFormat === undefined) {
                    _gl.getShaderPrecisionFormat = function() {
                        return {
                            rangeMin: 1,
                            rangeMax: 1,
                            precision: 1
                        }
                    }
                }
            } catch (error) {
                console.error("THREE.WebGLRenderer: " + error.message)
            }
            var extensions,
                capabilities,
                state,
                info;
            var properties,
                textures,
                attributes,
                geometries,
                objects;
            var programCache,
                renderLists,
                renderStates;
            var background,
                morphtargets,
                bufferRenderer,
                indexedBufferRenderer;
            var utils;
            function initGLContext() {
                extensions = new WebGLExtensions(_gl);
                capabilities = new WebGLCapabilities(_gl, extensions, parameters);
                if (!capabilities.isWebGL2) {
                    extensions.get("WEBGL_depth_texture");
                    extensions.get("OES_texture_float");
                    extensions.get("OES_texture_half_float");
                    extensions.get("OES_texture_half_float_linear");
                    extensions.get("OES_standard_derivatives");
                    extensions.get("OES_element_index_uint");
                    extensions.get("ANGLE_instanced_arrays")
                }
                extensions.get("OES_texture_float_linear");
                utils = new WebGLUtils(_gl, extensions, capabilities);
                state = new WebGLState(_gl, extensions, utils, capabilities);
                state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));
                state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));
                info = new WebGLInfo(_gl);
                properties = new WebGLProperties;
                textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
                attributes = new WebGLAttributes(_gl);
                geometries = new WebGLGeometries(_gl, attributes, info);
                objects = new WebGLObjects(geometries, info);
                morphtargets = new WebGLMorphtargets(_gl);
                programCache = new WebGLPrograms(_this, extensions, capabilities);
                renderLists = new WebGLRenderLists;
                renderStates = new WebGLRenderStates;
                background = new WebGLBackground(_this, state, objects, _premultipliedAlpha);
                bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
                indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
                info.programs = programCache.programs;
                _this.context = _gl;
                _this.capabilities = capabilities;
                _this.extensions = extensions;
                _this.properties = properties;
                _this.renderLists = renderLists;
                _this.state = state;
                _this.info = info
            }
            initGLContext();
            var vr = "xr" in navigator ? new WebXRManager(_this) : new WebVRManager(_this);
            this.vr = vr;
            var shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);
            this.shadowMap = shadowMap;
            this.getContext = function() {
                return _gl
            };
            this.getContextAttributes = function() {
                return _gl.getContextAttributes()
            };
            this.forceContextLoss = function() {
                var extension = extensions.get("WEBGL_lose_context");
                if (extension)
                    extension.loseContext()
            };
            this.forceContextRestore = function() {
                var extension = extensions.get("WEBGL_lose_context");
                if (extension)
                    extension.restoreContext()
            };
            this.getPixelRatio = function() {
                return _pixelRatio
            };
            this.setPixelRatio = function(value) {
                if (value === undefined)
                    return;
                _pixelRatio = value;
                this.setSize(_width, _height, false)
            };
            this.getSize = function() {
                return {
                    width: _width,
                    height: _height
                }
            };
            this.setSize = function(width, height, updateStyle) {
                if (vr.isPresenting()) {
                    console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
                    return
                }
                _width = width;
                _height = height;
                _canvas.width = width * _pixelRatio;
                _canvas.height = height * _pixelRatio;
                if (updateStyle !== false) {
                    _canvas.style.width = width + "px";
                    _canvas.style.height = height + "px"
                }
                this.setViewport(0, 0, width, height)
            };
            this.getDrawingBufferSize = function() {
                return {
                    width: _width * _pixelRatio,
                    height: _height * _pixelRatio
                }
            };
            this.setDrawingBufferSize = function(width, height, pixelRatio) {
                _width = width;
                _height = height;
                _pixelRatio = pixelRatio;
                _canvas.width = width * pixelRatio;
                _canvas.height = height * pixelRatio;
                this.setViewport(0, 0, width, height)
            };
            this.getCurrentViewport = function() {
                return _currentViewport
            };
            this.setViewport = function(x, y, width, height) {
                _viewport.set(x, _height - y - height, width, height);
                state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio))
            };
            this.setScissor = function(x, y, width, height) {
                _scissor.set(x, _height - y - height, width, height);
                state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio))
            };
            this.setScissorTest = function(boolean) {
                state.setScissorTest(_scissorTest = boolean)
            };
            this.getClearColor = function() {
                return background.getClearColor()
            };
            this.setClearColor = function() {
                background.setClearColor.apply(background, arguments)
            };
            this.getClearAlpha = function() {
                return background.getClearAlpha()
            };
            this.setClearAlpha = function() {
                background.setClearAlpha.apply(background, arguments)
            };
            this.clear = function(color, depth, stencil) {
                var bits = 0;
                if (color === undefined || color)
                    bits |= _gl.COLOR_BUFFER_BIT;
                if (depth === undefined || depth)
                    bits |= _gl.DEPTH_BUFFER_BIT;
                if (stencil === undefined || stencil)
                    bits |= _gl.STENCIL_BUFFER_BIT;
                _gl.clear(bits)
            };
            this.clearColor = function() {
                this.clear(true, false, false)
            };
            this.clearDepth = function() {
                this.clear(false, true, false)
            };
            this.clearStencil = function() {
                this.clear(false, false, true)
            };
            this.clearTarget = function(renderTarget, color, depth, stencil) {
                this.setRenderTarget(renderTarget);
                this.clear(color, depth, stencil)
            };
            this.dispose = function() {
                _canvas.removeEventListener("webglcontextlost", onContextLost, false);
                _canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
                renderLists.dispose();
                renderStates.dispose();
                properties.dispose();
                objects.dispose();
                vr.dispose();
                animation.stop()
            };
            function onContextLost(event) {
                event.preventDefault();
                console.log("THREE.WebGLRenderer: Context Lost.");
                _isContextLost = true
            }
            function onContextRestore() {
                console.log("THREE.WebGLRenderer: Context Restored.");
                _isContextLost = false;
                initGLContext()
            }
            function onMaterialDispose(event) {
                var material = event.target;
                material.removeEventListener("dispose", onMaterialDispose);
                deallocateMaterial(material)
            }
            function deallocateMaterial(material) {
                releaseMaterialProgramReference(material);
                properties.remove(material)
            }
            function releaseMaterialProgramReference(material) {
                var programInfo = properties.get(material).program;
                material.program = undefined;
                if (programInfo !== undefined) {
                    programCache.releaseProgram(programInfo)
                }
            }
            function renderObjectImmediate(object, program) {
                object.render(function(object) {
                    _this.renderBufferImmediate(object, program)
                })
            }
            this.renderBufferImmediate = function(object, program) {
                state.initAttributes();
                var buffers = properties.get(object);
                if (object.hasPositions && !buffers.position)
                    buffers.position = _gl.createBuffer();
                if (object.hasNormals && !buffers.normal)
                    buffers.normal = _gl.createBuffer();
                if (object.hasUvs && !buffers.uv)
                    buffers.uv = _gl.createBuffer();
                if (object.hasColors && !buffers.color)
                    buffers.color = _gl.createBuffer();
                var programAttributes = program.getAttributes();
                if (object.hasPositions) {
                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);
                    _gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);
                    state.enableAttribute(programAttributes.position);
                    _gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0)
                }
                if (object.hasNormals) {
                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);
                    _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);
                    state.enableAttribute(programAttributes.normal);
                    _gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0)
                }
                if (object.hasUvs) {
                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);
                    _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);
                    state.enableAttribute(programAttributes.uv);
                    _gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0)
                }
                if (object.hasColors) {
                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);
                    _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);
                    state.enableAttribute(programAttributes.color);
                    _gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0)
                }
                state.disableUnusedAttributes();
                _gl.drawArrays(_gl.TRIANGLES, 0, object.count);
                object.count = 0
            };
            this.renderBufferDirect = function(camera, fog, geometry, material, object, group) {
                var frontFaceCW = object.isMesh && object.normalMatrix.determinant() < 0;
                state.setMaterial(material, frontFaceCW);
                var program = setProgram(camera, fog, material, object);
                var updateBuffers = false;
                if (_currentGeometryProgram.geometry !== geometry.id || _currentGeometryProgram.program !== program.id || _currentGeometryProgram.wireframe !== (material.wireframe === true)) {
                    _currentGeometryProgram.geometry = geometry.id;
                    _currentGeometryProgram.program = program.id;
                    _currentGeometryProgram.wireframe = material.wireframe === true;
                    updateBuffers = true
                }
                if (object.morphTargetInfluences) {
                    morphtargets.update(object, geometry, material, program);
                    updateBuffers = true
                }
                var index = geometry.index;
                var position = geometry.attributes.position;
                var rangeFactor = 1;
                if (material.wireframe === true) {
                    index = geometries.getWireframeAttribute(geometry);
                    rangeFactor = 2
                }
                var attribute;
                var renderer = bufferRenderer;
                if (index !== null) {
                    attribute = attributes.get(index);
                    renderer = indexedBufferRenderer;
                    renderer.setIndex(attribute)
                }
                if (updateBuffers) {
                    setupVertexAttributes(material, program, geometry);
                    if (index !== null) {
                        _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, attribute.buffer)
                    }
                }
                var dataCount = Infinity;
                if (index !== null) {
                    dataCount = index.count
                } else if (position !== undefined) {
                    dataCount = position.count
                }
                var rangeStart = geometry.drawRange.start * rangeFactor;
                var rangeCount = geometry.drawRange.count * rangeFactor;
                var groupStart = group !== null ? group.start * rangeFactor : 0;
                var groupCount = group !== null ? group.count * rangeFactor : Infinity;
                var drawStart = Math.max(rangeStart, groupStart);
                var drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
                var drawCount = Math.max(0, drawEnd - drawStart + 1);
                if (drawCount === 0)
                    return;
                if (object.isMesh) {
                    if (material.wireframe === true) {
                        state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
                        renderer.setMode(_gl.LINES)
                    } else {
                        switch (object.drawMode) {
                        case TrianglesDrawMode:
                            renderer.setMode(_gl.TRIANGLES);
                            break;
                        case TriangleStripDrawMode:
                            renderer.setMode(_gl.TRIANGLE_STRIP);
                            break;
                        case TriangleFanDrawMode:
                            renderer.setMode(_gl.TRIANGLE_FAN);
                            break
                        }
                    }
                } else if (object.isLine) {
                    var lineWidth = material.linewidth;
                    if (lineWidth === undefined)
                        lineWidth = 1;
                    state.setLineWidth(lineWidth * getTargetPixelRatio());
                    if (object.isLineSegments) {
                        renderer.setMode(_gl.LINES)
                    } else if (object.isLineLoop) {
                        renderer.setMode(_gl.LINE_LOOP)
                    } else {
                        renderer.setMode(_gl.LINE_STRIP)
                    }
                } else if (object.isPoints) {
                    renderer.setMode(_gl.POINTS)
                } else if (object.isSprite) {
                    renderer.setMode(_gl.TRIANGLES)
                }
                if (geometry && geometry.isInstancedBufferGeometry) {
                    if (geometry.maxInstancedCount > 0) {
                        renderer.renderInstances(geometry, drawStart, drawCount)
                    }
                } else {
                    renderer.render(drawStart, drawCount)
                }
            };
            function setupVertexAttributes(material, program, geometry) {
                if (geometry && geometry.isInstancedBufferGeometry & !capabilities.isWebGL2) {
                    if (extensions.get("ANGLE_instanced_arrays") === null) {
                        console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                        return
                    }
                }
                state.initAttributes();
                var geometryAttributes = geometry.attributes;
                var programAttributes = program.getAttributes();
                var materialDefaultAttributeValues = material.defaultAttributeValues;
                for (var name in programAttributes) {
                    var programAttribute = programAttributes[name];
                    if (programAttribute >= 0) {
                        var geometryAttribute = geometryAttributes[name];
                        if (geometryAttribute !== undefined) {
                            var normalized = geometryAttribute.normalized;
                            var size = geometryAttribute.itemSize;
                            var attribute = attributes.get(geometryAttribute);
                            if (attribute === undefined)
                                continue;
                            var buffer = attribute.buffer;
                            var type = attribute.type;
                            var bytesPerElement = attribute.bytesPerElement;
                            if (geometryAttribute.isInterleavedBufferAttribute) {
                                var data = geometryAttribute.data;
                                var stride = data.stride;
                                var offset = geometryAttribute.offset;
                                if (data && data.isInstancedInterleavedBuffer) {
                                    state.enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);
                                    if (geometry.maxInstancedCount === undefined) {
                                        geometry.maxInstancedCount = data.meshPerAttribute * data.count
                                    }
                                } else {
                                    state.enableAttribute(programAttribute)
                                }
                                _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                                _gl.vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement)
                            } else {
                                if (geometryAttribute.isInstancedBufferAttribute) {
                                    state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);
                                    if (geometry.maxInstancedCount === undefined) {
                                        geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count
                                    }
                                } else {
                                    state.enableAttribute(programAttribute)
                                }
                                _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                                _gl.vertexAttribPointer(programAttribute, size, type, normalized, 0, 0)
                            }
                        } else if (materialDefaultAttributeValues !== undefined) {
                            var value = materialDefaultAttributeValues[name];
                            if (value !== undefined) {
                                switch (value.length) {
                                case 2:
                                    _gl.vertexAttrib2fv(programAttribute, value);
                                    break;
                                case 3:
                                    _gl.vertexAttrib3fv(programAttribute, value);
                                    break;
                                case 4:
                                    _gl.vertexAttrib4fv(programAttribute, value);
                                    break;
                                default:
                                    _gl.vertexAttrib1fv(programAttribute, value)
                                }
                            }
                        }
                    }
                }
                state.disableUnusedAttributes()
            }
            this.compile = function(scene, camera) {
                currentRenderState = renderStates.get(scene, camera);
                currentRenderState.init();
                scene.traverse(function(object) {
                    if (object.isLight) {
                        currentRenderState.pushLight(object);
                        if (object.castShadow) {
                            currentRenderState.pushShadow(object)
                        }
                    }
                });
                currentRenderState.setupLights(camera);
                scene.traverse(function(object) {
                    if (object.material) {
                        if (Array.isArray(object.material)) {
                            for (var i = 0; i < object.material.length; i++) {
                                initMaterial(object.material[i], scene.fog, object)
                            }
                        } else {
                            initMaterial(object.material, scene.fog, object)
                        }
                    }
                })
            };
            var onAnimationFrameCallback = null;
            function onAnimationFrame(time) {
                if (vr.isPresenting())
                    return;
                if (onAnimationFrameCallback)
                    onAnimationFrameCallback(time)
            }
            var animation = new WebGLAnimation;
            animation.setAnimationLoop(onAnimationFrame);
            if (typeof window !== "undefined")
                animation.setContext(window);
            this.setAnimationLoop = function(callback) {
                onAnimationFrameCallback = callback;
                vr.setAnimationLoop(callback);
                animation.start()
            };
            this.render = function(scene, camera, renderTarget, forceClear) {
                if (!(camera && camera.isCamera)) {
                    console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                    return
                }
                if (_isContextLost)
                    return;
                _currentGeometryProgram.geometry = null;
                _currentGeometryProgram.program = null;
                _currentGeometryProgram.wireframe = false;
                _currentMaterialId = -1;
                _currentCamera = null;
                if (scene.autoUpdate === true)
                    scene.updateMatrixWorld();
                if (camera.parent === null)
                    camera.updateMatrixWorld();
                if (vr.enabled) {
                    camera = vr.getCamera(camera)
                }
                currentRenderState = renderStates.get(scene, camera);
                currentRenderState.init();
                scene.onBeforeRender(_this, scene, camera, renderTarget);
                _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
                _frustum.setFromMatrix(_projScreenMatrix);
                _localClippingEnabled = this.localClippingEnabled;
                _clippingEnabled = _clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
                currentRenderList = renderLists.get(scene, camera);
                currentRenderList.init();
                projectObject(scene, camera, _this.sortObjects);
                if (_this.sortObjects === true) {
                    currentRenderList.sort()
                }
                if (_clippingEnabled)
                    _clipping.beginShadows();
                var shadowsArray = currentRenderState.state.shadowsArray;
                shadowMap.render(shadowsArray, scene, camera);
                currentRenderState.setupLights(camera);
                if (_clippingEnabled)
                    _clipping.endShadows();
                if (this.info.autoReset)
                    this.info.reset();
                if (renderTarget === undefined) {
                    renderTarget = null
                }
                this.setRenderTarget(renderTarget);
                background.render(currentRenderList, scene, camera, forceClear);
                var opaqueObjects = currentRenderList.opaque;
                var transparentObjects = currentRenderList.transparent;
                if (scene.overrideMaterial) {
                    var overrideMaterial = scene.overrideMaterial;
                    if (opaqueObjects.length)
                        renderObjects(opaqueObjects, scene, camera, overrideMaterial);
                    if (transparentObjects.length)
                        renderObjects(transparentObjects, scene, camera, overrideMaterial)
                } else {
                    if (opaqueObjects.length)
                        renderObjects(opaqueObjects, scene, camera);
                    if (transparentObjects.length)
                        renderObjects(transparentObjects, scene, camera)
                }
                if (renderTarget) {
                    textures.updateRenderTargetMipmap(renderTarget)
                }
                state.buffers.depth.setTest(true);
                state.buffers.depth.setMask(true);
                state.buffers.color.setMask(true);
                state.setPolygonOffset(false);
                scene.onAfterRender(_this, scene, camera);
                if (vr.enabled) {
                    vr.submitFrame()
                }
                currentRenderList = null;
                currentRenderState = null
            };
            function projectObject(object, camera, sortObjects) {
                if (object.visible === false)
                    return;
                var visible = object.layers.test(camera.layers);
                if (visible) {
                    if (object.isLight) {
                        currentRenderState.pushLight(object);
                        if (object.castShadow) {
                            currentRenderState.pushShadow(object)
                        }
                    } else if (object.isSprite) {
                        if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
                            if (sortObjects) {
                                _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix)
                            }
                            var geometry = objects.update(object);
                            var material = object.material;
                            currentRenderList.push(object, geometry, material, _vector3.z, null)
                        }
                    } else if (object.isImmediateRenderObject) {
                        if (sortObjects) {
                            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix)
                        }
                        currentRenderList.push(object, null, object.material, _vector3.z, null)
                    } else if (object.isMesh || object.isLine || object.isPoints) {
                        if (object.isSkinnedMesh) {
                            object.skeleton.update()
                        }
                        if (!object.frustumCulled || _frustum.intersectsObject(object)) {
                            if (sortObjects) {
                                _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix)
                            }
                            var geometry = objects.update(object);
                            var material = object.material;
                            if (Array.isArray(material)) {
                                var groups = geometry.groups;
                                for (var i = 0, l = groups.length; i < l; i++) {
                                    var group = groups[i];
                                    var groupMaterial = material[group.materialIndex];
                                    if (groupMaterial && groupMaterial.visible) {
                                        currentRenderList.push(object, geometry, groupMaterial, _vector3.z, group)
                                    }
                                }
                            } else if (material.visible) {
                                currentRenderList.push(object, geometry, material, _vector3.z, null)
                            }
                        }
                    }
                }
                var children = object.children;
                for (var i = 0, l = children.length; i < l; i++) {
                    projectObject(children[i], camera, sortObjects)
                }
            }
            function renderObjects(renderList, scene, camera, overrideMaterial) {
                for (var i = 0, l = renderList.length; i < l; i++) {
                    var renderItem = renderList[i];
                    var object = renderItem.object;
                    var geometry = renderItem.geometry;
                    var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
                    var group = renderItem.group;
                    if (camera.isArrayCamera) {
                        _currentArrayCamera = camera;
                        var cameras = camera.cameras;
                        for (var j = 0, jl = cameras.length; j < jl; j++) {
                            var camera2 = cameras[j];
                            if (object.layers.test(camera2.layers)) {
                                if ("viewport" in camera2) {
                                    state.viewport(_currentViewport.copy(camera2.viewport))
                                } else {
                                    var bounds = camera2.bounds;
                                    var x = bounds.x * _width;
                                    var y = bounds.y * _height;
                                    var width = bounds.z * _width;
                                    var height = bounds.w * _height;
                                    state.viewport(_currentViewport.set(x, y, width, height).multiplyScalar(_pixelRatio))
                                }
                                renderObject(object, scene, camera2, geometry, material, group)
                            }
                        }
                    } else {
                        _currentArrayCamera = null;
                        renderObject(object, scene, camera, geometry, material, group)
                    }
                }
            }
            function renderObject(object, scene, camera, geometry, material, group) {
                object.onBeforeRender(_this, scene, camera, geometry, material, group);
                currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);
                object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
                object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
                if (object.isImmediateRenderObject) {
                    state.setMaterial(material);
                    var program = setProgram(camera, scene.fog, material, object);
                    _currentGeometryProgram.geometry = null;
                    _currentGeometryProgram.program = null;
                    _currentGeometryProgram.wireframe = false;
                    renderObjectImmediate(object, program)
                } else {
                    _this.renderBufferDirect(camera, scene.fog, geometry, material, object, group)
                }
                object.onAfterRender(_this, scene, camera, geometry, material, group);
                currentRenderState = renderStates.get(scene, _currentArrayCamera || camera)
            }
            function initMaterial(material, fog, object) {
                var materialProperties = properties.get(material);
                var lights = currentRenderState.state.lights;
                var shadowsArray = currentRenderState.state.shadowsArray;
                var lightsHash = materialProperties.lightsHash;
                var lightsStateHash = lights.state.hash;
                var parameters = programCache.getParameters(material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object);
                var code = programCache.getProgramCode(material, parameters);
                var program = materialProperties.program;
                var programChange = true;
                if (program === undefined) {
                    material.addEventListener("dispose", onMaterialDispose)
                } else if (program.code !== code) {
                    releaseMaterialProgramReference(material)
                } else if (lightsHash.stateID !== lightsStateHash.stateID || lightsHash.directionalLength !== lightsStateHash.directionalLength || lightsHash.pointLength !== lightsStateHash.pointLength || lightsHash.spotLength !== lightsStateHash.spotLength || lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength || lightsHash.hemiLength !== lightsStateHash.hemiLength || lightsHash.shadowsLength !== lightsStateHash.shadowsLength) {
                    lightsHash.stateID = lightsStateHash.stateID;
                    lightsHash.directionalLength = lightsStateHash.directionalLength;
                    lightsHash.pointLength = lightsStateHash.pointLength;
                    lightsHash.spotLength = lightsStateHash.spotLength;
                    lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;
                    lightsHash.hemiLength = lightsStateHash.hemiLength;
                    lightsHash.shadowsLength = lightsStateHash.shadowsLength;
                    programChange = false
                } else if (parameters.shaderID !== undefined) {
                    return
                } else {
                    programChange = false
                }
                if (programChange) {
                    if (parameters.shaderID) {
                        var shader = ShaderLib[parameters.shaderID];
                        materialProperties.shader = {
                            name: material.type,
                            uniforms: UniformsUtils.clone(shader.uniforms),
                            vertexShader: shader.vertexShader,
                            fragmentShader: shader.fragmentShader
                        }
                    } else {
                        materialProperties.shader = {
                            name: material.type,
                            uniforms: material.uniforms,
                            vertexShader: material.vertexShader,
                            fragmentShader: material.fragmentShader
                        }
                    }
                    material.onBeforeCompile(materialProperties.shader, _this);
                    code = programCache.getProgramCode(material, parameters);
                    program = programCache.acquireProgram(material, materialProperties.shader, parameters, code);
                    materialProperties.program = program;
                    material.program = program
                }
                var programAttributes = program.getAttributes();
                if (material.morphTargets) {
                    material.numSupportedMorphTargets = 0;
                    for (var i = 0; i < _this.maxMorphTargets; i++) {
                        if (programAttributes["morphTarget" + i] >= 0) {
                            material.numSupportedMorphTargets++
                        }
                    }
                }
                if (material.morphNormals) {
                    material.numSupportedMorphNormals = 0;
                    for (var i = 0; i < _this.maxMorphNormals; i++) {
                        if (programAttributes["morphNormal" + i] >= 0) {
                            material.numSupportedMorphNormals++
                        }
                    }
                }
                var uniforms = materialProperties.shader.uniforms;
                if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
                    materialProperties.numClippingPlanes = _clipping.numPlanes;
                    materialProperties.numIntersection = _clipping.numIntersection;
                    uniforms.clippingPlanes = _clipping.uniform
                }
                materialProperties.fog = fog;
                if (lightsHash === undefined) {
                    materialProperties.lightsHash = lightsHash = {}
                }
                lightsHash.stateID = lightsStateHash.stateID;
                lightsHash.directionalLength = lightsStateHash.directionalLength;
                lightsHash.pointLength = lightsStateHash.pointLength;
                lightsHash.spotLength = lightsStateHash.spotLength;
                lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;
                lightsHash.hemiLength = lightsStateHash.hemiLength;
                lightsHash.shadowsLength = lightsStateHash.shadowsLength;
                if (material.lights) {
                    uniforms.ambientLightColor.value = lights.state.ambient;
                    uniforms.directionalLights.value = lights.state.directional;
                    uniforms.spotLights.value = lights.state.spot;
                    uniforms.rectAreaLights.value = lights.state.rectArea;
                    uniforms.pointLights.value = lights.state.point;
                    uniforms.hemisphereLights.value = lights.state.hemi;
                    uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
                    uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
                    uniforms.spotShadowMap.value = lights.state.spotShadowMap;
                    uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
                    uniforms.pointShadowMap.value = lights.state.pointShadowMap;
                    uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix
                }
                var progUniforms = materialProperties.program.getUniforms(),
                    uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
                materialProperties.uniformsList = uniformsList
            }
            function setProgram(camera, fog, material, object) {
                _usedTextureUnits = 0;
                var materialProperties = properties.get(material);
                var lights = currentRenderState.state.lights;
                var lightsHash = materialProperties.lightsHash;
                var lightsStateHash = lights.state.hash;
                if (_clippingEnabled) {
                    if (_localClippingEnabled || camera !== _currentCamera) {
                        var useCache = camera === _currentCamera && material.id === _currentMaterialId;
                        _clipping.setState(material.clippingPlanes, material.clipIntersection, material.clipShadows, camera, materialProperties, useCache)
                    }
                }
                if (material.needsUpdate === false) {
                    if (materialProperties.program === undefined) {
                        material.needsUpdate = true
                    } else if (material.fog && materialProperties.fog !== fog) {
                        material.needsUpdate = true
                    } else if (material.lights && (lightsHash.stateID !== lightsStateHash.stateID || lightsHash.directionalLength !== lightsStateHash.directionalLength || lightsHash.pointLength !== lightsStateHash.pointLength || lightsHash.spotLength !== lightsStateHash.spotLength || lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength || lightsHash.hemiLength !== lightsStateHash.hemiLength || lightsHash.shadowsLength !== lightsStateHash.shadowsLength)) {
                        material.needsUpdate = true
                    } else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== _clipping.numPlanes || materialProperties.numIntersection !== _clipping.numIntersection)) {
                        material.needsUpdate = true
                    }
                }
                if (material.needsUpdate) {
                    initMaterial(material, fog, object);
                    material.needsUpdate = false
                }
                var refreshProgram = false;
                var refreshMaterial = false;
                var refreshLights = false;
                var program = materialProperties.program,
                    p_uniforms = program.getUniforms(),
                    m_uniforms = materialProperties.shader.uniforms;
                if (state.useProgram(program.program)) {
                    refreshProgram = true;
                    refreshMaterial = true;
                    refreshLights = true
                }
                if (material.id !== _currentMaterialId) {
                    _currentMaterialId = material.id;
                    refreshMaterial = true
                }
                if (refreshProgram || camera !== _currentCamera) {
                    p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
                    if (capabilities.logarithmicDepthBuffer) {
                        p_uniforms.setValue(_gl, "logDepthBufFC", 2 / (Math.log(camera.far + 1) / Math.LN2))
                    }
                    if (_currentCamera !== (_currentArrayCamera || camera)) {
                        _currentCamera = _currentArrayCamera || camera;
                        refreshMaterial = true;
                        refreshLights = true
                    }
                    if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.envMap) {
                        var uCamPos = p_uniforms.map.cameraPosition;
                        if (uCamPos !== undefined) {
                            uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld))
                        }
                    }
                    if (material.isMeshPhongMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.skinning) {
                        p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse)
                    }
                }
                if (material.skinning) {
                    p_uniforms.setOptional(_gl, object, "bindMatrix");
                    p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
                    var skeleton = object.skeleton;
                    if (skeleton) {
                        var bones = skeleton.bones;
                        if (capabilities.floatVertexTextures) {
                            if (skeleton.boneTexture === undefined) {
                                var size = Math.sqrt(bones.length * 4);
                                size = _Math.ceilPowerOfTwo(size);
                                size = Math.max(size, 4);
                                var boneMatrices = new Float32Array(size * size * 4);
                                boneMatrices.set(skeleton.boneMatrices);
                                var boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
                                boneTexture.needsUpdate = true;
                                skeleton.boneMatrices = boneMatrices;
                                skeleton.boneTexture = boneTexture;
                                skeleton.boneTextureSize = size
                            }
                            p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture);
                            p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize)
                        } else {
                            p_uniforms.setOptional(_gl, skeleton, "boneMatrices")
                        }
                    }
                }
                if (refreshMaterial) {
                    p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
                    p_uniforms.setValue(_gl, "toneMappingWhitePoint", _this.toneMappingWhitePoint);
                    if (material.lights) {
                        markUniformsLightsNeedsUpdate(m_uniforms, refreshLights)
                    }
                    if (fog && material.fog) {
                        refreshUniformsFog(m_uniforms, fog)
                    }
                    if (material.isMeshBasicMaterial) {
                        refreshUniformsCommon(m_uniforms, material)
                    } else if (material.isMeshLambertMaterial) {
                        refreshUniformsCommon(m_uniforms, material);
                        refreshUniformsLambert(m_uniforms, material)
                    } else if (material.isMeshPhongMaterial) {
                        refreshUniformsCommon(m_uniforms, material);
                        if (material.isMeshToonMaterial) {
                            refreshUniformsToon(m_uniforms, material)
                        } else {
                            refreshUniformsPhong(m_uniforms, material)
                        }
                    } else if (material.isMeshStandardMaterial) {
                        refreshUniformsCommon(m_uniforms, material);
                        if (material.isMeshPhysicalMaterial) {
                            refreshUniformsPhysical(m_uniforms, material)
                        } else {
                            refreshUniformsStandard(m_uniforms, material)
                        }
                    } else if (material.isMeshDepthMaterial) {
                        refreshUniformsCommon(m_uniforms, material);
                        refreshUniformsDepth(m_uniforms, material)
                    } else if (material.isMeshDistanceMaterial) {
                        refreshUniformsCommon(m_uniforms, material);
                        refreshUniformsDistance(m_uniforms, material)
                    } else if (material.isMeshNormalMaterial) {
                        refreshUniformsCommon(m_uniforms, material);
                        refreshUniformsNormal(m_uniforms, material)
                    } else if (material.isLineBasicMaterial) {
                        refreshUniformsLine(m_uniforms, material);
                        if (material.isLineDashedMaterial) {
                            refreshUniformsDash(m_uniforms, material)
                        }
                    } else if (material.isPointsMaterial) {
                        refreshUniformsPoints(m_uniforms, material)
                    } else if (material.isSpriteMaterial) {
                        refreshUniformsSprites(m_uniforms, material)
                    } else if (material.isShadowMaterial) {
                        m_uniforms.color.value = material.color;
                        m_uniforms.opacity.value = material.opacity
                    }
                    if (m_uniforms.ltc_1 !== undefined)
                        m_uniforms.ltc_1.value = UniformsLib.LTC_1;
                    if (m_uniforms.ltc_2 !== undefined)
                        m_uniforms.ltc_2.value = UniformsLib.LTC_2;
                    WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, _this)
                }
                if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
                    WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, _this);
                    material.uniformsNeedUpdate = false
                }
                if (material.isSpriteMaterial) {
                    p_uniforms.setValue(_gl, "center", object.center)
                }
                p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
                p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
                p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
                return program
            }
            function refreshUniformsCommon(uniforms, material) {
                uniforms.opacity.value = material.opacity;
                if (material.color) {
                    uniforms.diffuse.value = material.color
                }
                if (material.emissive) {
                    uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity)
                }
                if (material.map) {
                    uniforms.map.value = material.map
                }
                if (material.alphaMap) {
                    uniforms.alphaMap.value = material.alphaMap
                }
                if (material.specularMap) {
                    uniforms.specularMap.value = material.specularMap
                }
                if (material.envMap) {
                    uniforms.envMap.value = material.envMap;
                    uniforms.flipEnvMap.value = !(material.envMap && material.envMap.isCubeTexture) ? 1 : -1;
                    uniforms.reflectivity.value = material.reflectivity;
                    uniforms.refractionRatio.value = material.refractionRatio;
                    uniforms.maxMipLevel.value = properties.get(material.envMap).__maxMipLevel
                }
                if (material.lightMap) {
                    uniforms.lightMap.value = material.lightMap;
                    uniforms.lightMapIntensity.value = material.lightMapIntensity
                }
                if (material.aoMap) {
                    uniforms.aoMap.value = material.aoMap;
                    uniforms.aoMapIntensity.value = material.aoMapIntensity
                }
                var uvScaleMap;
                if (material.map) {
                    uvScaleMap = material.map
                } else if (material.specularMap) {
                    uvScaleMap = material.specularMap
                } else if (material.displacementMap) {
                    uvScaleMap = material.displacementMap
                } else if (material.normalMap) {
                    uvScaleMap = material.normalMap
                } else if (material.bumpMap) {
                    uvScaleMap = material.bumpMap
                } else if (material.roughnessMap) {
                    uvScaleMap = material.roughnessMap
                } else if (material.metalnessMap) {
                    uvScaleMap = material.metalnessMap
                } else if (material.alphaMap) {
                    uvScaleMap = material.alphaMap
                } else if (material.emissiveMap) {
                    uvScaleMap = material.emissiveMap
                }
                if (uvScaleMap !== undefined) {
                    if (uvScaleMap.isWebGLRenderTarget) {
                        uvScaleMap = uvScaleMap.texture
                    }
                    if (uvScaleMap.matrixAutoUpdate === true) {
                        uvScaleMap.updateMatrix()
                    }
                    uniforms.uvTransform.value.copy(uvScaleMap.matrix)
                }
            }
            function refreshUniformsLine(uniforms, material) {
                uniforms.diffuse.value = material.color;
                uniforms.opacity.value = material.opacity
            }
            function refreshUniformsDash(uniforms, material) {
                uniforms.dashSize.value = material.dashSize;
                uniforms.totalSize.value = material.dashSize + material.gapSize;
                uniforms.scale.value = material.scale
            }
            function refreshUniformsPoints(uniforms, material) {
                uniforms.diffuse.value = material.color;
                uniforms.opacity.value = material.opacity;
                uniforms.size.value = material.size * _pixelRatio;
                uniforms.scale.value = _height * .5;
                uniforms.map.value = material.map;
                if (material.map !== null) {
                    if (material.map.matrixAutoUpdate === true) {
                        material.map.updateMatrix()
                    }
                    uniforms.uvTransform.value.copy(material.map.matrix)
                }
            }
            function refreshUniformsSprites(uniforms, material) {
                uniforms.diffuse.value = material.color;
                uniforms.opacity.value = material.opacity;
                uniforms.rotation.value = material.rotation;
                uniforms.map.value = material.map;
                if (material.map !== null) {
                    if (material.map.matrixAutoUpdate === true) {
                        material.map.updateMatrix()
                    }
                    uniforms.uvTransform.value.copy(material.map.matrix)
                }
            }
            function refreshUniformsFog(uniforms, fog) {
                uniforms.fogColor.value = fog.color;
                if (fog.isFog) {
                    uniforms.fogNear.value = fog.near;
                    uniforms.fogFar.value = fog.far
                } else if (fog.isFogExp2) {
                    uniforms.fogDensity.value = fog.density
                }
            }
            function refreshUniformsLambert(uniforms, material) {
                if (material.emissiveMap) {
                    uniforms.emissiveMap.value = material.emissiveMap
                }
            }
            function refreshUniformsPhong(uniforms, material) {
                uniforms.specular.value = material.specular;
                uniforms.shininess.value = Math.max(material.shininess, 1e-4);
                if (material.emissiveMap) {
                    uniforms.emissiveMap.value = material.emissiveMap
                }
                if (material.bumpMap) {
                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;
                    if (material.side === BackSide)
                        uniforms.bumpScale.value *= -1
                }
                if (material.normalMap) {
                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy(material.normalScale);
                    if (material.side === BackSide)
                        uniforms.normalScale.value.negate()
                }
                if (material.displacementMap) {
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias
                }
            }
            function refreshUniformsToon(uniforms, material) {
                refreshUniformsPhong(uniforms, material);
                if (material.gradientMap) {
                    uniforms.gradientMap.value = material.gradientMap
                }
            }
            function refreshUniformsStandard(uniforms, material) {
                uniforms.roughness.value = material.roughness;
                uniforms.metalness.value = material.metalness;
                if (material.roughnessMap) {
                    uniforms.roughnessMap.value = material.roughnessMap
                }
                if (material.metalnessMap) {
                    uniforms.metalnessMap.value = material.metalnessMap
                }
                if (material.emissiveMap) {
                    uniforms.emissiveMap.value = material.emissiveMap
                }
                if (material.bumpMap) {
                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;
                    if (material.side === BackSide)
                        uniforms.bumpScale.value *= -1
                }
                if (material.normalMap) {
                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy(material.normalScale);
                    if (material.side === BackSide)
                        uniforms.normalScale.value.negate()
                }
                if (material.displacementMap) {
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias
                }
                if (material.envMap) {
                    uniforms.envMapIntensity.value = material.envMapIntensity
                }
            }
            function refreshUniformsPhysical(uniforms, material) {
                refreshUniformsStandard(uniforms, material);
                uniforms.reflectivity.value = material.reflectivity;
                uniforms.clearCoat.value = material.clearCoat;
                uniforms.clearCoatRoughness.value = material.clearCoatRoughness
            }
            function refreshUniformsDepth(uniforms, material) {
                if (material.displacementMap) {
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias
                }
            }
            function refreshUniformsDistance(uniforms, material) {
                if (material.displacementMap) {
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias
                }
                uniforms.referencePosition.value.copy(material.referencePosition);
                uniforms.nearDistance.value = material.nearDistance;
                uniforms.farDistance.value = material.farDistance
            }
            function refreshUniformsNormal(uniforms, material) {
                if (material.bumpMap) {
                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;
                    if (material.side === BackSide)
                        uniforms.bumpScale.value *= -1
                }
                if (material.normalMap) {
                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy(material.normalScale);
                    if (material.side === BackSide)
                        uniforms.normalScale.value.negate()
                }
                if (material.displacementMap) {
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias
                }
            }
            function markUniformsLightsNeedsUpdate(uniforms, value) {
                uniforms.ambientLightColor.needsUpdate = value;
                uniforms.directionalLights.needsUpdate = value;
                uniforms.pointLights.needsUpdate = value;
                uniforms.spotLights.needsUpdate = value;
                uniforms.rectAreaLights.needsUpdate = value;
                uniforms.hemisphereLights.needsUpdate = value
            }
            function allocTextureUnit() {
                var textureUnit = _usedTextureUnits;
                if (textureUnit >= capabilities.maxTextures) {
                    console.warn("THREE.WebGLRenderer: Trying to use " + textureUnit + " texture units while this GPU supports only " + capabilities.maxTextures)
                }
                _usedTextureUnits += 1;
                return textureUnit
            }
            this.allocTextureUnit = allocTextureUnit;
            this.setTexture2D = function() {
                var warned = false;
                return function setTexture2D(texture, slot) {
                    if (texture && texture.isWebGLRenderTarget) {
                        if (!warned) {
                            console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.");
                            warned = true
                        }
                        texture = texture.texture
                    }
                    textures.setTexture2D(texture, slot)
                }
            }();
            this.setTexture = function() {
                var warned = false;
                return function setTexture(texture, slot) {
                    if (!warned) {
                        console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.");
                        warned = true
                    }
                    textures.setTexture2D(texture, slot)
                }
            }();
            this.setTextureCube = function() {
                var warned = false;
                return function setTextureCube(texture, slot) {
                    if (texture && texture.isWebGLRenderTargetCube) {
                        if (!warned) {
                            console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.");
                            warned = true
                        }
                        texture = texture.texture
                    }
                    if (texture && texture.isCubeTexture || Array.isArray(texture.image) && texture.image.length === 6) {
                        textures.setTextureCube(texture, slot)
                    } else {
                        textures.setTextureCubeDynamic(texture, slot)
                    }
                }
            }();
            this.setFramebuffer = function(value) {
                _framebuffer = value
            };
            this.getRenderTarget = function() {
                return _currentRenderTarget
            };
            this.setRenderTarget = function(renderTarget) {
                _currentRenderTarget = renderTarget;
                if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {
                    textures.setupRenderTarget(renderTarget)
                }
                var framebuffer = _framebuffer;
                var isCube = false;
                if (renderTarget) {
                    var __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
                    if (renderTarget.isWebGLRenderTargetCube) {
                        framebuffer = __webglFramebuffer[renderTarget.activeCubeFace];
                        isCube = true
                    } else {
                        framebuffer = __webglFramebuffer
                    }
                    _currentViewport.copy(renderTarget.viewport);
                    _currentScissor.copy(renderTarget.scissor);
                    _currentScissorTest = renderTarget.scissorTest
                } else {
                    _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio);
                    _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio);
                    _currentScissorTest = _scissorTest
                }
                if (_currentFramebuffer !== framebuffer) {
                    _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                    _currentFramebuffer = framebuffer
                }
                state.viewport(_currentViewport);
                state.scissor(_currentScissor);
                state.setScissorTest(_currentScissorTest);
                if (isCube) {
                    var textureProperties = properties.get(renderTarget.texture);
                    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel)
                }
            };
            this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer) {
                if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
                    console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                    return
                }
                var framebuffer = properties.get(renderTarget).__webglFramebuffer;
                if (framebuffer) {
                    var restore = false;
                    if (framebuffer !== _currentFramebuffer) {
                        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                        restore = true
                    }
                    try {
                        var texture = renderTarget.texture;
                        var textureFormat = texture.format;
                        var textureType = texture.type;
                        if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
                            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                            return
                        }
                        if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && !(textureType === FloatType && (capabilities.isWebGL2 || extensions.get("OES_texture_float") || extensions.get("WEBGL_color_buffer_float"))) && !(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get("EXT_color_buffer_float") : extensions.get("EXT_color_buffer_half_float")))) {
                            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                            return
                        }
                        if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {
                            if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
                                _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer)
                            }
                        } else {
                            console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")
                        }
                    } finally {
                        if (restore) {
                            _gl.bindFramebuffer(_gl.FRAMEBUFFER, _currentFramebuffer)
                        }
                    }
                }
            };
            this.copyFramebufferToTexture = function(position, texture, level) {
                var width = texture.image.width;
                var height = texture.image.height;
                var glFormat = utils.convert(texture.format);
                this.setTexture2D(texture, 0);
                _gl.copyTexImage2D(_gl.TEXTURE_2D, level || 0, glFormat, position.x, position.y, width, height, 0)
            };
            this.copyTextureToTexture = function(position, srcTexture, dstTexture, level) {
                var width = srcTexture.image.width;
                var height = srcTexture.image.height;
                var glFormat = utils.convert(dstTexture.format);
                var glType = utils.convert(dstTexture.type);
                this.setTexture2D(dstTexture, 0);
                if (srcTexture.isDataTexture) {
                    _gl.texSubImage2D(_gl.TEXTURE_2D, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data)
                } else {
                    _gl.texSubImage2D(_gl.TEXTURE_2D, level || 0, position.x, position.y, glFormat, glType, srcTexture.image)
                }
            }
        }
        function FogExp2(color, density) {
            this.name = "";
            this.color = new Color(color);
            this.density = density !== undefined ? density : 25e-5
        }
        FogExp2.prototype.isFogExp2 = true;
        FogExp2.prototype.clone = function() {
            return new FogExp2(this.color, this.density)
        };
        FogExp2.prototype.toJSON = function() {
            return {
                type: "FogExp2",
                color: this.color.getHex(),
                density: this.density
            }
        };
        function Fog(color, near, far) {
            this.name = "";
            this.color = new Color(color);
            this.near = near !== undefined ? near : 1;
            this.far = far !== undefined ? far : 1e3
        }
        Fog.prototype.isFog = true;
        Fog.prototype.clone = function() {
            return new Fog(this.color, this.near, this.far)
        };
        Fog.prototype.toJSON = function() {
            return {
                type: "Fog",
                color: this.color.getHex(),
                near: this.near,
                far: this.far
            }
        };
        function Scene() {
            Object3D.call(this);
            this.type = "Scene";
            this.background = null;
            this.fog = null;
            this.overrideMaterial = null;
            this.autoUpdate = true
        }
        Scene.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Scene,
            copy: function(source, recursive) {
                Object3D.prototype.copy.call(this, source, recursive);
                if (source.background !== null)
                    this.background = source.background.clone();
                if (source.fog !== null)
                    this.fog = source.fog.clone();
                if (source.overrideMaterial !== null)
                    this.overrideMaterial = source.overrideMaterial.clone();
                this.autoUpdate = source.autoUpdate;
                this.matrixAutoUpdate = source.matrixAutoUpdate;
                return this
            },
            toJSON: function(meta) {
                var data = Object3D.prototype.toJSON.call(this, meta);
                if (this.background !== null)
                    data.object.background = this.background.toJSON(meta);
                if (this.fog !== null)
                    data.object.fog = this.fog.toJSON();
                return data
            }
        });
        function InterleavedBuffer(array, stride) {
            this.array = array;
            this.stride = stride;
            this.count = array !== undefined ? array.length / stride : 0;
            this.dynamic = false;
            this.updateRange = {
                offset: 0,
                count: -1
            };
            this.version = 0
        }
        Object.defineProperty(InterleavedBuffer.prototype, "needsUpdate", {
            set: function(value) {
                if (value === true)
                    this.version++
            }
        });
        Object.assign(InterleavedBuffer.prototype, {
            isInterleavedBuffer: true,
            onUploadCallback: function() {},
            setArray: function(array) {
                if (Array.isArray(array)) {
                    throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")
                }
                this.count = array !== undefined ? array.length / this.stride : 0;
                this.array = array;
                return this
            },
            setDynamic: function(value) {
                this.dynamic = value;
                return this
            },
            copy: function(source) {
                this.array = new source.array.constructor(source.array);
                this.count = source.count;
                this.stride = source.stride;
                this.dynamic = source.dynamic;
                return this
            },
            copyAt: function(index1, attribute, index2) {
                index1 *= this.stride;
                index2 *= attribute.stride;
                for (var i = 0, l = this.stride; i < l; i++) {
                    this.array[index1 + i] = attribute.array[index2 + i]
                }
                return this
            },
            set: function(value, offset) {
                if (offset === undefined)
                    offset = 0;
                this.array.set(value, offset);
                return this
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            onUpload: function(callback) {
                this.onUploadCallback = callback;
                return this
            }
        });
        function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {
            this.data = interleavedBuffer;
            this.itemSize = itemSize;
            this.offset = offset;
            this.normalized = normalized === true
        }
        Object.defineProperties(InterleavedBufferAttribute.prototype, {
            count: {
                get: function() {
                    return this.data.count
                }
            },
            array: {
                get: function() {
                    return this.data.array
                }
            }
        });
        Object.assign(InterleavedBufferAttribute.prototype, {
            isInterleavedBufferAttribute: true,
            setX: function(index, x) {
                this.data.array[index * this.data.stride + this.offset] = x;
                return this
            },
            setY: function(index, y) {
                this.data.array[index * this.data.stride + this.offset + 1] = y;
                return this
            },
            setZ: function(index, z) {
                this.data.array[index * this.data.stride + this.offset + 2] = z;
                return this
            },
            setW: function(index, w) {
                this.data.array[index * this.data.stride + this.offset + 3] = w;
                return this
            },
            getX: function(index) {
                return this.data.array[index * this.data.stride + this.offset]
            },
            getY: function(index) {
                return this.data.array[index * this.data.stride + this.offset + 1]
            },
            getZ: function(index) {
                return this.data.array[index * this.data.stride + this.offset + 2]
            },
            getW: function(index) {
                return this.data.array[index * this.data.stride + this.offset + 3]
            },
            setXY: function(index, x, y) {
                index = index * this.data.stride + this.offset;
                this.data.array[index + 0] = x;
                this.data.array[index + 1] = y;
                return this
            },
            setXYZ: function(index, x, y, z) {
                index = index * this.data.stride + this.offset;
                this.data.array[index + 0] = x;
                this.data.array[index + 1] = y;
                this.data.array[index + 2] = z;
                return this
            },
            setXYZW: function(index, x, y, z, w) {
                index = index * this.data.stride + this.offset;
                this.data.array[index + 0] = x;
                this.data.array[index + 1] = y;
                this.data.array[index + 2] = z;
                this.data.array[index + 3] = w;
                return this
            }
        });
        function SpriteMaterial(parameters) {
            Material.call(this);
            this.type = "SpriteMaterial";
            this.color = new Color(16777215);
            this.map = null;
            this.rotation = 0;
            this.lights = false;
            this.transparent = true;
            this.setValues(parameters)
        }
        SpriteMaterial.prototype = Object.create(Material.prototype);
        SpriteMaterial.prototype.constructor = SpriteMaterial;
        SpriteMaterial.prototype.isSpriteMaterial = true;
        SpriteMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.color.copy(source.color);
            this.map = source.map;
            this.rotation = source.rotation;
            return this
        };
        var geometry;
        function Sprite(material) {
            Object3D.call(this);
            this.type = "Sprite";
            if (geometry === undefined) {
                geometry = new BufferGeometry;
                var float32Array = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]);
                var interleavedBuffer = new InterleavedBuffer(float32Array, 5);
                geometry.setIndex([0, 1, 2, 0, 2, 3]);
                geometry.addAttribute("position", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
                geometry.addAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false))
            }
            this.geometry = geometry;
            this.material = material !== undefined ? material : new SpriteMaterial;
            this.center = new Vector2(.5, .5)
        }
        Sprite.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Sprite,
            isSprite: true,
            raycast: function() {
                var intersectPoint = new Vector3;
                var worldScale = new Vector3;
                var mvPosition = new Vector3;
                var alignedPosition = new Vector2;
                var rotatedPosition = new Vector2;
                var viewWorldMatrix = new Matrix4;
                var vA = new Vector3;
                var vB = new Vector3;
                var vC = new Vector3;
                function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
                    alignedPosition.subVectors(vertexPosition, center).addScalar(.5).multiply(scale);
                    if (sin !== undefined) {
                        rotatedPosition.x = cos * alignedPosition.x - sin * alignedPosition.y;
                        rotatedPosition.y = sin * alignedPosition.x + cos * alignedPosition.y
                    } else {
                        rotatedPosition.copy(alignedPosition)
                    }
                    vertexPosition.copy(mvPosition);
                    vertexPosition.x += rotatedPosition.x;
                    vertexPosition.y += rotatedPosition.y;
                    vertexPosition.applyMatrix4(viewWorldMatrix)
                }
                return function raycast(raycaster, intersects) {
                    worldScale.setFromMatrixScale(this.matrixWorld);
                    viewWorldMatrix.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld);
                    mvPosition.setFromMatrixPosition(this.modelViewMatrix);
                    var rotation = this.material.rotation;
                    var sin,
                        cos;
                    if (rotation !== 0) {
                        cos = Math.cos(rotation);
                        sin = Math.sin(rotation)
                    }
                    var center = this.center;
                    transformVertex(vA.set(-.5, -.5, 0), mvPosition, center, worldScale, sin, cos);
                    transformVertex(vB.set(.5, -.5, 0), mvPosition, center, worldScale, sin, cos);
                    transformVertex(vC.set(.5, .5, 0), mvPosition, center, worldScale, sin, cos);
                    var intersect = raycaster.ray.intersectTriangle(vA, vB, vC, false, intersectPoint);
                    if (intersect === null) {
                        transformVertex(vB.set(-.5, .5, 0), mvPosition, center, worldScale, sin, cos);
                        intersect = raycaster.ray.intersectTriangle(vA, vC, vB, false, intersectPoint);
                        if (intersect === null) {
                            return
                        }
                    }
                    var distance = raycaster.ray.origin.distanceTo(intersectPoint);
                    if (distance < raycaster.near || distance > raycaster.far)
                        return;
                    intersects.push({
                        distance: distance,
                        point: intersectPoint.clone(),
                        face: null,
                        object: this
                    })
                }
            }(),
            clone: function() {
                return new this.constructor(this.material).copy(this)
            },
            copy: function(source) {
                Object3D.prototype.copy.call(this, source);
                if (source.center !== undefined)
                    this.center.copy(source.center);
                return this
            }
        });
        function LOD() {
            Object3D.call(this);
            this.type = "LOD";
            Object.defineProperties(this, {
                levels: {
                    enumerable: true,
                    value: []
                }
            })
        }
        LOD.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: LOD,
            copy: function(source) {
                Object3D.prototype.copy.call(this, source, false);
                var levels = source.levels;
                for (var i = 0, l = levels.length; i < l; i++) {
                    var level = levels[i];
                    this.addLevel(level.object.clone(), level.distance)
                }
                return this
            },
            addLevel: function(object, distance) {
                if (distance === undefined)
                    distance = 0;
                distance = Math.abs(distance);
                var levels = this.levels;
                for (var l = 0; l < levels.length; l++) {
                    if (distance < levels[l].distance) {
                        break
                    }
                }
                levels.splice(l, 0, {
                    distance: distance,
                    object: object
                });
                this.add(object)
            },
            getObjectForDistance: function(distance) {
                var levels = this.levels;
                for (var i = 1, l = levels.length; i < l; i++) {
                    if (distance < levels[i].distance) {
                        break
                    }
                }
                return levels[i - 1].object
            },
            raycast: function() {
                var matrixPosition = new Vector3;
                return function raycast(raycaster, intersects) {
                    matrixPosition.setFromMatrixPosition(this.matrixWorld);
                    var distance = raycaster.ray.origin.distanceTo(matrixPosition);
                    this.getObjectForDistance(distance).raycast(raycaster, intersects)
                }
            }(),
            update: function() {
                var v1 = new Vector3;
                var v2 = new Vector3;
                return function update(camera) {
                    var levels = this.levels;
                    if (levels.length > 1) {
                        v1.setFromMatrixPosition(camera.matrixWorld);
                        v2.setFromMatrixPosition(this.matrixWorld);
                        var distance = v1.distanceTo(v2);
                        levels[0].object.visible = true;
                        for (var i = 1, l = levels.length; i < l; i++) {
                            if (distance >= levels[i].distance) {
                                levels[i - 1].object.visible = false;
                                levels[i].object.visible = true
                            } else {
                                break
                            }
                        }
                        for (; i < l; i++) {
                            levels[i].object.visible = false
                        }
                    }
                }
            }(),
            toJSON: function(meta) {
                var data = Object3D.prototype.toJSON.call(this, meta);
                data.object.levels = [];
                var levels = this.levels;
                for (var i = 0, l = levels.length; i < l; i++) {
                    var level = levels[i];
                    data.object.levels.push({
                        object: level.object.uuid,
                        distance: level.distance
                    })
                }
                return data
            }
        });
        function Skeleton(bones, boneInverses) {
            bones = bones || [];
            this.bones = bones.slice(0);
            this.boneMatrices = new Float32Array(this.bones.length * 16);
            if (boneInverses === undefined) {
                this.calculateInverses()
            } else {
                if (this.bones.length === boneInverses.length) {
                    this.boneInverses = boneInverses.slice(0)
                } else {
                    console.warn("THREE.Skeleton boneInverses is the wrong length.");
                    this.boneInverses = [];
                    for (var i = 0, il = this.bones.length; i < il; i++) {
                        this.boneInverses.push(new Matrix4)
                    }
                }
            }
        }
        Object.assign(Skeleton.prototype, {
            calculateInverses: function() {
                this.boneInverses = [];
                for (var i = 0, il = this.bones.length; i < il; i++) {
                    var inverse = new Matrix4;
                    if (this.bones[i]) {
                        inverse.getInverse(this.bones[i].matrixWorld)
                    }
                    this.boneInverses.push(inverse)
                }
            },
            pose: function() {
                var bone,
                    i,
                    il;
                for (i = 0, il = this.bones.length; i < il; i++) {
                    bone = this.bones[i];
                    if (bone) {
                        bone.matrixWorld.getInverse(this.boneInverses[i])
                    }
                }
                for (i = 0, il = this.bones.length; i < il; i++) {
                    bone = this.bones[i];
                    if (bone) {
                        if (bone.parent && bone.parent.isBone) {
                            bone.matrix.getInverse(bone.parent.matrixWorld);
                            bone.matrix.multiply(bone.matrixWorld)
                        } else {
                            bone.matrix.copy(bone.matrixWorld)
                        }
                        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale)
                    }
                }
            },
            update: function() {
                var offsetMatrix = new Matrix4;
                var identityMatrix = new Matrix4;
                return function update() {
                    var bones = this.bones;
                    var boneInverses = this.boneInverses;
                    var boneMatrices = this.boneMatrices;
                    var boneTexture = this.boneTexture;
                    for (var i = 0, il = bones.length; i < il; i++) {
                        var matrix = bones[i] ? bones[i].matrixWorld : identityMatrix;
                        offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
                        offsetMatrix.toArray(boneMatrices, i * 16)
                    }
                    if (boneTexture !== undefined) {
                        boneTexture.needsUpdate = true
                    }
                }
            }(),
            clone: function() {
                return new Skeleton(this.bones, this.boneInverses)
            },
            getBoneByName: function(name) {
                for (var i = 0, il = this.bones.length; i < il; i++) {
                    var bone = this.bones[i];
                    if (bone.name === name) {
                        return bone
                    }
                }
                return undefined
            }
        });
        function Bone() {
            Object3D.call(this);
            this.type = "Bone"
        }
        Bone.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Bone,
            isBone: true
        });
        function SkinnedMesh(geometry, material) {
            Mesh.call(this, geometry, material);
            this.type = "SkinnedMesh";
            this.bindMode = "attached";
            this.bindMatrix = new Matrix4;
            this.bindMatrixInverse = new Matrix4;
            var bones = this.initBones();
            var skeleton = new Skeleton(bones);
            this.bind(skeleton, this.matrixWorld);
            this.normalizeSkinWeights()
        }
        SkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
            constructor: SkinnedMesh,
            isSkinnedMesh: true,
            initBones: function() {
                var bones = [],
                    bone,
                    gbone;
                var i,
                    il;
                if (this.geometry && this.geometry.bones !== undefined) {
                    for (i = 0, il = this.geometry.bones.length; i < il; i++) {
                        gbone = this.geometry.bones[i];
                        bone = new Bone;
                        bones.push(bone);
                        bone.name = gbone.name;
                        bone.position.fromArray(gbone.pos);
                        bone.quaternion.fromArray(gbone.rotq);
                        if (gbone.scl !== undefined)
                            bone.scale.fromArray(gbone.scl)
                    }
                    for (i = 0, il = this.geometry.bones.length; i < il; i++) {
                        gbone = this.geometry.bones[i];
                        if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {
                            bones[gbone.parent].add(bones[i])
                        } else {
                            this.add(bones[i])
                        }
                    }
                }
                this.updateMatrixWorld(true);
                return bones
            },
            bind: function(skeleton, bindMatrix) {
                this.skeleton = skeleton;
                if (bindMatrix === undefined) {
                    this.updateMatrixWorld(true);
                    this.skeleton.calculateInverses();
                    bindMatrix = this.matrixWorld
                }
                this.bindMatrix.copy(bindMatrix);
                this.bindMatrixInverse.getInverse(bindMatrix)
            },
            pose: function() {
                this.skeleton.pose()
            },
            normalizeSkinWeights: function() {
                var scale,
                    i;
                if (this.geometry && this.geometry.isGeometry) {
                    for (i = 0; i < this.geometry.skinWeights.length; i++) {
                        var sw = this.geometry.skinWeights[i];
                        scale = 1 / sw.manhattanLength();
                        if (scale !== Infinity) {
                            sw.multiplyScalar(scale)
                        } else {
                            sw.set(1, 0, 0, 0)
                        }
                    }
                } else if (this.geometry && this.geometry.isBufferGeometry) {
                    var vec = new Vector4;
                    var skinWeight = this.geometry.attributes.skinWeight;
                    for (i = 0; i < skinWeight.count; i++) {
                        vec.x = skinWeight.getX(i);
                        vec.y = skinWeight.getY(i);
                        vec.z = skinWeight.getZ(i);
                        vec.w = skinWeight.getW(i);
                        scale = 1 / vec.manhattanLength();
                        if (scale !== Infinity) {
                            vec.multiplyScalar(scale)
                        } else {
                            vec.set(1, 0, 0, 0)
                        }
                        skinWeight.setXYZW(i, vec.x, vec.y, vec.z, vec.w)
                    }
                }
            },
            updateMatrixWorld: function(force) {
                Mesh.prototype.updateMatrixWorld.call(this, force);
                if (this.bindMode === "attached") {
                    this.bindMatrixInverse.getInverse(this.matrixWorld)
                } else if (this.bindMode === "detached") {
                    this.bindMatrixInverse.getInverse(this.bindMatrix)
                } else {
                    console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode)
                }
            },
            clone: function() {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        });
        function LineBasicMaterial(parameters) {
            Material.call(this);
            this.type = "LineBasicMaterial";
            this.color = new Color(16777215);
            this.linewidth = 1;
            this.linecap = "round";
            this.linejoin = "round";
            this.lights = false;
            this.setValues(parameters)
        }
        LineBasicMaterial.prototype = Object.create(Material.prototype);
        LineBasicMaterial.prototype.constructor = LineBasicMaterial;
        LineBasicMaterial.prototype.isLineBasicMaterial = true;
        LineBasicMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.color.copy(source.color);
            this.linewidth = source.linewidth;
            this.linecap = source.linecap;
            this.linejoin = source.linejoin;
            return this
        };
        function Line(geometry, material, mode) {
            if (mode === 1) {
                console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.")
            }
            Object3D.call(this);
            this.type = "Line";
            this.geometry = geometry !== undefined ? geometry : new BufferGeometry;
            this.material = material !== undefined ? material : new LineBasicMaterial({
                color: Math.random() * 16777215
            })
        }
        Line.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Line,
            isLine: true,
            computeLineDistances: function() {
                var start = new Vector3;
                var end = new Vector3;
                return function computeLineDistances() {
                    var geometry = this.geometry;
                    if (geometry.isBufferGeometry) {
                        if (geometry.index === null) {
                            var positionAttribute = geometry.attributes.position;
                            var lineDistances = [0];
                            for (var i = 1, l = positionAttribute.count; i < l; i++) {
                                start.fromBufferAttribute(positionAttribute, i - 1);
                                end.fromBufferAttribute(positionAttribute, i);
                                lineDistances[i] = lineDistances[i - 1];
                                lineDistances[i] += start.distanceTo(end)
                            }
                            geometry.addAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1))
                        } else {
                            console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")
                        }
                    } else if (geometry.isGeometry) {
                        var vertices = geometry.vertices;
                        var lineDistances = geometry.lineDistances;
                        lineDistances[0] = 0;
                        for (var i = 1, l = vertices.length; i < l; i++) {
                            lineDistances[i] = lineDistances[i - 1];
                            lineDistances[i] += vertices[i - 1].distanceTo(vertices[i])
                        }
                    }
                    return this
                }
            }(),
            raycast: function() {
                var inverseMatrix = new Matrix4;
                var ray = new Ray;
                var sphere = new Sphere;
                return function raycast(raycaster, intersects) {
                    var precision = raycaster.linePrecision;
                    var precisionSq = precision * precision;
                    var geometry = this.geometry;
                    var matrixWorld = this.matrixWorld;
                    if (geometry.boundingSphere === null)
                        geometry.computeBoundingSphere();
                    sphere.copy(geometry.boundingSphere);
                    sphere.applyMatrix4(matrixWorld);
                    if (raycaster.ray.intersectsSphere(sphere) === false)
                        return;
                    inverseMatrix.getInverse(matrixWorld);
                    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);
                    var vStart = new Vector3;
                    var vEnd = new Vector3;
                    var interSegment = new Vector3;
                    var interRay = new Vector3;
                    var step = this && this.isLineSegments ? 2 : 1;
                    if (geometry.isBufferGeometry) {
                        var index = geometry.index;
                        var attributes = geometry.attributes;
                        var positions = attributes.position.array;
                        if (index !== null) {
                            var indices = index.array;
                            for (var i = 0, l = indices.length - 1; i < l; i += step) {
                                var a = indices[i];
                                var b = indices[i + 1];
                                vStart.fromArray(positions, a * 3);
                                vEnd.fromArray(positions, b * 3);
                                var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                                if (distSq > precisionSq)
                                    continue;
                                interRay.applyMatrix4(this.matrixWorld);
                                var distance = raycaster.ray.origin.distanceTo(interRay);
                                if (distance < raycaster.near || distance > raycaster.far)
                                    continue;
                                intersects.push({
                                    distance: distance,
                                    point: interSegment.clone().applyMatrix4(this.matrixWorld),
                                    index: i,
                                    face: null,
                                    faceIndex: null,
                                    object: this
                                })
                            }
                        } else {
                            for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {
                                vStart.fromArray(positions, 3 * i);
                                vEnd.fromArray(positions, 3 * i + 3);
                                var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                                if (distSq > precisionSq)
                                    continue;
                                interRay.applyMatrix4(this.matrixWorld);
                                var distance = raycaster.ray.origin.distanceTo(interRay);
                                if (distance < raycaster.near || distance > raycaster.far)
                                    continue;
                                intersects.push({
                                    distance: distance,
                                    point: interSegment.clone().applyMatrix4(this.matrixWorld),
                                    index: i,
                                    face: null,
                                    faceIndex: null,
                                    object: this
                                })
                            }
                        }
                    } else if (geometry.isGeometry) {
                        var vertices = geometry.vertices;
                        var nbVertices = vertices.length;
                        for (var i = 0; i < nbVertices - 1; i += step) {
                            var distSq = ray.distanceSqToSegment(vertices[i], vertices[i + 1], interRay, interSegment);
                            if (distSq > precisionSq)
                                continue;
                            interRay.applyMatrix4(this.matrixWorld);
                            var distance = raycaster.ray.origin.distanceTo(interRay);
                            if (distance < raycaster.near || distance > raycaster.far)
                                continue;
                            intersects.push({
                                distance: distance,
                                point: interSegment.clone().applyMatrix4(this.matrixWorld),
                                index: i,
                                face: null,
                                faceIndex: null,
                                object: this
                            })
                        }
                    }
                }
            }(),
            clone: function() {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        });
        function LineSegments(geometry, material) {
            Line.call(this, geometry, material);
            this.type = "LineSegments"
        }
        LineSegments.prototype = Object.assign(Object.create(Line.prototype), {
            constructor: LineSegments,
            isLineSegments: true,
            computeLineDistances: function() {
                var start = new Vector3;
                var end = new Vector3;
                return function computeLineDistances() {
                    var geometry = this.geometry;
                    if (geometry.isBufferGeometry) {
                        if (geometry.index === null) {
                            var positionAttribute = geometry.attributes.position;
                            var lineDistances = [];
                            for (var i = 0, l = positionAttribute.count; i < l; i += 2) {
                                start.fromBufferAttribute(positionAttribute, i);
                                end.fromBufferAttribute(positionAttribute, i + 1);
                                lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
                                lineDistances[i + 1] = lineDistances[i] + start.distanceTo(end)
                            }
                            geometry.addAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1))
                        } else {
                            console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")
                        }
                    } else if (geometry.isGeometry) {
                        var vertices = geometry.vertices;
                        var lineDistances = geometry.lineDistances;
                        for (var i = 0, l = vertices.length; i < l; i += 2) {
                            start.copy(vertices[i]);
                            end.copy(vertices[i + 1]);
                            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
                            lineDistances[i + 1] = lineDistances[i] + start.distanceTo(end)
                        }
                    }
                    return this
                }
            }()
        });
        function LineLoop(geometry, material) {
            Line.call(this, geometry, material);
            this.type = "LineLoop"
        }
        LineLoop.prototype = Object.assign(Object.create(Line.prototype), {
            constructor: LineLoop,
            isLineLoop: true
        });
        function PointsMaterial(parameters) {
            Material.call(this);
            this.type = "PointsMaterial";
            this.color = new Color(16777215);
            this.map = null;
            this.size = 1;
            this.sizeAttenuation = true;
            this.morphTargets = false;
            this.lights = false;
            this.setValues(parameters)
        }
        PointsMaterial.prototype = Object.create(Material.prototype);
        PointsMaterial.prototype.constructor = PointsMaterial;
        PointsMaterial.prototype.isPointsMaterial = true;
        PointsMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.color.copy(source.color);
            this.map = source.map;
            this.size = source.size;
            this.sizeAttenuation = source.sizeAttenuation;
            this.morphTargets = source.morphTargets;
            return this
        };
        function Points(geometry, material) {
            Object3D.call(this);
            this.type = "Points";
            this.geometry = geometry !== undefined ? geometry : new BufferGeometry;
            this.material = material !== undefined ? material : new PointsMaterial({
                color: Math.random() * 16777215
            })
        }
        Points.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Points,
            isPoints: true,
            raycast: function() {
                var inverseMatrix = new Matrix4;
                var ray = new Ray;
                var sphere = new Sphere;
                return function raycast(raycaster, intersects) {
                    var object = this;
                    var geometry = this.geometry;
                    var matrixWorld = this.matrixWorld;
                    var threshold = raycaster.params.Points.threshold;
                    if (geometry.boundingSphere === null)
                        geometry.computeBoundingSphere();
                    sphere.copy(geometry.boundingSphere);
                    sphere.applyMatrix4(matrixWorld);
                    sphere.radius += threshold;
                    if (raycaster.ray.intersectsSphere(sphere) === false)
                        return;
                    inverseMatrix.getInverse(matrixWorld);
                    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);
                    var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
                    var localThresholdSq = localThreshold * localThreshold;
                    var position = new Vector3;
                    var intersectPoint = new Vector3;
                    function testPoint(point, index) {
                        var rayPointDistanceSq = ray.distanceSqToPoint(point);
                        if (rayPointDistanceSq < localThresholdSq) {
                            ray.closestPointToPoint(point, intersectPoint);
                            intersectPoint.applyMatrix4(matrixWorld);
                            var distance = raycaster.ray.origin.distanceTo(intersectPoint);
                            if (distance < raycaster.near || distance > raycaster.far)
                                return;
                            intersects.push({
                                distance: distance,
                                distanceToRay: Math.sqrt(rayPointDistanceSq),
                                point: intersectPoint.clone(),
                                index: index,
                                face: null,
                                object: object
                            })
                        }
                    }
                    if (geometry.isBufferGeometry) {
                        var index = geometry.index;
                        var attributes = geometry.attributes;
                        var positions = attributes.position.array;
                        if (index !== null) {
                            var indices = index.array;
                            for (var i = 0, il = indices.length; i < il; i++) {
                                var a = indices[i];
                                position.fromArray(positions, a * 3);
                                testPoint(position, a)
                            }
                        } else {
                            for (var i = 0, l = positions.length / 3; i < l; i++) {
                                position.fromArray(positions, i * 3);
                                testPoint(position, i)
                            }
                        }
                    } else {
                        var vertices = geometry.vertices;
                        for (var i = 0, l = vertices.length; i < l; i++) {
                            testPoint(vertices[i], i)
                        }
                    }
                }
            }(),
            clone: function() {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        });
        function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
            Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
            this.generateMipmaps = false
        }
        VideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {
            constructor: VideoTexture,
            isVideoTexture: true,
            update: function() {
                var video = this.image;
                if (video.readyState >= video.HAVE_CURRENT_DATA) {
                    this.needsUpdate = true
                }
            }
        });
        function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
            Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
            this.image = {
                width: width,
                height: height
            };
            this.mipmaps = mipmaps;
            this.flipY = false;
            this.generateMipmaps = false
        }
        CompressedTexture.prototype = Object.create(Texture.prototype);
        CompressedTexture.prototype.constructor = CompressedTexture;
        CompressedTexture.prototype.isCompressedTexture = true;
        function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
            Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
            this.needsUpdate = true
        }
        CanvasTexture.prototype = Object.create(Texture.prototype);
        CanvasTexture.prototype.constructor = CanvasTexture;
        CanvasTexture.prototype.isCanvasTexture = true;
        function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
            format = format !== undefined ? format : DepthFormat;
            if (format !== DepthFormat && format !== DepthStencilFormat) {
                throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat")
            }
            if (type === undefined && format === DepthFormat)
                type = UnsignedShortType;
            if (type === undefined && format === DepthStencilFormat)
                type = UnsignedInt248Type;
            Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
            this.image = {
                width: width,
                height: height
            };
            this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
            this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
            this.flipY = false;
            this.generateMipmaps = false
        }
        DepthTexture.prototype = Object.create(Texture.prototype);
        DepthTexture.prototype.constructor = DepthTexture;
        DepthTexture.prototype.isDepthTexture = true;
        function WireframeGeometry(geometry) {
            BufferGeometry.call(this);
            this.type = "WireframeGeometry";
            var vertices = [];
            var i,
                j,
                l,
                o,
                ol;
            var edge = [0, 0],
                edges = {},
                e,
                edge1,
                edge2;
            var key,
                keys = ["a", "b", "c"];
            var vertex;
            if (geometry && geometry.isGeometry) {
                var faces = geometry.faces;
                for (i = 0, l = faces.length; i < l; i++) {
                    var face = faces[i];
                    for (j = 0; j < 3; j++) {
                        edge1 = face[keys[j]];
                        edge2 = face[keys[(j + 1) % 3]];
                        edge[0] = Math.min(edge1, edge2);
                        edge[1] = Math.max(edge1, edge2);
                        key = edge[0] + "," + edge[1];
                        if (edges[key] === undefined) {
                            edges[key] = {
                                index1: edge[0],
                                index2: edge[1]
                            }
                        }
                    }
                }
                for (key in edges) {
                    e = edges[key];
                    vertex = geometry.vertices[e.index1];
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    vertex = geometry.vertices[e.index2];
                    vertices.push(vertex.x, vertex.y, vertex.z)
                }
            } else if (geometry && geometry.isBufferGeometry) {
                var position,
                    indices,
                    groups;
                var group,
                    start,
                    count;
                var index1,
                    index2;
                vertex = new Vector3;
                if (geometry.index !== null) {
                    position = geometry.attributes.position;
                    indices = geometry.index;
                    groups = geometry.groups;
                    if (groups.length === 0) {
                        groups = [{
                            start: 0,
                            count: indices.count,
                            materialIndex: 0
                        }]
                    }
                    for (o = 0, ol = groups.length; o < ol; ++o) {
                        group = groups[o];
                        start = group.start;
                        count = group.count;
                        for (i = start, l = start + count; i < l; i += 3) {
                            for (j = 0; j < 3; j++) {
                                edge1 = indices.getX(i + j);
                                edge2 = indices.getX(i + (j + 1) % 3);
                                edge[0] = Math.min(edge1, edge2);
                                edge[1] = Math.max(edge1, edge2);
                                key = edge[0] + "," + edge[1];
                                if (edges[key] === undefined) {
                                    edges[key] = {
                                        index1: edge[0],
                                        index2: edge[1]
                                    }
                                }
                            }
                        }
                    }
                    for (key in edges) {
                        e = edges[key];
                        vertex.fromBufferAttribute(position, e.index1);
                        vertices.push(vertex.x, vertex.y, vertex.z);
                        vertex.fromBufferAttribute(position, e.index2);
                        vertices.push(vertex.x, vertex.y, vertex.z)
                    }
                } else {
                    position = geometry.attributes.position;
                    for (i = 0, l = position.count / 3; i < l; i++) {
                        for (j = 0; j < 3; j++) {
                            index1 = 3 * i + j;
                            vertex.fromBufferAttribute(position, index1);
                            vertices.push(vertex.x, vertex.y, vertex.z);
                            index2 = 3 * i + (j + 1) % 3;
                            vertex.fromBufferAttribute(position, index2);
                            vertices.push(vertex.x, vertex.y, vertex.z)
                        }
                    }
                }
            }
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3))
        }
        WireframeGeometry.prototype = Object.create(BufferGeometry.prototype);
        WireframeGeometry.prototype.constructor = WireframeGeometry;
        function ParametricGeometry(func, slices, stacks) {
            Geometry.call(this);
            this.type = "ParametricGeometry";
            this.parameters = {
                func: func,
                slices: slices,
                stacks: stacks
            };
            this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));
            this.mergeVertices()
        }
        ParametricGeometry.prototype = Object.create(Geometry.prototype);
        ParametricGeometry.prototype.constructor = ParametricGeometry;
        function ParametricBufferGeometry(func, slices, stacks) {
            BufferGeometry.call(this);
            this.type = "ParametricBufferGeometry";
            this.parameters = {
                func: func,
                slices: slices,
                stacks: stacks
            };
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            var EPS = 1e-5;
            var normal = new Vector3;
            var p0 = new Vector3,
                p1 = new Vector3;
            var pu = new Vector3,
                pv = new Vector3;
            var i,
                j;
            if (func.length < 3) {
                console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.")
            }
            var sliceCount = slices + 1;
            for (i = 0; i <= stacks; i++) {
                var v = i / stacks;
                for (j = 0; j <= slices; j++) {
                    var u = j / slices;
                    func(u, v, p0);
                    vertices.push(p0.x, p0.y, p0.z);
                    if (u - EPS >= 0) {
                        func(u - EPS, v, p1);
                        pu.subVectors(p0, p1)
                    } else {
                        func(u + EPS, v, p1);
                        pu.subVectors(p1, p0)
                    }
                    if (v - EPS >= 0) {
                        func(u, v - EPS, p1);
                        pv.subVectors(p0, p1)
                    } else {
                        func(u, v + EPS, p1);
                        pv.subVectors(p1, p0)
                    }
                    normal.crossVectors(pu, pv).normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    uvs.push(u, v)
                }
            }
            for (i = 0; i < stacks; i++) {
                for (j = 0; j < slices; j++) {
                    var a = i * sliceCount + j;
                    var b = i * sliceCount + j + 1;
                    var c = (i + 1) * sliceCount + j + 1;
                    var d = (i + 1) * sliceCount + j;
                    indices.push(a, b, d);
                    indices.push(b, c, d)
                }
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2))
        }
        ParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
        function PolyhedronGeometry(vertices, indices, radius, detail) {
            Geometry.call(this);
            this.type = "PolyhedronGeometry";
            this.parameters = {
                vertices: vertices,
                indices: indices,
                radius: radius,
                detail: detail
            };
            this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices, indices, radius, detail));
            this.mergeVertices()
        }
        PolyhedronGeometry.prototype = Object.create(Geometry.prototype);
        PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;
        function PolyhedronBufferGeometry(vertices, indices, radius, detail) {
            BufferGeometry.call(this);
            this.type = "PolyhedronBufferGeometry";
            this.parameters = {
                vertices: vertices,
                indices: indices,
                radius: radius,
                detail: detail
            };
            radius = radius || 1;
            detail = detail || 0;
            var vertexBuffer = [];
            var uvBuffer = [];
            subdivide(detail);
            appplyRadius(radius);
            generateUVs();
            this.addAttribute("position", new Float32BufferAttribute(vertexBuffer, 3));
            this.addAttribute("normal", new Float32BufferAttribute(vertexBuffer.slice(), 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvBuffer, 2));
            if (detail === 0) {
                this.computeVertexNormals()
            } else {
                this.normalizeNormals()
            }
            function subdivide(detail) {
                var a = new Vector3;
                var b = new Vector3;
                var c = new Vector3;
                for (var i = 0; i < indices.length; i += 3) {
                    getVertexByIndex(indices[i + 0], a);
                    getVertexByIndex(indices[i + 1], b);
                    getVertexByIndex(indices[i + 2], c);
                    subdivideFace(a, b, c, detail)
                }
            }
            function subdivideFace(a, b, c, detail) {
                var cols = Math.pow(2, detail);
                var v = [];
                var i,
                    j;
                for (i = 0; i <= cols; i++) {
                    v[i] = [];
                    var aj = a.clone().lerp(c, i / cols);
                    var bj = b.clone().lerp(c, i / cols);
                    var rows = cols - i;
                    for (j = 0; j <= rows; j++) {
                        if (j === 0 && i === cols) {
                            v[i][j] = aj
                        } else {
                            v[i][j] = aj.clone().lerp(bj, j / rows)
                        }
                    }
                }
                for (i = 0; i < cols; i++) {
                    for (j = 0; j < 2 * (cols - i) - 1; j++) {
                        var k = Math.floor(j / 2);
                        if (j % 2 === 0) {
                            pushVertex(v[i][k + 1]);
                            pushVertex(v[i + 1][k]);
                            pushVertex(v[i][k])
                        } else {
                            pushVertex(v[i][k + 1]);
                            pushVertex(v[i + 1][k + 1]);
                            pushVertex(v[i + 1][k])
                        }
                    }
                }
            }
            function appplyRadius(radius) {
                var vertex = new Vector3;
                for (var i = 0; i < vertexBuffer.length; i += 3) {
                    vertex.x = vertexBuffer[i + 0];
                    vertex.y = vertexBuffer[i + 1];
                    vertex.z = vertexBuffer[i + 2];
                    vertex.normalize().multiplyScalar(radius);
                    vertexBuffer[i + 0] = vertex.x;
                    vertexBuffer[i + 1] = vertex.y;
                    vertexBuffer[i + 2] = vertex.z
                }
            }
            function generateUVs() {
                var vertex = new Vector3;
                for (var i = 0; i < vertexBuffer.length; i += 3) {
                    vertex.x = vertexBuffer[i + 0];
                    vertex.y = vertexBuffer[i + 1];
                    vertex.z = vertexBuffer[i + 2];
                    var u = azimuth(vertex) / 2 / Math.PI + .5;
                    var v = inclination(vertex) / Math.PI + .5;
                    uvBuffer.push(u, 1 - v)
                }
                correctUVs();
                correctSeam()
            }
            function correctSeam() {
                for (var i = 0; i < uvBuffer.length; i += 6) {
                    var x0 = uvBuffer[i + 0];
                    var x1 = uvBuffer[i + 2];
                    var x2 = uvBuffer[i + 4];
                    var max = Math.max(x0, x1, x2);
                    var min = Math.min(x0, x1, x2);
                    if (max > .9 && min < .1) {
                        if (x0 < .2)
                            uvBuffer[i + 0] += 1;
                        if (x1 < .2)
                            uvBuffer[i + 2] += 1;
                        if (x2 < .2)
                            uvBuffer[i + 4] += 1
                    }
                }
            }
            function pushVertex(vertex) {
                vertexBuffer.push(vertex.x, vertex.y, vertex.z)
            }
            function getVertexByIndex(index, vertex) {
                var stride = index * 3;
                vertex.x = vertices[stride + 0];
                vertex.y = vertices[stride + 1];
                vertex.z = vertices[stride + 2]
            }
            function correctUVs() {
                var a = new Vector3;
                var b = new Vector3;
                var c = new Vector3;
                var centroid = new Vector3;
                var uvA = new Vector2;
                var uvB = new Vector2;
                var uvC = new Vector2;
                for (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
                    a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
                    b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
                    c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
                    uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
                    uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
                    uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
                    centroid.copy(a).add(b).add(c).divideScalar(3);
                    var azi = azimuth(centroid);
                    correctUV(uvA, j + 0, a, azi);
                    correctUV(uvB, j + 2, b, azi);
                    correctUV(uvC, j + 4, c, azi)
                }
            }
            function correctUV(uv, stride, vector, azimuth) {
                if (azimuth < 0 && uv.x === 1) {
                    uvBuffer[stride] = uv.x - 1
                }
                if (vector.x === 0 && vector.z === 0) {
                    uvBuffer[stride] = azimuth / 2 / Math.PI + .5
                }
            }
            function azimuth(vector) {
                return Math.atan2(vector.z, -vector.x)
            }
            function inclination(vector) {
                return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z))
            }
        }
        PolyhedronBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;
        function TetrahedronGeometry(radius, detail) {
            Geometry.call(this);
            this.type = "TetrahedronGeometry";
            this.parameters = {
                radius: radius,
                detail: detail
            };
            this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail));
            this.mergeVertices()
        }
        TetrahedronGeometry.prototype = Object.create(Geometry.prototype);
        TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;
        function TetrahedronBufferGeometry(radius, detail) {
            var vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];
            var indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];
            PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);
            this.type = "TetrahedronBufferGeometry";
            this.parameters = {
                radius: radius,
                detail: detail
            }
        }
        TetrahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
        TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;
        function OctahedronGeometry(radius, detail) {
            Geometry.call(this);
            this.type = "OctahedronGeometry";
            this.parameters = {
                radius: radius,
                detail: detail
            };
            this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail));
            this.mergeVertices()
        }
        OctahedronGeometry.prototype = Object.create(Geometry.prototype);
        OctahedronGeometry.prototype.constructor = OctahedronGeometry;
        function OctahedronBufferGeometry(radius, detail) {
            var vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];
            var indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];
            PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);
            this.type = "OctahedronBufferGeometry";
            this.parameters = {
                radius: radius,
                detail: detail
            }
        }
        OctahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
        OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;
        function IcosahedronGeometry(radius, detail) {
            Geometry.call(this);
            this.type = "IcosahedronGeometry";
            this.parameters = {
                radius: radius,
                detail: detail
            };
            this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail));
            this.mergeVertices()
        }
        IcosahedronGeometry.prototype = Object.create(Geometry.prototype);
        IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;
        function IcosahedronBufferGeometry(radius, detail) {
            var t = (1 + Math.sqrt(5)) / 2;
            var vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];
            var indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];
            PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);
            this.type = "IcosahedronBufferGeometry";
            this.parameters = {
                radius: radius,
                detail: detail
            }
        }
        IcosahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
        IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;
        function DodecahedronGeometry(radius, detail) {
            Geometry.call(this);
            this.type = "DodecahedronGeometry";
            this.parameters = {
                radius: radius,
                detail: detail
            };
            this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail));
            this.mergeVertices()
        }
        DodecahedronGeometry.prototype = Object.create(Geometry.prototype);
        DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;
        function DodecahedronBufferGeometry(radius, detail) {
            var t = (1 + Math.sqrt(5)) / 2;
            var r = 1 / t;
            var vertices = [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];
            var indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];
            PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);
            this.type = "DodecahedronBufferGeometry";
            this.parameters = {
                radius: radius,
                detail: detail
            }
        }
        DodecahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
        DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;
        function TubeGeometry(path, tubularSegments, radius, radialSegments, closed, taper) {
            Geometry.call(this);
            this.type = "TubeGeometry";
            this.parameters = {
                path: path,
                tubularSegments: tubularSegments,
                radius: radius,
                radialSegments: radialSegments,
                closed: closed
            };
            if (taper !== undefined)
                console.warn("THREE.TubeGeometry: taper has been removed.");
            var bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed);
            this.tangents = bufferGeometry.tangents;
            this.normals = bufferGeometry.normals;
            this.binormals = bufferGeometry.binormals;
            this.fromBufferGeometry(bufferGeometry);
            this.mergeVertices()
        }
        TubeGeometry.prototype = Object.create(Geometry.prototype);
        TubeGeometry.prototype.constructor = TubeGeometry;
        function TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed) {
            BufferGeometry.call(this);
            this.type = "TubeBufferGeometry";
            this.parameters = {
                path: path,
                tubularSegments: tubularSegments,
                radius: radius,
                radialSegments: radialSegments,
                closed: closed
            };
            tubularSegments = tubularSegments || 64;
            radius = radius || 1;
            radialSegments = radialSegments || 8;
            closed = closed || false;
            var frames = path.computeFrenetFrames(tubularSegments, closed);
            this.tangents = frames.tangents;
            this.normals = frames.normals;
            this.binormals = frames.binormals;
            var vertex = new Vector3;
            var normal = new Vector3;
            var uv = new Vector2;
            var P = new Vector3;
            var i,
                j;
            var vertices = [];
            var normals = [];
            var uvs = [];
            var indices = [];
            generateBufferData();
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2));
            function generateBufferData() {
                for (i = 0; i < tubularSegments; i++) {
                    generateSegment(i)
                }
                generateSegment(closed === false ? tubularSegments : 0);
                generateUVs();
                generateIndices()
            }
            function generateSegment(i) {
                P = path.getPointAt(i / tubularSegments, P);
                var N = frames.normals[i];
                var B = frames.binormals[i];
                for (j = 0; j <= radialSegments; j++) {
                    var v = j / radialSegments * Math.PI * 2;
                    var sin = Math.sin(v);
                    var cos = -Math.cos(v);
                    normal.x = cos * N.x + sin * B.x;
                    normal.y = cos * N.y + sin * B.y;
                    normal.z = cos * N.z + sin * B.z;
                    normal.normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    vertex.x = P.x + radius * normal.x;
                    vertex.y = P.y + radius * normal.y;
                    vertex.z = P.z + radius * normal.z;
                    vertices.push(vertex.x, vertex.y, vertex.z)
                }
            }
            function generateIndices() {
                for (j = 1; j <= tubularSegments; j++) {
                    for (i = 1; i <= radialSegments; i++) {
                        var a = (radialSegments + 1) * (j - 1) + (i - 1);
                        var b = (radialSegments + 1) * j + (i - 1);
                        var c = (radialSegments + 1) * j + i;
                        var d = (radialSegments + 1) * (j - 1) + i;
                        indices.push(a, b, d);
                        indices.push(b, c, d)
                    }
                }
            }
            function generateUVs() {
                for (i = 0; i <= tubularSegments; i++) {
                    for (j = 0; j <= radialSegments; j++) {
                        uv.x = i / tubularSegments;
                        uv.y = j / radialSegments;
                        uvs.push(uv.x, uv.y)
                    }
                }
            }
        }
        TubeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;
        function TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q, heightScale) {
            Geometry.call(this);
            this.type = "TorusKnotGeometry";
            this.parameters = {
                radius: radius,
                tube: tube,
                tubularSegments: tubularSegments,
                radialSegments: radialSegments,
                p: p,
                q: q
            };
            if (heightScale !== undefined)
                console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
            this.fromBufferGeometry(new TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q));
            this.mergeVertices()
        }
        TorusKnotGeometry.prototype = Object.create(Geometry.prototype);
        TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;
        function TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q) {
            BufferGeometry.call(this);
            this.type = "TorusKnotBufferGeometry";
            this.parameters = {
                radius: radius,
                tube: tube,
                tubularSegments: tubularSegments,
                radialSegments: radialSegments,
                p: p,
                q: q
            };
            radius = radius || 1;
            tube = tube || .4;
            tubularSegments = Math.floor(tubularSegments) || 64;
            radialSegments = Math.floor(radialSegments) || 8;
            p = p || 2;
            q = q || 3;
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            var i,
                j;
            var vertex = new Vector3;
            var normal = new Vector3;
            var P1 = new Vector3;
            var P2 = new Vector3;
            var B = new Vector3;
            var T = new Vector3;
            var N = new Vector3;
            for (i = 0; i <= tubularSegments; ++i) {
                var u = i / tubularSegments * p * Math.PI * 2;
                calculatePositionOnCurve(u, p, q, radius, P1);
                calculatePositionOnCurve(u + .01, p, q, radius, P2);
                T.subVectors(P2, P1);
                N.addVectors(P2, P1);
                B.crossVectors(T, N);
                N.crossVectors(B, T);
                B.normalize();
                N.normalize();
                for (j = 0; j <= radialSegments; ++j) {
                    var v = j / radialSegments * Math.PI * 2;
                    var cx = -tube * Math.cos(v);
                    var cy = tube * Math.sin(v);
                    vertex.x = P1.x + (cx * N.x + cy * B.x);
                    vertex.y = P1.y + (cx * N.y + cy * B.y);
                    vertex.z = P1.z + (cx * N.z + cy * B.z);
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    normal.subVectors(vertex, P1).normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    uvs.push(i / tubularSegments);
                    uvs.push(j / radialSegments)
                }
            }
            for (j = 1; j <= tubularSegments; j++) {
                for (i = 1; i <= radialSegments; i++) {
                    var a = (radialSegments + 1) * (j - 1) + (i - 1);
                    var b = (radialSegments + 1) * j + (i - 1);
                    var c = (radialSegments + 1) * j + i;
                    var d = (radialSegments + 1) * (j - 1) + i;
                    indices.push(a, b, d);
                    indices.push(b, c, d)
                }
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2));
            function calculatePositionOnCurve(u, p, q, radius, position) {
                var cu = Math.cos(u);
                var su = Math.sin(u);
                var quOverP = q / p * u;
                var cs = Math.cos(quOverP);
                position.x = radius * (2 + cs) * .5 * cu;
                position.y = radius * (2 + cs) * su * .5;
                position.z = radius * Math.sin(quOverP) * .5
            }
        }
        TorusKnotBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;
        function TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {
            Geometry.call(this);
            this.type = "TorusGeometry";
            this.parameters = {
                radius: radius,
                tube: tube,
                radialSegments: radialSegments,
                tubularSegments: tubularSegments,
                arc: arc
            };
            this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));
            this.mergeVertices()
        }
        TorusGeometry.prototype = Object.create(Geometry.prototype);
        TorusGeometry.prototype.constructor = TorusGeometry;
        function TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc) {
            BufferGeometry.call(this);
            this.type = "TorusBufferGeometry";
            this.parameters = {
                radius: radius,
                tube: tube,
                radialSegments: radialSegments,
                tubularSegments: tubularSegments,
                arc: arc
            };
            radius = radius || 1;
            tube = tube || .4;
            radialSegments = Math.floor(radialSegments) || 8;
            tubularSegments = Math.floor(tubularSegments) || 6;
            arc = arc || Math.PI * 2;
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            var center = new Vector3;
            var vertex = new Vector3;
            var normal = new Vector3;
            var j,
                i;
            for (j = 0; j <= radialSegments; j++) {
                for (i = 0; i <= tubularSegments; i++) {
                    var u = i / tubularSegments * arc;
                    var v = j / radialSegments * Math.PI * 2;
                    vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
                    vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
                    vertex.z = tube * Math.sin(v);
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    center.x = radius * Math.cos(u);
                    center.y = radius * Math.sin(u);
                    normal.subVectors(vertex, center).normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    uvs.push(i / tubularSegments);
                    uvs.push(j / radialSegments)
                }
            }
            for (j = 1; j <= radialSegments; j++) {
                for (i = 1; i <= tubularSegments; i++) {
                    var a = (tubularSegments + 1) * j + i - 1;
                    var b = (tubularSegments + 1) * (j - 1) + i - 1;
                    var c = (tubularSegments + 1) * (j - 1) + i;
                    var d = (tubularSegments + 1) * j + i;
                    indices.push(a, b, d);
                    indices.push(b, c, d)
                }
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2))
        }
        TorusBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;
        var Earcut = {
            triangulate: function(data, holeIndices, dim) {
                dim = dim || 2;
                var hasHoles = holeIndices && holeIndices.length,
                    outerLen = hasHoles ? holeIndices[0] * dim : data.length,
                    outerNode = linkedList(data, 0, outerLen, dim, true),
                    triangles = [];
                if (!outerNode)
                    return triangles;
                var minX,
                    minY,
                    maxX,
                    maxY,
                    x,
                    y,
                    invSize;
                if (hasHoles)
                    outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
                if (data.length > 80 * dim) {
                    minX = maxX = data[0];
                    minY = maxY = data[1];
                    for (var i = dim; i < outerLen; i += dim) {
                        x = data[i];
                        y = data[i + 1];
                        if (x < minX)
                            minX = x;
                        if (y < minY)
                            minY = y;
                        if (x > maxX)
                            maxX = x;
                        if (y > maxY)
                            maxY = y
                    }
                    invSize = Math.max(maxX - minX, maxY - minY);
                    invSize = invSize !== 0 ? 1 / invSize : 0
                }
                earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
                return triangles
            }
        };
        function linkedList(data, start, end, dim, clockwise) {
            var i,
                last;
            if (clockwise === signedArea(data, start, end, dim) > 0) {
                for (i = start; i < end; i += dim)
                    last = insertNode(i, data[i], data[i + 1], last)
            } else {
                for (i = end - dim; i >= start; i -= dim)
                    last = insertNode(i, data[i], data[i + 1], last)
            }
            if (last && equals(last, last.next)) {
                removeNode(last);
                last = last.next
            }
            return last
        }
        function filterPoints(start, end) {
            if (!start)
                return start;
            if (!end)
                end = start;
            var p = start,
                again;
            do {
                again = false;
                if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
                    removeNode(p);
                    p = end = p.prev;
                    if (p === p.next)
                        break;
                    again = true
                } else {
                    p = p.next
                }
            } while (again || p !== end);
            return end
        }
        function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
            if (!ear)
                return;
            if (!pass && invSize)
                indexCurve(ear, minX, minY, invSize);
            var stop = ear,
                prev,
                next;
            while (ear.prev !== ear.next) {
                prev = ear.prev;
                next = ear.next;
                if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
                    triangles.push(prev.i / dim);
                    triangles.push(ear.i / dim);
                    triangles.push(next.i / dim);
                    removeNode(ear);
                    ear = next.next;
                    stop = next.next;
                    continue
                }
                ear = next;
                if (ear === stop) {
                    if (!pass) {
                        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1)
                    } else if (pass === 1) {
                        ear = cureLocalIntersections(ear, triangles, dim);
                        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2)
                    } else if (pass === 2) {
                        splitEarcut(ear, triangles, dim, minX, minY, invSize)
                    }
                    break
                }
            }
        }
        function isEar(ear) {
            var a = ear.prev,
                b = ear,
                c = ear.next;
            if (area(a, b, c) >= 0)
                return false;
            var p = ear.next.next;
            while (p !== ear.prev) {
                if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {
                    return false
                }
                p = p.next
            }
            return true
        }
        function isEarHashed(ear, minX, minY, invSize) {
            var a = ear.prev,
                b = ear,
                c = ear.next;
            if (area(a, b, c) >= 0)
                return false;
            var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,
                minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,
                maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,
                maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
            var minZ = zOrder(minTX, minTY, minX, minY, invSize),
                maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
            var p = ear.nextZ;
            while (p && p.z <= maxZ) {
                if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
                    return false;
                p = p.nextZ
            }
            p = ear.prevZ;
            while (p && p.z >= minZ) {
                if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
                    return false;
                p = p.prevZ
            }
            return true
        }
        function cureLocalIntersections(start, triangles, dim) {
            var p = start;
            do {
                var a = p.prev,
                    b = p.next.next;
                if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
                    triangles.push(a.i / dim);
                    triangles.push(p.i / dim);
                    triangles.push(b.i / dim);
                    removeNode(p);
                    removeNode(p.next);
                    p = start = b
                }
                p = p.next
            } while (p !== start);
            return p
        }
        function splitEarcut(start, triangles, dim, minX, minY, invSize) {
            var a = start;
            do {
                var b = a.next.next;
                while (b !== a.prev) {
                    if (a.i !== b.i && isValidDiagonal(a, b)) {
                        var c = splitPolygon(a, b);
                        a = filterPoints(a, a.next);
                        c = filterPoints(c, c.next);
                        earcutLinked(a, triangles, dim, minX, minY, invSize);
                        earcutLinked(c, triangles, dim, minX, minY, invSize);
                        return
                    }
                    b = b.next
                }
                a = a.next
            } while (a !== start)
        }
        function eliminateHoles(data, holeIndices, outerNode, dim) {
            var queue = [],
                i,
                len,
                start,
                end,
                list;
            for (i = 0, len = holeIndices.length; i < len; i++) {
                start = holeIndices[i] * dim;
                end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
                list = linkedList(data, start, end, dim, false);
                if (list === list.next)
                    list.steiner = true;
                queue.push(getLeftmost(list))
            }
            queue.sort(compareX);
            for (i = 0; i < queue.length; i++) {
                eliminateHole(queue[i], outerNode);
                outerNode = filterPoints(outerNode, outerNode.next)
            }
            return outerNode
        }
        function compareX(a, b) {
            return a.x - b.x
        }
        function eliminateHole(hole, outerNode) {
            outerNode = findHoleBridge(hole, outerNode);
            if (outerNode) {
                var b = splitPolygon(outerNode, hole);
                filterPoints(b, b.next)
            }
        }
        function findHoleBridge(hole, outerNode) {
            var p = outerNode,
                hx = hole.x,
                hy = hole.y,
                qx = -Infinity,
                m;
            do {
                if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
                    var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
                    if (x <= hx && x > qx) {
                        qx = x;
                        if (x === hx) {
                            if (hy === p.y)
                                return p;
                            if (hy === p.next.y)
                                return p.next
                        }
                        m = p.x < p.next.x ? p : p.next
                    }
                }
                p = p.next
            } while (p !== outerNode);
            if (!m)
                return null;
            if (hx === qx)
                return m.prev;
            var stop = m,
                mx = m.x,
                my = m.y,
                tanMin = Infinity,
                tan;
            p = m.next;
            while (p !== stop) {
                if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
                    tan = Math.abs(hy - p.y) / (hx - p.x);
                    if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {
                        m = p;
                        tanMin = tan
                    }
                }
                p = p.next
            }
            return m
        }
        function indexCurve(start, minX, minY, invSize) {
            var p = start;
            do {
                if (p.z === null)
                    p.z = zOrder(p.x, p.y, minX, minY, invSize);
                p.prevZ = p.prev;
                p.nextZ = p.next;
                p = p.next
            } while (p !== start);
            p.prevZ.nextZ = null;
            p.prevZ = null;
            sortLinked(p)
        }
        function sortLinked(list) {
            var i,
                p,
                q,
                e,
                tail,
                numMerges,
                pSize,
                qSize,
                inSize = 1;
            do {
                p = list;
                list = null;
                tail = null;
                numMerges = 0;
                while (p) {
                    numMerges++;
                    q = p;
                    pSize = 0;
                    for (i = 0; i < inSize; i++) {
                        pSize++;
                        q = q.nextZ;
                        if (!q)
                            break
                    }
                    qSize = inSize;
                    while (pSize > 0 || qSize > 0 && q) {
                        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                            e = p;
                            p = p.nextZ;
                            pSize--
                        } else {
                            e = q;
                            q = q.nextZ;
                            qSize--
                        }
                        if (tail)
                            tail.nextZ = e;
                        else
                            list = e;
                        e.prevZ = tail;
                        tail = e
                    }
                    p = q
                }
                tail.nextZ = null;
                inSize *= 2
            } while (numMerges > 1);
            return list
        }
        function zOrder(x, y, minX, minY, invSize) {
            x = 32767 * (x - minX) * invSize;
            y = 32767 * (y - minY) * invSize;
            x = (x | x << 8) & 16711935;
            x = (x | x << 4) & 252645135;
            x = (x | x << 2) & 858993459;
            x = (x | x << 1) & 1431655765;
            y = (y | y << 8) & 16711935;
            y = (y | y << 4) & 252645135;
            y = (y | y << 2) & 858993459;
            y = (y | y << 1) & 1431655765;
            return x | y << 1
        }
        function getLeftmost(start) {
            var p = start,
                leftmost = start;
            do {
                if (p.x < leftmost.x)
                    leftmost = p;
                p = p.next
            } while (p !== start);
            return leftmost
        }
        function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
            return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0
        }
        function isValidDiagonal(a, b) {
            return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b)
        }
        function area(p, q, r) {
            return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)
        }
        function equals(p1, p2) {
            return p1.x === p2.x && p1.y === p2.y
        }
        function intersects(p1, q1, p2, q2) {
            if (equals(p1, q1) && equals(p2, q2) || equals(p1, q2) && equals(p2, q1))
                return true;
            return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0
        }
        function intersectsPolygon(a, b) {
            var p = a;
            do {
                if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) {
                    return true
                }
                p = p.next
            } while (p !== a);
            return false
        }
        function locallyInside(a, b) {
            return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0
        }
        function middleInside(a, b) {
            var p = a,
                inside = false,
                px = (a.x + b.x) / 2,
                py = (a.y + b.y) / 2;
            do {
                if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
                    inside = !inside
                }
                p = p.next
            } while (p !== a);
            return inside
        }
        function splitPolygon(a, b) {
            var a2 = new Node(a.i, a.x, a.y),
                b2 = new Node(b.i, b.x, b.y),
                an = a.next,
                bp = b.prev;
            a.next = b;
            b.prev = a;
            a2.next = an;
            an.prev = a2;
            b2.next = a2;
            a2.prev = b2;
            bp.next = b2;
            b2.prev = bp;
            return b2
        }
        function insertNode(i, x, y, last) {
            var p = new Node(i, x, y);
            if (!last) {
                p.prev = p;
                p.next = p
            } else {
                p.next = last.next;
                p.prev = last;
                last.next.prev = p;
                last.next = p
            }
            return p
        }
        function removeNode(p) {
            p.next.prev = p.prev;
            p.prev.next = p.next;
            if (p.prevZ)
                p.prevZ.nextZ = p.nextZ;
            if (p.nextZ)
                p.nextZ.prevZ = p.prevZ
        }
        function Node(i, x, y) {
            this.i = i;
            this.x = x;
            this.y = y;
            this.prev = null;
            this.next = null;
            this.z = null;
            this.prevZ = null;
            this.nextZ = null;
            this.steiner = false
        }
        function signedArea(data, start, end, dim) {
            var sum = 0;
            for (var i = start, j = end - dim; i < end; i += dim) {
                sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
                j = i
            }
            return sum
        }
        var ShapeUtils = {
            area: function(contour) {
                var n = contour.length;
                var a = 0;
                for (var p = n - 1, q = 0; q < n; p = q++) {
                    a += contour[p].x * contour[q].y - contour[q].x * contour[p].y
                }
                return a * .5
            },
            isClockWise: function(pts) {
                return ShapeUtils.area(pts) < 0
            },
            triangulateShape: function(contour, holes) {
                var vertices = [];
                var holeIndices = [];
                var faces = [];
                removeDupEndPts(contour);
                addContour(vertices, contour);
                var holeIndex = contour.length;
                holes.forEach(removeDupEndPts);
                for (var i = 0; i < holes.length; i++) {
                    holeIndices.push(holeIndex);
                    holeIndex += holes[i].length;
                    addContour(vertices, holes[i])
                }
                var triangles = Earcut.triangulate(vertices, holeIndices);
                for (var i = 0; i < triangles.length; i += 3) {
                    faces.push(triangles.slice(i, i + 3))
                }
                return faces
            }
        };
        function removeDupEndPts(points) {
            var l = points.length;
            if (l > 2 && points[l - 1].equals(points[0])) {
                points.pop()
            }
        }
        function addContour(vertices, contour) {
            for (var i = 0; i < contour.length; i++) {
                vertices.push(contour[i].x);
                vertices.push(contour[i].y)
            }
        }
        function ExtrudeGeometry(shapes, options) {
            Geometry.call(this);
            this.type = "ExtrudeGeometry";
            this.parameters = {
                shapes: shapes,
                options: options
            };
            this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));
            this.mergeVertices()
        }
        ExtrudeGeometry.prototype = Object.create(Geometry.prototype);
        ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;
        ExtrudeGeometry.prototype.toJSON = function() {
            var data = Geometry.prototype.toJSON.call(this);
            var shapes = this.parameters.shapes;
            var options = this.parameters.options;
            return toJSON(shapes, options, data)
        };
        function ExtrudeBufferGeometry(shapes, options) {
            BufferGeometry.call(this);
            this.type = "ExtrudeBufferGeometry";
            this.parameters = {
                shapes: shapes,
                options: options
            };
            shapes = Array.isArray(shapes) ? shapes : [shapes];
            var scope = this;
            var verticesArray = [];
            var uvArray = [];
            for (var i = 0, l = shapes.length; i < l; i++) {
                var shape = shapes[i];
                addShape(shape)
            }
            this.addAttribute("position", new Float32BufferAttribute(verticesArray, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvArray, 2));
            this.computeVertexNormals();
            function addShape(shape) {
                var placeholder = [];
                var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
                var steps = options.steps !== undefined ? options.steps : 1;
                var depth = options.depth !== undefined ? options.depth : 100;
                var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
                var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
                var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
                var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
                var extrudePath = options.extrudePath;
                var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
                if (options.amount !== undefined) {
                    console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");
                    depth = options.amount
                }
                var extrudePts,
                    extrudeByPath = false;
                var splineTube,
                    binormal,
                    normal,
                    position2;
                if (extrudePath) {
                    extrudePts = extrudePath.getSpacedPoints(steps);
                    extrudeByPath = true;
                    bevelEnabled = false;
                    splineTube = extrudePath.computeFrenetFrames(steps, false);
                    binormal = new Vector3;
                    normal = new Vector3;
                    position2 = new Vector3
                }
                if (!bevelEnabled) {
                    bevelSegments = 0;
                    bevelThickness = 0;
                    bevelSize = 0
                }
                var ahole,
                    h,
                    hl;
                var shapePoints = shape.extractPoints(curveSegments);
                var vertices = shapePoints.shape;
                var holes = shapePoints.holes;
                var reverse = !ShapeUtils.isClockWise(vertices);
                if (reverse) {
                    vertices = vertices.reverse();
                    for (h = 0, hl = holes.length; h < hl; h++) {
                        ahole = holes[h];
                        if (ShapeUtils.isClockWise(ahole)) {
                            holes[h] = ahole.reverse()
                        }
                    }
                }
                var faces = ShapeUtils.triangulateShape(vertices, holes);
                var contour = vertices;
                for (h = 0, hl = holes.length; h < hl; h++) {
                    ahole = holes[h];
                    vertices = vertices.concat(ahole)
                }
                function scalePt2(pt, vec, size) {
                    if (!vec)
                        console.error("THREE.ExtrudeGeometry: vec does not exist");
                    return vec.clone().multiplyScalar(size).add(pt)
                }
                var b,
                    bs,
                    t,
                    z,
                    vert,
                    vlen = vertices.length,
                    face,
                    flen = faces.length;
                function getBevelVec(inPt, inPrev, inNext) {
                    var v_trans_x,
                        v_trans_y,
                        shrink_by;
                    var v_prev_x = inPt.x - inPrev.x,
                        v_prev_y = inPt.y - inPrev.y;
                    var v_next_x = inNext.x - inPt.x,
                        v_next_y = inNext.y - inPt.y;
                    var v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
                    var collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
                    if (Math.abs(collinear0) > Number.EPSILON) {
                        var v_prev_len = Math.sqrt(v_prev_lensq);
                        var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
                        var ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
                        var ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
                        var ptNextShift_x = inNext.x - v_next_y / v_next_len;
                        var ptNextShift_y = inNext.y + v_next_x / v_next_len;
                        var sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
                        v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
                        v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
                        var v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
                        if (v_trans_lensq <= 2) {
                            return new Vector2(v_trans_x, v_trans_y)
                        } else {
                            shrink_by = Math.sqrt(v_trans_lensq / 2)
                        }
                    } else {
                        var direction_eq = false;
                        if (v_prev_x > Number.EPSILON) {
                            if (v_next_x > Number.EPSILON) {
                                direction_eq = true
                            }
                        } else {
                            if (v_prev_x < -Number.EPSILON) {
                                if (v_next_x < -Number.EPSILON) {
                                    direction_eq = true
                                }
                            } else {
                                if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                                    direction_eq = true
                                }
                            }
                        }
                        if (direction_eq) {
                            v_trans_x = -v_prev_y;
                            v_trans_y = v_prev_x;
                            shrink_by = Math.sqrt(v_prev_lensq)
                        } else {
                            v_trans_x = v_prev_x;
                            v_trans_y = v_prev_y;
                            shrink_by = Math.sqrt(v_prev_lensq / 2)
                        }
                    }
                    return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by)
                }
                var contourMovements = [];
                for (var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
                    if (j === il)
                        j = 0;
                    if (k === il)
                        k = 0;
                    contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k])
                }
                var holesMovements = [],
                    oneHoleMovements,
                    verticesMovements = contourMovements.concat();
                for (h = 0, hl = holes.length; h < hl; h++) {
                    ahole = holes[h];
                    oneHoleMovements = [];
                    for (i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
                        if (j === il)
                            j = 0;
                        if (k === il)
                            k = 0;
                        oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k])
                    }
                    holesMovements.push(oneHoleMovements);
                    verticesMovements = verticesMovements.concat(oneHoleMovements)
                }
                for (b = 0; b < bevelSegments; b++) {
                    t = b / bevelSegments;
                    z = bevelThickness * Math.cos(t * Math.PI / 2);
                    bs = bevelSize * Math.sin(t * Math.PI / 2);
                    for (i = 0, il = contour.length; i < il; i++) {
                        vert = scalePt2(contour[i], contourMovements[i], bs);
                        v(vert.x, vert.y, -z)
                    }
                    for (h = 0, hl = holes.length; h < hl; h++) {
                        ahole = holes[h];
                        oneHoleMovements = holesMovements[h];
                        for (i = 0, il = ahole.length; i < il; i++) {
                            vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
                            v(vert.x, vert.y, -z)
                        }
                    }
                }
                bs = bevelSize;
                for (i = 0; i < vlen; i++) {
                    vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
                    if (!extrudeByPath) {
                        v(vert.x, vert.y, 0)
                    } else {
                        normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
                        binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
                        position2.copy(extrudePts[0]).add(normal).add(binormal);
                        v(position2.x, position2.y, position2.z)
                    }
                }
                var s;
                for (s = 1; s <= steps; s++) {
                    for (i = 0; i < vlen; i++) {
                        vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
                        if (!extrudeByPath) {
                            v(vert.x, vert.y, depth / steps * s)
                        } else {
                            normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
                            binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
                            position2.copy(extrudePts[s]).add(normal).add(binormal);
                            v(position2.x, position2.y, position2.z)
                        }
                    }
                }
                for (b = bevelSegments - 1; b >= 0; b--) {
                    t = b / bevelSegments;
                    z = bevelThickness * Math.cos(t * Math.PI / 2);
                    bs = bevelSize * Math.sin(t * Math.PI / 2);
                    for (i = 0, il = contour.length; i < il; i++) {
                        vert = scalePt2(contour[i], contourMovements[i], bs);
                        v(vert.x, vert.y, depth + z)
                    }
                    for (h = 0, hl = holes.length; h < hl; h++) {
                        ahole = holes[h];
                        oneHoleMovements = holesMovements[h];
                        for (i = 0, il = ahole.length; i < il; i++) {
                            vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
                            if (!extrudeByPath) {
                                v(vert.x, vert.y, depth + z)
                            } else {
                                v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z)
                            }
                        }
                    }
                }
                buildLidFaces();
                buildSideFaces();
                function buildLidFaces() {
                    var start = verticesArray.length / 3;
                    if (bevelEnabled) {
                        var layer = 0;
                        var offset = vlen * layer;
                        for (i = 0; i < flen; i++) {
                            face = faces[i];
                            f3(face[2] + offset, face[1] + offset, face[0] + offset)
                        }
                        layer = steps + bevelSegments * 2;
                        offset = vlen * layer;
                        for (i = 0; i < flen; i++) {
                            face = faces[i];
                            f3(face[0] + offset, face[1] + offset, face[2] + offset)
                        }
                    } else {
                        for (i = 0; i < flen; i++) {
                            face = faces[i];
                            f3(face[2], face[1], face[0])
                        }
                        for (i = 0; i < flen; i++) {
                            face = faces[i];
                            f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps)
                        }
                    }
                    scope.addGroup(start, verticesArray.length / 3 - start, 0)
                }
                function buildSideFaces() {
                    var start = verticesArray.length / 3;
                    var layeroffset = 0;
                    sidewalls(contour, layeroffset);
                    layeroffset += contour.length;
                    for (h = 0, hl = holes.length; h < hl; h++) {
                        ahole = holes[h];
                        sidewalls(ahole, layeroffset);
                        layeroffset += ahole.length
                    }
                    scope.addGroup(start, verticesArray.length / 3 - start, 1)
                }
                function sidewalls(contour, layeroffset) {
                    var j,
                        k;
                    i = contour.length;
                    while (--i >= 0) {
                        j = i;
                        k = i - 1;
                        if (k < 0)
                            k = contour.length - 1;
                        var s = 0,
                            sl = steps + bevelSegments * 2;
                        for (s = 0; s < sl; s++) {
                            var slen1 = vlen * s;
                            var slen2 = vlen * (s + 1);
                            var a = layeroffset + j + slen1,
                                b = layeroffset + k + slen1,
                                c = layeroffset + k + slen2,
                                d = layeroffset + j + slen2;
                            f4(a, b, c, d)
                        }
                    }
                }
                function v(x, y, z) {
                    placeholder.push(x);
                    placeholder.push(y);
                    placeholder.push(z)
                }
                function f3(a, b, c) {
                    addVertex(a);
                    addVertex(b);
                    addVertex(c);
                    var nextIndex = verticesArray.length / 3;
                    var uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                    addUV(uvs[0]);
                    addUV(uvs[1]);
                    addUV(uvs[2])
                }
                function f4(a, b, c, d) {
                    addVertex(a);
                    addVertex(b);
                    addVertex(d);
                    addVertex(b);
                    addVertex(c);
                    addVertex(d);
                    var nextIndex = verticesArray.length / 3;
                    var uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                    addUV(uvs[0]);
                    addUV(uvs[1]);
                    addUV(uvs[3]);
                    addUV(uvs[1]);
                    addUV(uvs[2]);
                    addUV(uvs[3])
                }
                function addVertex(index) {
                    verticesArray.push(placeholder[index * 3 + 0]);
                    verticesArray.push(placeholder[index * 3 + 1]);
                    verticesArray.push(placeholder[index * 3 + 2])
                }
                function addUV(vector2) {
                    uvArray.push(vector2.x);
                    uvArray.push(vector2.y)
                }
            }
        }
        ExtrudeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;
        ExtrudeBufferGeometry.prototype.toJSON = function() {
            var data = BufferGeometry.prototype.toJSON.call(this);
            var shapes = this.parameters.shapes;
            var options = this.parameters.options;
            return toJSON(shapes, options, data)
        };
        var WorldUVGenerator = {
            generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
                var a_x = vertices[indexA * 3];
                var a_y = vertices[indexA * 3 + 1];
                var b_x = vertices[indexB * 3];
                var b_y = vertices[indexB * 3 + 1];
                var c_x = vertices[indexC * 3];
                var c_y = vertices[indexC * 3 + 1];
                return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)]
            },
            generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
                var a_x = vertices[indexA * 3];
                var a_y = vertices[indexA * 3 + 1];
                var a_z = vertices[indexA * 3 + 2];
                var b_x = vertices[indexB * 3];
                var b_y = vertices[indexB * 3 + 1];
                var b_z = vertices[indexB * 3 + 2];
                var c_x = vertices[indexC * 3];
                var c_y = vertices[indexC * 3 + 1];
                var c_z = vertices[indexC * 3 + 2];
                var d_x = vertices[indexD * 3];
                var d_y = vertices[indexD * 3 + 1];
                var d_z = vertices[indexD * 3 + 2];
                if (Math.abs(a_y - b_y) < .01) {
                    return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)]
                } else {
                    return [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)]
                }
            }
        };
        function toJSON(shapes, options, data) {
            data.shapes = [];
            if (Array.isArray(shapes)) {
                for (var i = 0, l = shapes.length; i < l; i++) {
                    var shape = shapes[i];
                    data.shapes.push(shape.uuid)
                }
            } else {
                data.shapes.push(shapes.uuid)
            }
            if (options.extrudePath !== undefined)
                data.options.extrudePath = options.extrudePath.toJSON();
            return data
        }
        function TextGeometry(text, parameters) {
            Geometry.call(this);
            this.type = "TextGeometry";
            this.parameters = {
                text: text,
                parameters: parameters
            };
            this.fromBufferGeometry(new TextBufferGeometry(text, parameters));
            this.mergeVertices()
        }
        TextGeometry.prototype = Object.create(Geometry.prototype);
        TextGeometry.prototype.constructor = TextGeometry;
        function TextBufferGeometry(text, parameters) {
            parameters = parameters || {};
            var font = parameters.font;
            if (!(font && font.isFont)) {
                console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font.");
                return new Geometry
            }
            var shapes = font.generateShapes(text, parameters.size);
            parameters.depth = parameters.height !== undefined ? parameters.height : 50;
            if (parameters.bevelThickness === undefined)
                parameters.bevelThickness = 10;
            if (parameters.bevelSize === undefined)
                parameters.bevelSize = 8;
            if (parameters.bevelEnabled === undefined)
                parameters.bevelEnabled = false;
            ExtrudeBufferGeometry.call(this, shapes, parameters);
            this.type = "TextBufferGeometry"
        }
        TextBufferGeometry.prototype = Object.create(ExtrudeBufferGeometry.prototype);
        TextBufferGeometry.prototype.constructor = TextBufferGeometry;
        function SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
            Geometry.call(this);
            this.type = "SphereGeometry";
            this.parameters = {
                radius: radius,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                phiStart: phiStart,
                phiLength: phiLength,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
            this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));
            this.mergeVertices()
        }
        SphereGeometry.prototype = Object.create(Geometry.prototype);
        SphereGeometry.prototype.constructor = SphereGeometry;
        function SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
            BufferGeometry.call(this);
            this.type = "SphereBufferGeometry";
            this.parameters = {
                radius: radius,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                phiStart: phiStart,
                phiLength: phiLength,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
            radius = radius || 1;
            widthSegments = Math.max(3, Math.floor(widthSegments) || 8);
            heightSegments = Math.max(2, Math.floor(heightSegments) || 6);
            phiStart = phiStart !== undefined ? phiStart : 0;
            phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
            var thetaEnd = thetaStart + thetaLength;
            var ix,
                iy;
            var index = 0;
            var grid = [];
            var vertex = new Vector3;
            var normal = new Vector3;
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            for (iy = 0; iy <= heightSegments; iy++) {
                var verticesRow = [];
                var v = iy / heightSegments;
                for (ix = 0; ix <= widthSegments; ix++) {
                    var u = ix / widthSegments;
                    vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                    vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
                    vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    normal.set(vertex.x, vertex.y, vertex.z).normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    uvs.push(u, 1 - v);
                    verticesRow.push(index++)
                }
                grid.push(verticesRow)
            }
            for (iy = 0; iy < heightSegments; iy++) {
                for (ix = 0; ix < widthSegments; ix++) {
                    var a = grid[iy][ix + 1];
                    var b = grid[iy][ix];
                    var c = grid[iy + 1][ix];
                    var d = grid[iy + 1][ix + 1];
                    if (iy !== 0 || thetaStart > 0)
                        indices.push(a, b, d);
                    if (iy !== heightSegments - 1 || thetaEnd < Math.PI)
                        indices.push(b, c, d)
                }
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2))
        }
        SphereBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;
        function RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
            Geometry.call(this);
            this.type = "RingGeometry";
            this.parameters = {
                innerRadius: innerRadius,
                outerRadius: outerRadius,
                thetaSegments: thetaSegments,
                phiSegments: phiSegments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
            this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));
            this.mergeVertices()
        }
        RingGeometry.prototype = Object.create(Geometry.prototype);
        RingGeometry.prototype.constructor = RingGeometry;
        function RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
            BufferGeometry.call(this);
            this.type = "RingBufferGeometry";
            this.parameters = {
                innerRadius: innerRadius,
                outerRadius: outerRadius,
                thetaSegments: thetaSegments,
                phiSegments: phiSegments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
            innerRadius = innerRadius || .5;
            outerRadius = outerRadius || 1;
            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
            thetaSegments = thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;
            phiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 1;
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            var segment;
            var radius = innerRadius;
            var radiusStep = (outerRadius - innerRadius) / phiSegments;
            var vertex = new Vector3;
            var uv = new Vector2;
            var j,
                i;
            for (j = 0; j <= phiSegments; j++) {
                for (i = 0; i <= thetaSegments; i++) {
                    segment = thetaStart + i / thetaSegments * thetaLength;
                    vertex.x = radius * Math.cos(segment);
                    vertex.y = radius * Math.sin(segment);
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    normals.push(0, 0, 1);
                    uv.x = (vertex.x / outerRadius + 1) / 2;
                    uv.y = (vertex.y / outerRadius + 1) / 2;
                    uvs.push(uv.x, uv.y)
                }
                radius += radiusStep
            }
            for (j = 0; j < phiSegments; j++) {
                var thetaSegmentLevel = j * (thetaSegments + 1);
                for (i = 0; i < thetaSegments; i++) {
                    segment = i + thetaSegmentLevel;
                    var a = segment;
                    var b = segment + thetaSegments + 1;
                    var c = segment + thetaSegments + 2;
                    var d = segment + 1;
                    indices.push(a, b, d);
                    indices.push(b, c, d)
                }
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2))
        }
        RingBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        RingBufferGeometry.prototype.constructor = RingBufferGeometry;
        function LatheGeometry(points, segments, phiStart, phiLength) {
            Geometry.call(this);
            this.type = "LatheGeometry";
            this.parameters = {
                points: points,
                segments: segments,
                phiStart: phiStart,
                phiLength: phiLength
            };
            this.fromBufferGeometry(new LatheBufferGeometry(points, segments, phiStart, phiLength));
            this.mergeVertices()
        }
        LatheGeometry.prototype = Object.create(Geometry.prototype);
        LatheGeometry.prototype.constructor = LatheGeometry;
        function LatheBufferGeometry(points, segments, phiStart, phiLength) {
            BufferGeometry.call(this);
            this.type = "LatheBufferGeometry";
            this.parameters = {
                points: points,
                segments: segments,
                phiStart: phiStart,
                phiLength: phiLength
            };
            segments = Math.floor(segments) || 12;
            phiStart = phiStart || 0;
            phiLength = phiLength || Math.PI * 2;
            phiLength = _Math.clamp(phiLength, 0, Math.PI * 2);
            var indices = [];
            var vertices = [];
            var uvs = [];
            var base;
            var inverseSegments = 1 / segments;
            var vertex = new Vector3;
            var uv = new Vector2;
            var i,
                j;
            for (i = 0; i <= segments; i++) {
                var phi = phiStart + i * inverseSegments * phiLength;
                var sin = Math.sin(phi);
                var cos = Math.cos(phi);
                for (j = 0; j <= points.length - 1; j++) {
                    vertex.x = points[j].x * sin;
                    vertex.y = points[j].y;
                    vertex.z = points[j].x * cos;
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    uv.x = i / segments;
                    uv.y = j / (points.length - 1);
                    uvs.push(uv.x, uv.y)
                }
            }
            for (i = 0; i < segments; i++) {
                for (j = 0; j < points.length - 1; j++) {
                    base = j + i * points.length;
                    var a = base;
                    var b = base + points.length;
                    var c = base + points.length + 1;
                    var d = base + 1;
                    indices.push(a, b, d);
                    indices.push(b, c, d)
                }
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2));
            this.computeVertexNormals();
            if (phiLength === Math.PI * 2) {
                var normals = this.attributes.normal.array;
                var n1 = new Vector3;
                var n2 = new Vector3;
                var n = new Vector3;
                base = segments * points.length * 3;
                for (i = 0, j = 0; i < points.length; i++, j += 3) {
                    n1.x = normals[j + 0];
                    n1.y = normals[j + 1];
                    n1.z = normals[j + 2];
                    n2.x = normals[base + j + 0];
                    n2.y = normals[base + j + 1];
                    n2.z = normals[base + j + 2];
                    n.addVectors(n1, n2).normalize();
                    normals[j + 0] = normals[base + j + 0] = n.x;
                    normals[j + 1] = normals[base + j + 1] = n.y;
                    normals[j + 2] = normals[base + j + 2] = n.z
                }
            }
        }
        LatheBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;
        function ShapeGeometry(shapes, curveSegments) {
            Geometry.call(this);
            this.type = "ShapeGeometry";
            if (typeof curveSegments === "object") {
                console.warn("THREE.ShapeGeometry: Options parameter has been removed.");
                curveSegments = curveSegments.curveSegments
            }
            this.parameters = {
                shapes: shapes,
                curveSegments: curveSegments
            };
            this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));
            this.mergeVertices()
        }
        ShapeGeometry.prototype = Object.create(Geometry.prototype);
        ShapeGeometry.prototype.constructor = ShapeGeometry;
        ShapeGeometry.prototype.toJSON = function() {
            var data = Geometry.prototype.toJSON.call(this);
            var shapes = this.parameters.shapes;
            return toJSON$1(shapes, data)
        };
        function ShapeBufferGeometry(shapes, curveSegments) {
            BufferGeometry.call(this);
            this.type = "ShapeBufferGeometry";
            this.parameters = {
                shapes: shapes,
                curveSegments: curveSegments
            };
            curveSegments = curveSegments || 12;
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            var groupStart = 0;
            var groupCount = 0;
            if (Array.isArray(shapes) === false) {
                addShape(shapes)
            } else {
                for (var i = 0; i < shapes.length; i++) {
                    addShape(shapes[i]);
                    this.addGroup(groupStart, groupCount, i);
                    groupStart += groupCount;
                    groupCount = 0
                }
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2));
            function addShape(shape) {
                var i,
                    l,
                    shapeHole;
                var indexOffset = vertices.length / 3;
                var points = shape.extractPoints(curveSegments);
                var shapeVertices = points.shape;
                var shapeHoles = points.holes;
                if (ShapeUtils.isClockWise(shapeVertices) === false) {
                    shapeVertices = shapeVertices.reverse();
                    for (i = 0, l = shapeHoles.length; i < l; i++) {
                        shapeHole = shapeHoles[i];
                        if (ShapeUtils.isClockWise(shapeHole) === true) {
                            shapeHoles[i] = shapeHole.reverse()
                        }
                    }
                }
                var faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
                for (i = 0, l = shapeHoles.length; i < l; i++) {
                    shapeHole = shapeHoles[i];
                    shapeVertices = shapeVertices.concat(shapeHole)
                }
                for (i = 0, l = shapeVertices.length; i < l; i++) {
                    var vertex = shapeVertices[i];
                    vertices.push(vertex.x, vertex.y, 0);
                    normals.push(0, 0, 1);
                    uvs.push(vertex.x, vertex.y)
                }
                for (i = 0, l = faces.length; i < l; i++) {
                    var face = faces[i];
                    var a = face[0] + indexOffset;
                    var b = face[1] + indexOffset;
                    var c = face[2] + indexOffset;
                    indices.push(a, b, c);
                    groupCount += 3
                }
            }
        }
        ShapeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;
        ShapeBufferGeometry.prototype.toJSON = function() {
            var data = BufferGeometry.prototype.toJSON.call(this);
            var shapes = this.parameters.shapes;
            return toJSON$1(shapes, data)
        };
        function toJSON$1(shapes, data) {
            data.shapes = [];
            if (Array.isArray(shapes)) {
                for (var i = 0, l = shapes.length; i < l; i++) {
                    var shape = shapes[i];
                    data.shapes.push(shape.uuid)
                }
            } else {
                data.shapes.push(shapes.uuid)
            }
            return data
        }
        function EdgesGeometry(geometry, thresholdAngle) {
            BufferGeometry.call(this);
            this.type = "EdgesGeometry";
            this.parameters = {
                thresholdAngle: thresholdAngle
            };
            thresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;
            var vertices = [];
            var thresholdDot = Math.cos(_Math.DEG2RAD * thresholdAngle);
            var edge = [0, 0],
                edges = {},
                edge1,
                edge2;
            var key,
                keys = ["a", "b", "c"];
            var geometry2;
            if (geometry.isBufferGeometry) {
                geometry2 = new Geometry;
                geometry2.fromBufferGeometry(geometry)
            } else {
                geometry2 = geometry.clone()
            }
            geometry2.mergeVertices();
            geometry2.computeFaceNormals();
            var sourceVertices = geometry2.vertices;
            var faces = geometry2.faces;
            for (var i = 0, l = faces.length; i < l; i++) {
                var face = faces[i];
                for (var j = 0; j < 3; j++) {
                    edge1 = face[keys[j]];
                    edge2 = face[keys[(j + 1) % 3]];
                    edge[0] = Math.min(edge1, edge2);
                    edge[1] = Math.max(edge1, edge2);
                    key = edge[0] + "," + edge[1];
                    if (edges[key] === undefined) {
                        edges[key] = {
                            index1: edge[0],
                            index2: edge[1],
                            face1: i,
                            face2: undefined
                        }
                    } else {
                        edges[key].face2 = i
                    }
                }
            }
            for (key in edges) {
                var e = edges[key];
                if (e.face2 === undefined || faces[e.face1].normal.dot(faces[e.face2].normal) <= thresholdDot) {
                    var vertex = sourceVertices[e.index1];
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    vertex = sourceVertices[e.index2];
                    vertices.push(vertex.x, vertex.y, vertex.z)
                }
            }
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3))
        }
        EdgesGeometry.prototype = Object.create(BufferGeometry.prototype);
        EdgesGeometry.prototype.constructor = EdgesGeometry;
        function CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
            Geometry.call(this);
            this.type = "CylinderGeometry";
            this.parameters = {
                radiusTop: radiusTop,
                radiusBottom: radiusBottom,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
            this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));
            this.mergeVertices()
        }
        CylinderGeometry.prototype = Object.create(Geometry.prototype);
        CylinderGeometry.prototype.constructor = CylinderGeometry;
        function CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
            BufferGeometry.call(this);
            this.type = "CylinderBufferGeometry";
            this.parameters = {
                radiusTop: radiusTop,
                radiusBottom: radiusBottom,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
            var scope = this;
            radiusTop = radiusTop !== undefined ? radiusTop : 1;
            radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
            height = height || 1;
            radialSegments = Math.floor(radialSegments) || 8;
            heightSegments = Math.floor(heightSegments) || 1;
            openEnded = openEnded !== undefined ? openEnded : false;
            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            var index = 0;
            var indexArray = [];
            var halfHeight = height / 2;
            var groupStart = 0;
            generateTorso();
            if (openEnded === false) {
                if (radiusTop > 0)
                    generateCap(true);
                if (radiusBottom > 0)
                    generateCap(false)
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2));
            function generateTorso() {
                var x,
                    y;
                var normal = new Vector3;
                var vertex = new Vector3;
                var groupCount = 0;
                var slope = (radiusBottom - radiusTop) / height;
                for (y = 0; y <= heightSegments; y++) {
                    var indexRow = [];
                    var v = y / heightSegments;
                    var radius = v * (radiusBottom - radiusTop) + radiusTop;
                    for (x = 0; x <= radialSegments; x++) {
                        var u = x / radialSegments;
                        var theta = u * thetaLength + thetaStart;
                        var sinTheta = Math.sin(theta);
                        var cosTheta = Math.cos(theta);
                        vertex.x = radius * sinTheta;
                        vertex.y = -v * height + halfHeight;
                        vertex.z = radius * cosTheta;
                        vertices.push(vertex.x, vertex.y, vertex.z);
                        normal.set(sinTheta, slope, cosTheta).normalize();
                        normals.push(normal.x, normal.y, normal.z);
                        uvs.push(u, 1 - v);
                        indexRow.push(index++)
                    }
                    indexArray.push(indexRow)
                }
                for (x = 0; x < radialSegments; x++) {
                    for (y = 0; y < heightSegments; y++) {
                        var a = indexArray[y][x];
                        var b = indexArray[y + 1][x];
                        var c = indexArray[y + 1][x + 1];
                        var d = indexArray[y][x + 1];
                        indices.push(a, b, d);
                        indices.push(b, c, d);
                        groupCount += 6
                    }
                }
                scope.addGroup(groupStart, groupCount, 0);
                groupStart += groupCount
            }
            function generateCap(top) {
                var x,
                    centerIndexStart,
                    centerIndexEnd;
                var uv = new Vector2;
                var vertex = new Vector3;
                var groupCount = 0;
                var radius = top === true ? radiusTop : radiusBottom;
                var sign = top === true ? 1 : -1;
                centerIndexStart = index;
                for (x = 1; x <= radialSegments; x++) {
                    vertices.push(0, halfHeight * sign, 0);
                    normals.push(0, sign, 0);
                    uvs.push(.5, .5);
                    index++
                }
                centerIndexEnd = index;
                for (x = 0; x <= radialSegments; x++) {
                    var u = x / radialSegments;
                    var theta = u * thetaLength + thetaStart;
                    var cosTheta = Math.cos(theta);
                    var sinTheta = Math.sin(theta);
                    vertex.x = radius * sinTheta;
                    vertex.y = halfHeight * sign;
                    vertex.z = radius * cosTheta;
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    normals.push(0, sign, 0);
                    uv.x = cosTheta * .5 + .5;
                    uv.y = sinTheta * .5 * sign + .5;
                    uvs.push(uv.x, uv.y);
                    index++
                }
                for (x = 0; x < radialSegments; x++) {
                    var c = centerIndexStart + x;
                    var i = centerIndexEnd + x;
                    if (top === true) {
                        indices.push(i, i + 1, c)
                    } else {
                        indices.push(i + 1, i, c)
                    }
                    groupCount += 3
                }
                scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
                groupStart += groupCount
            }
        }
        CylinderBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;
        function ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
            CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
            this.type = "ConeGeometry";
            this.parameters = {
                radius: radius,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }
        }
        ConeGeometry.prototype = Object.create(CylinderGeometry.prototype);
        ConeGeometry.prototype.constructor = ConeGeometry;
        function ConeBufferGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
            CylinderBufferGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
            this.type = "ConeBufferGeometry";
            this.parameters = {
                radius: radius,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }
        }
        ConeBufferGeometry.prototype = Object.create(CylinderBufferGeometry.prototype);
        ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;
        function CircleGeometry(radius, segments, thetaStart, thetaLength) {
            Geometry.call(this);
            this.type = "CircleGeometry";
            this.parameters = {
                radius: radius,
                segments: segments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
            this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));
            this.mergeVertices()
        }
        CircleGeometry.prototype = Object.create(Geometry.prototype);
        CircleGeometry.prototype.constructor = CircleGeometry;
        function CircleBufferGeometry(radius, segments, thetaStart, thetaLength) {
            BufferGeometry.call(this);
            this.type = "CircleBufferGeometry";
            this.parameters = {
                radius: radius,
                segments: segments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
            radius = radius || 1;
            segments = segments !== undefined ? Math.max(3, segments) : 8;
            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
            var i,
                s;
            var vertex = new Vector3;
            var uv = new Vector2;
            vertices.push(0, 0, 0);
            normals.push(0, 0, 1);
            uvs.push(.5, .5);
            for (s = 0, i = 3; s <= segments; s++, i += 3) {
                var segment = thetaStart + s / segments * thetaLength;
                vertex.x = radius * Math.cos(segment);
                vertex.y = radius * Math.sin(segment);
                vertices.push(vertex.x, vertex.y, vertex.z);
                normals.push(0, 0, 1);
                uv.x = (vertices[i] / radius + 1) / 2;
                uv.y = (vertices[i + 1] / radius + 1) / 2;
                uvs.push(uv.x, uv.y)
            }
            for (i = 1; i <= segments; i++) {
                indices.push(i, i + 1, 0)
            }
            this.setIndex(indices);
            this.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            this.addAttribute("normal", new Float32BufferAttribute(normals, 3));
            this.addAttribute("uv", new Float32BufferAttribute(uvs, 2))
        }
        CircleBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;
        var Geometries = Object.freeze({
            WireframeGeometry: WireframeGeometry,
            ParametricGeometry: ParametricGeometry,
            ParametricBufferGeometry: ParametricBufferGeometry,
            TetrahedronGeometry: TetrahedronGeometry,
            TetrahedronBufferGeometry: TetrahedronBufferGeometry,
            OctahedronGeometry: OctahedronGeometry,
            OctahedronBufferGeometry: OctahedronBufferGeometry,
            IcosahedronGeometry: IcosahedronGeometry,
            IcosahedronBufferGeometry: IcosahedronBufferGeometry,
            DodecahedronGeometry: DodecahedronGeometry,
            DodecahedronBufferGeometry: DodecahedronBufferGeometry,
            PolyhedronGeometry: PolyhedronGeometry,
            PolyhedronBufferGeometry: PolyhedronBufferGeometry,
            TubeGeometry: TubeGeometry,
            TubeBufferGeometry: TubeBufferGeometry,
            TorusKnotGeometry: TorusKnotGeometry,
            TorusKnotBufferGeometry: TorusKnotBufferGeometry,
            TorusGeometry: TorusGeometry,
            TorusBufferGeometry: TorusBufferGeometry,
            TextGeometry: TextGeometry,
            TextBufferGeometry: TextBufferGeometry,
            SphereGeometry: SphereGeometry,
            SphereBufferGeometry: SphereBufferGeometry,
            RingGeometry: RingGeometry,
            RingBufferGeometry: RingBufferGeometry,
            PlaneGeometry: PlaneGeometry,
            PlaneBufferGeometry: PlaneBufferGeometry,
            LatheGeometry: LatheGeometry,
            LatheBufferGeometry: LatheBufferGeometry,
            ShapeGeometry: ShapeGeometry,
            ShapeBufferGeometry: ShapeBufferGeometry,
            ExtrudeGeometry: ExtrudeGeometry,
            ExtrudeBufferGeometry: ExtrudeBufferGeometry,
            EdgesGeometry: EdgesGeometry,
            ConeGeometry: ConeGeometry,
            ConeBufferGeometry: ConeBufferGeometry,
            CylinderGeometry: CylinderGeometry,
            CylinderBufferGeometry: CylinderBufferGeometry,
            CircleGeometry: CircleGeometry,
            CircleBufferGeometry: CircleBufferGeometry,
            BoxGeometry: BoxGeometry,
            BoxBufferGeometry: BoxBufferGeometry
        });
        function ShadowMaterial(parameters) {
            Material.call(this);
            this.type = "ShadowMaterial";
            this.color = new Color(0);
            this.transparent = true;
            this.setValues(parameters)
        }
        ShadowMaterial.prototype = Object.create(Material.prototype);
        ShadowMaterial.prototype.constructor = ShadowMaterial;
        ShadowMaterial.prototype.isShadowMaterial = true;
        ShadowMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.color.copy(source.color);
            return this
        };
        function RawShaderMaterial(parameters) {
            ShaderMaterial.call(this, parameters);
            this.type = "RawShaderMaterial"
        }
        RawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);
        RawShaderMaterial.prototype.constructor = RawShaderMaterial;
        RawShaderMaterial.prototype.isRawShaderMaterial = true;
        function MeshStandardMaterial(parameters) {
            Material.call(this);
            this.defines = {
                STANDARD: ""
            };
            this.type = "MeshStandardMaterial";
            this.color = new Color(16777215);
            this.roughness = .5;
            this.metalness = .5;
            this.map = null;
            this.lightMap = null;
            this.lightMapIntensity = 1;
            this.aoMap = null;
            this.aoMapIntensity = 1;
            this.emissive = new Color(0);
            this.emissiveIntensity = 1;
            this.emissiveMap = null;
            this.bumpMap = null;
            this.bumpScale = 1;
            this.normalMap = null;
            this.normalMapType = TangentSpaceNormalMap;
            this.normalScale = new Vector2(1, 1);
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.roughnessMap = null;
            this.metalnessMap = null;
            this.alphaMap = null;
            this.envMap = null;
            this.envMapIntensity = 1;
            this.refractionRatio = .98;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = "round";
            this.wireframeLinejoin = "round";
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
            this.setValues(parameters)
        }
        MeshStandardMaterial.prototype = Object.create(Material.prototype);
        MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
        MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
        MeshStandardMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.defines = {
                STANDARD: ""
            };
            this.color.copy(source.color);
            this.roughness = source.roughness;
            this.metalness = source.metalness;
            this.map = source.map;
            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;
            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;
            this.emissive.copy(source.emissive);
            this.emissiveMap = source.emissiveMap;
            this.emissiveIntensity = source.emissiveIntensity;
            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;
            this.normalMap = source.normalMap;
            this.normalMapType = source.normalMapType;
            this.normalScale.copy(source.normalScale);
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
            this.roughnessMap = source.roughnessMap;
            this.metalnessMap = source.metalnessMap;
            this.alphaMap = source.alphaMap;
            this.envMap = source.envMap;
            this.envMapIntensity = source.envMapIntensity;
            this.refractionRatio = source.refractionRatio;
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
            return this
        };
        function MeshPhysicalMaterial(parameters) {
            MeshStandardMaterial.call(this);
            this.defines = {
                PHYSICAL: ""
            };
            this.type = "MeshPhysicalMaterial";
            this.reflectivity = .5;
            this.clearCoat = 0;
            this.clearCoatRoughness = 0;
            this.setValues(parameters)
        }
        MeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);
        MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
        MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
        MeshPhysicalMaterial.prototype.copy = function(source) {
            MeshStandardMaterial.prototype.copy.call(this, source);
            this.defines = {
                PHYSICAL: ""
            };
            this.reflectivity = source.reflectivity;
            this.clearCoat = source.clearCoat;
            this.clearCoatRoughness = source.clearCoatRoughness;
            return this
        };
        function MeshPhongMaterial(parameters) {
            Material.call(this);
            this.type = "MeshPhongMaterial";
            this.color = new Color(16777215);
            this.specular = new Color(1118481);
            this.shininess = 30;
            this.map = null;
            this.lightMap = null;
            this.lightMapIntensity = 1;
            this.aoMap = null;
            this.aoMapIntensity = 1;
            this.emissive = new Color(0);
            this.emissiveIntensity = 1;
            this.emissiveMap = null;
            this.bumpMap = null;
            this.bumpScale = 1;
            this.normalMap = null;
            this.normalMapType = TangentSpaceNormalMap;
            this.normalScale = new Vector2(1, 1);
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.specularMap = null;
            this.alphaMap = null;
            this.envMap = null;
            this.combine = MultiplyOperation;
            this.reflectivity = 1;
            this.refractionRatio = .98;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = "round";
            this.wireframeLinejoin = "round";
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
            this.setValues(parameters)
        }
        MeshPhongMaterial.prototype = Object.create(Material.prototype);
        MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
        MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
        MeshPhongMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.color.copy(source.color);
            this.specular.copy(source.specular);
            this.shininess = source.shininess;
            this.map = source.map;
            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;
            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;
            this.emissive.copy(source.emissive);
            this.emissiveMap = source.emissiveMap;
            this.emissiveIntensity = source.emissiveIntensity;
            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;
            this.normalMap = source.normalMap;
            this.normalMapType = source.normalMapType;
            this.normalScale.copy(source.normalScale);
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
            this.specularMap = source.specularMap;
            this.alphaMap = source.alphaMap;
            this.envMap = source.envMap;
            this.combine = source.combine;
            this.reflectivity = source.reflectivity;
            this.refractionRatio = source.refractionRatio;
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
            return this
        };
        function MeshToonMaterial(parameters) {
            MeshPhongMaterial.call(this);
            this.defines = {
                TOON: ""
            };
            this.type = "MeshToonMaterial";
            this.gradientMap = null;
            this.setValues(parameters)
        }
        MeshToonMaterial.prototype = Object.create(MeshPhongMaterial.prototype);
        MeshToonMaterial.prototype.constructor = MeshToonMaterial;
        MeshToonMaterial.prototype.isMeshToonMaterial = true;
        MeshToonMaterial.prototype.copy = function(source) {
            MeshPhongMaterial.prototype.copy.call(this, source);
            this.gradientMap = source.gradientMap;
            return this
        };
        function MeshNormalMaterial(parameters) {
            Material.call(this);
            this.type = "MeshNormalMaterial";
            this.bumpMap = null;
            this.bumpScale = 1;
            this.normalMap = null;
            this.normalMapType = TangentSpaceNormalMap;
            this.normalScale = new Vector2(1, 1);
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.fog = false;
            this.lights = false;
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
            this.setValues(parameters)
        }
        MeshNormalMaterial.prototype = Object.create(Material.prototype);
        MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
        MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
        MeshNormalMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;
            this.normalMap = source.normalMap;
            this.normalMapType = source.normalMapType;
            this.normalScale.copy(source.normalScale);
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
            return this
        };
        function MeshLambertMaterial(parameters) {
            Material.call(this);
            this.type = "MeshLambertMaterial";
            this.color = new Color(16777215);
            this.map = null;
            this.lightMap = null;
            this.lightMapIntensity = 1;
            this.aoMap = null;
            this.aoMapIntensity = 1;
            this.emissive = new Color(0);
            this.emissiveIntensity = 1;
            this.emissiveMap = null;
            this.specularMap = null;
            this.alphaMap = null;
            this.envMap = null;
            this.combine = MultiplyOperation;
            this.reflectivity = 1;
            this.refractionRatio = .98;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = "round";
            this.wireframeLinejoin = "round";
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
            this.setValues(parameters)
        }
        MeshLambertMaterial.prototype = Object.create(Material.prototype);
        MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
        MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
        MeshLambertMaterial.prototype.copy = function(source) {
            Material.prototype.copy.call(this, source);
            this.color.copy(source.color);
            this.map = source.map;
            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;
            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;
            this.emissive.copy(source.emissive);
            this.emissiveMap = source.emissiveMap;
            this.emissiveIntensity = source.emissiveIntensity;
            this.specularMap = source.specularMap;
            this.alphaMap = source.alphaMap;
            this.envMap = source.envMap;
            this.combine = source.combine;
            this.reflectivity = source.reflectivity;
            this.refractionRatio = source.refractionRatio;
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
            return this
        };
        function LineDashedMaterial(parameters) {
            LineBasicMaterial.call(this);
            this.type = "LineDashedMaterial";
            this.scale = 1;
            this.dashSize = 3;
            this.gapSize = 1;
            this.setValues(parameters)
        }
        LineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);
        LineDashedMaterial.prototype.constructor = LineDashedMaterial;
        LineDashedMaterial.prototype.isLineDashedMaterial = true;
        LineDashedMaterial.prototype.copy = function(source) {
            LineBasicMaterial.prototype.copy.call(this, source);
            this.scale = source.scale;
            this.dashSize = source.dashSize;
            this.gapSize = source.gapSize;
            return this
        };
        var Materials = Object.freeze({
            ShadowMaterial: ShadowMaterial,
            SpriteMaterial: SpriteMaterial,
            RawShaderMaterial: RawShaderMaterial,
            ShaderMaterial: ShaderMaterial,
            PointsMaterial: PointsMaterial,
            MeshPhysicalMaterial: MeshPhysicalMaterial,
            MeshStandardMaterial: MeshStandardMaterial,
            MeshPhongMaterial: MeshPhongMaterial,
            MeshToonMaterial: MeshToonMaterial,
            MeshNormalMaterial: MeshNormalMaterial,
            MeshLambertMaterial: MeshLambertMaterial,
            MeshDepthMaterial: MeshDepthMaterial,
            MeshDistanceMaterial: MeshDistanceMaterial,
            MeshBasicMaterial: MeshBasicMaterial,
            LineDashedMaterial: LineDashedMaterial,
            LineBasicMaterial: LineBasicMaterial,
            Material: Material
        });
        var Cache = {
            enabled: false,
            files: {},
            add: function(key, file) {
                if (this.enabled === false)
                    return;
                this.files[key] = file
            },
            get: function(key) {
                if (this.enabled === false)
                    return;
                return this.files[key]
            },
            remove: function(key) {
                delete this.files[key]
            },
            clear: function() {
                this.files = {}
            }
        };
        function LoadingManager(onLoad, onProgress, onError) {
            var scope = this;
            var isLoading = false;
            var itemsLoaded = 0;
            var itemsTotal = 0;
            var urlModifier = undefined;
            this.onStart = undefined;
            this.onLoad = onLoad;
            this.onProgress = onProgress;
            this.onError = onError;
            this.itemStart = function(url) {
                itemsTotal++;
                if (isLoading === false) {
                    if (scope.onStart !== undefined) {
                        scope.onStart(url, itemsLoaded, itemsTotal)
                    }
                }
                isLoading = true
            };
            this.itemEnd = function(url) {
                itemsLoaded++;
                if (scope.onProgress !== undefined) {
                    scope.onProgress(url, itemsLoaded, itemsTotal)
                }
                if (itemsLoaded === itemsTotal) {
                    isLoading = false;
                    if (scope.onLoad !== undefined) {
                        scope.onLoad()
                    }
                }
            };
            this.itemError = function(url) {
                if (scope.onError !== undefined) {
                    scope.onError(url)
                }
            };
            this.resolveURL = function(url) {
                if (urlModifier) {
                    return urlModifier(url)
                }
                return url
            };
            this.setURLModifier = function(transform) {
                urlModifier = transform;
                return this
            }
        }
        var DefaultLoadingManager = new LoadingManager;
        var loading = {};
        function FileLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager
        }
        Object.assign(FileLoader.prototype, {
            load: function(url, onLoad, onProgress, onError) {
                if (url === undefined)
                    url = "";
                if (this.path !== undefined)
                    url = this.path + url;
                url = this.manager.resolveURL(url);
                var scope = this;
                var cached = Cache.get(url);
                if (cached !== undefined) {
                    scope.manager.itemStart(url);
                    setTimeout(function() {
                        if (onLoad)
                            onLoad(cached);
                        scope.manager.itemEnd(url)
                    }, 0);
                    return cached
                }
                if (loading[url] !== undefined) {
                    loading[url].push({
                        onLoad: onLoad,
                        onProgress: onProgress,
                        onError: onError
                    });
                    return
                }
                var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
                var dataUriRegexResult = url.match(dataUriRegex);
                if (dataUriRegexResult) {
                    var mimeType = dataUriRegexResult[1];
                    var isBase64 = !!dataUriRegexResult[2];
                    var data = dataUriRegexResult[3];
                    data = window.decodeURIComponent(data);
                    if (isBase64)
                        data = window.atob(data);
                    try {
                        var response;
                        var responseType = (this.responseType || "").toLowerCase();
                        switch (responseType) {
                        case "arraybuffer":
                        case "blob":
                            var view = new Uint8Array(data.length);
                            for (var i = 0; i < data.length; i++) {
                                view[i] = data.charCodeAt(i)
                            }
                            if (responseType === "blob") {
                                response = new Blob([view.buffer], {
                                    type: mimeType
                                })
                            } else {
                                response = view.buffer
                            }
                            break;
                        case "document":
                            var parser = new DOMParser;
                            response = parser.parseFromString(data, mimeType);
                            break;
                        case "json":
                            response = JSON.parse(data);
                            break;
                        default:
                            response = data;
                            break
                        }
                        window.setTimeout(function() {
                            if (onLoad)
                                onLoad(response);
                            scope.manager.itemEnd(url)
                        }, 0)
                    } catch (error) {
                        window.setTimeout(function() {
                            if (onError)
                                onError(error);
                            scope.manager.itemEnd(url);
                            scope.manager.itemError(url)
                        }, 0)
                    }
                } else {
                    loading[url] = [];
                    loading[url].push({
                        onLoad: onLoad,
                        onProgress: onProgress,
                        onError: onError
                    });
                    var request = new XMLHttpRequest;
                    request.open("GET", url, true);
                    request.addEventListener("load", function(event) {
                        var response = this.response;
                        Cache.add(url, response);
                        var callbacks = loading[url];
                        delete loading[url];
                        if (this.status === 200 || this.status === 0) {
                            if (this.status === 0)
                                console.warn("THREE.FileLoader: HTTP Status 0 received.");
                            for (var i = 0, il = callbacks.length; i < il; i++) {
                                var callback = callbacks[i];
                                if (callback.onLoad)
                                    callback.onLoad(response)
                            }
                            scope.manager.itemEnd(url)
                        } else {
                            for (var i = 0, il = callbacks.length; i < il; i++) {
                                var callback = callbacks[i];
                                if (callback.onError)
                                    callback.onError(event)
                            }
                            scope.manager.itemEnd(url);
                            scope.manager.itemError(url)
                        }
                    }, false);
                    request.addEventListener("progress", function(event) {
                        var callbacks = loading[url];
                        for (var i = 0, il = callbacks.length; i < il; i++) {
                            var callback = callbacks[i];
                            if (callback.onProgress)
                                callback.onProgress(event)
                        }
                    }, false);
                    request.addEventListener("error", function(event) {
                        var callbacks = loading[url];
                        delete loading[url];
                        for (var i = 0, il = callbacks.length; i < il; i++) {
                            var callback = callbacks[i];
                            if (callback.onError)
                                callback.onError(event)
                        }
                        scope.manager.itemEnd(url);
                        scope.manager.itemError(url)
                    }, false);
                    if (this.responseType !== undefined)
                        request.responseType = this.responseType;
                    if (this.withCredentials !== undefined)
                        request.withCredentials = this.withCredentials;
                    if (request.overrideMimeType)
                        request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : "text/plain");
                    for (var header in this.requestHeader) {
                        request.setRequestHeader(header, this.requestHeader[header])
                    }
                    request.send(null)
                }
                scope.manager.itemStart(url);
                return request
            },
            setPath: function(value) {
                this.path = value;
                return this
            },
            setResponseType: function(value) {
                this.responseType = value;
                return this
            },
            setWithCredentials: function(value) {
                this.withCredentials = value;
                return this
            },
            setMimeType: function(value) {
                this.mimeType = value;
                return this
            },
            setRequestHeader: function(value) {
                this.requestHeader = value;
                return this
            }
        });
        function CompressedTextureLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager;
            this._parser = null
        }
        Object.assign(CompressedTextureLoader.prototype, {
            load: function(url, onLoad, onProgress, onError) {
                var scope = this;
                var images = [];
                var texture = new CompressedTexture;
                texture.image = images;
                var loader = new FileLoader(this.manager);
                loader.setPath(this.path);
                loader.setResponseType("arraybuffer");
                function loadTexture(i) {
                    loader.load(url[i], function(buffer) {
                        var texDatas = scope._parser(buffer, true);
                        images[i] = {
                            width: texDatas.width,
                            height: texDatas.height,
                            format: texDatas.format,
                            mipmaps: texDatas.mipmaps
                        };
                        loaded += 1;
                        if (loaded === 6) {
                            if (texDatas.mipmapCount === 1)
                                texture.minFilter = LinearFilter;
                            texture.format = texDatas.format;
                            texture.needsUpdate = true;
                            if (onLoad)
                                onLoad(texture)
                        }
                    }, onProgress, onError)
                }
                if (Array.isArray(url)) {
                    var loaded = 0;
                    for (var i = 0, il = url.length; i < il; ++i) {
                        loadTexture(i)
                    }
                } else {
                    loader.load(url, function(buffer) {
                        var texDatas = scope._parser(buffer, true);
                        if (texDatas.isCubemap) {
                            var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
                            for (var f = 0; f < faces; f++) {
                                images[f] = {
                                    mipmaps: []
                                };
                                for (var i = 0; i < texDatas.mipmapCount; i++) {
                                    images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                                    images[f].format = texDatas.format;
                                    images[f].width = texDatas.width;
                                    images[f].height = texDatas.height
                                }
                            }
                        } else {
                            texture.image.width = texDatas.width;
                            texture.image.height = texDatas.height;
                            texture.mipmaps = texDatas.mipmaps
                        }
                        if (texDatas.mipmapCount === 1) {
                            texture.minFilter = LinearFilter
                        }
                        texture.format = texDatas.format;
                        texture.needsUpdate = true;
                        if (onLoad)
                            onLoad(texture)
                    }, onProgress, onError)
                }
                return texture
            },
            setPath: function(value) {
                this.path = value;
                return this
            }
        });
        function DataTextureLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager;
            this._parser = null
        }
        Object.assign(DataTextureLoader.prototype, {
            load: function(url, onLoad, onProgress, onError) {
                var scope = this;
                var texture = new DataTexture;
                var loader = new FileLoader(this.manager);
                loader.setResponseType("arraybuffer");
                loader.load(url, function(buffer) {
                    var texData = scope._parser(buffer);
                    if (!texData)
                        return;
                    if (undefined !== texData.image) {
                        texture.image = texData.image
                    } else if (undefined !== texData.data) {
                        texture.image.width = texData.width;
                        texture.image.height = texData.height;
                        texture.image.data = texData.data
                    }
                    texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
                    texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;
                    texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
                    texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;
                    texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;
                    if (undefined !== texData.format) {
                        texture.format = texData.format
                    }
                    if (undefined !== texData.type) {
                        texture.type = texData.type
                    }
                    if (undefined !== texData.mipmaps) {
                        texture.mipmaps = texData.mipmaps
                    }
                    if (1 === texData.mipmapCount) {
                        texture.minFilter = LinearFilter
                    }
                    texture.needsUpdate = true;
                    if (onLoad)
                        onLoad(texture, texData)
                }, onProgress, onError);
                return texture
            }
        });
        function ImageLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager
        }
        Object.assign(ImageLoader.prototype, {
            crossOrigin: "anonymous",
            load: function(url, onLoad, onProgress, onError) {
                if (url === undefined)
                    url = "";
                if (this.path !== undefined)
                    url = this.path + url;
                url = this.manager.resolveURL(url);
                var scope = this;
                var cached = Cache.get(url);
                if (cached !== undefined) {
                    scope.manager.itemStart(url);
                    setTimeout(function() {
                        if (onLoad)
                            onLoad(cached);
                        scope.manager.itemEnd(url)
                    }, 0);
                    return cached
                }
                var image = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
                function onImageLoad() {
                    image.removeEventListener("load", onImageLoad, false);
                    image.removeEventListener("error", onImageError, false);
                    Cache.add(url, this);
                    if (onLoad)
                        onLoad(this);
                    scope.manager.itemEnd(url)
                }
                function onImageError(event) {
                    image.removeEventListener("load", onImageLoad, false);
                    image.removeEventListener("error", onImageError, false);
                    if (onError)
                        onError(event);
                    scope.manager.itemEnd(url);
                    scope.manager.itemError(url)
                }
                image.addEventListener("load", onImageLoad, false);
                image.addEventListener("error", onImageError, false);
                if (url.substr(0, 5) !== "data:") {
                    if (this.crossOrigin !== undefined)
                        image.crossOrigin = this.crossOrigin
                }
                scope.manager.itemStart(url);
                image.src = url;
                return image
            },
            setCrossOrigin: function(value) {
                this.crossOrigin = value;
                return this
            },
            setPath: function(value) {
                this.path = value;
                return this
            }
        });
        function CubeTextureLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager
        }
        Object.assign(CubeTextureLoader.prototype, {
            crossOrigin: "anonymous",
            load: function(urls, onLoad, onProgress, onError) {
                var texture = new CubeTexture;
                var loader = new ImageLoader(this.manager);
                loader.setCrossOrigin(this.crossOrigin);
                loader.setPath(this.path);
                var loaded = 0;
                function loadTexture(i) {
                    loader.load(urls[i], function(image) {
                        texture.images[i] = image;
                        loaded++;
                        if (loaded === 6) {
                            texture.needsUpdate = true;
                            if (onLoad)
                                onLoad(texture)
                        }
                    }, undefined, onError)
                }
                for (var i = 0; i < urls.length; ++i) {
                    loadTexture(i)
                }
                return texture
            },
            setCrossOrigin: function(value) {
                this.crossOrigin = value;
                return this
            },
            setPath: function(value) {
                this.path = value;
                return this
            }
        });
        function TextureLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager
        }
        Object.assign(TextureLoader.prototype, {
            crossOrigin: "anonymous",
            load: function(url, onLoad, onProgress, onError) {
                var texture = new Texture;
                var loader = new ImageLoader(this.manager);
                loader.setCrossOrigin(this.crossOrigin);
                loader.setPath(this.path);
                loader.load(url, function(image) {
                    texture.image = image;
                    var isJPEG = url.search(/\.(jpg|jpeg)$/) > 0 || url.search(/^data\:image\/jpeg/) === 0;
                    texture.format = isJPEG ? RGBFormat : RGBAFormat;
                    texture.needsUpdate = true;
                    if (onLoad !== undefined) {
                        onLoad(texture)
                    }
                }, onProgress, onError);
                return texture
            },
            setCrossOrigin: function(value) {
                this.crossOrigin = value;
                return this
            },
            setPath: function(value) {
                this.path = value;
                return this
            }
        });
        function Curve() {
            this.type = "Curve";
            this.arcLengthDivisions = 200
        }
        Object.assign(Curve.prototype, {
            getPoint: function() {
                console.warn("THREE.Curve: .getPoint() not implemented.");
                return null
            },
            getPointAt: function(u, optionalTarget) {
                var t = this.getUtoTmapping(u);
                return this.getPoint(t, optionalTarget)
            },
            getPoints: function(divisions) {
                if (divisions === undefined)
                    divisions = 5;
                var points = [];
                for (var d = 0; d <= divisions; d++) {
                    points.push(this.getPoint(d / divisions))
                }
                return points
            },
            getSpacedPoints: function(divisions) {
                if (divisions === undefined)
                    divisions = 5;
                var points = [];
                for (var d = 0; d <= divisions; d++) {
                    points.push(this.getPointAt(d / divisions))
                }
                return points
            },
            getLength: function() {
                var lengths = this.getLengths();
                return lengths[lengths.length - 1]
            },
            getLengths: function(divisions) {
                if (divisions === undefined)
                    divisions = this.arcLengthDivisions;
                if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
                    return this.cacheArcLengths
                }
                this.needsUpdate = false;
                var cache = [];
                var current,
                    last = this.getPoint(0);
                var p,
                    sum = 0;
                cache.push(0);
                for (p = 1; p <= divisions; p++) {
                    current = this.getPoint(p / divisions);
                    sum += current.distanceTo(last);
                    cache.push(sum);
                    last = current
                }
                this.cacheArcLengths = cache;
                return cache
            },
            updateArcLengths: function() {
                this.needsUpdate = true;
                this.getLengths()
            },
            getUtoTmapping: function(u, distance) {
                var arcLengths = this.getLengths();
                var i = 0,
                    il = arcLengths.length;
                var targetArcLength;
                if (distance) {
                    targetArcLength = distance
                } else {
                    targetArcLength = u * arcLengths[il - 1]
                }
                var low = 0,
                    high = il - 1,
                    comparison;
                while (low <= high) {
                    i = Math.floor(low + (high - low) / 2);
                    comparison = arcLengths[i] - targetArcLength;
                    if (comparison < 0) {
                        low = i + 1
                    } else if (comparison > 0) {
                        high = i - 1
                    } else {
                        high = i;
                        break
                    }
                }
                i = high;
                if (arcLengths[i] === targetArcLength) {
                    return i / (il - 1)
                }
                var lengthBefore = arcLengths[i];
                var lengthAfter = arcLengths[i + 1];
                var segmentLength = lengthAfter - lengthBefore;
                var segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
                var t = (i + segmentFraction) / (il - 1);
                return t
            },
            getTangent: function(t) {
                var delta = 1e-4;
                var t1 = t - delta;
                var t2 = t + delta;
                if (t1 < 0)
                    t1 = 0;
                if (t2 > 1)
                    t2 = 1;
                var pt1 = this.getPoint(t1);
                var pt2 = this.getPoint(t2);
                var vec = pt2.clone().sub(pt1);
                return vec.normalize()
            },
            getTangentAt: function(u) {
                var t = this.getUtoTmapping(u);
                return this.getTangent(t)
            },
            computeFrenetFrames: function(segments, closed) {
                var normal = new Vector3;
                var tangents = [];
                var normals = [];
                var binormals = [];
                var vec = new Vector3;
                var mat = new Matrix4;
                var i,
                    u,
                    theta;
                for (i = 0; i <= segments; i++) {
                    u = i / segments;
                    tangents[i] = this.getTangentAt(u);
                    tangents[i].normalize()
                }
                normals[0] = new Vector3;
                binormals[0] = new Vector3;
                var min = Number.MAX_VALUE;
                var tx = Math.abs(tangents[0].x);
                var ty = Math.abs(tangents[0].y);
                var tz = Math.abs(tangents[0].z);
                if (tx <= min) {
                    min = tx;
                    normal.set(1, 0, 0)
                }
                if (ty <= min) {
                    min = ty;
                    normal.set(0, 1, 0)
                }
                if (tz <= min) {
                    normal.set(0, 0, 1)
                }
                vec.crossVectors(tangents[0], normal).normalize();
                normals[0].crossVectors(tangents[0], vec);
                binormals[0].crossVectors(tangents[0], normals[0]);
                for (i = 1; i <= segments; i++) {
                    normals[i] = normals[i - 1].clone();
                    binormals[i] = binormals[i - 1].clone();
                    vec.crossVectors(tangents[i - 1], tangents[i]);
                    if (vec.length() > Number.EPSILON) {
                        vec.normalize();
                        theta = Math.acos(_Math.clamp(tangents[i - 1].dot(tangents[i]), -1, 1));
                        normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta))
                    }
                    binormals[i].crossVectors(tangents[i], normals[i])
                }
                if (closed === true) {
                    theta = Math.acos(_Math.clamp(normals[0].dot(normals[segments]), -1, 1));
                    theta /= segments;
                    if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
                        theta = -theta
                    }
                    for (i = 1; i <= segments; i++) {
                        normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
                        binormals[i].crossVectors(tangents[i], normals[i])
                    }
                }
                return {
                    tangents: tangents,
                    normals: normals,
                    binormals: binormals
                }
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(source) {
                this.arcLengthDivisions = source.arcLengthDivisions;
                return this
            },
            toJSON: function() {
                var data = {
                    metadata: {
                        version: 4.5,
                        type: "Curve",
                        generator: "Curve.toJSON"
                    }
                };
                data.arcLengthDivisions = this.arcLengthDivisions;
                data.type = this.type;
                return data
            },
            fromJSON: function(json) {
                this.arcLengthDivisions = json.arcLengthDivisions;
                return this
            }
        });
        function EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
            Curve.call(this);
            this.type = "EllipseCurve";
            this.aX = aX || 0;
            this.aY = aY || 0;
            this.xRadius = xRadius || 1;
            this.yRadius = yRadius || 1;
            this.aStartAngle = aStartAngle || 0;
            this.aEndAngle = aEndAngle || 2 * Math.PI;
            this.aClockwise = aClockwise || false;
            this.aRotation = aRotation || 0
        }
        EllipseCurve.prototype = Object.create(Curve.prototype);
        EllipseCurve.prototype.constructor = EllipseCurve;
        EllipseCurve.prototype.isEllipseCurve = true;
        EllipseCurve.prototype.getPoint = function(t, optionalTarget) {
            var point = optionalTarget || new Vector2;
            var twoPi = Math.PI * 2;
            var deltaAngle = this.aEndAngle - this.aStartAngle;
            var samePoints = Math.abs(deltaAngle) < Number.EPSILON;
            while (deltaAngle < 0)
                deltaAngle += twoPi;
            while (deltaAngle > twoPi)
                deltaAngle -= twoPi;
            if (deltaAngle < Number.EPSILON) {
                if (samePoints) {
                    deltaAngle = 0
                } else {
                    deltaAngle = twoPi
                }
            }
            if (this.aClockwise === true && !samePoints) {
                if (deltaAngle === twoPi) {
                    deltaAngle = -twoPi
                } else {
                    deltaAngle = deltaAngle - twoPi
                }
            }
            var angle = this.aStartAngle + t * deltaAngle;
            var x = this.aX + this.xRadius * Math.cos(angle);
            var y = this.aY + this.yRadius * Math.sin(angle);
            if (this.aRotation !== 0) {
                var cos = Math.cos(this.aRotation);
                var sin = Math.sin(this.aRotation);
                var tx = x - this.aX;
                var ty = y - this.aY;
                x = tx * cos - ty * sin + this.aX;
                y = tx * sin + ty * cos + this.aY
            }
            return point.set(x, y)
        };
        EllipseCurve.prototype.copy = function(source) {
            Curve.prototype.copy.call(this, source);
            this.aX = source.aX;
            this.aY = source.aY;
            this.xRadius = source.xRadius;
            this.yRadius = source.yRadius;
            this.aStartAngle = source.aStartAngle;
            this.aEndAngle = source.aEndAngle;
            this.aClockwise = source.aClockwise;
            this.aRotation = source.aRotation;
            return this
        };
        EllipseCurve.prototype.toJSON = function() {
            var data = Curve.prototype.toJSON.call(this);
            data.aX = this.aX;
            data.aY = this.aY;
            data.xRadius = this.xRadius;
            data.yRadius = this.yRadius;
            data.aStartAngle = this.aStartAngle;
            data.aEndAngle = this.aEndAngle;
            data.aClockwise = this.aClockwise;
            data.aRotation = this.aRotation;
            return data
        };
        EllipseCurve.prototype.fromJSON = function(json) {
            Curve.prototype.fromJSON.call(this, json);
            this.aX = json.aX;
            this.aY = json.aY;
            this.xRadius = json.xRadius;
            this.yRadius = json.yRadius;
            this.aStartAngle = json.aStartAngle;
            this.aEndAngle = json.aEndAngle;
            this.aClockwise = json.aClockwise;
            this.aRotation = json.aRotation;
            return this
        };
        function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
            EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
            this.type = "ArcCurve"
        }
        ArcCurve.prototype = Object.create(EllipseCurve.prototype);
        ArcCurve.prototype.constructor = ArcCurve;
        ArcCurve.prototype.isArcCurve = true;
        function CubicPoly() {
            var c0 = 0,
                c1 = 0,
                c2 = 0,
                c3 = 0;
            function init(x0, x1, t0, t1) {
                c0 = x0;
                c1 = t0;
                c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
                c3 = 2 * x0 - 2 * x1 + t0 + t1
            }
            return {
                initCatmullRom: function(x0, x1, x2, x3, tension) {
                    init(x1, x2, tension * (x2 - x0), tension * (x3 - x1))
                },
                initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
                    var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
                    var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
                    t1 *= dt1;
                    t2 *= dt1;
                    init(x1, x2, t1, t2)
                },
                calc: function(t) {
                    var t2 = t * t;
                    var t3 = t2 * t;
                    return c0 + c1 * t + c2 * t2 + c3 * t3
                }
            }
        }
        var tmp = new Vector3;
        var px = new CubicPoly,
            py = new CubicPoly,
            pz = new CubicPoly;
        function CatmullRomCurve3(points, closed, curveType, tension) {
            Curve.call(this);
            this.type = "CatmullRomCurve3";
            this.points = points || [];
            this.closed = closed || false;
            this.curveType = curveType || "centripetal";
            this.tension = tension || .5
        }
        CatmullRomCurve3.prototype = Object.create(Curve.prototype);
        CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
        CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
        CatmullRomCurve3.prototype.getPoint = function(t, optionalTarget) {
            var point = optionalTarget || new Vector3;
            var points = this.points;
            var l = points.length;
            var p = (l - (this.closed ? 0 : 1)) * t;
            var intPoint = Math.floor(p);
            var weight = p - intPoint;
            if (this.closed) {
                intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l
            } else if (weight === 0 && intPoint === l - 1) {
                intPoint = l - 2;
                weight = 1
            }
            var p0,
                p1,
                p2,
                p3;
            if (this.closed || intPoint > 0) {
                p0 = points[(intPoint - 1) % l]
            } else {
                tmp.subVectors(points[0], points[1]).add(points[0]);
                p0 = tmp
            }
            p1 = points[intPoint % l];
            p2 = points[(intPoint + 1) % l];
            if (this.closed || intPoint + 2 < l) {
                p3 = points[(intPoint + 2) % l]
            } else {
                tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
                p3 = tmp
            }
            if (this.curveType === "centripetal" || this.curveType === "chordal") {
                var pow = this.curveType === "chordal" ? .5 : .25;
                var dt0 = Math.pow(p0.distanceToSquared(p1), pow);
                var dt1 = Math.pow(p1.distanceToSquared(p2), pow);
                var dt2 = Math.pow(p2.distanceToSquared(p3), pow);
                if (dt1 < 1e-4)
                    dt1 = 1;
                if (dt0 < 1e-4)
                    dt0 = dt1;
                if (dt2 < 1e-4)
                    dt2 = dt1;
                px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
                py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
                pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2)
            } else if (this.curveType === "catmullrom") {
                px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
                py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
                pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension)
            }
            point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
            return point
        };
        CatmullRomCurve3.prototype.copy = function(source) {
            Curve.prototype.copy.call(this, source);
            this.points = [];
            for (var i = 0, l = source.points.length; i < l; i++) {
                var point = source.points[i];
                this.points.push(point.clone())
            }
            this.closed = source.closed;
            this.curveType = source.curveType;
            this.tension = source.tension;
            return this
        };
        CatmullRomCurve3.prototype.toJSON = function() {
            var data = Curve.prototype.toJSON.call(this);
            data.points = [];
            for (var i = 0, l = this.points.length; i < l; i++) {
                var point = this.points[i];
                data.points.push(point.toArray())
            }
            data.closed = this.closed;
            data.curveType = this.curveType;
            data.tension = this.tension;
            return data
        };
        CatmullRomCurve3.prototype.fromJSON = function(json) {
            Curve.prototype.fromJSON.call(this, json);
            this.points = [];
            for (var i = 0, l = json.points.length; i < l; i++) {
                var point = json.points[i];
                this.points.push((new Vector3).fromArray(point))
            }
            this.closed = json.closed;
            this.curveType = json.curveType;
            this.tension = json.tension;
            return this
        };
        function CatmullRom(t, p0, p1, p2, p3) {
            var v0 = (p2 - p0) * .5;
            var v1 = (p3 - p1) * .5;
            var t2 = t * t;
            var t3 = t * t2;
            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1
        }
        function QuadraticBezierP0(t, p) {
            var k = 1 - t;
            return k * k * p
        }
        function QuadraticBezierP1(t, p) {
            return 2 * (1 - t) * t * p
        }
        function QuadraticBezierP2(t, p) {
            return t * t * p
        }
        function QuadraticBezier(t, p0, p1, p2) {
            return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2)
        }
        function CubicBezierP0(t, p) {
            var k = 1 - t;
            return k * k * k * p
        }
        function CubicBezierP1(t, p) {
            var k = 1 - t;
            return 3 * k * k * t * p
        }
        function CubicBezierP2(t, p) {
            return 3 * (1 - t) * t * t * p
        }
        function CubicBezierP3(t, p) {
            return t * t * t * p
        }
        function CubicBezier(t, p0, p1, p2, p3) {
            return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3)
        }
        function CubicBezierCurve(v0, v1, v2, v3) {
            Curve.call(this);
            this.type = "CubicBezierCurve";
            this.v0 = v0 || new Vector2;
            this.v1 = v1 || new Vector2;
            this.v2 = v2 || new Vector2;
            this.v3 = v3 || new Vector2
        }
        CubicBezierCurve.prototype = Object.create(Curve.prototype);
        CubicBezierCurve.prototype.constructor = CubicBezierCurve;
        CubicBezierCurve.prototype.isCubicBezierCurve = true;
        CubicBezierCurve.prototype.getPoint = function(t, optionalTarget) {
            var point = optionalTarget || new Vector2;
            var v0 = this.v0,
                v1 = this.v1,
                v2 = this.v2,
                v3 = this.v3;
            point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
            return point
        };
        CubicBezierCurve.prototype.copy = function(source) {
            Curve.prototype.copy.call(this, source);
            this.v0.copy(source.v0);
            this.v1.copy(source.v1);
            this.v2.copy(source.v2);
            this.v3.copy(source.v3);
            return this
        };
        CubicBezierCurve.prototype.toJSON = function() {
            var data = Curve.prototype.toJSON.call(this);
            data.v0 = this.v0.toArray();
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
            data.v3 = this.v3.toArray();
            return data
        };
        CubicBezierCurve.prototype.fromJSON = function(json) {
            Curve.prototype.fromJSON.call(this, json);
            this.v0.fromArray(json.v0);
            this.v1.fromArray(json.v1);
            this.v2.fromArray(json.v2);
            this.v3.fromArray(json.v3);
            return this
        };
        function CubicBezierCurve3(v0, v1, v2, v3) {
            Curve.call(this);
            this.type = "CubicBezierCurve3";
            this.v0 = v0 || new Vector3;
            this.v1 = v1 || new Vector3;
            this.v2 = v2 || new Vector3;
            this.v3 = v3 || new Vector3
        }
        CubicBezierCurve3.prototype = Object.create(Curve.prototype);
        CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
        CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
        CubicBezierCurve3.prototype.getPoint = function(t, optionalTarget) {
            var point = optionalTarget || new Vector3;
            var v0 = this.v0,
                v1 = this.v1,
                v2 = this.v2,
                v3 = this.v3;
            point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
            return point
        };
        CubicBezierCurve3.prototype.copy = function(source) {
            Curve.prototype.copy.call(this, source);
            this.v0.copy(source.v0);
            this.v1.copy(source.v1);
            this.v2.copy(source.v2);
            this.v3.copy(source.v3);
            return this
        };
        CubicBezierCurve3.prototype.toJSON = function() {
            var data = Curve.prototype.toJSON.call(this);
            data.v0 = this.v0.toArray();
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
            data.v3 = this.v3.toArray();
            return data
        };
        CubicBezierCurve3.prototype.fromJSON = function(json) {
            Curve.prototype.fromJSON.call(this, json);
            this.v0.fromArray(json.v0);
            this.v1.fromArray(json.v1);
            this.v2.fromArray(json.v2);
            this.v3.fromArray(json.v3);
            return this
        };
        function LineCurve(v1, v2) {
            Curve.call(this);
            this.type = "LineCurve";
            this.v1 = v1 || new Vector2;
            this.v2 = v2 || new Vector2
        }
        LineCurve.prototype = Object.create(Curve.prototype);
        LineCurve.prototype.constructor = LineCurve;
        LineCurve.prototype.isLineCurve = true;
        LineCurve.prototype.getPoint = function(t, optionalTarget) {
            var point = optionalTarget || new Vector2;
            if (t === 1) {
                point.copy(this.v2)
            } else {
                point.copy(this.v2).sub(this.v1);
                point.multiplyScalar(t).add(this.v1)
            }
            return point
        };
        LineCurve.prototype.getPointAt = function(u, optionalTarget) {
            return this.getPoint(u, optionalTarget)
        };
        LineCurve.prototype.getTangent = function() {
            var tangent = this.v2.clone().sub(this.v1);
            return tangent.normalize()
        };
        LineCurve.prototype.copy = function(source) {
            Curve.prototype.copy.call(this, source);
            this.v1.copy(source.v1);
            this.v2.copy(source.v2);
            return this
        };
        LineCurve.prototype.toJSON = function() {
            var data = Curve.prototype.toJSON.call(this);
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
            return data
        };
        LineCurve.prototype.fromJSON = function(json) {
            Curve.prototype.fromJSON.call(this, json);
            this.v1.fromArray(json.v1);
            this.v2.fromArray(json.v2);
            return this
        };
        function LineCurve3(v1, v2) {
            Curve.call(this);
            this.type = "LineCurve3";
            this.v1 = v1 || new Vector3;
            this.v2 = v2 || new Vector3
        }
        LineCurve3.prototype = Object.create(Curve.prototype);
        LineCurve3.prototype.constructor = LineCurve3;
        LineCurve3.prototype.isLineCurve3 = true;
        LineCurve3.prototype.getPoint = function(t, optionalTarget) {
            var point = optionalTarget || new Vector3;
            if (t === 1) {
                point.copy(this.v2)
            } else {
                point.copy(this.v2).sub(this.v1);
                point.multiplyScalar(t).add(this.v1)
            }
            return point
        };
        LineCurve3.prototype.getPointAt = function(u, optionalTarget) {
            return this.getPoint(u, optionalTarget)
        };
        LineCurve3.prototype.copy = function(source) {
            Curve.prototype.copy.call(this, source);
            this.v1.copy(source.v1);
            this.v2.copy(source.v2);
            return this
        };
        LineCurve3.prototype.toJSON = function() {
            var data = Curve.prototype.toJSON.call(this);
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
            return data
        };
        LineCurve3.prototype.fromJSON = function(json) {
            Curve.prototype.fromJSON.call(this, json);
            this.v1.fromArray(json.v1);
            this.v2.fromArray(json.v2);
            return this
        };
        function QuadraticBezierCurve(v0, v1, v2) {
            Curve.call(this);
            this.type = "QuadraticBezierCurve";
            this.v0 = v0 || new Vector2;
            this.v1 = v1 || new Vector2;
            this.v2 = v2 || new Vector2
        }
        QuadraticBezierCurve.prototype = Object.create(Curve.prototype);
        QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
        QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
        QuadraticBezierCurve.prototype.getPoint = function(t, optionalTarget) {
            var point = optionalTarget || new Vector2;
            var v0 = this.v0,
                v1 = this.v1,
                v2 = this.v2;
            point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
            return point
        };
        QuadraticBezierCurve.prototype.copy = function(source) {
            Curve.prototype.copy.call(this, source);
            this.v0.copy(source.v0);
            this.v1.copy(source.v1);
            this.v2.copy(source.v2);
            return this
        };
        QuadraticBezierCurve.prototype.toJSON = function() {
            var data = Curve.prototype.toJSON.call(this);
            data.v0 = this.v0.toArray();
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
            return data
        };
        QuadraticBezierCurve.prototype.fromJSON = function(json) {
            Curve.prototype.fromJSON.call(this, json);
            this.v0.fromArray(json.v0);
            this.v1.fromArray(json.v1);
            this.v2.fromArray(json.v2);
            return this
        };
        function QuadraticBezierCurve3(v0, v1, v2) {
            Curve.call(this);
            this.type = "QuadraticBezierCurve3";
            this.v0 = v0 || new Vector3;
            this.v1 = v1 || new Vector3;
            this.v2 = v2 || new Vector3
        }
        QuadraticBezierCurve3.prototype = Object.create(Curve.prototype);
        QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
        QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
        QuadraticBezierCurve3.prototype.getPoint = function(t, optionalTarget) {
            var point = optionalTarget || new Vector3;
            var v0 = this.v0,
                v1 = this.v1,
                v2 = this.v2;
            point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
            return point
        };
        QuadraticBezierCurve3.prototype.copy = function(source) {
            Curve.prototype.copy.call(this, source);
            this.v0.copy(source.v0);
            this.v1.copy(source.v1);
            this.v2.copy(source.v2);
            return this
        };
        QuadraticBezierCurve3.prototype.toJSON = function() {
            var data = Curve.prototype.toJSON.call(this);
            data.v0 = this.v0.toArray();
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
            return data
        };
        QuadraticBezierCurve3.prototype.fromJSON = function(json) {
            Curve.prototype.fromJSON.call(this, json);
            this.v0.fromArray(json.v0);
            this.v1.fromArray(json.v1);
            this.v2.fromArray(json.v2);
            return this
        };
        function SplineCurve(points) {
            Curve.call(this);
            this.type = "SplineCurve";
            this.points = points || []
        }
        SplineCurve.prototype = Object.create(Curve.prototype);
        SplineCurve.prototype.constructor = SplineCurve;
        SplineCurve.prototype.isSplineCurve = true;
        SplineCurve.prototype.getPoint = function(t, optionalTarget) {
            var point = optionalTarget || new Vector2;
            var points = this.points;
            var p = (points.length - 1) * t;
            var intPoint = Math.floor(p);
            var weight = p - intPoint;
            var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
            var p1 = points[intPoint];
            var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
            var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
            point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
            return point
        };
        SplineCurve.prototype.copy = function(source) {
            Curve.prototype.copy.call(this, source);
            this.points = [];
            for (var i = 0, l = source.points.length; i < l; i++) {
                var point = source.points[i];
                this.points.push(point.clone())
            }
            return this
        };
        SplineCurve.prototype.toJSON = function() {
            var data = Curve.prototype.toJSON.call(this);
            data.points = [];
            for (var i = 0, l = this.points.length; i < l; i++) {
                var point = this.points[i];
                data.points.push(point.toArray())
            }
            return data
        };
        SplineCurve.prototype.fromJSON = function(json) {
            Curve.prototype.fromJSON.call(this, json);
            this.points = [];
            for (var i = 0, l = json.points.length; i < l; i++) {
                var point = json.points[i];
                this.points.push((new Vector2).fromArray(point))
            }
            return this
        };
        var Curves = Object.freeze({
            ArcCurve: ArcCurve,
            CatmullRomCurve3: CatmullRomCurve3,
            CubicBezierCurve: CubicBezierCurve,
            CubicBezierCurve3: CubicBezierCurve3,
            EllipseCurve: EllipseCurve,
            LineCurve: LineCurve,
            LineCurve3: LineCurve3,
            QuadraticBezierCurve: QuadraticBezierCurve,
            QuadraticBezierCurve3: QuadraticBezierCurve3,
            SplineCurve: SplineCurve
        });
        function CurvePath() {
            Curve.call(this);
            this.type = "CurvePath";
            this.curves = [];
            this.autoClose = false
        }
        CurvePath.prototype = Object.assign(Object.create(Curve.prototype), {
            constructor: CurvePath,
            add: function(curve) {
                this.curves.push(curve)
            },
            closePath: function() {
                var startPoint = this.curves[0].getPoint(0);
                var endPoint = this.curves[this.curves.length - 1].getPoint(1);
                if (!startPoint.equals(endPoint)) {
                    this.curves.push(new LineCurve(endPoint, startPoint))
                }
            },
            getPoint: function(t) {
                var d = t * this.getLength();
                var curveLengths = this.getCurveLengths();
                var i = 0;
                while (i < curveLengths.length) {
                    if (curveLengths[i] >= d) {
                        var diff = curveLengths[i] - d;
                        var curve = this.curves[i];
                        var segmentLength = curve.getLength();
                        var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
                        return curve.getPointAt(u)
                    }
                    i++
                }
                return null
            },
            getLength: function() {
                var lens = this.getCurveLengths();
                return lens[lens.length - 1]
            },
            updateArcLengths: function() {
                this.needsUpdate = true;
                this.cacheLengths = null;
                this.getCurveLengths()
            },
            getCurveLengths: function() {
                if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
                    return this.cacheLengths
                }
                var lengths = [],
                    sums = 0;
                for (var i = 0, l = this.curves.length; i < l; i++) {
                    sums += this.curves[i].getLength();
                    lengths.push(sums)
                }
                this.cacheLengths = lengths;
                return lengths
            },
            getSpacedPoints: function(divisions) {
                if (divisions === undefined)
                    divisions = 40;
                var points = [];
                for (var i = 0; i <= divisions; i++) {
                    points.push(this.getPoint(i / divisions))
                }
                if (this.autoClose) {
                    points.push(points[0])
                }
                return points
            },
            getPoints: function(divisions) {
                divisions = divisions || 12;
                var points = [],
                    last;
                for (var i = 0, curves = this.curves; i < curves.length; i++) {
                    var curve = curves[i];
                    var resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
                    var pts = curve.getPoints(resolution);
                    for (var j = 0; j < pts.length; j++) {
                        var point = pts[j];
                        if (last && last.equals(point))
                            continue;
                        points.push(point);
                        last = point
                    }
                }
                if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
                    points.push(points[0])
                }
                return points
            },
            copy: function(source) {
                Curve.prototype.copy.call(this, source);
                this.curves = [];
                for (var i = 0, l = source.curves.length; i < l; i++) {
                    var curve = source.curves[i];
                    this.curves.push(curve.clone())
                }
                this.autoClose = source.autoClose;
                return this
            },
            toJSON: function() {
                var data = Curve.prototype.toJSON.call(this);
                data.autoClose = this.autoClose;
                data.curves = [];
                for (var i = 0, l = this.curves.length; i < l; i++) {
                    var curve = this.curves[i];
                    data.curves.push(curve.toJSON())
                }
                return data
            },
            fromJSON: function(json) {
                Curve.prototype.fromJSON.call(this, json);
                this.autoClose = json.autoClose;
                this.curves = [];
                for (var i = 0, l = json.curves.length; i < l; i++) {
                    var curve = json.curves[i];
                    this.curves.push((new Curves[curve.type]).fromJSON(curve))
                }
                return this
            }
        });
        function Path(points) {
            CurvePath.call(this);
            this.type = "Path";
            this.currentPoint = new Vector2;
            if (points) {
                this.setFromPoints(points)
            }
        }
        Path.prototype = Object.assign(Object.create(CurvePath.prototype), {
            constructor: Path,
            setFromPoints: function(points) {
                this.moveTo(points[0].x, points[0].y);
                for (var i = 1, l = points.length; i < l; i++) {
                    this.lineTo(points[i].x, points[i].y)
                }
            },
            moveTo: function(x, y) {
                this.currentPoint.set(x, y)
            },
            lineTo: function(x, y) {
                var curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
                this.curves.push(curve);
                this.currentPoint.set(x, y)
            },
            quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
                var curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
                this.curves.push(curve);
                this.currentPoint.set(aX, aY)
            },
            bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
                var curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
                this.curves.push(curve);
                this.currentPoint.set(aX, aY)
            },
            splineThru: function(pts) {
                var npts = [this.currentPoint.clone()].concat(pts);
                var curve = new SplineCurve(npts);
                this.curves.push(curve);
                this.currentPoint.copy(pts[pts.length - 1])
            },
            arc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
                var x0 = this.currentPoint.x;
                var y0 = this.currentPoint.y;
                this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise)
            },
            absarc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
                this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise)
            },
            ellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
                var x0 = this.currentPoint.x;
                var y0 = this.currentPoint.y;
                this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation)
            },
            absellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
                var curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
                if (this.curves.length > 0) {
                    var firstPoint = curve.getPoint(0);
                    if (!firstPoint.equals(this.currentPoint)) {
                        this.lineTo(firstPoint.x, firstPoint.y)
                    }
                }
                this.curves.push(curve);
                var lastPoint = curve.getPoint(1);
                this.currentPoint.copy(lastPoint)
            },
            copy: function(source) {
                CurvePath.prototype.copy.call(this, source);
                this.currentPoint.copy(source.currentPoint);
                return this
            },
            toJSON: function() {
                var data = CurvePath.prototype.toJSON.call(this);
                data.currentPoint = this.currentPoint.toArray();
                return data
            },
            fromJSON: function(json) {
                CurvePath.prototype.fromJSON.call(this, json);
                this.currentPoint.fromArray(json.currentPoint);
                return this
            }
        });
        function Shape(points) {
            Path.call(this, points);
            this.uuid = _Math.generateUUID();
            this.type = "Shape";
            this.holes = []
        }
        Shape.prototype = Object.assign(Object.create(Path.prototype), {
            constructor: Shape,
            getPointsHoles: function(divisions) {
                var holesPts = [];
                for (var i = 0, l = this.holes.length; i < l; i++) {
                    holesPts[i] = this.holes[i].getPoints(divisions)
                }
                return holesPts
            },
            extractPoints: function(divisions) {
                return {
                    shape: this.getPoints(divisions),
                    holes: this.getPointsHoles(divisions)
                }
            },
            copy: function(source) {
                Path.prototype.copy.call(this, source);
                this.holes = [];
                for (var i = 0, l = source.holes.length; i < l; i++) {
                    var hole = source.holes[i];
                    this.holes.push(hole.clone())
                }
                return this
            },
            toJSON: function() {
                var data = Path.prototype.toJSON.call(this);
                data.uuid = this.uuid;
                data.holes = [];
                for (var i = 0, l = this.holes.length; i < l; i++) {
                    var hole = this.holes[i];
                    data.holes.push(hole.toJSON())
                }
                return data
            },
            fromJSON: function(json) {
                Path.prototype.fromJSON.call(this, json);
                this.uuid = json.uuid;
                this.holes = [];
                for (var i = 0, l = json.holes.length; i < l; i++) {
                    var hole = json.holes[i];
                    this.holes.push((new Path).fromJSON(hole))
                }
                return this
            }
        });
        function Light(color, intensity) {
            Object3D.call(this);
            this.type = "Light";
            this.color = new Color(color);
            this.intensity = intensity !== undefined ? intensity : 1;
            this.receiveShadow = undefined
        }
        Light.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Light,
            isLight: true,
            copy: function(source) {
                Object3D.prototype.copy.call(this, source);
                this.color.copy(source.color);
                this.intensity = source.intensity;
                return this
            },
            toJSON: function(meta) {
                var data = Object3D.prototype.toJSON.call(this, meta);
                data.object.color = this.color.getHex();
                data.object.intensity = this.intensity;
                if (this.groundColor !== undefined)
                    data.object.groundColor = this.groundColor.getHex();
                if (this.distance !== undefined)
                    data.object.distance = this.distance;
                if (this.angle !== undefined)
                    data.object.angle = this.angle;
                if (this.decay !== undefined)
                    data.object.decay = this.decay;
                if (this.penumbra !== undefined)
                    data.object.penumbra = this.penumbra;
                if (this.shadow !== undefined)
                    data.object.shadow = this.shadow.toJSON();
                return data
            }
        });
        function HemisphereLight(skyColor, groundColor, intensity) {
            Light.call(this, skyColor, intensity);
            this.type = "HemisphereLight";
            this.castShadow = undefined;
            this.position.copy(Object3D.DefaultUp);
            this.updateMatrix();
            this.groundColor = new Color(groundColor)
        }
        HemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {
            constructor: HemisphereLight,
            isHemisphereLight: true,
            copy: function(source) {
                Light.prototype.copy.call(this, source);
                this.groundColor.copy(source.groundColor);
                return this
            }
        });
        function LightShadow(camera) {
            this.camera = camera;
            this.bias = 0;
            this.radius = 1;
            this.mapSize = new Vector2(512, 512);
            this.map = null;
            this.matrix = new Matrix4
        }
        Object.assign(LightShadow.prototype, {
            copy: function(source) {
                this.camera = source.camera.clone();
                this.bias = source.bias;
                this.radius = source.radius;
                this.mapSize.copy(source.mapSize);
                return this
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            toJSON: function() {
                var object = {};
                if (this.bias !== 0)
                    object.bias = this.bias;
                if (this.radius !== 1)
                    object.radius = this.radius;
                if (this.mapSize.x !== 512 || this.mapSize.y !== 512)
                    object.mapSize = this.mapSize.toArray();
                object.camera = this.camera.toJSON(false).object;
                delete object.camera.matrix;
                return object
            }
        });
        function SpotLightShadow() {
            LightShadow.call(this, new PerspectiveCamera(50, 1, .5, 500))
        }
        SpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
            constructor: SpotLightShadow,
            isSpotLightShadow: true,
            update: function(light) {
                var camera = this.camera;
                var fov = _Math.RAD2DEG * 2 * light.angle;
                var aspect = this.mapSize.width / this.mapSize.height;
                var far = light.distance || camera.far;
                if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
                    camera.fov = fov;
                    camera.aspect = aspect;
                    camera.far = far;
                    camera.updateProjectionMatrix()
                }
            }
        });
        function SpotLight(color, intensity, distance, angle, penumbra, decay) {
            Light.call(this, color, intensity);
            this.type = "SpotLight";
            this.position.copy(Object3D.DefaultUp);
            this.updateMatrix();
            this.target = new Object3D;
            Object.defineProperty(this, "power", {
                get: function() {
                    return this.intensity * Math.PI
                },
                set: function(power) {
                    this.intensity = power / Math.PI
                }
            });
            this.distance = distance !== undefined ? distance : 0;
            this.angle = angle !== undefined ? angle : Math.PI / 3;
            this.penumbra = penumbra !== undefined ? penumbra : 0;
            this.decay = decay !== undefined ? decay : 1;
            this.shadow = new SpotLightShadow
        }
        SpotLight.prototype = Object.assign(Object.create(Light.prototype), {
            constructor: SpotLight,
            isSpotLight: true,
            copy: function(source) {
                Light.prototype.copy.call(this, source);
                this.distance = source.distance;
                this.angle = source.angle;
                this.penumbra = source.penumbra;
                this.decay = source.decay;
                this.target = source.target.clone();
                this.shadow = source.shadow.clone();
                return this
            }
        });
        function PointLight(color, intensity, distance, decay) {
            Light.call(this, color, intensity);
            this.type = "PointLight";
            Object.defineProperty(this, "power", {
                get: function() {
                    return this.intensity * 4 * Math.PI
                },
                set: function(power) {
                    this.intensity = power / (4 * Math.PI)
                }
            });
            this.distance = distance !== undefined ? distance : 0;
            this.decay = decay !== undefined ? decay : 1;
            this.shadow = new LightShadow(new PerspectiveCamera(90, 1, .5, 500))
        }
        PointLight.prototype = Object.assign(Object.create(Light.prototype), {
            constructor: PointLight,
            isPointLight: true,
            copy: function(source) {
                Light.prototype.copy.call(this, source);
                this.distance = source.distance;
                this.decay = source.decay;
                this.shadow = source.shadow.clone();
                return this
            }
        });
        function DirectionalLightShadow() {
            LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, .5, 500))
        }
        DirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
            constructor: DirectionalLightShadow
        });
        function DirectionalLight(color, intensity) {
            Light.call(this, color, intensity);
            this.type = "DirectionalLight";
            this.position.copy(Object3D.DefaultUp);
            this.updateMatrix();
            this.target = new Object3D;
            this.shadow = new DirectionalLightShadow
        }
        DirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {
            constructor: DirectionalLight,
            isDirectionalLight: true,
            copy: function(source) {
                Light.prototype.copy.call(this, source);
                this.target = source.target.clone();
                this.shadow = source.shadow.clone();
                return this
            }
        });
        function AmbientLight(color, intensity) {
            Light.call(this, color, intensity);
            this.type = "AmbientLight";
            this.castShadow = undefined
        }
        AmbientLight.prototype = Object.assign(Object.create(Light.prototype), {
            constructor: AmbientLight,
            isAmbientLight: true
        });
        function RectAreaLight(color, intensity, width, height) {
            Light.call(this, color, intensity);
            this.type = "RectAreaLight";
            this.width = width !== undefined ? width : 10;
            this.height = height !== undefined ? height : 10
        }
        RectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {
            constructor: RectAreaLight,
            isRectAreaLight: true,
            copy: function(source) {
                Light.prototype.copy.call(this, source);
                this.width = source.width;
                this.height = source.height;
                return this
            },
            toJSON: function(meta) {
                var data = Light.prototype.toJSON.call(this, meta);
                data.object.width = this.width;
                data.object.height = this.height;
                return data
            }
        });
        var AnimationUtils = {
            arraySlice: function(array, from, to) {
                if (AnimationUtils.isTypedArray(array)) {
                    return new array.constructor(array.subarray(from, to !== undefined ? to : array.length))
                }
                return array.slice(from, to)
            },
            convertArray: function(array, type, forceClone) {
                if (!array || !forceClone && array.constructor === type)
                    return array;
                if (typeof type.BYTES_PER_ELEMENT === "number") {
                    return new type(array)
                }
                return Array.prototype.slice.call(array)
            },
            isTypedArray: function(object) {
                return ArrayBuffer.isView(object) && !(object instanceof DataView)
            },
            getKeyframeOrder: function(times) {
                function compareTime(i, j) {
                    return times[i] - times[j]
                }
                var n = times.length;
                var result = new Array(n);
                for (var i = 0; i !== n; ++i)
                    result[i] = i;
                result.sort(compareTime);
                return result
            },
            sortedArray: function(values, stride, order) {
                var nValues = values.length;
                var result = new values.constructor(nValues);
                for (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
                    var srcOffset = order[i] * stride;
                    for (var j = 0; j !== stride; ++j) {
                        result[dstOffset++] = values[srcOffset + j]
                    }
                }
                return result
            },
            flattenJSON: function(jsonKeys, times, values, valuePropertyName) {
                var i = 1,
                    key = jsonKeys[0];
                while (key !== undefined && key[valuePropertyName] === undefined) {
                    key = jsonKeys[i++]
                }
                if (key === undefined)
                    return;
                var value = key[valuePropertyName];
                if (value === undefined)
                    return;
                if (Array.isArray(value)) {
                    do {
                        value = key[valuePropertyName];
                        if (value !== undefined) {
                            times.push(key.time);
                            values.push.apply(values, value)
                        }
                        key = jsonKeys[i++]
                    } while (key !== undefined)
                } else if (value.toArray !== undefined) {
                    do {
                        value = key[valuePropertyName];
                        if (value !== undefined) {
                            times.push(key.time);
                            value.toArray(values, values.length)
                        }
                        key = jsonKeys[i++]
                    } while (key !== undefined)
                } else {
                    do {
                        value = key[valuePropertyName];
                        if (value !== undefined) {
                            times.push(key.time);
                            values.push(value)
                        }
                        key = jsonKeys[i++]
                    } while (key !== undefined)
                }
            }
        };
        function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
            this.parameterPositions = parameterPositions;
            this._cachedIndex = 0;
            this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
            this.sampleValues = sampleValues;
            this.valueSize = sampleSize
        }
        Object.assign(Interpolant.prototype, {
            evaluate: function(t) {
                var pp = this.parameterPositions,
                    i1 = this._cachedIndex,
                    t1 = pp[i1],
                    t0 = pp[i1 - 1];
                validate_interval:
                {
                    seek:
                    {
                        var right;
                        linear_scan:
                        {
                            forward_scan:
                            if (!(t < t1)) {
                                for (var giveUpAt = i1 + 2;;) {
                                    if (t1 === undefined) {
                                        if (t < t0)
                                            break forward_scan;
                                        i1 = pp.length;
                                        this._cachedIndex = i1;
                                        return this.afterEnd_(i1 - 1, t, t0)
                                    }
                                    if (i1 === giveUpAt)
                                        break;
                                    t0 = t1;
                                    t1 = pp[++i1];
                                    if (t < t1) {
                                        break seek
                                    }
                                }
                                right = pp.length;
                                break linear_scan
                            }
                            if (!(t >= t0)) {
                                var t1global = pp[1];
                                if (t < t1global) {
                                    i1 = 2;
                                    t0 = t1global
                                }
                                for (var giveUpAt = i1 - 2;;) {
                                    if (t0 === undefined) {
                                        this._cachedIndex = 0;
                                        return this.beforeStart_(0, t, t1)
                                    }
                                    if (i1 === giveUpAt)
                                        break;
                                    t1 = t0;
                                    t0 = pp[--i1 - 1];
                                    if (t >= t0) {
                                        break seek
                                    }
                                }
                                right = i1;
                                i1 = 0;
                                break linear_scan
                            }
                            break validate_interval
                        }while (i1 < right) {
                            var mid = i1 + right >>> 1;
                            if (t < pp[mid]) {
                                right = mid
                            } else {
                                i1 = mid + 1
                            }
                        }
                        t1 = pp[i1];
                        t0 = pp[i1 - 1];
                        if (t0 === undefined) {
                            this._cachedIndex = 0;
                            return this.beforeStart_(0, t, t1)
                        }
                        if (t1 === undefined) {
                            i1 = pp.length;
                            this._cachedIndex = i1;
                            return this.afterEnd_(i1 - 1, t0, t)
                        }
                    }this._cachedIndex = i1;
                    this.intervalChanged_(i1, t0, t1)
                }return this.interpolate_(i1, t0, t, t1)
            },
            settings: null,
            DefaultSettings_: {},
            getSettings_: function() {
                return this.settings || this.DefaultSettings_
            },
            copySampleValue_: function(index) {
                var result = this.resultBuffer,
                    values = this.sampleValues,
                    stride = this.valueSize,
                    offset = index * stride;
                for (var i = 0; i !== stride; ++i) {
                    result[i] = values[offset + i]
                }
                return result
            },
            interpolate_: function() {
                throw new Error("call to abstract method")
            },
            intervalChanged_: function() {}
        });
        Object.assign(Interpolant.prototype, {
            beforeStart_: Interpolant.prototype.copySampleValue_,
            afterEnd_: Interpolant.prototype.copySampleValue_
        });
        function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
            Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
            this._weightPrev = -0;
            this._offsetPrev = -0;
            this._weightNext = -0;
            this._offsetNext = -0
        }
        CubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
            constructor: CubicInterpolant,
            DefaultSettings_: {
                endingStart: ZeroCurvatureEnding,
                endingEnd: ZeroCurvatureEnding
            },
            intervalChanged_: function(i1, t0, t1) {
                var pp = this.parameterPositions,
                    iPrev = i1 - 2,
                    iNext = i1 + 1,
                    tPrev = pp[iPrev],
                    tNext = pp[iNext];
                if (tPrev === undefined) {
                    switch (this.getSettings_().endingStart) {
                    case ZeroSlopeEnding:
                        iPrev = i1;
                        tPrev = 2 * t0 - t1;
                        break;
                    case WrapAroundEnding:
                        iPrev = pp.length - 2;
                        tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
                        break;
                    default:
                        iPrev = i1;
                        tPrev = t1
                    }
                }
                if (tNext === undefined) {
                    switch (this.getSettings_().endingEnd) {
                    case ZeroSlopeEnding:
                        iNext = i1;
                        tNext = 2 * t1 - t0;
                        break;
                    case WrapAroundEnding:
                        iNext = 1;
                        tNext = t1 + pp[1] - pp[0];
                        break;
                    default:
                        iNext = i1 - 1;
                        tNext = t0
                    }
                }
                var halfDt = (t1 - t0) * .5,
                    stride = this.valueSize;
                this._weightPrev = halfDt / (t0 - tPrev);
                this._weightNext = halfDt / (tNext - t1);
                this._offsetPrev = iPrev * stride;
                this._offsetNext = iNext * stride
            },
            interpolate_: function(i1, t0, t, t1) {
                var result = this.resultBuffer,
                    values = this.sampleValues,
                    stride = this.valueSize,
                    o1 = i1 * stride,
                    o0 = o1 - stride,
                    oP = this._offsetPrev,
                    oN = this._offsetNext,
                    wP = this._weightPrev,
                    wN = this._weightNext,
                    p = (t - t0) / (t1 - t0),
                    pp = p * p,
                    ppp = pp * p;
                var sP = -wP * ppp + 2 * wP * pp - wP * p;
                var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-.5 + wP) * p + 1;
                var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + .5 * p;
                var sN = wN * ppp - wN * pp;
                for (var i = 0; i !== stride; ++i) {
                    result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i]
                }
                return result
            }
        });
        function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
            Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer)
        }
        LinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
            constructor: LinearInterpolant,
            interpolate_: function(i1, t0, t, t1) {
                var result = this.resultBuffer,
                    values = this.sampleValues,
                    stride = this.valueSize,
                    offset1 = i1 * stride,
                    offset0 = offset1 - stride,
                    weight1 = (t - t0) / (t1 - t0),
                    weight0 = 1 - weight1;
                for (var i = 0; i !== stride; ++i) {
                    result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1
                }
                return result
            }
        });
        function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
            Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer)
        }
        DiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
            constructor: DiscreteInterpolant,
            interpolate_: function(i1) {
                return this.copySampleValue_(i1 - 1)
            }
        });
        function KeyframeTrack(name, times, values, interpolation) {
            if (name === undefined)
                throw new Error("THREE.KeyframeTrack: track name is undefined");
            if (times === undefined || times.length === 0)
                throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
            this.name = name;
            this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
            this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
            this.setInterpolation(interpolation || this.DefaultInterpolation)
        }
        Object.assign(KeyframeTrack, {
            toJSON: function(track) {
                var trackType = track.constructor;
                var json;
                if (trackType.toJSON !== undefined) {
                    json = trackType.toJSON(track)
                } else {
                    json = {
                        name: track.name,
                        times: AnimationUtils.convertArray(track.times, Array),
                        values: AnimationUtils.convertArray(track.values, Array)
                    };
                    var interpolation = track.getInterpolation();
                    if (interpolation !== track.DefaultInterpolation) {
                        json.interpolation = interpolation
                    }
                }
                json.type = track.ValueTypeName;
                return json
            }
        });
        Object.assign(KeyframeTrack.prototype, {
            constructor: KeyframeTrack,
            TimeBufferType: Float32Array,
            ValueBufferType: Float32Array,
            DefaultInterpolation: InterpolateLinear,
            InterpolantFactoryMethodDiscrete: function(result) {
                return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result)
            },
            InterpolantFactoryMethodLinear: function(result) {
                return new LinearInterpolant(this.times, this.values, this.getValueSize(), result)
            },
            InterpolantFactoryMethodSmooth: function(result) {
                return new CubicInterpolant(this.times, this.values, this.getValueSize(), result)
            },
            setInterpolation: function(interpolation) {
                var factoryMethod;
                switch (interpolation) {
                case InterpolateDiscrete:
                    factoryMethod = this.InterpolantFactoryMethodDiscrete;
                    break;
                case InterpolateLinear:
                    factoryMethod = this.InterpolantFactoryMethodLinear;
                    break;
                case InterpolateSmooth:
                    factoryMethod = this.InterpolantFactoryMethodSmooth;
                    break
                }
                if (factoryMethod === undefined) {
                    var message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                    if (this.createInterpolant === undefined) {
                        if (interpolation !== this.DefaultInterpolation) {
                            this.setInterpolation(this.DefaultInterpolation)
                        } else {
                            throw new Error(message)
                        }
                    }
                    console.warn("THREE.KeyframeTrack:", message);
                    return this
                }
                this.createInterpolant = factoryMethod;
                return this
            },
            getInterpolation: function() {
                switch (this.createInterpolant) {
                case this.InterpolantFactoryMethodDiscrete:
                    return InterpolateDiscrete;
                case this.InterpolantFactoryMethodLinear:
                    return InterpolateLinear;
                case this.InterpolantFactoryMethodSmooth:
                    return InterpolateSmooth
                }
            },
            getValueSize: function() {
                return this.values.length / this.times.length
            },
            shift: function(timeOffset) {
                if (timeOffset !== 0) {
                    var times = this.times;
                    for (var i = 0, n = times.length; i !== n; ++i) {
                        times[i] += timeOffset
                    }
                }
                return this
            },
            scale: function(timeScale) {
                if (timeScale !== 1) {
                    var times = this.times;
                    for (var i = 0, n = times.length; i !== n; ++i) {
                        times[i] *= timeScale
                    }
                }
                return this
            },
            trim: function(startTime, endTime) {
                var times = this.times,
                    nKeys = times.length,
                    from = 0,
                    to = nKeys - 1;
                while (from !== nKeys && times[from] < startTime) {
                    ++from
                }
                while (to !== -1 && times[to] > endTime) {
                    --to
                }
                ++to;
                if (from !== 0 || to !== nKeys) {
                    if (from >= to)
                        to = Math.max(to, 1),
                        from = to - 1;
                    var stride = this.getValueSize();
                    this.times = AnimationUtils.arraySlice(times, from, to);
                    this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride)
                }
                return this
            },
            validate: function() {
                var valid = true;
                var valueSize = this.getValueSize();
                if (valueSize - Math.floor(valueSize) !== 0) {
                    console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
                    valid = false
                }
                var times = this.times,
                    values = this.values,
                    nKeys = times.length;
                if (nKeys === 0) {
                    console.error("THREE.KeyframeTrack: Track is empty.", this);
                    valid = false
                }
                var prevTime = null;
                for (var i = 0; i !== nKeys; i++) {
                    var currTime = times[i];
                    if (typeof currTime === "number" && isNaN(currTime)) {
                        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
                        valid = false;
                        break
                    }
                    if (prevTime !== null && prevTime > currTime) {
                        console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
                        valid = false;
                        break
                    }
                    prevTime = currTime
                }
                if (values !== undefined) {
                    if (AnimationUtils.isTypedArray(values)) {
                        for (var i = 0, n = values.length; i !== n; ++i) {
                            var value = values[i];
                            if (isNaN(value)) {
                                console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
                                valid = false;
                                break
                            }
                        }
                    }
                }
                return valid
            },
            optimize: function() {
                var times = this.times,
                    values = this.values,
                    stride = this.getValueSize(),
                    smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
                    writeIndex = 1,
                    lastIndex = times.length - 1;
                for (var i = 1; i < lastIndex; ++i) {
                    var keep = false;
                    var time = times[i];
                    var timeNext = times[i + 1];
                    if (time !== timeNext && (i !== 1 || time !== time[0])) {
                        if (!smoothInterpolation) {
                            var offset = i * stride,
                                offsetP = offset - stride,
                                offsetN = offset + stride;
                            for (var j = 0; j !== stride; ++j) {
                                var value = values[offset + j];
                                if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                                    keep = true;
                                    break
                                }
                            }
                        } else {
                            keep = true
                        }
                    }
                    if (keep) {
                        if (i !== writeIndex) {
                            times[writeIndex] = times[i];
                            var readOffset = i * stride,
                                writeOffset = writeIndex * stride;
                            for (var j = 0; j !== stride; ++j) {
                                values[writeOffset + j] = values[readOffset + j]
                            }
                        }
                        ++writeIndex
                    }
                }
                if (lastIndex > 0) {
                    times[writeIndex] = times[lastIndex];
                    for (var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
                        values[writeOffset + j] = values[readOffset + j]
                    }
                    ++writeIndex
                }
                if (writeIndex !== times.length) {
                    this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
                    this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride)
                }
                return this
            }
        });
        function BooleanKeyframeTrack(name, times, values) {
            KeyframeTrack.call(this, name, times, values)
        }
        BooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
            constructor: BooleanKeyframeTrack,
            ValueTypeName: "bool",
            ValueBufferType: Array,
            DefaultInterpolation: InterpolateDiscrete,
            InterpolantFactoryMethodLinear: undefined,
            InterpolantFactoryMethodSmooth: undefined
        });
        function ColorKeyframeTrack(name, times, values, interpolation) {
            KeyframeTrack.call(this, name, times, values, interpolation)
        }
        ColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
            constructor: ColorKeyframeTrack,
            ValueTypeName: "color"
        });
        function NumberKeyframeTrack(name, times, values, interpolation) {
            KeyframeTrack.call(this, name, times, values, interpolation)
        }
        NumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
            constructor: NumberKeyframeTrack,
            ValueTypeName: "number"
        });
        function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
            Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer)
        }
        QuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
            constructor: QuaternionLinearInterpolant,
            interpolate_: function(i1, t0, t, t1) {
                var result = this.resultBuffer,
                    values = this.sampleValues,
                    stride = this.valueSize,
                    offset = i1 * stride,
                    alpha = (t - t0) / (t1 - t0);
                for (var end = offset + stride; offset !== end; offset += 4) {
                    Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha)
                }
                return result
            }
        });
        function QuaternionKeyframeTrack(name, times, values, interpolation) {
            KeyframeTrack.call(this, name, times, values, interpolation)
        }
        QuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
            constructor: QuaternionKeyframeTrack,
            ValueTypeName: "quaternion",
            DefaultInterpolation: InterpolateLinear,
            InterpolantFactoryMethodLinear: function(result) {
                return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result)
            },
            InterpolantFactoryMethodSmooth: undefined
        });
        function StringKeyframeTrack(name, times, values, interpolation) {
            KeyframeTrack.call(this, name, times, values, interpolation)
        }
        StringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
            constructor: StringKeyframeTrack,
            ValueTypeName: "string",
            ValueBufferType: Array,
            DefaultInterpolation: InterpolateDiscrete,
            InterpolantFactoryMethodLinear: undefined,
            InterpolantFactoryMethodSmooth: undefined
        });
        function VectorKeyframeTrack(name, times, values, interpolation) {
            KeyframeTrack.call(this, name, times, values, interpolation)
        }
        VectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
            constructor: VectorKeyframeTrack,
            ValueTypeName: "vector"
        });
        function AnimationClip(name, duration, tracks) {
            this.name = name;
            this.tracks = tracks;
            this.duration = duration !== undefined ? duration : -1;
            this.uuid = _Math.generateUUID();
            if (this.duration < 0) {
                this.resetDuration()
            }
        }
        function getTrackTypeForValueTypeName(typeName) {
            switch (typeName.toLowerCase()) {
            case "scalar":
            case "double":
            case "float":
            case "number":
            case "integer":
                return NumberKeyframeTrack;
            case "vector":
            case "vector2":
            case "vector3":
            case "vector4":
                return VectorKeyframeTrack;
            case "color":
                return ColorKeyframeTrack;
            case "quaternion":
                return QuaternionKeyframeTrack;
            case "bool":
            case "boolean":
                return BooleanKeyframeTrack;
            case "string":
                return StringKeyframeTrack
            }
            throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName)
        }
        function parseKeyframeTrack(json) {
            if (json.type === undefined) {
                throw new Error("THREE.KeyframeTrack: track type undefined, can not parse")
            }
            var trackType = getTrackTypeForValueTypeName(json.type);
            if (json.times === undefined) {
                var times = [],
                    values = [];
                AnimationUtils.flattenJSON(json.keys, times, values, "value");
                json.times = times;
                json.values = values
            }
            if (trackType.parse !== undefined) {
                return trackType.parse(json)
            } else {
                return new trackType(json.name, json.times, json.values, json.interpolation)
            }
        }
        Object.assign(AnimationClip, {
            parse: function(json) {
                var tracks = [],
                    jsonTracks = json.tracks,
                    frameTime = 1 / (json.fps || 1);
                for (var i = 0, n = jsonTracks.length; i !== n; ++i) {
                    tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime))
                }
                return new AnimationClip(json.name, json.duration, tracks)
            },
            toJSON: function(clip) {
                var tracks = [],
                    clipTracks = clip.tracks;
                var json = {
                    name: clip.name,
                    duration: clip.duration,
                    tracks: tracks,
                    uuid: clip.uuid
                };
                for (var i = 0, n = clipTracks.length; i !== n; ++i) {
                    tracks.push(KeyframeTrack.toJSON(clipTracks[i]))
                }
                return json
            },
            CreateFromMorphTargetSequence: function(name, morphTargetSequence, fps, noLoop) {
                var numMorphTargets = morphTargetSequence.length;
                var tracks = [];
                for (var i = 0; i < numMorphTargets; i++) {
                    var times = [];
                    var values = [];
                    times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
                    values.push(0, 1, 0);
                    var order = AnimationUtils.getKeyframeOrder(times);
                    times = AnimationUtils.sortedArray(times, 1, order);
                    values = AnimationUtils.sortedArray(values, 1, order);
                    if (!noLoop && times[0] === 0) {
                        times.push(numMorphTargets);
                        values.push(values[0])
                    }
                    tracks.push(new NumberKeyframeTrack(".morphTargetInfluences[" + morphTargetSequence[i].name + "]", times, values).scale(1 / fps))
                }
                return new AnimationClip(name, -1, tracks)
            },
            findByName: function(objectOrClipArray, name) {
                var clipArray = objectOrClipArray;
                if (!Array.isArray(objectOrClipArray)) {
                    var o = objectOrClipArray;
                    clipArray = o.geometry && o.geometry.animations || o.animations
                }
                for (var i = 0; i < clipArray.length; i++) {
                    if (clipArray[i].name === name) {
                        return clipArray[i]
                    }
                }
                return null
            },
            CreateClipsFromMorphTargetSequences: function(morphTargets, fps, noLoop) {
                var animationToMorphTargets = {};
                var pattern = /^([\w-]*?)([\d]+)$/;
                for (var i = 0, il = morphTargets.length; i < il; i++) {
                    var morphTarget = morphTargets[i];
                    var parts = morphTarget.name.match(pattern);
                    if (parts && parts.length > 1) {
                        var name = parts[1];
                        var animationMorphTargets = animationToMorphTargets[name];
                        if (!animationMorphTargets) {
                            animationToMorphTargets[name] = animationMorphTargets = []
                        }
                        animationMorphTargets.push(morphTarget)
                    }
                }
                var clips = [];
                for (var name in animationToMorphTargets) {
                    clips.push(AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop))
                }
                return clips
            },
            parseAnimation: function(animation, bones) {
                if (!animation) {
                    console.error("THREE.AnimationClip: No animation in JSONLoader data.");
                    return null
                }
                var addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
                    if (animationKeys.length !== 0) {
                        var times = [];
                        var values = [];
                        AnimationUtils.flattenJSON(animationKeys, times, values, propertyName);
                        if (times.length !== 0) {
                            destTracks.push(new trackType(trackName, times, values))
                        }
                    }
                };
                var tracks = [];
                var clipName = animation.name || "default";
                var duration = animation.length || -1;
                var fps = animation.fps || 30;
                var hierarchyTracks = animation.hierarchy || [];
                for (var h = 0; h < hierarchyTracks.length; h++) {
                    var animationKeys = hierarchyTracks[h].keys;
                    if (!animationKeys || animationKeys.length === 0)
                        continue;
                    if (animationKeys[0].morphTargets) {
                        var morphTargetNames = {};
                        for (var k = 0; k < animationKeys.length; k++) {
                            if (animationKeys[k].morphTargets) {
                                for (var m = 0; m < animationKeys[k].morphTargets.length; m++) {
                                    morphTargetNames[animationKeys[k].morphTargets[m]] = -1
                                }
                            }
                        }
                        for (var morphTargetName in morphTargetNames) {
                            var times = [];
                            var values = [];
                            for (var m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
                                var animationKey = animationKeys[k];
                                times.push(animationKey.time);
                                values.push(animationKey.morphTarget === morphTargetName ? 1 : 0)
                            }
                            tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values))
                        }
                        duration = morphTargetNames.length * (fps || 1)
                    } else {
                        var boneName = ".bones[" + bones[h].name + "]";
                        addNonemptyTrack(VectorKeyframeTrack, boneName + ".position", animationKeys, "pos", tracks);
                        addNonemptyTrack(QuaternionKeyframeTrack, boneName + ".quaternion", animationKeys, "rot", tracks);
                        addNonemptyTrack(VectorKeyframeTrack, boneName + ".scale", animationKeys, "scl", tracks)
                    }
                }
                if (tracks.length === 0) {
                    return null
                }
                var clip = new AnimationClip(clipName, duration, tracks);
                return clip
            }
        });
        Object.assign(AnimationClip.prototype, {
            resetDuration: function() {
                var tracks = this.tracks,
                    duration = 0;
                for (var i = 0, n = tracks.length; i !== n; ++i) {
                    var track = this.tracks[i];
                    duration = Math.max(duration, track.times[track.times.length - 1])
                }
                this.duration = duration;
                return this
            },
            trim: function() {
                for (var i = 0; i < this.tracks.length; i++) {
                    this.tracks[i].trim(0, this.duration)
                }
                return this
            },
            validate: function() {
                var valid = true;
                for (var i = 0; i < this.tracks.length; i++) {
                    valid = valid && this.tracks[i].validate()
                }
                return valid
            },
            optimize: function() {
                for (var i = 0; i < this.tracks.length; i++) {
                    this.tracks[i].optimize()
                }
                return this
            }
        });
        function MaterialLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager;
            this.textures = {}
        }
        Object.assign(MaterialLoader.prototype, {
            load: function(url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new FileLoader(scope.manager);
                loader.load(url, function(text) {
                    onLoad(scope.parse(JSON.parse(text)))
                }, onProgress, onError)
            },
            setTextures: function(value) {
                this.textures = value
            },
            parse: function(json) {
                var textures = this.textures;
                function getTexture(name) {
                    if (textures[name] === undefined) {
                        console.warn("THREE.MaterialLoader: Undefined texture", name)
                    }
                    return textures[name]
                }
                var material = new Materials[json.type];
                if (json.uuid !== undefined)
                    material.uuid = json.uuid;
                if (json.name !== undefined)
                    material.name = json.name;
                if (json.color !== undefined)
                    material.color.setHex(json.color);
                if (json.roughness !== undefined)
                    material.roughness = json.roughness;
                if (json.metalness !== undefined)
                    material.metalness = json.metalness;
                if (json.emissive !== undefined)
                    material.emissive.setHex(json.emissive);
                if (json.specular !== undefined)
                    material.specular.setHex(json.specular);
                if (json.shininess !== undefined)
                    material.shininess = json.shininess;
                if (json.clearCoat !== undefined)
                    material.clearCoat = json.clearCoat;
                if (json.clearCoatRoughness !== undefined)
                    material.clearCoatRoughness = json.clearCoatRoughness;
                if (json.uniforms !== undefined)
                    material.uniforms = json.uniforms;
                if (json.vertexShader !== undefined)
                    material.vertexShader = json.vertexShader;
                if (json.fragmentShader !== undefined)
                    material.fragmentShader = json.fragmentShader;
                if (json.vertexColors !== undefined)
                    material.vertexColors = json.vertexColors;
                if (json.fog !== undefined)
                    material.fog = json.fog;
                if (json.flatShading !== undefined)
                    material.flatShading = json.flatShading;
                if (json.blending !== undefined)
                    material.blending = json.blending;
                if (json.side !== undefined)
                    material.side = json.side;
                if (json.opacity !== undefined)
                    material.opacity = json.opacity;
                if (json.transparent !== undefined)
                    material.transparent = json.transparent;
                if (json.alphaTest !== undefined)
                    material.alphaTest = json.alphaTest;
                if (json.depthTest !== undefined)
                    material.depthTest = json.depthTest;
                if (json.depthWrite !== undefined)
                    material.depthWrite = json.depthWrite;
                if (json.colorWrite !== undefined)
                    material.colorWrite = json.colorWrite;
                if (json.wireframe !== undefined)
                    material.wireframe = json.wireframe;
                if (json.wireframeLinewidth !== undefined)
                    material.wireframeLinewidth = json.wireframeLinewidth;
                if (json.wireframeLinecap !== undefined)
                    material.wireframeLinecap = json.wireframeLinecap;
                if (json.wireframeLinejoin !== undefined)
                    material.wireframeLinejoin = json.wireframeLinejoin;
                if (json.rotation !== undefined)
                    material.rotation = json.rotation;
                if (json.linewidth !== 1)
                    material.linewidth = json.linewidth;
                if (json.dashSize !== undefined)
                    material.dashSize = json.dashSize;
                if (json.gapSize !== undefined)
                    material.gapSize = json.gapSize;
                if (json.scale !== undefined)
                    material.scale = json.scale;
                if (json.polygonOffset !== undefined)
                    material.polygonOffset = json.polygonOffset;
                if (json.polygonOffsetFactor !== undefined)
                    material.polygonOffsetFactor = json.polygonOffsetFactor;
                if (json.polygonOffsetUnits !== undefined)
                    material.polygonOffsetUnits = json.polygonOffsetUnits;
                if (json.skinning !== undefined)
                    material.skinning = json.skinning;
                if (json.morphTargets !== undefined)
                    material.morphTargets = json.morphTargets;
                if (json.dithering !== undefined)
                    material.dithering = json.dithering;
                if (json.visible !== undefined)
                    material.visible = json.visible;
                if (json.userData !== undefined)
                    material.userData = json.userData;
                if (json.shading !== undefined)
                    material.flatShading = json.shading === 1;
                if (json.size !== undefined)
                    material.size = json.size;
                if (json.sizeAttenuation !== undefined)
                    material.sizeAttenuation = json.sizeAttenuation;
                if (json.map !== undefined)
                    material.map = getTexture(json.map);
                if (json.alphaMap !== undefined) {
                    material.alphaMap = getTexture(json.alphaMap);
                    material.transparent = true
                }
                if (json.bumpMap !== undefined)
                    material.bumpMap = getTexture(json.bumpMap);
                if (json.bumpScale !== undefined)
                    material.bumpScale = json.bumpScale;
                if (json.normalMap !== undefined)
                    material.normalMap = getTexture(json.normalMap);
                if (json.normalMapType !== undefined)
                    material.normalMapType = json.normalMapType;
                if (json.normalScale !== undefined) {
                    var normalScale = json.normalScale;
                    if (Array.isArray(normalScale) === false) {
                        normalScale = [normalScale, normalScale]
                    }
                    material.normalScale = (new Vector2).fromArray(normalScale)
                }
                if (json.displacementMap !== undefined)
                    material.displacementMap = getTexture(json.displacementMap);
                if (json.displacementScale !== undefined)
                    material.displacementScale = json.displacementScale;
                if (json.displacementBias !== undefined)
                    material.displacementBias = json.displacementBias;
                if (json.roughnessMap !== undefined)
                    material.roughnessMap = getTexture(json.roughnessMap);
                if (json.metalnessMap !== undefined)
                    material.metalnessMap = getTexture(json.metalnessMap);
                if (json.emissiveMap !== undefined)
                    material.emissiveMap = getTexture(json.emissiveMap);
                if (json.emissiveIntensity !== undefined)
                    material.emissiveIntensity = json.emissiveIntensity;
                if (json.specularMap !== undefined)
                    material.specularMap = getTexture(json.specularMap);
                if (json.envMap !== undefined)
                    material.envMap = getTexture(json.envMap);
                if (json.reflectivity !== undefined)
                    material.reflectivity = json.reflectivity;
                if (json.lightMap !== undefined)
                    material.lightMap = getTexture(json.lightMap);
                if (json.lightMapIntensity !== undefined)
                    material.lightMapIntensity = json.lightMapIntensity;
                if (json.aoMap !== undefined)
                    material.aoMap = getTexture(json.aoMap);
                if (json.aoMapIntensity !== undefined)
                    material.aoMapIntensity = json.aoMapIntensity;
                if (json.gradientMap !== undefined)
                    material.gradientMap = getTexture(json.gradientMap);
                return material
            }
        });
        function BufferGeometryLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager
        }
        Object.assign(BufferGeometryLoader.prototype, {
            load: function(url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new FileLoader(scope.manager);
                loader.load(url, function(text) {
                    onLoad(scope.parse(JSON.parse(text)))
                }, onProgress, onError)
            },
            parse: function(json) {
                var geometry = new BufferGeometry;
                var index = json.data.index;
                if (index !== undefined) {
                    var typedArray = new TYPED_ARRAYS[index.type](index.array);
                    geometry.setIndex(new BufferAttribute(typedArray, 1))
                }
                var attributes = json.data.attributes;
                for (var key in attributes) {
                    var attribute = attributes[key];
                    var typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);
                    geometry.addAttribute(key, new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized))
                }
                var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
                if (groups !== undefined) {
                    for (var i = 0, n = groups.length; i !== n; ++i) {
                        var group = groups[i];
                        geometry.addGroup(group.start, group.count, group.materialIndex)
                    }
                }
                var boundingSphere = json.data.boundingSphere;
                if (boundingSphere !== undefined) {
                    var center = new Vector3;
                    if (boundingSphere.center !== undefined) {
                        center.fromArray(boundingSphere.center)
                    }
                    geometry.boundingSphere = new Sphere(center, boundingSphere.radius)
                }
                return geometry
            }
        });
        var TYPED_ARRAYS = {
            Int8Array: Int8Array,
            Uint8Array: Uint8Array,
            Uint8ClampedArray: typeof Uint8ClampedArray !== "undefined" ? Uint8ClampedArray : Uint8Array,
            Int16Array: Int16Array,
            Uint16Array: Uint16Array,
            Int32Array: Int32Array,
            Uint32Array: Uint32Array,
            Float32Array: Float32Array,
            Float64Array: Float64Array
        };
        function Loader() {}
        Loader.Handlers = {
            handlers: [],
            add: function(regex, loader) {
                this.handlers.push(regex, loader)
            },
            get: function(file) {
                var handlers = this.handlers;
                for (var i = 0, l = handlers.length; i < l; i += 2) {
                    var regex = handlers[i];
                    var loader = handlers[i + 1];
                    if (regex.test(file)) {
                        return loader
                    }
                }
                return null
            }
        };
        Object.assign(Loader.prototype, {
            crossOrigin: "anonymous",
            onLoadStart: function() {},
            onLoadProgress: function() {},
            onLoadComplete: function() {},
            initMaterials: function(materials, texturePath, crossOrigin) {
                var array = [];
                for (var i = 0; i < materials.length; ++i) {
                    array[i] = this.createMaterial(materials[i], texturePath, crossOrigin)
                }
                return array
            },
            createMaterial: function() {
                var BlendingMode = {
                    NoBlending: NoBlending,
                    NormalBlending: NormalBlending,
                    AdditiveBlending: AdditiveBlending,
                    SubtractiveBlending: SubtractiveBlending,
                    MultiplyBlending: MultiplyBlending,
                    CustomBlending: CustomBlending
                };
                var color = new Color;
                var textureLoader = new TextureLoader;
                var materialLoader = new MaterialLoader;
                return function createMaterial(m, texturePath, crossOrigin) {
                    var textures = {};
                    function loadTexture(path, repeat, offset, wrap, anisotropy) {
                        var fullPath = texturePath + path;
                        var loader = Loader.Handlers.get(fullPath);
                        var texture;
                        if (loader !== null) {
                            texture = loader.load(fullPath)
                        } else {
                            textureLoader.setCrossOrigin(crossOrigin);
                            texture = textureLoader.load(fullPath)
                        }
                        if (repeat !== undefined) {
                            texture.repeat.fromArray(repeat);
                            if (repeat[0] !== 1)
                                texture.wrapS = RepeatWrapping;
                            if (repeat[1] !== 1)
                                texture.wrapT = RepeatWrapping
                        }
                        if (offset !== undefined) {
                            texture.offset.fromArray(offset)
                        }
                        if (wrap !== undefined) {
                            if (wrap[0] === "repeat")
                                texture.wrapS = RepeatWrapping;
                            if (wrap[0] === "mirror")
                                texture.wrapS = MirroredRepeatWrapping;
                            if (wrap[1] === "repeat")
                                texture.wrapT = RepeatWrapping;
                            if (wrap[1] === "mirror")
                                texture.wrapT = MirroredRepeatWrapping
                        }
                        if (anisotropy !== undefined) {
                            texture.anisotropy = anisotropy
                        }
                        var uuid = _Math.generateUUID();
                        textures[uuid] = texture;
                        return uuid
                    }
                    var json = {
                        uuid: _Math.generateUUID(),
                        type: "MeshLambertMaterial"
                    };
                    for (var name in m) {
                        var value = m[name];
                        switch (name) {
                        case "DbgColor":
                        case "DbgIndex":
                        case "opticalDensity":
                        case "illumination":
                            break;
                        case "DbgName":
                            json.name = value;
                            break;
                        case "blending":
                            json.blending = BlendingMode[value];
                            break;
                        case "colorAmbient":
                        case "mapAmbient":
                            console.warn("THREE.Loader.createMaterial:", name, "is no longer supported.");
                            break;
                        case "colorDiffuse":
                            json.color = color.fromArray(value).getHex();
                            break;
                        case "colorSpecular":
                            json.specular = color.fromArray(value).getHex();
                            break;
                        case "colorEmissive":
                            json.emissive = color.fromArray(value).getHex();
                            break;
                        case "specularCoef":
                            json.shininess = value;
                            break;
                        case "shading":
                            if (value.toLowerCase() === "basic")
                                json.type = "MeshBasicMaterial";
                            if (value.toLowerCase() === "phong")
                                json.type = "MeshPhongMaterial";
                            if (value.toLowerCase() === "standard")
                                json.type = "MeshStandardMaterial";
                            break;
                        case "mapDiffuse":
                            json.map = loadTexture(value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy);
                            break;
                        case "mapDiffuseRepeat":
                        case "mapDiffuseOffset":
                        case "mapDiffuseWrap":
                        case "mapDiffuseAnisotropy":
                            break;
                        case "mapEmissive":
                            json.emissiveMap = loadTexture(value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy);
                            break;
                        case "mapEmissiveRepeat":
                        case "mapEmissiveOffset":
                        case "mapEmissiveWrap":
                        case "mapEmissiveAnisotropy":
                            break;
                        case "mapLight":
                            json.lightMap = loadTexture(value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy);
                            break;
                        case "mapLightRepeat":
                        case "mapLightOffset":
                        case "mapLightWrap":
                        case "mapLightAnisotropy":
                            break;
                        case "mapAO":
                            json.aoMap = loadTexture(value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy);
                            break;
                        case "mapAORepeat":
                        case "mapAOOffset":
                        case "mapAOWrap":
                        case "mapAOAnisotropy":
                            break;
                        case "mapBump":
                            json.bumpMap = loadTexture(value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy);
                            break;
                        case "mapBumpScale":
                            json.bumpScale = value;
                            break;
                        case "mapBumpRepeat":
                        case "mapBumpOffset":
                        case "mapBumpWrap":
                        case "mapBumpAnisotropy":
                            break;
                        case "mapNormal":
                            json.normalMap = loadTexture(value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy);
                            break;
                        case "mapNormalFactor":
                            json.normalScale = value;
                            break;
                        case "mapNormalRepeat":
                        case "mapNormalOffset":
                        case "mapNormalWrap":
                        case "mapNormalAnisotropy":
                            break;
                        case "mapSpecular":
                            json.specularMap = loadTexture(value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy);
                            break;
                        case "mapSpecularRepeat":
                        case "mapSpecularOffset":
                        case "mapSpecularWrap":
                        case "mapSpecularAnisotropy":
                            break;
                        case "mapMetalness":
                            json.metalnessMap = loadTexture(value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy);
                            break;
                        case "mapMetalnessRepeat":
                        case "mapMetalnessOffset":
                        case "mapMetalnessWrap":
                        case "mapMetalnessAnisotropy":
                            break;
                        case "mapRoughness":
                            json.roughnessMap = loadTexture(value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy);
                            break;
                        case "mapRoughnessRepeat":
                        case "mapRoughnessOffset":
                        case "mapRoughnessWrap":
                        case "mapRoughnessAnisotropy":
                            break;
                        case "mapAlpha":
                            json.alphaMap = loadTexture(value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy);
                            break;
                        case "mapAlphaRepeat":
                        case "mapAlphaOffset":
                        case "mapAlphaWrap":
                        case "mapAlphaAnisotropy":
                            break;
                        case "flipSided":
                            json.side = BackSide;
                            break;
                        case "doubleSided":
                            json.side = DoubleSide;
                            break;
                        case "transparency":
                            console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");
                            json.opacity = value;
                            break;
                        case "depthTest":
                        case "depthWrite":
                        case "colorWrite":
                        case "opacity":
                        case "reflectivity":
                        case "transparent":
                        case "visible":
                        case "wireframe":
                            json[name] = value;
                            break;
                        case "vertexColors":
                            if (value === true)
                                json.vertexColors = VertexColors;
                            if (value === "face")
                                json.vertexColors = FaceColors;
                            break;
                        default:
                            console.error("THREE.Loader.createMaterial: Unsupported", name, value);
                            break
                        }
                    }
                    if (json.type === "MeshBasicMaterial")
                        delete json.emissive;
                    if (json.type !== "MeshPhongMaterial")
                        delete json.specular;
                    if (json.opacity < 1)
                        json.transparent = true;
                    materialLoader.setTextures(textures);
                    return materialLoader.parse(json)
                }
            }()
        });
        var LoaderUtils = {
            decodeText: function(array) {
                if (typeof TextDecoder !== "undefined") {
                    return (new TextDecoder).decode(array)
                }
                var s = "";
                for (var i = 0, il = array.length; i < il; i++) {
                    s += String.fromCharCode(array[i])
                }
                return decodeURIComponent(escape(s))
            },
            extractUrlBase: function(url) {
                var index = url.lastIndexOf("/");
                if (index === -1)
                    return "./";
                return url.substr(0, index + 1)
            }
        };
        function JSONLoader(manager) {
            if (typeof manager === "boolean") {
                console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor.");
                manager = undefined
            }
            this.manager = manager !== undefined ? manager : DefaultLoadingManager;
            this.withCredentials = false
        }
        Object.assign(JSONLoader.prototype, {
            crossOrigin: "anonymous",
            load: function(url, onLoad, onProgress, onError) {
                var scope = this;
                var texturePath = this.texturePath && typeof this.texturePath === "string" ? this.texturePath : LoaderUtils.extractUrlBase(url);
                var loader = new FileLoader(this.manager);
                loader.setWithCredentials(this.withCredentials);
                loader.load(url, function(text) {
                    var json = JSON.parse(text);
                    var metadata = json.metadata;
                    if (metadata !== undefined) {
                        var type = metadata.type;
                        if (type !== undefined) {
                            if (type.toLowerCase() === "object") {
                                console.error("THREE.JSONLoader: " + url + " should be loaded with THREE.ObjectLoader instead.");
                                return
                            }
                        }
                    }
                    var object = scope.parse(json, texturePath);
                    onLoad(object.geometry, object.materials)
                }, onProgress, onError)
            },
            setCrossOrigin: function(value) {
                this.crossOrigin = value;
                return this
            },
            setTexturePath: function(value) {
                this.texturePath = value;
                return this
            },
            parse: function() {
                function parseModel(json, geometry) {
                    function isBitSet(value, position) {
                        return value & 1 << position
                    }
                    var i,
                        j,
                        fi,
                        offset,
                        zLength,
                        colorIndex,
                        normalIndex,
                        uvIndex,
                        materialIndex,
                        type,
                        isQuad,
                        hasMaterial,
                        hasFaceVertexUv,
                        hasFaceNormal,
                        hasFaceVertexNormal,
                        hasFaceColor,
                        hasFaceVertexColor,
                        vertex,
                        face,
                        faceA,
                        faceB,
                        hex,
                        normal,
                        uvLayer,
                        uv,
                        u,
                        v,
                        faces = json.faces,
                        vertices = json.vertices,
                        normals = json.normals,
                        colors = json.colors,
                        scale = json.scale,
                        nUvLayers = 0;
                    if (json.uvs !== undefined) {
                        for (i = 0; i < json.uvs.length; i++) {
                            if (json.uvs[i].length)
                                nUvLayers++
                        }
                        for (i = 0; i < nUvLayers; i++) {
                            geometry.faceVertexUvs[i] = []
                        }
                    }
                    offset = 0;
                    zLength = vertices.length;
                    while (offset < zLength) {
                        vertex = new Vector3;
                        vertex.x = vertices[offset++] * scale;
                        vertex.y = vertices[offset++] * scale;
                        vertex.z = vertices[offset++] * scale;
                        geometry.vertices.push(vertex)
                    }
                    offset = 0;
                    zLength = faces.length;
                    while (offset < zLength) {
                        type = faces[offset++];
                        isQuad = isBitSet(type, 0);
                        hasMaterial = isBitSet(type, 1);
                        hasFaceVertexUv = isBitSet(type, 3);
                        hasFaceNormal = isBitSet(type, 4);
                        hasFaceVertexNormal = isBitSet(type, 5);
                        hasFaceColor = isBitSet(type, 6);
                        hasFaceVertexColor = isBitSet(type, 7);
                        if (isQuad) {
                            faceA = new Face3;
                            faceA.a = faces[offset];
                            faceA.b = faces[offset + 1];
                            faceA.c = faces[offset + 3];
                            faceB = new Face3;
                            faceB.a = faces[offset + 1];
                            faceB.b = faces[offset + 2];
                            faceB.c = faces[offset + 3];
                            offset += 4;
                            if (hasMaterial) {
                                materialIndex = faces[offset++];
                                faceA.materialIndex = materialIndex;
                                faceB.materialIndex = materialIndex
                            }
                            fi = geometry.faces.length;
                            if (hasFaceVertexUv) {
                                for (i = 0; i < nUvLayers; i++) {
                                    uvLayer = json.uvs[i];
                                    geometry.faceVertexUvs[i][fi] = [];
                                    geometry.faceVertexUvs[i][fi + 1] = [];
                                    for (j = 0; j < 4; j++) {
                                        uvIndex = faces[offset++];
                                        u = uvLayer[uvIndex * 2];
                                        v = uvLayer[uvIndex * 2 + 1];
                                        uv = new Vector2(u, v);
                                        if (j !== 2)
                                            geometry.faceVertexUvs[i][fi].push(uv);
                                        if (j !== 0)
                                            geometry.faceVertexUvs[i][fi + 1].push(uv)
                                    }
                                }
                            }
                            if (hasFaceNormal) {
                                normalIndex = faces[offset++] * 3;
                                faceA.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);
                                faceB.normal.copy(faceA.normal)
                            }
                            if (hasFaceVertexNormal) {
                                for (i = 0; i < 4; i++) {
                                    normalIndex = faces[offset++] * 3;
                                    normal = new Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);
                                    if (i !== 2)
                                        faceA.vertexNormals.push(normal);
                                    if (i !== 0)
                                        faceB.vertexNormals.push(normal)
                                }
                            }
                            if (hasFaceColor) {
                                colorIndex = faces[offset++];
                                hex = colors[colorIndex];
                                faceA.color.setHex(hex);
                                faceB.color.setHex(hex)
                            }
                            if (hasFaceVertexColor) {
                                for (i = 0; i < 4; i++) {
                                    colorIndex = faces[offset++];
                                    hex = colors[colorIndex];
                                    if (i !== 2)
                                        faceA.vertexColors.push(new Color(hex));
                                    if (i !== 0)
                                        faceB.vertexColors.push(new Color(hex))
                                }
                            }
                            geometry.faces.push(faceA);
                            geometry.faces.push(faceB)
                        } else {
                            face = new Face3;
                            face.a = faces[offset++];
                            face.b = faces[offset++];
                            face.c = faces[offset++];
                            if (hasMaterial) {
                                materialIndex = faces[offset++];
                                face.materialIndex = materialIndex
                            }
                            fi = geometry.faces.length;
                            if (hasFaceVertexUv) {
                                for (i = 0; i < nUvLayers; i++) {
                                    uvLayer = json.uvs[i];
                                    geometry.faceVertexUvs[i][fi] = [];
                                    for (j = 0; j < 3; j++) {
                                        uvIndex = faces[offset++];
                                        u = uvLayer[uvIndex * 2];
                                        v = uvLayer[uvIndex * 2 + 1];
                                        uv = new Vector2(u, v);
                                        geometry.faceVertexUvs[i][fi].push(uv)
                                    }
                                }
                            }
                            if (hasFaceNormal) {
                                normalIndex = faces[offset++] * 3;
                                face.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex])
                            }
                            if (hasFaceVertexNormal) {
                                for (i = 0; i < 3; i++) {
                                    normalIndex = faces[offset++] * 3;
                                    normal = new Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);
                                    face.vertexNormals.push(normal)
                                }
                            }
                            if (hasFaceColor) {
                                colorIndex = faces[offset++];
                                face.color.setHex(colors[colorIndex])
                            }
                            if (hasFaceVertexColor) {
                                for (i = 0; i < 3; i++) {
                                    colorIndex = faces[offset++];
                                    face.vertexColors.push(new Color(colors[colorIndex]))
                                }
                            }
                            geometry.faces.push(face)
                        }
                    }
                }
                function parseSkin(json, geometry) {
                    var influencesPerVertex = json.influencesPerVertex !== undefined ? json.influencesPerVertex : 2;
                    if (json.skinWeights) {
                        for (var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex) {
                            var x = json.skinWeights[i];
                            var y = influencesPerVertex > 1 ? json.skinWeights[i + 1] : 0;
                            var z = influencesPerVertex > 2 ? json.skinWeights[i + 2] : 0;
                            var w = influencesPerVertex > 3 ? json.skinWeights[i + 3] : 0;
                            geometry.skinWeights.push(new Vector4(x, y, z, w))
                        }
                    }
                    if (json.skinIndices) {
                        for (var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex) {
                            var a = json.skinIndices[i];
                            var b = influencesPerVertex > 1 ? json.skinIndices[i + 1] : 0;
                            var c = influencesPerVertex > 2 ? json.skinIndices[i + 2] : 0;
                            var d = influencesPerVertex > 3 ? json.skinIndices[i + 3] : 0;
                            geometry.skinIndices.push(new Vector4(a, b, c, d))
                        }
                    }
                    geometry.bones = json.bones;
                    if (geometry.bones && geometry.bones.length > 0 && (geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length)) {
                        console.warn("When skinning, number of vertices (" + geometry.vertices.length + "), skinIndices (" + geometry.skinIndices.length + "), and skinWeights (" + geometry.skinWeights.length + ") should match.")
                    }
                }
                function parseMorphing(json, geometry) {
                    var scale = json.scale;
                    if (json.morphTargets !== undefined) {
                        for (var i = 0, l = json.morphTargets.length; i < l; i++) {
                            geometry.morphTargets[i] = {};
                            geometry.morphTargets[i].name = json.morphTargets[i].name;
                            geometry.morphTargets[i].vertices = [];
                            var dstVertices = geometry.morphTargets[i].vertices;
                            var srcVertices = json.morphTargets[i].vertices;
                            for (var v = 0, vl = srcVertices.length; v < vl; v += 3) {
                                var vertex = new Vector3;
                                vertex.x = srcVertices[v] * scale;
                                vertex.y = srcVertices[v + 1] * scale;
                                vertex.z = srcVertices[v + 2] * scale;
                                dstVertices.push(vertex)
                            }
                        }
                    }
                    if (json.morphColors !== undefined && json.morphColors.length > 0) {
                        console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');
                        var faces = geometry.faces;
                        var morphColors = json.morphColors[0].colors;
                        for (var i = 0, l = faces.length; i < l; i++) {
                            faces[i].color.fromArray(morphColors, i * 3)
                        }
                    }
                }
                function parseAnimations(json, geometry) {
                    var outputAnimations = [];
                    var animations = [];
                    if (json.animation !== undefined) {
                        animations.push(json.animation)
                    }
                    if (json.animations !== undefined) {
                        if (json.animations.length) {
                            animations = animations.concat(json.animations)
                        } else {
                            animations.push(json.animations)
                        }
                    }
                    for (var i = 0; i < animations.length; i++) {
                        var clip = AnimationClip.parseAnimation(animations[i], geometry.bones);
                        if (clip)
                            outputAnimations.push(clip)
                    }
                    if (geometry.morphTargets) {
                        var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets, 10);
                        outputAnimations = outputAnimations.concat(morphAnimationClips)
                    }
                    if (outputAnimations.length > 0)
                        geometry.animations = outputAnimations
                }
                return function parse(json, texturePath) {
                    if (json.data !== undefined) {
                        json = json.data
                    }
                    if (json.scale !== undefined) {
                        json.scale = 1 / json.scale
                    } else {
                        json.scale = 1
                    }
                    var geometry = new Geometry;
                    parseModel(json, geometry);
                    parseSkin(json, geometry);
                    parseMorphing(json, geometry);
                    parseAnimations(json, geometry);
                    geometry.computeFaceNormals();
                    geometry.computeBoundingSphere();
                    if (json.materials === undefined || json.materials.length === 0) {
                        return {
                            geometry: geometry
                        }
                    } else {
                        var materials = Loader.prototype.initMaterials(json.materials, texturePath, this.crossOrigin);
                        return {
                            geometry: geometry,
                            materials: materials
                        }
                    }
                }
            }()
        });
        function ObjectLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager;
            this.texturePath = ""
        }
        Object.assign(ObjectLoader.prototype, {
            crossOrigin: "anonymous",
            load: function(url, onLoad, onProgress, onError) {
                if (this.texturePath === "") {
                    this.texturePath = url.substring(0, url.lastIndexOf("/") + 1)
                }
                var scope = this;
                var loader = new FileLoader(scope.manager);
                loader.load(url, function(text) {
                    var json = null;
                    try {
                        json = JSON.parse(text)
                    } catch (error) {
                        if (onError !== undefined)
                            onError(error);
                        console.error("THREE:ObjectLoader: Can't parse " + url + ".", error.message);
                        return
                    }
                    var metadata = json.metadata;
                    if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === "geometry") {
                        console.error("THREE.ObjectLoader: Can't load " + url + ". Use THREE.JSONLoader instead.");
                        return
                    }
                    scope.parse(json, onLoad)
                }, onProgress, onError)
            },
            setTexturePath: function(value) {
                this.texturePath = value;
                return this
            },
            setCrossOrigin: function(value) {
                this.crossOrigin = value;
                return this
            },
            parse: function(json, onLoad) {
                var shapes = this.parseShape(json.shapes);
                var geometries = this.parseGeometries(json.geometries, shapes);
                var images = this.parseImages(json.images, function() {
                    if (onLoad !== undefined)
                        onLoad(object)
                });
                var textures = this.parseTextures(json.textures, images);
                var materials = this.parseMaterials(json.materials, textures);
                var object = this.parseObject(json.object, geometries, materials);
                if (json.animations) {
                    object.animations = this.parseAnimations(json.animations)
                }
                if (json.images === undefined || json.images.length === 0) {
                    if (onLoad !== undefined)
                        onLoad(object)
                }
                return object
            },
            parseShape: function(json) {
                var shapes = {};
                if (json !== undefined) {
                    for (var i = 0, l = json.length; i < l; i++) {
                        var shape = (new Shape).fromJSON(json[i]);
                        shapes[shape.uuid] = shape
                    }
                }
                return shapes
            },
            parseGeometries: function(json, shapes) {
                var geometries = {};
                if (json !== undefined) {
                    var geometryLoader = new JSONLoader;
                    var bufferGeometryLoader = new BufferGeometryLoader;
                    for (var i = 0, l = json.length; i < l; i++) {
                        var geometry;
                        var data = json[i];
                        switch (data.type) {
                        case "PlaneGeometry":
                        case "PlaneBufferGeometry":
                            geometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);
                            break;
                        case "BoxGeometry":
                        case "BoxBufferGeometry":
                        case "CubeGeometry":
                            geometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
                            break;
                        case "CircleGeometry":
                        case "CircleBufferGeometry":
                            geometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);
                            break;
                        case "CylinderGeometry":
                        case "CylinderBufferGeometry":
                            geometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
                            break;
                        case "ConeGeometry":
                        case "ConeBufferGeometry":
                            geometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
                            break;
                        case "SphereGeometry":
                        case "SphereBufferGeometry":
                            geometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
                            break;
                        case "DodecahedronGeometry":
                        case "DodecahedronBufferGeometry":
                        case "IcosahedronGeometry":
                        case "IcosahedronBufferGeometry":
                        case "OctahedronGeometry":
                        case "OctahedronBufferGeometry":
                        case "TetrahedronGeometry":
                        case "TetrahedronBufferGeometry":
                            geometry = new Geometries[data.type](data.radius, data.detail);
                            break;
                        case "RingGeometry":
                        case "RingBufferGeometry":
                            geometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
                            break;
                        case "TorusGeometry":
                        case "TorusBufferGeometry":
                            geometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
                            break;
                        case "TorusKnotGeometry":
                        case "TorusKnotBufferGeometry":
                            geometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
                            break;
                        case "LatheGeometry":
                        case "LatheBufferGeometry":
                            geometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);
                            break;
                        case "PolyhedronGeometry":
                        case "PolyhedronBufferGeometry":
                            geometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);
                            break;
                        case "ShapeGeometry":
                        case "ShapeBufferGeometry":
                            var geometryShapes = [];
                            for (var j = 0, jl = data.shapes.length; j < jl; j++) {
                                var shape = shapes[data.shapes[j]];
                                geometryShapes.push(shape)
                            }
                            geometry = new Geometries[data.type](geometryShapes, data.curveSegments);
                            break;
                        case "ExtrudeGeometry":
                        case "ExtrudeBufferGeometry":
                            var geometryShapes = [];
                            for (var j = 0, jl = data.shapes.length; j < jl; j++) {
                                var shape = shapes[data.shapes[j]];
                                geometryShapes.push(shape)
                            }
                            var extrudePath = data.options.extrudePath;
                            if (extrudePath !== undefined) {
                                data.options.extrudePath = (new Curves[extrudePath.type]).fromJSON(extrudePath)
                            }
                            geometry = new Geometries[data.type](geometryShapes, data.options);
                            break;
                        case "BufferGeometry":
                            geometry = bufferGeometryLoader.parse(data);
                            break;
                        case "Geometry":
                            geometry = geometryLoader.parse(data, this.texturePath).geometry;
                            break;
                        default:
                            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"');
                            continue
                        }
                        geometry.uuid = data.uuid;
                        if (data.name !== undefined)
                            geometry.name = data.name;
                        if (geometry.isBufferGeometry === true && data.userData !== undefined)
                            geometry.userData = data.userData;
                        geometries[data.uuid] = geometry
                    }
                }
                return geometries
            },
            parseMaterials: function(json, textures) {
                var materials = {};
                if (json !== undefined) {
                    var loader = new MaterialLoader;
                    loader.setTextures(textures);
                    for (var i = 0, l = json.length; i < l; i++) {
                        var data = json[i];
                        if (data.type === "MultiMaterial") {
                            var array = [];
                            for (var j = 0; j < data.materials.length; j++) {
                                array.push(loader.parse(data.materials[j]))
                            }
                            materials[data.uuid] = array
                        } else {
                            materials[data.uuid] = loader.parse(data)
                        }
                    }
                }
                return materials
            },
            parseAnimations: function(json) {
                var animations = [];
                for (var i = 0; i < json.length; i++) {
                    var data = json[i];
                    var clip = AnimationClip.parse(data);
                    if (data.uuid !== undefined)
                        clip.uuid = data.uuid;
                    animations.push(clip)
                }
                return animations
            },
            parseImages: function(json, onLoad) {
                var scope = this;
                var images = {};
                function loadImage(url) {
                    scope.manager.itemStart(url);
                    return loader.load(url, function() {
                        scope.manager.itemEnd(url)
                    }, undefined, function() {
                        scope.manager.itemEnd(url);
                        scope.manager.itemError(url)
                    })
                }
                if (json !== undefined && json.length > 0) {
                    var manager = new LoadingManager(onLoad);
                    var loader = new ImageLoader(manager);
                    loader.setCrossOrigin(this.crossOrigin);
                    for (var i = 0, il = json.length; i < il; i++) {
                        var image = json[i];
                        var url = image.url;
                        if (Array.isArray(url)) {
                            images[image.uuid] = [];
                            for (var j = 0, jl = url.length; j < jl; j++) {
                                var currentUrl = url[j];
                                var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(currentUrl) ? currentUrl : scope.texturePath + currentUrl;
                                images[image.uuid].push(loadImage(path))
                            }
                        } else {
                            var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(image.url) ? image.url : scope.texturePath + image.url;
                            images[image.uuid] = loadImage(path)
                        }
                    }
                }
                return images
            },
            parseTextures: function(json, images) {
                function parseConstant(value, type) {
                    if (typeof value === "number")
                        return value;
                    console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", value);
                    return type[value]
                }
                var textures = {};
                if (json !== undefined) {
                    for (var i = 0, l = json.length; i < l; i++) {
                        var data = json[i];
                        if (data.image === undefined) {
                            console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid)
                        }
                        if (images[data.image] === undefined) {
                            console.warn("THREE.ObjectLoader: Undefined image", data.image)
                        }
                        var texture;
                        if (Array.isArray(images[data.image])) {
                            texture = new CubeTexture(images[data.image])
                        } else {
                            texture = new Texture(images[data.image])
                        }
                        texture.needsUpdate = true;
                        texture.uuid = data.uuid;
                        if (data.name !== undefined)
                            texture.name = data.name;
                        if (data.mapping !== undefined)
                            texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
                        if (data.offset !== undefined)
                            texture.offset.fromArray(data.offset);
                        if (data.repeat !== undefined)
                            texture.repeat.fromArray(data.repeat);
                        if (data.center !== undefined)
                            texture.center.fromArray(data.center);
                        if (data.rotation !== undefined)
                            texture.rotation = data.rotation;
                        if (data.wrap !== undefined) {
                            texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
                            texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING)
                        }
                        if (data.format !== undefined)
                            texture.format = data.format;
                        if (data.minFilter !== undefined)
                            texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
                        if (data.magFilter !== undefined)
                            texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
                        if (data.anisotropy !== undefined)
                            texture.anisotropy = data.anisotropy;
                        if (data.flipY !== undefined)
                            texture.flipY = data.flipY;
                        textures[data.uuid] = texture
                    }
                }
                return textures
            },
            parseObject: function(data, geometries, materials) {
                var object;
                function getGeometry(name) {
                    if (geometries[name] === undefined) {
                        console.warn("THREE.ObjectLoader: Undefined geometry", name)
                    }
                    return geometries[name]
                }
                function getMaterial(name) {
                    if (name === undefined)
                        return undefined;
                    if (Array.isArray(name)) {
                        var array = [];
                        for (var i = 0, l = name.length; i < l; i++) {
                            var uuid = name[i];
                            if (materials[uuid] === undefined) {
                                console.warn("THREE.ObjectLoader: Undefined material", uuid)
                            }
                            array.push(materials[uuid])
                        }
                        return array
                    }
                    if (materials[name] === undefined) {
                        console.warn("THREE.ObjectLoader: Undefined material", name)
                    }
                    return materials[name]
                }
                switch (data.type) {
                case "Scene":
                    object = new Scene;
                    if (data.background !== undefined) {
                        if (Number.isInteger(data.background)) {
                            object.background = new Color(data.background)
                        }
                    }
                    if (data.fog !== undefined) {
                        if (data.fog.type === "Fog") {
                            object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far)
                        } else if (data.fog.type === "FogExp2") {
                            object.fog = new FogExp2(data.fog.color, data.fog.density)
                        }
                    }
                    break;
                case "PerspectiveCamera":
                    object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
                    if (data.focus !== undefined)
                        object.focus = data.focus;
                    if (data.zoom !== undefined)
                        object.zoom = data.zoom;
                    if (data.filmGauge !== undefined)
                        object.filmGauge = data.filmGauge;
                    if (data.filmOffset !== undefined)
                        object.filmOffset = data.filmOffset;
                    if (data.view !== undefined)
                        object.view = Object.assign({}, data.view);
                    break;
                case "OrthographicCamera":
                    object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
                    if (data.zoom !== undefined)
                        object.zoom = data.zoom;
                    if (data.view !== undefined)
                        object.view = Object.assign({}, data.view);
                    break;
                case "AmbientLight":
                    object = new AmbientLight(data.color, data.intensity);
                    break;
                case "DirectionalLight":
                    object = new DirectionalLight(data.color, data.intensity);
                    break;
                case "PointLight":
                    object = new PointLight(data.color, data.intensity, data.distance, data.decay);
                    break;
                case "RectAreaLight":
                    object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
                    break;
                case "SpotLight":
                    object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
                    break;
                case "HemisphereLight":
                    object = new HemisphereLight(data.color, data.groundColor, data.intensity);
                    break;
                case "SkinnedMesh":
                    console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
                case "Mesh":
                    var geometry = getGeometry(data.geometry);
                    var material = getMaterial(data.material);
                    if (geometry.bones && geometry.bones.length > 0) {
                        object = new SkinnedMesh(geometry, material)
                    } else {
                        object = new Mesh(geometry, material)
                    }
                    break;
                case "LOD":
                    object = new LOD;
                    break;
                case "Line":
                    object = new Line(getGeometry(data.geometry), getMaterial(data.material), data.mode);
                    break;
                case "LineLoop":
                    object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
                    break;
                case "LineSegments":
                    object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
                    break;
                case "PointCloud":
                case "Points":
                    object = new Points(getGeometry(data.geometry), getMaterial(data.material));
                    break;
                case "Sprite":
                    object = new Sprite(getMaterial(data.material));
                    break;
                case "Group":
                    object = new Group;
                    break;
                default:
                    object = new Object3D
                }
                object.uuid = data.uuid;
                if (data.name !== undefined)
                    object.name = data.name;
                if (data.matrix !== undefined) {
                    object.matrix.fromArray(data.matrix);
                    if (data.matrixAutoUpdate !== undefined)
                        object.matrixAutoUpdate = data.matrixAutoUpdate;
                    if (object.matrixAutoUpdate)
                        object.matrix.decompose(object.position, object.quaternion, object.scale)
                } else {
                    if (data.position !== undefined)
                        object.position.fromArray(data.position);
                    if (data.rotation !== undefined)
                        object.rotation.fromArray(data.rotation);
                    if (data.quaternion !== undefined)
                        object.quaternion.fromArray(data.quaternion);
                    if (data.scale !== undefined)
                        object.scale.fromArray(data.scale)
                }
                if (data.castShadow !== undefined)
                    object.castShadow = data.castShadow;
                if (data.receiveShadow !== undefined)
                    object.receiveShadow = data.receiveShadow;
                if (data.shadow) {
                    if (data.shadow.bias !== undefined)
                        object.shadow.bias = data.shadow.bias;
                    if (data.shadow.radius !== undefined)
                        object.shadow.radius = data.shadow.radius;
                    if (data.shadow.mapSize !== undefined)
                        object.shadow.mapSize.fromArray(data.shadow.mapSize);
                    if (data.shadow.camera !== undefined)
                        object.shadow.camera = this.parseObject(data.shadow.camera)
                }
                if (data.visible !== undefined)
                    object.visible = data.visible;
                if (data.frustumCulled !== undefined)
                    object.frustumCulled = data.frustumCulled;
                if (data.renderOrder !== undefined)
                    object.renderOrder = data.renderOrder;
                if (data.userData !== undefined)
                    object.userData = data.userData;
                if (data.layers !== undefined)
                    object.layers.mask = data.layers;
                if (data.children !== undefined) {
                    var children = data.children;
                    for (var i = 0; i < children.length; i++) {
                        object.add(this.parseObject(children[i], geometries, materials))
                    }
                }
                if (data.type === "LOD") {
                    var levels = data.levels;
                    for (var l = 0; l < levels.length; l++) {
                        var level = levels[l];
                        var child = object.getObjectByProperty("uuid", level.object);
                        if (child !== undefined) {
                            object.addLevel(child, level.distance)
                        }
                    }
                }
                return object
            }
        });
        var TEXTURE_MAPPING = {
            UVMapping: UVMapping,
            CubeReflectionMapping: CubeReflectionMapping,
            CubeRefractionMapping: CubeRefractionMapping,
            EquirectangularReflectionMapping: EquirectangularReflectionMapping,
            EquirectangularRefractionMapping: EquirectangularRefractionMapping,
            SphericalReflectionMapping: SphericalReflectionMapping,
            CubeUVReflectionMapping: CubeUVReflectionMapping,
            CubeUVRefractionMapping: CubeUVRefractionMapping
        };
        var TEXTURE_WRAPPING = {
            RepeatWrapping: RepeatWrapping,
            ClampToEdgeWrapping: ClampToEdgeWrapping,
            MirroredRepeatWrapping: MirroredRepeatWrapping
        };
        var TEXTURE_FILTER = {
            NearestFilter: NearestFilter,
            NearestMipMapNearestFilter: NearestMipMapNearestFilter,
            NearestMipMapLinearFilter: NearestMipMapLinearFilter,
            LinearFilter: LinearFilter,
            LinearMipMapNearestFilter: LinearMipMapNearestFilter,
            LinearMipMapLinearFilter: LinearMipMapLinearFilter
        };
        function ImageBitmapLoader(manager) {
            if (typeof createImageBitmap === "undefined") {
                console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.")
            }
            if (typeof fetch === "undefined") {
                console.warn("THREE.ImageBitmapLoader: fetch() not supported.")
            }
            this.manager = manager !== undefined ? manager : DefaultLoadingManager;
            this.options = undefined
        }
        ImageBitmapLoader.prototype = {
            constructor: ImageBitmapLoader,
            setOptions: function setOptions(options) {
                this.options = options;
                return this
            },
            load: function(url, onLoad, onProgress, onError) {
                if (url === undefined)
                    url = "";
                if (this.path !== undefined)
                    url = this.path + url;
                url = this.manager.resolveURL(url);
                var scope = this;
                var cached = Cache.get(url);
                if (cached !== undefined) {
                    scope.manager.itemStart(url);
                    setTimeout(function() {
                        if (onLoad)
                            onLoad(cached);
                        scope.manager.itemEnd(url)
                    }, 0);
                    return cached
                }
                fetch(url).then(function(res) {
                    return res.blob()
                }).then(function(blob) {
                    return createImageBitmap(blob, scope.options)
                }).then(function(imageBitmap) {
                    Cache.add(url, imageBitmap);
                    if (onLoad)
                        onLoad(imageBitmap);
                    scope.manager.itemEnd(url)
                }).catch(function(e) {
                    if (onError)
                        onError(e);
                    scope.manager.itemEnd(url);
                    scope.manager.itemError(url)
                })
            },
            setCrossOrigin: function() {
                return this
            },
            setPath: function(value) {
                this.path = value;
                return this
            }
        };
        function ShapePath() {
            this.type = "ShapePath";
            this.color = new Color;
            this.subPaths = [];
            this.currentPath = null
        }
        Object.assign(ShapePath.prototype, {
            moveTo: function(x, y) {
                this.currentPath = new Path;
                this.subPaths.push(this.currentPath);
                this.currentPath.moveTo(x, y)
            },
            lineTo: function(x, y) {
                this.currentPath.lineTo(x, y)
            },
            quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
                this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY)
            },
            bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
                this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY)
            },
            splineThru: function(pts) {
                this.currentPath.splineThru(pts)
            },
            toShapes: function(isCCW, noHoles) {
                function toShapesNoHoles(inSubpaths) {
                    var shapes = [];
                    for (var i = 0, l = inSubpaths.length; i < l; i++) {
                        var tmpPath = inSubpaths[i];
                        var tmpShape = new Shape;
                        tmpShape.curves = tmpPath.curves;
                        shapes.push(tmpShape)
                    }
                    return shapes
                }
                function isPointInsidePolygon(inPt, inPolygon) {
                    var polyLen = inPolygon.length;
                    var inside = false;
                    for (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {
                        var edgeLowPt = inPolygon[p];
                        var edgeHighPt = inPolygon[q];
                        var edgeDx = edgeHighPt.x - edgeLowPt.x;
                        var edgeDy = edgeHighPt.y - edgeLowPt.y;
                        if (Math.abs(edgeDy) > Number.EPSILON) {
                            if (edgeDy < 0) {
                                edgeLowPt = inPolygon[q];
                                edgeDx = -edgeDx;
                                edgeHighPt = inPolygon[p];
                                edgeDy = -edgeDy
                            }
                            if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y)
                                continue;
                            if (inPt.y === edgeLowPt.y) {
                                if (inPt.x === edgeLowPt.x)
                                    return true
                            } else {
                                var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                                if (perpEdge === 0)
                                    return true;
                                if (perpEdge < 0)
                                    continue;
                                inside = !inside
                            }
                        } else {
                            if (inPt.y !== edgeLowPt.y)
                                continue;
                            if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x)
                                return true
                        }
                    }
                    return inside
                }
                var isClockWise = ShapeUtils.isClockWise;
                var subPaths = this.subPaths;
                if (subPaths.length === 0)
                    return [];
                if (noHoles === true)
                    return toShapesNoHoles(subPaths);
                var solid,
                    tmpPath,
                    tmpShape,
                    shapes = [];
                if (subPaths.length === 1) {
                    tmpPath = subPaths[0];
                    tmpShape = new Shape;
                    tmpShape.curves = tmpPath.curves;
                    shapes.push(tmpShape);
                    return shapes
                }
                var holesFirst = !isClockWise(subPaths[0].getPoints());
                holesFirst = isCCW ? !holesFirst : holesFirst;
                var betterShapeHoles = [];
                var newShapes = [];
                var newShapeHoles = [];
                var mainIdx = 0;
                var tmpPoints;
                newShapes[mainIdx] = undefined;
                newShapeHoles[mainIdx] = [];
                for (var i = 0, l = subPaths.length; i < l; i++) {
                    tmpPath = subPaths[i];
                    tmpPoints = tmpPath.getPoints();
                    solid = isClockWise(tmpPoints);
                    solid = isCCW ? !solid : solid;
                    if (solid) {
                        if (!holesFirst && newShapes[mainIdx])
                            mainIdx++;
                        newShapes[mainIdx] = {
                            s: new Shape,
                            p: tmpPoints
                        };
                        newShapes[mainIdx].s.curves = tmpPath.curves;
                        if (holesFirst)
                            mainIdx++;
                        newShapeHoles[mainIdx] = []
                    } else {
                        newShapeHoles[mainIdx].push({
                            h: tmpPath,
                            p: tmpPoints[0]
                        })
                    }
                }
                if (!newShapes[0])
                    return toShapesNoHoles(subPaths);
                if (newShapes.length > 1) {
                    var ambiguous = false;
                    var toChange = [];
                    for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
                        betterShapeHoles[sIdx] = []
                    }
                    for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
                        var sho = newShapeHoles[sIdx];
                        for (var hIdx = 0; hIdx < sho.length; hIdx++) {
                            var ho = sho[hIdx];
                            var hole_unassigned = true;
                            for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
                                if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                                    if (sIdx !== s2Idx)
                                        toChange.push({
                                            froms: sIdx,
                                            tos: s2Idx,
                                            hole: hIdx
                                        });
                                    if (hole_unassigned) {
                                        hole_unassigned = false;
                                        betterShapeHoles[s2Idx].push(ho)
                                    } else {
                                        ambiguous = true
                                    }
                                }
                            }
                            if (hole_unassigned) {
                                betterShapeHoles[sIdx].push(ho)
                            }
                        }
                    }
                    if (toChange.length > 0) {
                        if (!ambiguous)
                            newShapeHoles = betterShapeHoles
                    }
                }
                var tmpHoles;
                for (var i = 0, il = newShapes.length; i < il; i++) {
                    tmpShape = newShapes[i].s;
                    shapes.push(tmpShape);
                    tmpHoles = newShapeHoles[i];
                    for (var j = 0, jl = tmpHoles.length; j < jl; j++) {
                        tmpShape.holes.push(tmpHoles[j].h)
                    }
                }
                return shapes
            }
        });
        function Font(data) {
            this.type = "Font";
            this.data = data
        }
        Object.assign(Font.prototype, {
            isFont: true,
            generateShapes: function(text, size) {
                if (size === undefined)
                    size = 100;
                var shapes = [];
                var paths = createPaths(text, size, this.data);
                for (var p = 0, pl = paths.length; p < pl; p++) {
                    Array.prototype.push.apply(shapes, paths[p].toShapes())
                }
                return shapes
            }
        });
        function createPaths(text, size, data) {
            var chars = Array.from ? Array.from(text) : String(text).split("");
            var scale = size / data.resolution;
            var line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;
            var paths = [];
            var offsetX = 0,
                offsetY = 0;
            for (var i = 0; i < chars.length; i++) {
                var char = chars[i];
                if (char === "\n") {
                    offsetX = 0;
                    offsetY -= line_height
                } else {
                    var ret = createPath(char, scale, offsetX, offsetY, data);
                    offsetX += ret.offsetX;
                    paths.push(ret.path)
                }
            }
            return paths
        }
        function createPath(char, scale, offsetX, offsetY, data) {
            var glyph = data.glyphs[char] || data.glyphs["?"];
            if (!glyph)
                return;
            var path = new ShapePath;
            var x,
                y,
                cpx,
                cpy,
                cpx1,
                cpy1,
                cpx2,
                cpy2;
            if (glyph.o) {
                var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
                for (var i = 0, l = outline.length; i < l;) {
                    var action = outline[i++];
                    switch (action) {
                    case "m":
                        x = outline[i++] * scale + offsetX;
                        y = outline[i++] * scale + offsetY;
                        path.moveTo(x, y);
                        break;
                    case "l":
                        x = outline[i++] * scale + offsetX;
                        y = outline[i++] * scale + offsetY;
                        path.lineTo(x, y);
                        break;
                    case "q":
                        cpx = outline[i++] * scale + offsetX;
                        cpy = outline[i++] * scale + offsetY;
                        cpx1 = outline[i++] * scale + offsetX;
                        cpy1 = outline[i++] * scale + offsetY;
                        path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
                        break;
                    case "b":
                        cpx = outline[i++] * scale + offsetX;
                        cpy = outline[i++] * scale + offsetY;
                        cpx1 = outline[i++] * scale + offsetX;
                        cpy1 = outline[i++] * scale + offsetY;
                        cpx2 = outline[i++] * scale + offsetX;
                        cpy2 = outline[i++] * scale + offsetY;
                        path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
                        break
                    }
                }
            }
            return {
                offsetX: glyph.ha * scale,
                path: path
            }
        }
        function FontLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager
        }
        Object.assign(FontLoader.prototype, {
            load: function(url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new FileLoader(this.manager);
                loader.setPath(this.path);
                loader.load(url, function(text) {
                    var json;
                    try {
                        json = JSON.parse(text)
                    } catch (e) {
                        console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.");
                        json = JSON.parse(text.substring(65, text.length - 2))
                    }
                    var font = scope.parse(json);
                    if (onLoad)
                        onLoad(font)
                }, onProgress, onError)
            },
            parse: function(json) {
                return new Font(json)
            },
            setPath: function(value) {
                this.path = value;
                return this
            }
        });
        var context;
        var AudioContext = {
            getContext: function() {
                if (context === undefined) {
                    context = new (window.AudioContext || window.webkitAudioContext)
                }
                return context
            },
            setContext: function(value) {
                context = value
            }
        };
        function AudioLoader(manager) {
            this.manager = manager !== undefined ? manager : DefaultLoadingManager
        }
        Object.assign(AudioLoader.prototype, {
            load: function(url, onLoad, onProgress, onError) {
                var loader = new FileLoader(this.manager);
                loader.setResponseType("arraybuffer");
                loader.load(url, function(buffer) {
                    var bufferCopy = buffer.slice(0);
                    var context = AudioContext.getContext();
                    context.decodeAudioData(bufferCopy, function(audioBuffer) {
                        onLoad(audioBuffer)
                    })
                }, onProgress, onError)
            }
        });
        function StereoCamera() {
            this.type = "StereoCamera";
            this.aspect = 1;
            this.eyeSep = .064;
            this.cameraL = new PerspectiveCamera;
            this.cameraL.layers.enable(1);
            this.cameraL.matrixAutoUpdate = false;
            this.cameraR = new PerspectiveCamera;
            this.cameraR.layers.enable(2);
            this.cameraR.matrixAutoUpdate = false
        }
        Object.assign(StereoCamera.prototype, {
            update: function() {
                var instance,
                    focus,
                    fov,
                    aspect,
                    near,
                    far,
                    zoom,
                    eyeSep;
                var eyeRight = new Matrix4;
                var eyeLeft = new Matrix4;
                return function update(camera) {
                    var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov || aspect !== camera.aspect * this.aspect || near !== camera.near || far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;
                    if (needsUpdate) {
                        instance = this;
                        focus = camera.focus;
                        fov = camera.fov;
                        aspect = camera.aspect * this.aspect;
                        near = camera.near;
                        far = camera.far;
                        zoom = camera.zoom;
                        var projectionMatrix = camera.projectionMatrix.clone();
                        eyeSep = this.eyeSep / 2;
                        var eyeSepOnProjection = eyeSep * near / focus;
                        var ymax = near * Math.tan(_Math.DEG2RAD * fov * .5) / zoom;
                        var xmin,
                            xmax;
                        eyeLeft.elements[12] = -eyeSep;
                        eyeRight.elements[12] = eyeSep;
                        xmin = -ymax * aspect + eyeSepOnProjection;
                        xmax = ymax * aspect + eyeSepOnProjection;
                        projectionMatrix.elements[0] = 2 * near / (xmax - xmin);
                        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
                        this.cameraL.projectionMatrix.copy(projectionMatrix);
                        xmin = -ymax * aspect - eyeSepOnProjection;
                        xmax = ymax * aspect - eyeSepOnProjection;
                        projectionMatrix.elements[0] = 2 * near / (xmax - xmin);
                        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
                        this.cameraR.projectionMatrix.copy(projectionMatrix)
                    }
                    this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft);
                    this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight)
                }
            }()
        });
        function CubeCamera(near, far, cubeResolution) {
            Object3D.call(this);
            this.type = "CubeCamera";
            var fov = 90,
                aspect = 1;
            var cameraPX = new PerspectiveCamera(fov, aspect, near, far);
            cameraPX.up.set(0, -1, 0);
            cameraPX.lookAt(new Vector3(1, 0, 0));
            this.add(cameraPX);
            var cameraNX = new PerspectiveCamera(fov, aspect, near, far);
            cameraNX.up.set(0, -1, 0);
            cameraNX.lookAt(new Vector3(-1, 0, 0));
            this.add(cameraNX);
            var cameraPY = new PerspectiveCamera(fov, aspect, near, far);
            cameraPY.up.set(0, 0, 1);
            cameraPY.lookAt(new Vector3(0, 1, 0));
            this.add(cameraPY);
            var cameraNY = new PerspectiveCamera(fov, aspect, near, far);
            cameraNY.up.set(0, 0, -1);
            cameraNY.lookAt(new Vector3(0, -1, 0));
            this.add(cameraNY);
            var cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
            cameraPZ.up.set(0, -1, 0);
            cameraPZ.lookAt(new Vector3(0, 0, 1));
            this.add(cameraPZ);
            var cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
            cameraNZ.up.set(0, -1, 0);
            cameraNZ.lookAt(new Vector3(0, 0, -1));
            this.add(cameraNZ);
            var options = {
                format: RGBFormat,
                magFilter: LinearFilter,
                minFilter: LinearFilter
            };
            this.renderTarget = new WebGLRenderTargetCube(cubeResolution, cubeResolution, options);
            this.renderTarget.texture.name = "CubeCamera";
            this.update = function(renderer, scene) {
                if (this.parent === null)
                    this.updateMatrixWorld();
                var renderTarget = this.renderTarget;
                var generateMipmaps = renderTarget.texture.generateMipmaps;
                renderTarget.texture.generateMipmaps = false;
                renderTarget.activeCubeFace = 0;
                renderer.render(scene, cameraPX, renderTarget);
                renderTarget.activeCubeFace = 1;
                renderer.render(scene, cameraNX, renderTarget);
                renderTarget.activeCubeFace = 2;
                renderer.render(scene, cameraPY, renderTarget);
                renderTarget.activeCubeFace = 3;
                renderer.render(scene, cameraNY, renderTarget);
                renderTarget.activeCubeFace = 4;
                renderer.render(scene, cameraPZ, renderTarget);
                renderTarget.texture.generateMipmaps = generateMipmaps;
                renderTarget.activeCubeFace = 5;
                renderer.render(scene, cameraNZ, renderTarget);
                renderer.setRenderTarget(null)
            };
            this.clear = function(renderer, color, depth, stencil) {
                var renderTarget = this.renderTarget;
                for (var i = 0; i < 6; i++) {
                    renderTarget.activeCubeFace = i;
                    renderer.setRenderTarget(renderTarget);
                    renderer.clear(color, depth, stencil)
                }
                renderer.setRenderTarget(null)
            }
        }
        CubeCamera.prototype = Object.create(Object3D.prototype);
        CubeCamera.prototype.constructor = CubeCamera;
        function AudioListener() {
            Object3D.call(this);
            this.type = "AudioListener";
            this.context = AudioContext.getContext();
            this.gain = this.context.createGain();
            this.gain.connect(this.context.destination);
            this.filter = null
        }
        AudioListener.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: AudioListener,
            getInput: function() {
                return this.gain
            },
            removeFilter: function() {
                if (this.filter !== null) {
                    this.gain.disconnect(this.filter);
                    this.filter.disconnect(this.context.destination);
                    this.gain.connect(this.context.destination);
                    this.filter = null
                }
                return this
            },
            getFilter: function() {
                return this.filter
            },
            setFilter: function(value) {
                if (this.filter !== null) {
                    this.gain.disconnect(this.filter);
                    this.filter.disconnect(this.context.destination)
                } else {
                    this.gain.disconnect(this.context.destination)
                }
                this.filter = value;
                this.gain.connect(this.filter);
                this.filter.connect(this.context.destination);
                return this
            },
            getMasterVolume: function() {
                return this.gain.gain.value
            },
            setMasterVolume: function(value) {
                this.gain.gain.setTargetAtTime(value, this.context.currentTime, .01);
                return this
            },
            updateMatrixWorld: function() {
                var position = new Vector3;
                var quaternion = new Quaternion;
                var scale = new Vector3;
                var orientation = new Vector3;
                return function updateMatrixWorld(force) {
                    Object3D.prototype.updateMatrixWorld.call(this, force);
                    var listener = this.context.listener;
                    var up = this.up;
                    this.matrixWorld.decompose(position, quaternion, scale);
                    orientation.set(0, 0, -1).applyQuaternion(quaternion);
                    if (listener.positionX) {
                        listener.positionX.setValueAtTime(position.x, this.context.currentTime);
                        listener.positionY.setValueAtTime(position.y, this.context.currentTime);
                        listener.positionZ.setValueAtTime(position.z, this.context.currentTime);
                        listener.forwardX.setValueAtTime(orientation.x, this.context.currentTime);
                        listener.forwardY.setValueAtTime(orientation.y, this.context.currentTime);
                        listener.forwardZ.setValueAtTime(orientation.z, this.context.currentTime);
                        listener.upX.setValueAtTime(up.x, this.context.currentTime);
                        listener.upY.setValueAtTime(up.y, this.context.currentTime);
                        listener.upZ.setValueAtTime(up.z, this.context.currentTime)
                    } else {
                        listener.setPosition(position.x, position.y, position.z);
                        listener.setOrientation(orientation.x, orientation.y, orientation.z, up.x, up.y, up.z)
                    }
                }
            }()
        });
        function Audio(listener) {
            Object3D.call(this);
            this.type = "Audio";
            this.context = listener.context;
            this.gain = this.context.createGain();
            this.gain.connect(listener.getInput());
            this.autoplay = false;
            this.buffer = null;
            this.loop = false;
            this.startTime = 0;
            this.offset = 0;
            this.playbackRate = 1;
            this.isPlaying = false;
            this.hasPlaybackControl = true;
            this.sourceType = "empty";
            this.filters = []
        }
        Audio.prototype = Object.assign(Object.create(Object3D.prototype), {
            constructor: Audio,
            getOutput: function() {
                return this.gain
            },
            setNodeSource: function(audioNode) {
                this.hasPlaybackControl = false;
                this.sourceType = "audioNode";
                this.source = audioNode;
                this.connect();
                return this
            },
            setMediaElementSource: function(mediaElement) {
                this.hasPlaybackControl = false;
                this.sourceType = "mediaNode";
                this.source = this.context.createMediaElementSource(mediaElement);
                this.connect();
                return this
            },
            setBuffer: function(audioBuffer) {
                this.buffer = audioBuffer;
                this.sourceType = "buffer";
                if (this.autoplay)
                    this.play();
                return this
            },
            play: function() {
                if (this.isPlaying === true) {
                    console.warn("THREE.Audio: Audio is already playing.");
                    return
                }
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return
                }
                var source = this.context.createBufferSource();
                source.buffer = this.buffer;
                source.loop = this.loop;
                source.onended = this.onEnded.bind(this);
                source.playbackRate.setValueAtTime(this.playbackRate, this.startTime);
                this.startTime = this.context.currentTime;
                source.start(this.startTime, this.offset);
                this.isPlaying = true;
                this.source = source;
                return this.connect()
            },
            pause: function() {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return
                }
                if (this.isPlaying === true) {
                    this.source.stop();
                    this.source.onended = null;
                    this.offset += (this.context.currentTime - this.startTime) * this.playbackRate;
                    this.isPlaying = false
                }
                return this
            },
            stop: function() {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return
                }
                this.source.stop();
                this.source.onended = null;
                this.offset = 0;
                this.isPlaying = false;
                return this
            },
            connect: function() {
                if (this.filters.length > 0) {
                    this.source.connect(this.filters[0]);
                    for (var i = 1, l = this.filters.length; i < l; i++) {
                        this.filters[i - 1].connect(this.filters[i])
                    }
                    this.filters[this.filters.length - 1].connect(this.getOutput())
                } else {
                    this.source.connect(this.getOutput())
                }
                return this
            },
            disconnect: function() {
                if (this.filters.length > 0) {
                    this.source.disconnect(this.filters[0]);
                    for (var i = 1, l = this.filters.length; i < l; i++) {
                        this.filters[i - 1].disconnect(this.filters[i])
                    }
                    this.filters[this.filters.length - 1].disconnect(this.getOutput())
                } else {
                    this.source.disconnect(this.getOutput())
                }
                return this
            },
            getFilters: function() {
                return this.filters
            },
            setFilters: function(value) {
                if (!value)
                    value = [];
                if (this.isPlaying === true) {
                    this.disconnect();
                    this.filters = value;
                    this.connect()
                } else {
                    this.filters = value
                }
                return this
            },
            getFilter: function() {
                return this.getFilters()[0]
            },
            setFilter: function(filter) {
                return this.setFilters(filter ? [filter] : [])
            },
            setPlaybackRate: function(value) {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return
                }
                this.playbackRate = value;
                if (this.isPlaying === true) {
                    this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime)
                }
                return this
            },
            getPlaybackRate: function() {
                return this.playbackRate
            },
            onEnded: function() {
                this.isPlaying = false
            },
            getLoop: function() {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return false
                }
                return this.loop
            },
            setLoop: function(value) {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return
                }
                this.loop = value;
                if (this.isPlaying === true) {
                    this.source.loop = this.loop
                }
                return this
            },
            getVolume: function() {
                return this.gain.gain.value
            },
            setVolume: function(value) {
                this.gain.gain.setTargetAtTime(value, this.context.currentTime, .01);
                return this
            }
        });
        function PositionalAudio(listener) {
            Audio.call(this, listener);
            this.panner = this.context.createPanner();
            this.panner.connect(this.gain)
        }
        PositionalAudio.prototype = Object.assign(Object.create(Audio.prototype), {
            constructor: PositionalAudio,
            getOutput: function() {
                return this.panner
            },
            getRefDistance: function() {
                return this.panner.refDistance
            },
            setRefDistance: function(value) {
                this.panner.refDistance = value;
                return this
            },
            getRolloffFactor: function() {
                return this.panner.rolloffFactor
            },
            setRolloffFactor: function(value) {
                this.panner.rolloffFactor = value;
                return this
            },
            getDistanceModel: function() {
                return this.panner.distanceModel
            },
            setDistanceModel: function(value) {
                this.panner.distanceModel = value;
                return this
            },
            getMaxDistance: function() {
                return this.panner.maxDistance
            },
            setMaxDistance: function(value) {
                this.panner.maxDistance = value;
                return this
            },
            setDirectionalCone: function(coneInnerAngle, coneOuterAngle, coneOuterGain) {
                this.panner.coneInnerAngle = coneInnerAngle;
                this.panner.coneOuterAngle = coneOuterAngle;
                this.panner.coneOuterGain = coneOuterGain;
                return this
            },
            updateMatrixWorld: function() {
                var position = new Vector3;
                var quaternion = new Quaternion;
                var scale = new Vector3;
                var orientation = new Vector3;
                return function updateMatrixWorld(force) {
                    Object3D.prototype.updateMatrixWorld.call(this, force);
                    var panner = this.panner;
                    this.matrixWorld.decompose(position, quaternion, scale);
                    orientation.set(0, 0, 1).applyQuaternion(quaternion);
                    panner.setPosition(position.x, position.y, position.z);
                    panner.setOrientation(orientation.x, orientation.y, orientation.z)
                }
            }()
        });
        function AudioAnalyser(audio, fftSize) {
            this.analyser = audio.context.createAnalyser();
            this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;
            this.data = new Uint8Array(this.analyser.frequencyBinCount);
            audio.getOutput().connect(this.analyser)
        }
        Object.assign(AudioAnalyser.prototype, {
            getFrequencyData: function() {
                this.analyser.getByteFrequencyData(this.data);
                return this.data
            },
            getAverageFrequency: function() {
                var value = 0,
                    data = this.getFrequencyData();
                for (var i = 0; i < data.length; i++) {
                    value += data[i]
                }
                return value / data.length
            }
        });
        function PropertyMixer(binding, typeName, valueSize) {
            this.binding = binding;
            this.valueSize = valueSize;
            var bufferType = Float64Array,
                mixFunction;
            switch (typeName) {
            case "quaternion":
                mixFunction = this._slerp;
                break;
            case "string":
            case "bool":
                bufferType = Array;
                mixFunction = this._select;
                break;
            default:
                mixFunction = this._lerp
            }
            this.buffer = new bufferType(valueSize * 4);
            this._mixBufferRegion = mixFunction;
            this.cumulativeWeight = 0;
            this.useCount = 0;
            this.referenceCount = 0
        }
        Object.assign(PropertyMixer.prototype, {
            accumulate: function(accuIndex, weight) {
                var buffer = this.buffer,
                    stride = this.valueSize,
                    offset = accuIndex * stride + stride,
                    currentWeight = this.cumulativeWeight;
                if (currentWeight === 0) {
                    for (var i = 0; i !== stride; ++i) {
                        buffer[offset + i] = buffer[i]
                    }
                    currentWeight = weight
                } else {
                    currentWeight += weight;
                    var mix = weight / currentWeight;
                    this._mixBufferRegion(buffer, offset, 0, mix, stride)
                }
                this.cumulativeWeight = currentWeight
            },
            apply: function(accuIndex) {
                var stride = this.valueSize,
                    buffer = this.buffer,
                    offset = accuIndex * stride + stride,
                    weight = this.cumulativeWeight,
                    binding = this.binding;
                this.cumulativeWeight = 0;
                if (weight < 1) {
                    var originalValueOffset = stride * 3;
                    this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride)
                }
                for (var i = stride, e = stride + stride; i !== e; ++i) {
                    if (buffer[i] !== buffer[i + stride]) {
                        binding.setValue(buffer, offset);
                        break
                    }
                }
            },
            saveOriginalState: function() {
                var binding = this.binding;
                var buffer = this.buffer,
                    stride = this.valueSize,
                    originalValueOffset = stride * 3;
                binding.getValue(buffer, originalValueOffset);
                for (var i = stride, e = originalValueOffset; i !== e; ++i) {
                    buffer[i] = buffer[originalValueOffset + i % stride]
                }
                this.cumulativeWeight = 0
            },
            restoreOriginalState: function() {
                var originalValueOffset = this.valueSize * 3;
                this.binding.setValue(this.buffer, originalValueOffset)
            },
            _select: function(buffer, dstOffset, srcOffset, t, stride) {
                if (t >= .5) {
                    for (var i = 0; i !== stride; ++i) {
                        buffer[dstOffset + i] = buffer[srcOffset + i]
                    }
                }
            },
            _slerp: function(buffer, dstOffset, srcOffset, t) {
                Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t)
            },
            _lerp: function(buffer, dstOffset, srcOffset, t, stride) {
                var s = 1 - t;
                for (var i = 0; i !== stride; ++i) {
                    var j = dstOffset + i;
                    buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t
                }
            }
        });
        var RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
        function Composite(targetGroup, path, optionalParsedPath) {
            var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
            this._targetGroup = targetGroup;
            this._bindings = targetGroup.subscribe_(path, parsedPath)
        }
        Object.assign(Composite.prototype, {
            getValue: function(array, offset) {
                this.bind();
                var firstValidIndex = this._targetGroup.nCachedObjects_,
                    binding = this._bindings[firstValidIndex];
                if (binding !== undefined)
                    binding.getValue(array, offset)
            },
            setValue: function(array, offset) {
                var bindings = this._bindings;
                for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
                    bindings[i].setValue(array, offset)
                }
            },
            bind: function() {
                var bindings = this._bindings;
                for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
                    bindings[i].bind()
                }
            },
            unbind: function() {
                var bindings = this._bindings;
                for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
                    bindings[i].unbind()
                }
            }
        });
        function PropertyBinding(rootNode, path, parsedPath) {
            this.path = path;
            this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
            this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
            this.rootNode = rootNode
        }
        Object.assign(PropertyBinding, {
            Composite: Composite,
            create: function(root, path, parsedPath) {
                if (!(root && root.isAnimationObjectGroup)) {
                    return new PropertyBinding(root, path, parsedPath)
                } else {
                    return new PropertyBinding.Composite(root, path, parsedPath)
                }
            },
            sanitizeNodeName: function() {
                var reservedRe = new RegExp("[" + RESERVED_CHARS_RE + "]", "g");
                return function sanitizeNodeName(name) {
                    return name.replace(/\s/g, "_").replace(reservedRe, "")
                }
            }(),
            parseTrackName: function() {
                var wordChar = "[^" + RESERVED_CHARS_RE + "]";
                var wordCharOrDot = "[^" + RESERVED_CHARS_RE.replace("\\.", "") + "]";
                var directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", wordChar);
                var nodeRe = /(WCOD+)?/.source.replace("WCOD", wordCharOrDot);
                var objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", wordChar);
                var propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", wordChar);
                var trackRe = new RegExp("" + "^" + directoryRe + nodeRe + objectRe + propertyRe + "$");
                var supportedObjectNames = ["material", "materials", "bones"];
                return function parseTrackName(trackName) {
                    var matches = trackRe.exec(trackName);
                    if (!matches) {
                        throw new Error("PropertyBinding: Cannot parse trackName: " + trackName)
                    }
                    var results = {
                        nodeName: matches[2],
                        objectName: matches[3],
                        objectIndex: matches[4],
                        propertyName: matches[5],
                        propertyIndex: matches[6]
                    };
                    var lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
                    if (lastDot !== undefined && lastDot !== -1) {
                        var objectName = results.nodeName.substring(lastDot + 1);
                        if (supportedObjectNames.indexOf(objectName) !== -1) {
                            results.nodeName = results.nodeName.substring(0, lastDot);
                            results.objectName = objectName
                        }
                    }
                    if (results.propertyName === null || results.propertyName.length === 0) {
                        throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName)
                    }
                    return results
                }
            }(),
            findNode: function(root, nodeName) {
                if (!nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
                    return root
                }
                if (root.skeleton) {
                    var bone = root.skeleton.getBoneByName(nodeName);
                    if (bone !== undefined) {
                        return bone
                    }
                }
                if (root.children) {
                    var searchNodeSubtree = function(children) {
                        for (var i = 0; i < children.length; i++) {
                            var childNode = children[i];
                            if (childNode.name === nodeName || childNode.uuid === nodeName) {
                                return childNode
                            }
                            var result = searchNodeSubtree(childNode.children);
                            if (result)
                                return result
                        }
                        return null
                    };
                    var subTreeNode = searchNodeSubtree(root.children);
                    if (subTreeNode) {
                        return subTreeNode
                    }
                }
                return null
            }
        });
        Object.assign(PropertyBinding.prototype, {
            _getValue_unavailable: function() {},
            _setValue_unavailable: function() {},
            BindingType: {
                Direct: 0,
                EntireArray: 1,
                ArrayElement: 2,
                HasFromToArray: 3
            },
            Versioning: {
                None: 0,
                NeedsUpdate: 1,
                MatrixWorldNeedsUpdate: 2
            },
            GetterByBindingType: [function getValue_direct(buffer, offset) {
                buffer[offset] = this.node[this.propertyName]
            }, function getValue_array(buffer, offset) {
                var source = this.resolvedProperty;
                for (var i = 0, n = source.length; i !== n; ++i) {
                    buffer[offset++] = source[i]
                }
            }, function getValue_arrayElement(buffer, offset) {
                buffer[offset] = this.resolvedProperty[this.propertyIndex]
            }, function getValue_toArray(buffer, offset) {
                this.resolvedProperty.toArray(buffer, offset)
            }],
            SetterByBindingTypeAndVersioning: [[function setValue_direct(buffer, offset) {
                this.targetObject[this.propertyName] = buffer[offset]
            }, function setValue_direct_setNeedsUpdate(buffer, offset) {
                this.targetObject[this.propertyName] = buffer[offset];
                this.targetObject.needsUpdate = true
            }, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
                this.targetObject[this.propertyName] = buffer[offset];
                this.targetObject.matrixWorldNeedsUpdate = true
            }], [function setValue_array(buffer, offset) {
                var dest = this.resolvedProperty;
                for (var i = 0, n = dest.length; i !== n; ++i) {
                    dest[i] = buffer[offset++]
                }
            }, function setValue_array_setNeedsUpdate(buffer, offset) {
                var dest = this.resolvedProperty;
                for (var i = 0, n = dest.length; i !== n; ++i) {
                    dest[i] = buffer[offset++]
                }
                this.targetObject.needsUpdate = true
            }, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
                var dest = this.resolvedProperty;
                for (var i = 0, n = dest.length; i !== n; ++i) {
                    dest[i] = buffer[offset++]
                }
                this.targetObject.matrixWorldNeedsUpdate = true
            }], [function setValue_arrayElement(buffer, offset) {
                this.resolvedProperty[this.propertyIndex] = buffer[offset]
            }, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {
                this.resolvedProperty[this.propertyIndex] = buffer[offset];
                this.targetObject.needsUpdate = true
            }, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
                this.resolvedProperty[this.propertyIndex] = buffer[offset];
                this.targetObject.matrixWorldNeedsUpdate = true
            }], [function setValue_fromArray(buffer, offset) {
                this.resolvedProperty.fromArray(buffer, offset)
            }, function setValue_fromArray_setNeedsUpdate(buffer, offset) {
                this.resolvedProperty.fromArray(buffer, offset);
                this.targetObject.needsUpdate = true
            }, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
                this.resolvedProperty.fromArray(buffer, offset);
                this.targetObject.matrixWorldNeedsUpdate = true
            }]],
            getValue: function getValue_unbound(targetArray, offset) {
                this.bind();
                this.getValue(targetArray, offset)
            },
            setValue: function getValue_unbound(sourceArray, offset) {
                this.bind();
                this.setValue(sourceArray, offset)
            },
            bind: function() {
                var targetObject = this.node,
                    parsedPath = this.parsedPath,
                    objectName = parsedPath.objectName,
                    propertyName = parsedPath.propertyName,
                    propertyIndex = parsedPath.propertyIndex;
                if (!targetObject) {
                    targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
                    this.node = targetObject
                }
                this.getValue = this._getValue_unavailable;
                this.setValue = this._setValue_unavailable;
                if (!targetObject) {
                    console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
                    return
                }
                if (objectName) {
                    var objectIndex = parsedPath.objectIndex;
                    switch (objectName) {
                    case "materials":
                        if (!targetObject.material) {
                            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                            return
                        }
                        if (!targetObject.material.materials) {
                            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                            return
                        }
                        targetObject = targetObject.material.materials;
                        break;
                    case "bones":
                        if (!targetObject.skeleton) {
                            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                            return
                        }
                        targetObject = targetObject.skeleton.bones;
                        for (var i = 0; i < targetObject.length; i++) {
                            if (targetObject[i].name === objectIndex) {
                                objectIndex = i;
                                break
                            }
                        }
                        break;
                    default:
                        if (targetObject[objectName] === undefined) {
                            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                            return
                        }
                        targetObject = targetObject[objectName]
                    }
                    if (objectIndex !== undefined) {
                        if (targetObject[objectIndex] === undefined) {
                            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
                            return
                        }
                        targetObject = targetObject[objectIndex]
                    }
                }
                var nodeProperty = targetObject[propertyName];
                if (nodeProperty === undefined) {
                    var nodeName = parsedPath.nodeName;
                    console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
                    return
                }
                var versioning = this.Versioning.None;
                if (targetObject.needsUpdate !== undefined) {
                    versioning = this.Versioning.NeedsUpdate;
                    this.targetObject = targetObject
                } else if (targetObject.matrixWorldNeedsUpdate !== undefined) {
                    versioning = this.Versioning.MatrixWorldNeedsUpdate;
                    this.targetObject = targetObject
                }
                var bindingType = this.BindingType.Direct;
                if (propertyIndex !== undefined) {
                    if (propertyName === "morphTargetInfluences") {
                        if (!targetObject.geometry) {
                            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                            return
                        }
                        if (targetObject.geometry.isBufferGeometry) {
                            if (!targetObject.geometry.morphAttributes) {
                                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                                return
                            }
                            for (var i = 0; i < this.node.geometry.morphAttributes.position.length; i++) {
                                if (targetObject.geometry.morphAttributes.position[i].name === propertyIndex) {
                                    propertyIndex = i;
                                    break
                                }
                            }
                        } else {
                            if (!targetObject.geometry.morphTargets) {
                                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                                return
                            }
                            for (var i = 0; i < this.node.geometry.morphTargets.length; i++) {
                                if (targetObject.geometry.morphTargets[i].name === propertyIndex) {
                                    propertyIndex = i;
                                    break
                                }
                            }
                        }
                    }
                    bindingType = this.BindingType.ArrayElement;
                    this.resolvedProperty = nodeProperty;
                    this.propertyIndex = propertyIndex
                } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
                    bindingType = this.BindingType.HasFromToArray;
                    this.resolvedProperty = nodeProperty
                } else if (Array.isArray(nodeProperty)) {
                    bindingType = this.BindingType.EntireArray;
                    this.resolvedProperty = nodeProperty
                } else {
                    this.propertyName = propertyName
                }
                this.getValue = this.GetterByBindingType[bindingType];
                this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning]
            },
            unbind: function() {
                this.node = null;
                this.getValue = this._getValue_unbound;
                this.setValue = this._setValue_unbound
            }
        });
        Object.assign(PropertyBinding.prototype, {
            _getValue_unbound: PropertyBinding.prototype.getValue,
            _setValue_unbound: PropertyBinding.prototype.setValue
        });
        function AnimationObjectGroup() {
            this.uuid = _Math.generateUUID();
            this._objects = Array.prototype.slice.call(arguments);
            this.nCachedObjects_ = 0;
            var indices = {};
            this._indicesByUUID = indices;
            for (var i = 0, n = arguments.length; i !== n; ++i) {
                indices[arguments[i].uuid] = i
            }
            this._paths = [];
            this._parsedPaths = [];
            this._bindings = [];
            this._bindingsIndicesByPath = {};
            var scope = this;
            this.stats = {
                objects: {
                    get total() {
                        return scope._objects.length
                    },
                    get inUse() {
                        return this.total - scope.nCachedObjects_
                    }
                },
                get bindingsPerObject() {
                    return scope._bindings.length
                }
            }
        }
        Object.assign(AnimationObjectGroup.prototype, {
            isAnimationObjectGroup: true,
            add: function() {
                var objects = this._objects,
                    nObjects = objects.length,
                    nCachedObjects = this.nCachedObjects_,
                    indicesByUUID = this._indicesByUUID,
                    paths = this._paths,
                    parsedPaths = this._parsedPaths,
                    bindings = this._bindings,
                    nBindings = bindings.length,
                    knownObject = undefined;
                for (var i = 0, n = arguments.length; i !== n; ++i) {
                    var object = arguments[i],
                        uuid = object.uuid,
                        index = indicesByUUID[uuid];
                    if (index === undefined) {
                        index = nObjects++;
                        indicesByUUID[uuid] = index;
                        objects.push(object);
                        for (var j = 0, m = nBindings; j !== m; ++j) {
                            bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]))
                        }
                    } else if (index < nCachedObjects) {
                        knownObject = objects[index];
                        var firstActiveIndex = --nCachedObjects,
                            lastCachedObject = objects[firstActiveIndex];
                        indicesByUUID[lastCachedObject.uuid] = index;
                        objects[index] = lastCachedObject;
                        indicesByUUID[uuid] = firstActiveIndex;
                        objects[firstActiveIndex] = object;
                        for (var j = 0, m = nBindings; j !== m; ++j) {
                            var bindingsForPath = bindings[j],
                                lastCached = bindingsForPath[firstActiveIndex],
                                binding = bindingsForPath[index];
                            bindingsForPath[index] = lastCached;
                            if (binding === undefined) {
                                binding = new PropertyBinding(object, paths[j], parsedPaths[j])
                            }
                            bindingsForPath[firstActiveIndex] = binding
                        }
                    } else if (objects[index] !== knownObject) {
                        console.error("THREE.AnimationObjectGroup: Different objects with the same UUID " + "detected. Clean the caches or recreate your infrastructure when reloading scenes.")
                    }
                }
                this.nCachedObjects_ = nCachedObjects
            },
            remove: function() {
                var objects = this._objects,
                    nCachedObjects = this.nCachedObjects_,
                    indicesByUUID = this._indicesByUUID,
                    bindings = this._bindings,
                    nBindings = bindings.length;
                for (var i = 0, n = arguments.length; i !== n; ++i) {
                    var object = arguments[i],
                        uuid = object.uuid,
                        index = indicesByUUID[uuid];
                    if (index !== undefined && index >= nCachedObjects) {
                        var lastCachedIndex = nCachedObjects++,
                            firstActiveObject = objects[lastCachedIndex];
                        indicesByUUID[firstActiveObject.uuid] = index;
                        objects[index] = firstActiveObject;
                        indicesByUUID[uuid] = lastCachedIndex;
                        objects[lastCachedIndex] = object;
                        for (var j = 0, m = nBindings; j !== m; ++j) {
                            var bindingsForPath = bindings[j],
                                firstActive = bindingsForPath[lastCachedIndex],
                                binding = bindingsForPath[index];
                            bindingsForPath[index] = firstActive;
                            bindingsForPath[lastCachedIndex] = binding
                        }
                    }
                }
                this.nCachedObjects_ = nCachedObjects
            },
            uncache: function() {
                var objects = this._objects,
                    nObjects = objects.length,
                    nCachedObjects = this.nCachedObjects_,
                    indicesByUUID = this._indicesByUUID,
                    bindings = this._bindings,
                    nBindings = bindings.length;
                for (var i = 0, n = arguments.length; i !== n; ++i) {
                    var object = arguments[i],
                        uuid = object.uuid,
                        index = indicesByUUID[uuid];
                    if (index !== undefined) {
                        delete indicesByUUID[uuid];
                        if (index < nCachedObjects) {
                            var firstActiveIndex = --nCachedObjects,
                                lastCachedObject = objects[firstActiveIndex],
                                lastIndex = --nObjects,
                                lastObject = objects[lastIndex];
                            indicesByUUID[lastCachedObject.uuid] = index;
                            objects[index] = lastCachedObject;
                            indicesByUUID[lastObject.uuid] = firstActiveIndex;
                            objects[firstActiveIndex] = lastObject;
                            objects.pop();
                            for (var j = 0, m = nBindings; j !== m; ++j) {
                                var bindingsForPath = bindings[j],
                                    lastCached = bindingsForPath[firstActiveIndex],
                                    last = bindingsForPath[lastIndex];
                                bindingsForPath[index] = lastCached;
                                bindingsForPath[firstActiveIndex] = last;
                                bindingsForPath.pop()
                            }
                        } else {
                            var lastIndex = --nObjects,
                                lastObject = objects[lastIndex];
                            indicesByUUID[lastObject.uuid] = index;
                            objects[index] = lastObject;
                            objects.pop();
                            for (var j = 0, m = nBindings; j !== m; ++j) {
                                var bindingsForPath = bindings[j];
                                bindingsForPath[index] = bindingsForPath[lastIndex];
                                bindingsForPath.pop()
                            }
                        }
                    }
                }
                this.nCachedObjects_ = nCachedObjects
            },
            subscribe_: function(path, parsedPath) {
                var indicesByPath = this._bindingsIndicesByPath,
                    index = indicesByPath[path],
                    bindings = this._bindings;
                if (index !== undefined)
                    return bindings[index];
                var paths = this._paths,
                    parsedPaths = this._parsedPaths,
                    objects = this._objects,
                    nObjects = objects.length,
                    nCachedObjects = this.nCachedObjects_,
                    bindingsForPath = new Array(nObjects);
                index = bindings.length;
                indicesByPath[path] = index;
                paths.push(path);
                parsedPaths.push(parsedPath);
                bindings.push(bindingsForPath);
                for (var i = nCachedObjects, n = objects.length; i !== n; ++i) {
                    var object = objects[i];
                    bindingsForPath[i] = new PropertyBinding(object, path, parsedPath)
                }
                return bindingsForPath
            },
            unsubscribe_: function(path) {
                var indicesByPath = this._bindingsIndicesByPath,
                    index = indicesByPath[path];
                if (index !== undefined) {
                    var paths = this._paths,
                        parsedPaths = this._parsedPaths,
                        bindings = this._bindings,
                        lastBindingsIndex = bindings.length - 1,
                        lastBindings = bindings[lastBindingsIndex],
                        lastBindingsPath = path[lastBindingsIndex];
                    indicesByPath[lastBindingsPath] = index;
                    bindings[index] = lastBindings;
                    bindings.pop();
                    parsedPaths[index] = parsedPaths[lastBindingsIndex];
                    parsedPaths.pop();
                    paths[index] = paths[lastBindingsIndex];
                    paths.pop()
                }
            }
        });
        function AnimationAction(mixer, clip, localRoot) {
            this._mixer = mixer;
            this._clip = clip;
            this._localRoot = localRoot || null;
            var tracks = clip.tracks,
                nTracks = tracks.length,
                interpolants = new Array(nTracks);
            var interpolantSettings = {
                endingStart: ZeroCurvatureEnding,
                endingEnd: ZeroCurvatureEnding
            };
            for (var i = 0; i !== nTracks; ++i) {
                var interpolant = tracks[i].createInterpolant(null);
                interpolants[i] = interpolant;
                interpolant.settings = interpolantSettings
            }
            this._interpolantSettings = interpolantSettings;
            this._interpolants = interpolants;
            this._propertyBindings = new Array(nTracks);
            this._cacheIndex = null;
            this._byClipCacheIndex = null;
            this._timeScaleInterpolant = null;
            this._weightInterpolant = null;
            this.loop = LoopRepeat;
            this._loopCount = -1;
            this._startTime = null;
            this.time = 0;
            this.timeScale = 1;
            this._effectiveTimeScale = 1;
            this.weight = 1;
            this._effectiveWeight = 1;
            this.repetitions = Infinity;
            this.paused = false;
            this.enabled = true;
            this.clampWhenFinished = false;
            this.zeroSlopeAtStart = true;
            this.zeroSlopeAtEnd = true
        }
        Object.assign(AnimationAction.prototype, {
            play: function() {
                this._mixer._activateAction(this);
                return this
            },
            stop: function() {
                this._mixer._deactivateAction(this);
                return this.reset()
            },
            reset: function() {
                this.paused = false;
                this.enabled = true;
                this.time = 0;
                this._loopCount = -1;
                this._startTime = null;
                return this.stopFading().stopWarping()
            },
            isRunning: function() {
                return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this)
            },
            isScheduled: function() {
                return this._mixer._isActiveAction(this)
            },
            startAt: function(time) {
                this._startTime = time;
                return this
            },
            setLoop: function(mode, repetitions) {
                this.loop = mode;
                this.repetitions = repetitions;
                return this
            },
            setEffectiveWeight: function(weight) {
                this.weight = weight;
                this._effectiveWeight = this.enabled ? weight : 0;
                return this.stopFading()
            },
            getEffectiveWeight: function() {
                return this._effectiveWeight
            },
            fadeIn: function(duration) {
                return this._scheduleFading(duration, 0, 1)
            },
            fadeOut: function(duration) {
                return this._scheduleFading(duration, 1, 0)
            },
            crossFadeFrom: function(fadeOutAction, duration, warp) {
                fadeOutAction.fadeOut(duration);
                this.fadeIn(duration);
                if (warp) {
                    var fadeInDuration = this._clip.duration,
                        fadeOutDuration = fadeOutAction._clip.duration,
                        startEndRatio = fadeOutDuration / fadeInDuration,
                        endStartRatio = fadeInDuration / fadeOutDuration;
                    fadeOutAction.warp(1, startEndRatio, duration);
                    this.warp(endStartRatio, 1, duration)
                }
                return this
            },
            crossFadeTo: function(fadeInAction, duration, warp) {
                return fadeInAction.crossFadeFrom(this, duration, warp)
            },
            stopFading: function() {
                var weightInterpolant = this._weightInterpolant;
                if (weightInterpolant !== null) {
                    this._weightInterpolant = null;
                    this._mixer._takeBackControlInterpolant(weightInterpolant)
                }
                return this
            },
            setEffectiveTimeScale: function(timeScale) {
                this.timeScale = timeScale;
                this._effectiveTimeScale = this.paused ? 0 : timeScale;
                return this.stopWarping()
            },
            getEffectiveTimeScale: function() {
                return this._effectiveTimeScale
            },
            setDuration: function(duration) {
                this.timeScale = this._clip.duration / duration;
                return this.stopWarping()
            },
            syncWith: function(action) {
                this.time = action.time;
                this.timeScale = action.timeScale;
                return this.stopWarping()
            },
            halt: function(duration) {
                return this.warp(this._effectiveTimeScale, 0, duration)
            },
            warp: function(startTimeScale, endTimeScale, duration) {
                var mixer = this._mixer,
                    now = mixer.time,
                    interpolant = this._timeScaleInterpolant,
                    timeScale = this.timeScale;
                if (interpolant === null) {
                    interpolant = mixer._lendControlInterpolant();
                    this._timeScaleInterpolant = interpolant
                }
                var times = interpolant.parameterPositions,
                    values = interpolant.sampleValues;
                times[0] = now;
                times[1] = now + duration;
                values[0] = startTimeScale / timeScale;
                values[1] = endTimeScale / timeScale;
                return this
            },
            stopWarping: function() {
                var timeScaleInterpolant = this._timeScaleInterpolant;
                if (timeScaleInterpolant !== null) {
                    this._timeScaleInterpolant = null;
                    this._mixer._takeBackControlInterpolant(timeScaleInterpolant)
                }
                return this
            },
            getMixer: function() {
                return this._mixer
            },
            getClip: function() {
                return this._clip
            },
            getRoot: function() {
                return this._localRoot || this._mixer._root
            },
            _update: function(time, deltaTime, timeDirection, accuIndex) {
                if (!this.enabled) {
                    this._updateWeight(time);
                    return
                }
                var startTime = this._startTime;
                if (startTime !== null) {
                    var timeRunning = (time - startTime) * timeDirection;
                    if (timeRunning < 0 || timeDirection === 0) {
                        return
                    }
                    this._startTime = null;
                    deltaTime = timeDirection * timeRunning
                }
                deltaTime *= this._updateTimeScale(time);
                var clipTime = this._updateTime(deltaTime);
                var weight = this._updateWeight(time);
                if (weight > 0) {
                    var interpolants = this._interpolants;
                    var propertyMixers = this._propertyBindings;
                    for (var j = 0, m = interpolants.length; j !== m; ++j) {
                        interpolants[j].evaluate(clipTime);
                        propertyMixers[j].accumulate(accuIndex, weight)
                    }
                }
            },
            _updateWeight: function(time) {
                var weight = 0;
                if (this.enabled) {
                    weight = this.weight;
                    var interpolant = this._weightInterpolant;
                    if (interpolant !== null) {
                        var interpolantValue = interpolant.evaluate(time)[0];
                        weight *= interpolantValue;
                        if (time > interpolant.parameterPositions[1]) {
                            this.stopFading();
                            if (interpolantValue === 0) {
                                this.enabled = false
                            }
                        }
                    }
                }
                this._effectiveWeight = weight;
                return weight
            },
            _updateTimeScale: function(time) {
                var timeScale = 0;
                if (!this.paused) {
                    timeScale = this.timeScale;
                    var interpolant = this._timeScaleInterpolant;
                    if (interpolant !== null) {
                        var interpolantValue = interpolant.evaluate(time)[0];
                        timeScale *= interpolantValue;
                        if (time > interpolant.parameterPositions[1]) {
                            this.stopWarping();
                            if (timeScale === 0) {
                                this.paused = true
                            } else {
                                this.timeScale = timeScale
                            }
                        }
                    }
                }
                this._effectiveTimeScale = timeScale;
                return timeScale
            },
            _updateTime: function(deltaTime) {
                var time = this.time + deltaTime;
                var duration = this._clip.duration;
                var loop = this.loop;
                var loopCount = this._loopCount;
                var pingPong = loop === LoopPingPong;
                if (deltaTime === 0) {
                    if (loopCount === -1)
                        return time;
                    return pingPong && (loopCount & 1) === 1 ? duration - time : time
                }
                if (loop === LoopOnce) {
                    if (loopCount === -1) {
                        this._loopCount = 0;
                        this._setEndings(true, true, false)
                    }
                    handle_stop:
                    {
                        if (time >= duration) {
                            time = duration
                        } else if (time < 0) {
                            time = 0
                        } else
                            break handle_stop;
                        if (this.clampWhenFinished)
                            this.paused = true;
                        else
                            this.enabled = false;
                        this._mixer.dispatchEvent({
                            type: "finished",
                            action: this,
                            direction: deltaTime < 0 ? -1 : 1
                        })
                    }
                } else {
                    if (loopCount === -1) {
                        if (deltaTime >= 0) {
                            loopCount = 0;
                            this._setEndings(true, this.repetitions === 0, pingPong)
                        } else {
                            this._setEndings(this.repetitions === 0, true, pingPong)
                        }
                    }
                    if (time >= duration || time < 0) {
                        var loopDelta = Math.floor(time / duration);
                        time -= duration * loopDelta;
                        loopCount += Math.abs(loopDelta);
                        var pending = this.repetitions - loopCount;
                        if (pending <= 0) {
                            if (this.clampWhenFinished)
                                this.paused = true;
                            else
                                this.enabled = false;
                            time = deltaTime > 0 ? duration : 0;
                            this._mixer.dispatchEvent({
                                type: "finished",
                                action: this,
                                direction: deltaTime > 0 ? 1 : -1
                            })
                        } else {
                            if (pending === 1) {
                                var atStart = deltaTime < 0;
                                this._setEndings(atStart, !atStart, pingPong)
                            } else {
                                this._setEndings(false, false, pingPong)
                            }
                            this._loopCount = loopCount;
                            this._mixer.dispatchEvent({
                                type: "loop",
                                action: this,
                                loopDelta: loopDelta
                            })
                        }
                    }
                    if (pingPong && (loopCount & 1) === 1) {
                        this.time = time;
                        return duration - time
                    }
                }
                this.time = time;
                return time
            },
            _setEndings: function(atStart, atEnd, pingPong) {
                var settings = this._interpolantSettings;
                if (pingPong) {
                    settings.endingStart = ZeroSlopeEnding;
                    settings.endingEnd = ZeroSlopeEnding
                } else {
                    if (atStart) {
                        settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding
                    } else {
                        settings.endingStart = WrapAroundEnding
                    }
                    if (atEnd) {
                        settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding
                    } else {
                        settings.endingEnd = WrapAroundEnding
                    }
                }
            },
            _scheduleFading: function(duration, weightNow, weightThen) {
                var mixer = this._mixer,
                    now = mixer.time,
                    interpolant = this._weightInterpolant;
                if (interpolant === null) {
                    interpolant = mixer._lendControlInterpolant();
                    this._weightInterpolant = interpolant
                }
                var times = interpolant.parameterPositions,
                    values = interpolant.sampleValues;
                times[0] = now;
                values[0] = weightNow;
                times[1] = now + duration;
                values[1] = weightThen;
                return this
            }
        });
        function AnimationMixer(root) {
            this._root = root;
            this._initMemoryManager();
            this._accuIndex = 0;
            this.time = 0;
            this.timeScale = 1
        }
        AnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
            constructor: AnimationMixer,
            _bindAction: function(action, prototypeAction) {
                var root = action._localRoot || this._root,
                    tracks = action._clip.tracks,
                    nTracks = tracks.length,
                    bindings = action._propertyBindings,
                    interpolants = action._interpolants,
                    rootUuid = root.uuid,
                    bindingsByRoot = this._bindingsByRootAndName,
                    bindingsByName = bindingsByRoot[rootUuid];
                if (bindingsByName === undefined) {
                    bindingsByName = {};
                    bindingsByRoot[rootUuid] = bindingsByName
                }
                for (var i = 0; i !== nTracks; ++i) {
                    var track = tracks[i],
                        trackName = track.name,
                        binding = bindingsByName[trackName];
                    if (binding !== undefined) {
                        bindings[i] = binding
                    } else {
                        binding = bindings[i];
                        if (binding !== undefined) {
                            if (binding._cacheIndex === null) {
                                ++binding.referenceCount;
                                this._addInactiveBinding(binding, rootUuid, trackName)
                            }
                            continue
                        }
                        var path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
                        binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
                        ++binding.referenceCount;
                        this._addInactiveBinding(binding, rootUuid, trackName);
                        bindings[i] = binding
                    }
                    interpolants[i].resultBuffer = binding.buffer
                }
            },
            _activateAction: function(action) {
                if (!this._isActiveAction(action)) {
                    if (action._cacheIndex === null) {
                        var rootUuid = (action._localRoot || this._root).uuid,
                            clipUuid = action._clip.uuid,
                            actionsForClip = this._actionsByClip[clipUuid];
                        this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
                        this._addInactiveAction(action, clipUuid, rootUuid)
                    }
                    var bindings = action._propertyBindings;
                    for (var i = 0, n = bindings.length; i !== n; ++i) {
                        var binding = bindings[i];
                        if (binding.useCount++ === 0) {
                            this._lendBinding(binding);
                            binding.saveOriginalState()
                        }
                    }
                    this._lendAction(action)
                }
            },
            _deactivateAction: function(action) {
                if (this._isActiveAction(action)) {
                    var bindings = action._propertyBindings;
                    for (var i = 0, n = bindings.length; i !== n; ++i) {
                        var binding = bindings[i];
                        if (--binding.useCount === 0) {
                            binding.restoreOriginalState();
                            this._takeBackBinding(binding)
                        }
                    }
                    this._takeBackAction(action)
                }
            },
            _initMemoryManager: function() {
                this._actions = [];
                this._nActiveActions = 0;
                this._actionsByClip = {};
                this._bindings = [];
                this._nActiveBindings = 0;
                this._bindingsByRootAndName = {};
                this._controlInterpolants = [];
                this._nActiveControlInterpolants = 0;
                var scope = this;
                this.stats = {
                    actions: {
                        get total() {
                            return scope._actions.length
                        },
                        get inUse() {
                            return scope._nActiveActions
                        }
                    },
                    bindings: {
                        get total() {
                            return scope._bindings.length
                        },
                        get inUse() {
                            return scope._nActiveBindings
                        }
                    },
                    controlInterpolants: {
                        get total() {
                            return scope._controlInterpolants.length
                        },
                        get inUse() {
                            return scope._nActiveControlInterpolants
                        }
                    }
                }
            },
            _isActiveAction: function(action) {
                var index = action._cacheIndex;
                return index !== null && index < this._nActiveActions
            },
            _addInactiveAction: function(action, clipUuid, rootUuid) {
                var actions = this._actions,
                    actionsByClip = this._actionsByClip,
                    actionsForClip = actionsByClip[clipUuid];
                if (actionsForClip === undefined) {
                    actionsForClip = {
                        knownActions: [action],
                        actionByRoot: {}
                    };
                    action._byClipCacheIndex = 0;
                    actionsByClip[clipUuid] = actionsForClip
                } else {
                    var knownActions = actionsForClip.knownActions;
                    action._byClipCacheIndex = knownActions.length;
                    knownActions.push(action)
                }
                action._cacheIndex = actions.length;
                actions.push(action);
                actionsForClip.actionByRoot[rootUuid] = action
            },
            _removeInactiveAction: function(action) {
                var actions = this._actions,
                    lastInactiveAction = actions[actions.length - 1],
                    cacheIndex = action._cacheIndex;
                lastInactiveAction._cacheIndex = cacheIndex;
                actions[cacheIndex] = lastInactiveAction;
                actions.pop();
                action._cacheIndex = null;
                var clipUuid = action._clip.uuid,
                    actionsByClip = this._actionsByClip,
                    actionsForClip = actionsByClip[clipUuid],
                    knownActionsForClip = actionsForClip.knownActions,
                    lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],
                    byClipCacheIndex = action._byClipCacheIndex;
                lastKnownAction._byClipCacheIndex = byClipCacheIndex;
                knownActionsForClip[byClipCacheIndex] = lastKnownAction;
                knownActionsForClip.pop();
                action._byClipCacheIndex = null;
                var actionByRoot = actionsForClip.actionByRoot,
                    rootUuid = (action._localRoot || this._root).uuid;
                delete actionByRoot[rootUuid];
                if (knownActionsForClip.length === 0) {
                    delete actionsByClip[clipUuid]
                }
                this._removeInactiveBindingsForAction(action)
            },
            _removeInactiveBindingsForAction: function(action) {
                var bindings = action._propertyBindings;
                for (var i = 0, n = bindings.length; i !== n; ++i) {
                    var binding = bindings[i];
                    if (--binding.referenceCount === 0) {
                        this._removeInactiveBinding(binding)
                    }
                }
            },
            _lendAction: function(action) {
                var actions = this._actions,
                    prevIndex = action._cacheIndex,
                    lastActiveIndex = this._nActiveActions++,
                    firstInactiveAction = actions[lastActiveIndex];
                action._cacheIndex = lastActiveIndex;
                actions[lastActiveIndex] = action;
                firstInactiveAction._cacheIndex = prevIndex;
                actions[prevIndex] = firstInactiveAction
            },
            _takeBackAction: function(action) {
                var actions = this._actions,
                    prevIndex = action._cacheIndex,
                    firstInactiveIndex = --this._nActiveActions,
                    lastActiveAction = actions[firstInactiveIndex];
                action._cacheIndex = firstInactiveIndex;
                actions[firstInactiveIndex] = action;
                lastActiveAction._cacheIndex = prevIndex;
                actions[prevIndex] = lastActiveAction
            },
            _addInactiveBinding: function(binding, rootUuid, trackName) {
                var bindingsByRoot = this._bindingsByRootAndName,
                    bindingByName = bindingsByRoot[rootUuid],
                    bindings = this._bindings;
                if (bindingByName === undefined) {
                    bindingByName = {};
                    bindingsByRoot[rootUuid] = bindingByName
                }
                bindingByName[trackName] = binding;
                binding._cacheIndex = bindings.length;
                bindings.push(binding)
            },
            _removeInactiveBinding: function(binding) {
                var bindings = this._bindings,
                    propBinding = binding.binding,
                    rootUuid = propBinding.rootNode.uuid,
                    trackName = propBinding.path,
                    bindingsByRoot = this._bindingsByRootAndName,
                    bindingByName = bindingsByRoot[rootUuid],
                    lastInactiveBinding = bindings[bindings.length - 1],
                    cacheIndex = binding._cacheIndex;
                lastInactiveBinding._cacheIndex = cacheIndex;
                bindings[cacheIndex] = lastInactiveBinding;
                bindings.pop();
                delete bindingByName[trackName];
                remove_empty_map:
                {
                    for (var _ in bindingByName)
                        break remove_empty_map;
                    delete bindingsByRoot[rootUuid]
                }
            },
            _lendBinding: function(binding) {
                var bindings = this._bindings,
                    prevIndex = binding._cacheIndex,
                    lastActiveIndex = this._nActiveBindings++,
                    firstInactiveBinding = bindings[lastActiveIndex];
                binding._cacheIndex = lastActiveIndex;
                bindings[lastActiveIndex] = binding;
                firstInactiveBinding._cacheIndex = prevIndex;
                bindings[prevIndex] = firstInactiveBinding
            },
            _takeBackBinding: function(binding) {
                var bindings = this._bindings,
                    prevIndex = binding._cacheIndex,
                    firstInactiveIndex = --this._nActiveBindings,
                    lastActiveBinding = bindings[firstInactiveIndex];
                binding._cacheIndex = firstInactiveIndex;
                bindings[firstInactiveIndex] = binding;
                lastActiveBinding._cacheIndex = prevIndex;
                bindings[prevIndex] = lastActiveBinding
            },
            _lendControlInterpolant: function() {
                var interpolants = this._controlInterpolants,
                    lastActiveIndex = this._nActiveControlInterpolants++,
                    interpolant = interpolants[lastActiveIndex];
                if (interpolant === undefined) {
                    interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
                    interpolant.__cacheIndex = lastActiveIndex;
                    interpolants[lastActiveIndex] = interpolant
                }
                return interpolant
            },
            _takeBackControlInterpolant: function(interpolant) {
                var interpolants = this._controlInterpolants,
                    prevIndex = interpolant.__cacheIndex,
                    firstInactiveIndex = --this._nActiveControlInterpolants,
                    lastActiveInterpolant = interpolants[firstInactiveIndex];
                interpolant.__cacheIndex = firstInactiveIndex;
                interpolants[firstInactiveIndex] = interpolant;
                lastActiveInterpolant.__cacheIndex = prevIndex;
                interpolants[prevIndex] = lastActiveInterpolant
            },
            _controlInterpolantsResultBuffer: new Float32Array(1),
            clipAction: function(clip, optionalRoot) {
                var root = optionalRoot || this._root,
                    rootUuid = root.uuid,
                    clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip,
                    clipUuid = clipObject !== null ? clipObject.uuid : clip,
                    actionsForClip = this._actionsByClip[clipUuid],
                    prototypeAction = null;
                if (actionsForClip !== undefined) {
                    var existingAction = actionsForClip.actionByRoot[rootUuid];
                    if (existingAction !== undefined) {
                        return existingAction
                    }
                    prototypeAction = actionsForClip.knownActions[0];
                    if (clipObject === null)
                        clipObject = prototypeAction._clip
                }
                if (clipObject === null)
                    return null;
                var newAction = new AnimationAction(this, clipObject, optionalRoot);
                this._bindAction(newAction, prototypeAction);
                this._addInactiveAction(newAction, clipUuid, rootUuid);
                return newAction
            },
            existingAction: function(clip, optionalRoot) {
                var root = optionalRoot || this._root,
                    rootUuid = root.uuid,
                    clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip,
                    clipUuid = clipObject ? clipObject.uuid : clip,
                    actionsForClip = this._actionsByClip[clipUuid];
                if (actionsForClip !== undefined) {
                    return actionsForClip.actionByRoot[rootUuid] || null
                }
                return null
            },
            stopAllAction: function() {
                var actions = this._actions,
                    nActions = this._nActiveActions,
                    bindings = this._bindings,
                    nBindings = this._nActiveBindings;
                this._nActiveActions = 0;
                this._nActiveBindings = 0;
                for (var i = 0; i !== nActions; ++i) {
                    actions[i].reset()
                }
                for (var i = 0; i !== nBindings; ++i) {
                    bindings[i].useCount = 0
                }
                return this
            },
            update: function(deltaTime) {
                deltaTime *= this.timeScale;
                var actions = this._actions,
                    nActions = this._nActiveActions,
                    time = this.time += deltaTime,
                    timeDirection = Math.sign(deltaTime),
                    accuIndex = this._accuIndex ^= 1;
                for (var i = 0; i !== nActions; ++i) {
                    var action = actions[i];
                    action._update(time, deltaTime, timeDirection, accuIndex)
                }
                var bindings = this._bindings,
                    nBindings = this._nActiveBindings;
                for (var i = 0; i !== nBindings; ++i) {
                    bindings[i].apply(accuIndex)
                }
                return this
            },
            getRoot: function() {
                return this._root
            },
            uncacheClip: function(clip) {
                var actions = this._actions,
                    clipUuid = clip.uuid,
                    actionsByClip = this._actionsByClip,
                    actionsForClip = actionsByClip[clipUuid];
                if (actionsForClip !== undefined) {
                    var actionsToRemove = actionsForClip.knownActions;
                    for (var i = 0, n = actionsToRemove.length; i !== n; ++i) {
                        var action = actionsToRemove[i];
                        this._deactivateAction(action);
                        var cacheIndex = action._cacheIndex,
                            lastInactiveAction = actions[actions.length - 1];
                        action._cacheIndex = null;
                        action._byClipCacheIndex = null;
                        lastInactiveAction._cacheIndex = cacheIndex;
                        actions[cacheIndex] = lastInactiveAction;
                        actions.pop();
                        this._removeInactiveBindingsForAction(action)
                    }
                    delete actionsByClip[clipUuid]
                }
            },
            uncacheRoot: function(root) {
                var rootUuid = root.uuid,
                    actionsByClip = this._actionsByClip;
                for (var clipUuid in actionsByClip) {
                    var actionByRoot = actionsByClip[clipUuid].actionByRoot,
                        action = actionByRoot[rootUuid];
                    if (action !== undefined) {
                        this._deactivateAction(action);
                        this._removeInactiveAction(action)
                    }
                }
                var bindingsByRoot = this._bindingsByRootAndName,
                    bindingByName = bindingsByRoot[rootUuid];
                if (bindingByName !== undefined) {
                    for (var trackName in bindingByName) {
                        var binding = bindingByName[trackName];
                        binding.restoreOriginalState();
                        this._removeInactiveBinding(binding)
                    }
                }
            },
            uncacheAction: function(clip, optionalRoot) {
                var action = this.existingAction(clip, optionalRoot);
                if (action !== null) {
                    this._deactivateAction(action);
                    this._removeInactiveAction(action)
                }
            }
        });
        function Uniform(value) {
            if (typeof value === "string") {
                console.warn("THREE.Uniform: Type parameter is no longer needed.");
                value = arguments[1]
            }
            this.value = value
        }
        Uniform.prototype.clone = function() {
            return new Uniform(this.value.clone === undefined ? this.value : this.value.clone())
        };
        function InstancedBufferGeometry() {
            BufferGeometry.call(this);
            this.type = "InstancedBufferGeometry";
            this.maxInstancedCount = undefined
        }
        InstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {
            constructor: InstancedBufferGeometry,
            isInstancedBufferGeometry: true,
            copy: function(source) {
                BufferGeometry.prototype.copy.call(this, source);
                this.maxInstancedCount = source.maxInstancedCount;
                return this
            },
            clone: function() {
                return (new this.constructor).copy(this)
            }
        });
        function InstancedInterleavedBuffer(array, stride, meshPerAttribute) {
            InterleavedBuffer.call(this, array, stride);
            this.meshPerAttribute = meshPerAttribute || 1
        }
        InstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {
            constructor: InstancedInterleavedBuffer,
            isInstancedInterleavedBuffer: true,
            copy: function(source) {
                InterleavedBuffer.prototype.copy.call(this, source);
                this.meshPerAttribute = source.meshPerAttribute;
                return this
            }
        });
        function InstancedBufferAttribute(array, itemSize, meshPerAttribute) {
            BufferAttribute.call(this, array, itemSize);
            this.meshPerAttribute = meshPerAttribute || 1
        }
        InstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {
            constructor: InstancedBufferAttribute,
            isInstancedBufferAttribute: true,
            copy: function(source) {
                BufferAttribute.prototype.copy.call(this, source);
                this.meshPerAttribute = source.meshPerAttribute;
                return this
            }
        });
        function Raycaster(origin, direction, near, far) {
            this.ray = new Ray(origin, direction);
            this.near = near || 0;
            this.far = far || Infinity;
            this.params = {
                Mesh: {},
                Line: {},
                LOD: {},
                Points: {
                    threshold: 1
                },
                Sprite: {}
            };
            Object.defineProperties(this.params, {
                PointCloud: {
                    get: function() {
                        console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
                        return this.Points
                    }
                }
            })
        }
        function ascSort(a, b) {
            return a.distance - b.distance
        }
        function intersectObject(object, raycaster, intersects, recursive) {
            if (object.visible === false)
                return;
            object.raycast(raycaster, intersects);
            if (recursive === true) {
                var children = object.children;
                for (var i = 0, l = children.length; i < l; i++) {
                    intersectObject(children[i], raycaster, intersects, true)
                }
            }
        }
        Object.assign(Raycaster.prototype, {
            linePrecision: 1,
            set: function(origin, direction) {
                this.ray.set(origin, direction)
            },
            setFromCamera: function(coords, camera) {
                if (camera && camera.isPerspectiveCamera) {
                    this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
                    this.ray.direction.set(coords.x, coords.y, .5).unproject(camera).sub(this.ray.origin).normalize()
                } else if (camera && camera.isOrthographicCamera) {
                    this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);
                    this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld)
                } else {
                    console.error("THREE.Raycaster: Unsupported camera type.")
                }
            },
            intersectObject: function(object, recursive, optionalTarget) {
                var intersects = optionalTarget || [];
                intersectObject(object, this, intersects, recursive);
                intersects.sort(ascSort);
                return intersects
            },
            intersectObjects: function(objects, recursive, optionalTarget) {
                var intersects = optionalTarget || [];
                if (Array.isArray(objects) === false) {
                    console.warn("THREE.Raycaster.intersectObjects: objects is not an Array.");
                    return intersects
                }
                for (var i = 0, l = objects.length; i < l; i++) {
                    intersectObject(objects[i], this, intersects, recursive)
                }
                intersects.sort(ascSort);
                return intersects
            }
        });
        function Clock(autoStart) {
            this.autoStart = autoStart !== undefined ? autoStart : true;
            this.startTime = 0;
            this.oldTime = 0;
            this.elapsedTime = 0;
            this.running = false
        }
        Object.assign(Clock.prototype, {
            start: function() {
                this.startTime = (typeof performance === "undefined" ? Date : performance).now();
                this.oldTime = this.startTime;
                this.elapsedTime = 0;
                this.running = true
            },
            stop: function() {
                this.getElapsedTime();
                this.running = false;
                this.autoStart = false
            },
            getElapsedTime: function() {
                this.getDelta();
                return this.elapsedTime
            },
            getDelta: function() {
                var diff = 0;
                if (this.autoStart && !this.running) {
                    this.start();
                    return 0
                }
                if (this.running) {
                    var newTime = (typeof performance === "undefined" ? Date : performance).now();
                    diff = (newTime - this.oldTime) / 1e3;
                    this.oldTime = newTime;
                    this.elapsedTime += diff
                }
                return diff
            }
        });
        function Spherical(radius, phi, theta) {
            this.radius = radius !== undefined ? radius : 1;
            this.phi = phi !== undefined ? phi : 0;
            this.theta = theta !== undefined ? theta : 0;
            return this
        }
        Object.assign(Spherical.prototype, {
            set: function(radius, phi, theta) {
                this.radius = radius;
                this.phi = phi;
                this.theta = theta;
                return this
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(other) {
                this.radius = other.radius;
                this.phi = other.phi;
                this.theta = other.theta;
                return this
            },
            makeSafe: function() {
                var EPS = 1e-6;
                this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
                return this
            },
            setFromVector3: function(vec3) {
                this.radius = vec3.length();
                if (this.radius === 0) {
                    this.theta = 0;
                    this.phi = 0
                } else {
                    this.theta = Math.atan2(vec3.x, vec3.z);
                    this.phi = Math.acos(_Math.clamp(vec3.y / this.radius, -1, 1))
                }
                return this
            }
        });
        function Cylindrical(radius, theta, y) {
            this.radius = radius !== undefined ? radius : 1;
            this.theta = theta !== undefined ? theta : 0;
            this.y = y !== undefined ? y : 0;
            return this
        }
        Object.assign(Cylindrical.prototype, {
            set: function(radius, theta, y) {
                this.radius = radius;
                this.theta = theta;
                this.y = y;
                return this
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(other) {
                this.radius = other.radius;
                this.theta = other.theta;
                this.y = other.y;
                return this
            },
            setFromVector3: function(vec3) {
                this.radius = Math.sqrt(vec3.x * vec3.x + vec3.z * vec3.z);
                this.theta = Math.atan2(vec3.x, vec3.z);
                this.y = vec3.y;
                return this
            }
        });
        function Box2(min, max) {
            this.min = min !== undefined ? min : new Vector2(+Infinity, +Infinity);
            this.max = max !== undefined ? max : new Vector2(-Infinity, -Infinity)
        }
        Object.assign(Box2.prototype, {
            set: function(min, max) {
                this.min.copy(min);
                this.max.copy(max);
                return this
            },
            setFromPoints: function(points) {
                this.makeEmpty();
                for (var i = 0, il = points.length; i < il; i++) {
                    this.expandByPoint(points[i])
                }
                return this
            },
            setFromCenterAndSize: function() {
                var v1 = new Vector2;
                return function setFromCenterAndSize(center, size) {
                    var halfSize = v1.copy(size).multiplyScalar(.5);
                    this.min.copy(center).sub(halfSize);
                    this.max.copy(center).add(halfSize);
                    return this
                }
            }(),
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(box) {
                this.min.copy(box.min);
                this.max.copy(box.max);
                return this
            },
            makeEmpty: function() {
                this.min.x = this.min.y = +Infinity;
                this.max.x = this.max.y = -Infinity;
                return this
            },
            isEmpty: function() {
                return this.max.x < this.min.x || this.max.y < this.min.y
            },
            getCenter: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Box2: .getCenter() target is now required");
                    target = new Vector2
                }
                return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(.5)
            },
            getSize: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Box2: .getSize() target is now required");
                    target = new Vector2
                }
                return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min)
            },
            expandByPoint: function(point) {
                this.min.min(point);
                this.max.max(point);
                return this
            },
            expandByVector: function(vector) {
                this.min.sub(vector);
                this.max.add(vector);
                return this
            },
            expandByScalar: function(scalar) {
                this.min.addScalar(-scalar);
                this.max.addScalar(scalar);
                return this
            },
            containsPoint: function(point) {
                return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true
            },
            containsBox: function(box) {
                return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y
            },
            getParameter: function(point, target) {
                if (target === undefined) {
                    console.warn("THREE.Box2: .getParameter() target is now required");
                    target = new Vector2
                }
                return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y))
            },
            intersectsBox: function(box) {
                return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true
            },
            clampPoint: function(point, target) {
                if (target === undefined) {
                    console.warn("THREE.Box2: .clampPoint() target is now required");
                    target = new Vector2
                }
                return target.copy(point).clamp(this.min, this.max)
            },
            distanceToPoint: function() {
                var v1 = new Vector2;
                return function distanceToPoint(point) {
                    var clampedPoint = v1.copy(point).clamp(this.min, this.max);
                    return clampedPoint.sub(point).length()
                }
            }(),
            intersect: function(box) {
                this.min.max(box.min);
                this.max.min(box.max);
                return this
            },
            union: function(box) {
                this.min.min(box.min);
                this.max.max(box.max);
                return this
            },
            translate: function(offset) {
                this.min.add(offset);
                this.max.add(offset);
                return this
            },
            equals: function(box) {
                return box.min.equals(this.min) && box.max.equals(this.max)
            }
        });
        function Line3(start, end) {
            this.start = start !== undefined ? start : new Vector3;
            this.end = end !== undefined ? end : new Vector3
        }
        Object.assign(Line3.prototype, {
            set: function(start, end) {
                this.start.copy(start);
                this.end.copy(end);
                return this
            },
            clone: function() {
                return (new this.constructor).copy(this)
            },
            copy: function(line) {
                this.start.copy(line.start);
                this.end.copy(line.end);
                return this
            },
            getCenter: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Line3: .getCenter() target is now required");
                    target = new Vector3
                }
                return target.addVectors(this.start, this.end).multiplyScalar(.5)
            },
            delta: function(target) {
                if (target === undefined) {
                    console.warn("THREE.Line3: .delta() target is now required");
                    target = new Vector3
                }
                return target.subVectors(this.end, this.start)
            },
            distanceSq: function() {
                return this.start.distanceToSquared(this.end)
            },
            distance: function() {
                return this.start.distanceTo(this.end)
            },
            at: function(t, target) {
                if (target === undefined) {
                    console.warn("THREE.Line3: .at() target is now required");
                    target = new Vector3
                }
                return this.delta(target).multiplyScalar(t).add(this.start)
            },
            closestPointToPointParameter: function() {
                var startP = new Vector3;
                var startEnd = new Vector3;
                return function closestPointToPointParameter(point, clampToLine) {
                    startP.subVectors(point, this.start);
                    startEnd.subVectors(this.end, this.start);
                    var startEnd2 = startEnd.dot(startEnd);
                    var startEnd_startP = startEnd.dot(startP);
                    var t = startEnd_startP / startEnd2;
                    if (clampToLine) {
                        t = _Math.clamp(t, 0, 1)
                    }
                    return t
                }
            }(),
            closestPointToPoint: function(point, clampToLine, target) {
                var t = this.closestPointToPointParameter(point, clampToLine);
                if (target === undefined) {
                    console.warn("THREE.Line3: .closestPointToPoint() target is now required");
                    target = new Vector3
                }
                return this.delta(target).multiplyScalar(t).add(this.start)
            },
            applyMatrix4: function(matrix) {
                this.start.applyMatrix4(matrix);
                this.end.applyMatrix4(matrix);
                return this
            },
            equals: function(line) {
                return line.start.equals(this.start) && line.end.equals(this.end)
            }
        });
        function ImmediateRenderObject(material) {
            Object3D.call(this);
            this.material = material;
            this.render = function() {}
        }
        ImmediateRenderObject.prototype = Object.create(Object3D.prototype);
        ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
        ImmediateRenderObject.prototype.isImmediateRenderObject = true;
        function VertexNormalsHelper(object, size, hex, linewidth) {
            this.object = object;
            this.size = size !== undefined ? size : 1;
            var color = hex !== undefined ? hex : 16711680;
            var width = linewidth !== undefined ? linewidth : 1;
            var nNormals = 0;
            var objGeometry = this.object.geometry;
            if (objGeometry && objGeometry.isGeometry) {
                nNormals = objGeometry.faces.length * 3
            } else if (objGeometry && objGeometry.isBufferGeometry) {
                nNormals = objGeometry.attributes.normal.count
            }
            var geometry = new BufferGeometry;
            var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);
            geometry.addAttribute("position", positions);
            LineSegments.call(this, geometry, new LineBasicMaterial({
                color: color,
                linewidth: width
            }));
            this.matrixAutoUpdate = false;
            this.update()
        }
        VertexNormalsHelper.prototype = Object.create(LineSegments.prototype);
        VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;
        VertexNormalsHelper.prototype.update = function() {
            var v1 = new Vector3;
            var v2 = new Vector3;
            var normalMatrix = new Matrix3;
            return function update() {
                var keys = ["a", "b", "c"];
                this.object.updateMatrixWorld(true);
                normalMatrix.getNormalMatrix(this.object.matrixWorld);
                var matrixWorld = this.object.matrixWorld;
                var position = this.geometry.attributes.position;
                var objGeometry = this.object.geometry;
                if (objGeometry && objGeometry.isGeometry) {
                    var vertices = objGeometry.vertices;
                    var faces = objGeometry.faces;
                    var idx = 0;
                    for (var i = 0, l = faces.length; i < l; i++) {
                        var face = faces[i];
                        for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {
                            var vertex = vertices[face[keys[j]]];
                            var normal = face.vertexNormals[j];
                            v1.copy(vertex).applyMatrix4(matrixWorld);
                            v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);
                            position.setXYZ(idx, v1.x, v1.y, v1.z);
                            idx = idx + 1;
                            position.setXYZ(idx, v2.x, v2.y, v2.z);
                            idx = idx + 1
                        }
                    }
                } else if (objGeometry && objGeometry.isBufferGeometry) {
                    var objPos = objGeometry.attributes.position;
                    var objNorm = objGeometry.attributes.normal;
                    var idx = 0;
                    for (var j = 0, jl = objPos.count; j < jl; j++) {
                        v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);
                        v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));
                        v2.applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);
                        position.setXYZ(idx, v1.x, v1.y, v1.z);
                        idx = idx + 1;
                        position.setXYZ(idx, v2.x, v2.y, v2.z);
                        idx = idx + 1
                    }
                }
                position.needsUpdate = true
            }
        }();
        function SpotLightHelper(light, color) {
            Object3D.call(this);
            this.light = light;
            this.light.updateMatrixWorld();
            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;
            this.color = color;
            var geometry = new BufferGeometry;
            var positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
            for (var i = 0, j = 1, l = 32; i < l; i++, j++) {
                var p1 = i / l * Math.PI * 2;
                var p2 = j / l * Math.PI * 2;
                positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1)
            }
            geometry.addAttribute("position", new Float32BufferAttribute(positions, 3));
            var material = new LineBasicMaterial({
                fog: false
            });
            this.cone = new LineSegments(geometry, material);
            this.add(this.cone);
            this.update()
        }
        SpotLightHelper.prototype = Object.create(Object3D.prototype);
        SpotLightHelper.prototype.constructor = SpotLightHelper;
        SpotLightHelper.prototype.dispose = function() {
            this.cone.geometry.dispose();
            this.cone.material.dispose()
        };
        SpotLightHelper.prototype.update = function() {
            var vector = new Vector3;
            var vector2 = new Vector3;
            return function update() {
                this.light.updateMatrixWorld();
                var coneLength = this.light.distance ? this.light.distance : 1e3;
                var coneWidth = coneLength * Math.tan(this.light.angle);
                this.cone.scale.set(coneWidth, coneWidth, coneLength);
                vector.setFromMatrixPosition(this.light.matrixWorld);
                vector2.setFromMatrixPosition(this.light.target.matrixWorld);
                this.cone.lookAt(vector2.sub(vector));
                if (this.color !== undefined) {
                    this.cone.material.color.set(this.color)
                } else {
                    this.cone.material.color.copy(this.light.color)
                }
            }
        }();
        function getBoneList(object) {
            var boneList = [];
            if (object && object.isBone) {
                boneList.push(object)
            }
            for (var i = 0; i < object.children.length; i++) {
                boneList.push.apply(boneList, getBoneList(object.children[i]))
            }
            return boneList
        }
        function SkeletonHelper(object) {
            var bones = getBoneList(object);
            var geometry = new BufferGeometry;
            var vertices = [];
            var colors = [];
            var color1 = new Color(0, 0, 1);
            var color2 = new Color(0, 1, 0);
            for (var i = 0; i < bones.length; i++) {
                var bone = bones[i];
                if (bone.parent && bone.parent.isBone) {
                    vertices.push(0, 0, 0);
                    vertices.push(0, 0, 0);
                    colors.push(color1.r, color1.g, color1.b);
                    colors.push(color2.r, color2.g, color2.b)
                }
            }
            geometry.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute("color", new Float32BufferAttribute(colors, 3));
            var material = new LineBasicMaterial({
                vertexColors: VertexColors,
                depthTest: false,
                depthWrite: false,
                transparent: true
            });
            LineSegments.call(this, geometry, material);
            this.root = object;
            this.bones = bones;
            this.matrix = object.matrixWorld;
            this.matrixAutoUpdate = false
        }
        SkeletonHelper.prototype = Object.create(LineSegments.prototype);
        SkeletonHelper.prototype.constructor = SkeletonHelper;
        SkeletonHelper.prototype.updateMatrixWorld = function() {
            var vector = new Vector3;
            var boneMatrix = new Matrix4;
            var matrixWorldInv = new Matrix4;
            return function updateMatrixWorld(force) {
                var bones = this.bones;
                var geometry = this.geometry;
                var position = geometry.getAttribute("position");
                matrixWorldInv.getInverse(this.root.matrixWorld);
                for (var i = 0, j = 0; i < bones.length; i++) {
                    var bone = bones[i];
                    if (bone.parent && bone.parent.isBone) {
                        boneMatrix.multiplyMatrices(matrixWorldInv, bone.matrixWorld);
                        vector.setFromMatrixPosition(boneMatrix);
                        position.setXYZ(j, vector.x, vector.y, vector.z);
                        boneMatrix.multiplyMatrices(matrixWorldInv, bone.parent.matrixWorld);
                        vector.setFromMatrixPosition(boneMatrix);
                        position.setXYZ(j + 1, vector.x, vector.y, vector.z);
                        j += 2
                    }
                }
                geometry.getAttribute("position").needsUpdate = true;
                Object3D.prototype.updateMatrixWorld.call(this, force)
            }
        }();
        function PointLightHelper(light, sphereSize, color) {
            this.light = light;
            this.light.updateMatrixWorld();
            this.color = color;
            var geometry = new SphereBufferGeometry(sphereSize, 4, 2);
            var material = new MeshBasicMaterial({
                wireframe: true,
                fog: false
            });
            Mesh.call(this, geometry, material);
            this.matrix = this.light.matrixWorld;
            this.matrixAutoUpdate = false;
            this.update()
        }
        PointLightHelper.prototype = Object.create(Mesh.prototype);
        PointLightHelper.prototype.constructor = PointLightHelper;
        PointLightHelper.prototype.dispose = function() {
            this.geometry.dispose();
            this.material.dispose()
        };
        PointLightHelper.prototype.update = function() {
            if (this.color !== undefined) {
                this.material.color.set(this.color)
            } else {
                this.material.color.copy(this.light.color)
            }
        };
        function RectAreaLightHelper(light, color) {
            Object3D.call(this);
            this.light = light;
            this.light.updateMatrixWorld();
            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;
            this.color = color;
            var material = new LineBasicMaterial({
                fog: false
            });
            var geometry = new BufferGeometry;
            geometry.addAttribute("position", new BufferAttribute(new Float32Array(5 * 3), 3));
            this.line = new Line(geometry, material);
            this.add(this.line);
            this.update()
        }
        RectAreaLightHelper.prototype = Object.create(Object3D.prototype);
        RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;
        RectAreaLightHelper.prototype.dispose = function() {
            this.children[0].geometry.dispose();
            this.children[0].material.dispose()
        };
        RectAreaLightHelper.prototype.update = function() {
            var hx = this.light.width * .5;
            var hy = this.light.height * .5;
            var position = this.line.geometry.attributes.position;
            var array = position.array;
            array[0] = hx;
            array[1] = -hy;
            array[2] = 0;
            array[3] = hx;
            array[4] = hy;
            array[5] = 0;
            array[6] = -hx;
            array[7] = hy;
            array[8] = 0;
            array[9] = -hx;
            array[10] = -hy;
            array[11] = 0;
            array[12] = hx;
            array[13] = -hy;
            array[14] = 0;
            position.needsUpdate = true;
            if (this.color !== undefined) {
                this.line.material.color.set(this.color)
            } else {
                this.line.material.color.copy(this.light.color)
            }
        };
        function HemisphereLightHelper(light, size, color) {
            Object3D.call(this);
            this.light = light;
            this.light.updateMatrixWorld();
            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;
            this.color = color;
            var geometry = new OctahedronBufferGeometry(size);
            geometry.rotateY(Math.PI * .5);
            this.material = new MeshBasicMaterial({
                wireframe: true,
                fog: false
            });
            if (this.color === undefined)
                this.material.vertexColors = VertexColors;
            var position = geometry.getAttribute("position");
            var colors = new Float32Array(position.count * 3);
            geometry.addAttribute("color", new BufferAttribute(colors, 3));
            this.add(new Mesh(geometry, this.material));
            this.update()
        }
        HemisphereLightHelper.prototype = Object.create(Object3D.prototype);
        HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;
        HemisphereLightHelper.prototype.dispose = function() {
            this.children[0].geometry.dispose();
            this.children[0].material.dispose()
        };
        HemisphereLightHelper.prototype.update = function() {
            var vector = new Vector3;
            var color1 = new Color;
            var color2 = new Color;
            return function update() {
                var mesh = this.children[0];
                if (this.color !== undefined) {
                    this.material.color.set(this.color)
                } else {
                    var colors = mesh.geometry.getAttribute("color");
                    color1.copy(this.light.color);
                    color2.copy(this.light.groundColor);
                    for (var i = 0, l = colors.count; i < l; i++) {
                        var color = i < l / 2 ? color1 : color2;
                        colors.setXYZ(i, color.r, color.g, color.b)
                    }
                    colors.needsUpdate = true
                }
                mesh.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate())
            }
        }();
        function GridHelper(size, divisions, color1, color2) {
            size = size || 10;
            divisions = divisions || 10;
            color1 = new Color(color1 !== undefined ? color1 : 4473924);
            color2 = new Color(color2 !== undefined ? color2 : 8947848);
            var center = divisions / 2;
            var step = size / divisions;
            var halfSize = size / 2;
            var vertices = [],
                colors = [];
            for (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
                vertices.push(-halfSize, 0, k, halfSize, 0, k);
                vertices.push(k, 0, -halfSize, k, 0, halfSize);
                var color = i === center ? color1 : color2;
                color.toArray(colors, j);
                j += 3;
                color.toArray(colors, j);
                j += 3;
                color.toArray(colors, j);
                j += 3;
                color.toArray(colors, j);
                j += 3
            }
            var geometry = new BufferGeometry;
            geometry.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute("color", new Float32BufferAttribute(colors, 3));
            var material = new LineBasicMaterial({
                vertexColors: VertexColors
            });
            LineSegments.call(this, geometry, material)
        }
        GridHelper.prototype = Object.create(LineSegments.prototype);
        GridHelper.prototype.constructor = GridHelper;
        function PolarGridHelper(radius, radials, circles, divisions, color1, color2) {
            radius = radius || 10;
            radials = radials || 16;
            circles = circles || 8;
            divisions = divisions || 64;
            color1 = new Color(color1 !== undefined ? color1 : 4473924);
            color2 = new Color(color2 !== undefined ? color2 : 8947848);
            var vertices = [];
            var colors = [];
            var x,
                z;
            var v,
                i,
                j,
                r,
                color;
            for (i = 0; i <= radials; i++) {
                v = i / radials * (Math.PI * 2);
                x = Math.sin(v) * radius;
                z = Math.cos(v) * radius;
                vertices.push(0, 0, 0);
                vertices.push(x, 0, z);
                color = i & 1 ? color1 : color2;
                colors.push(color.r, color.g, color.b);
                colors.push(color.r, color.g, color.b)
            }
            for (i = 0; i <= circles; i++) {
                color = i & 1 ? color1 : color2;
                r = radius - radius / circles * i;
                for (j = 0; j < divisions; j++) {
                    v = j / divisions * (Math.PI * 2);
                    x = Math.sin(v) * r;
                    z = Math.cos(v) * r;
                    vertices.push(x, 0, z);
                    colors.push(color.r, color.g, color.b);
                    v = (j + 1) / divisions * (Math.PI * 2);
                    x = Math.sin(v) * r;
                    z = Math.cos(v) * r;
                    vertices.push(x, 0, z);
                    colors.push(color.r, color.g, color.b)
                }
            }
            var geometry = new BufferGeometry;
            geometry.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute("color", new Float32BufferAttribute(colors, 3));
            var material = new LineBasicMaterial({
                vertexColors: VertexColors
            });
            LineSegments.call(this, geometry, material)
        }
        PolarGridHelper.prototype = Object.create(LineSegments.prototype);
        PolarGridHelper.prototype.constructor = PolarGridHelper;
        function FaceNormalsHelper(object, size, hex, linewidth) {
            this.object = object;
            this.size = size !== undefined ? size : 1;
            var color = hex !== undefined ? hex : 16776960;
            var width = linewidth !== undefined ? linewidth : 1;
            var nNormals = 0;
            var objGeometry = this.object.geometry;
            if (objGeometry && objGeometry.isGeometry) {
                nNormals = objGeometry.faces.length
            } else {
                console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.")
            }
            var geometry = new BufferGeometry;
            var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);
            geometry.addAttribute("position", positions);
            LineSegments.call(this, geometry, new LineBasicMaterial({
                color: color,
                linewidth: width
            }));
            this.matrixAutoUpdate = false;
            this.update()
        }
        FaceNormalsHelper.prototype = Object.create(LineSegments.prototype);
        FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;
        FaceNormalsHelper.prototype.update = function() {
            var v1 = new Vector3;
            var v2 = new Vector3;
            var normalMatrix = new Matrix3;
            return function update() {
                this.object.updateMatrixWorld(true);
                normalMatrix.getNormalMatrix(this.object.matrixWorld);
                var matrixWorld = this.object.matrixWorld;
                var position = this.geometry.attributes.position;
                var objGeometry = this.object.geometry;
                var vertices = objGeometry.vertices;
                var faces = objGeometry.faces;
                var idx = 0;
                for (var i = 0, l = faces.length; i < l; i++) {
                    var face = faces[i];
                    var normal = face.normal;
                    v1.copy(vertices[face.a]).add(vertices[face.b]).add(vertices[face.c]).divideScalar(3).applyMatrix4(matrixWorld);
                    v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);
                    position.setXYZ(idx, v1.x, v1.y, v1.z);
                    idx = idx + 1;
                    position.setXYZ(idx, v2.x, v2.y, v2.z);
                    idx = idx + 1
                }
                position.needsUpdate = true
            }
        }();
        function DirectionalLightHelper(light, size, color) {
            Object3D.call(this);
            this.light = light;
            this.light.updateMatrixWorld();
            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;
            this.color = color;
            if (size === undefined)
                size = 1;
            var geometry = new BufferGeometry;
            geometry.addAttribute("position", new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));
            var material = new LineBasicMaterial({
                fog: false
            });
            this.lightPlane = new Line(geometry, material);
            this.add(this.lightPlane);
            geometry = new BufferGeometry;
            geometry.addAttribute("position", new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));
            this.targetLine = new Line(geometry, material);
            this.add(this.targetLine);
            this.update()
        }
        DirectionalLightHelper.prototype = Object.create(Object3D.prototype);
        DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;
        DirectionalLightHelper.prototype.dispose = function() {
            this.lightPlane.geometry.dispose();
            this.lightPlane.material.dispose();
            this.targetLine.geometry.dispose();
            this.targetLine.material.dispose()
        };
        DirectionalLightHelper.prototype.update = function() {
            var v1 = new Vector3;
            var v2 = new Vector3;
            var v3 = new Vector3;
            return function update() {
                v1.setFromMatrixPosition(this.light.matrixWorld);
                v2.setFromMatrixPosition(this.light.target.matrixWorld);
                v3.subVectors(v2, v1);
                this.lightPlane.lookAt(v3);
                if (this.color !== undefined) {
                    this.lightPlane.material.color.set(this.color);
                    this.targetLine.material.color.set(this.color)
                } else {
                    this.lightPlane.material.color.copy(this.light.color);
                    this.targetLine.material.color.copy(this.light.color)
                }
                this.targetLine.lookAt(v3);
                this.targetLine.scale.z = v3.length()
            }
        }();
        function CameraHelper(camera) {
            var geometry = new BufferGeometry;
            var material = new LineBasicMaterial({
                color: 16777215,
                vertexColors: FaceColors
            });
            var vertices = [];
            var colors = [];
            var pointMap = {};
            var colorFrustum = new Color(16755200);
            var colorCone = new Color(16711680);
            var colorUp = new Color(43775);
            var colorTarget = new Color(16777215);
            var colorCross = new Color(3355443);
            addLine("n1", "n2", colorFrustum);
            addLine("n2", "n4", colorFrustum);
            addLine("n4", "n3", colorFrustum);
            addLine("n3", "n1", colorFrustum);
            addLine("f1", "f2", colorFrustum);
            addLine("f2", "f4", colorFrustum);
            addLine("f4", "f3", colorFrustum);
            addLine("f3", "f1", colorFrustum);
            addLine("n1", "f1", colorFrustum);
            addLine("n2", "f2", colorFrustum);
            addLine("n3", "f3", colorFrustum);
            addLine("n4", "f4", colorFrustum);
            addLine("p", "n1", colorCone);
            addLine("p", "n2", colorCone);
            addLine("p", "n3", colorCone);
            addLine("p", "n4", colorCone);
            addLine("u1", "u2", colorUp);
            addLine("u2", "u3", colorUp);
            addLine("u3", "u1", colorUp);
            addLine("c", "t", colorTarget);
            addLine("p", "c", colorCross);
            addLine("cn1", "cn2", colorCross);
            addLine("cn3", "cn4", colorCross);
            addLine("cf1", "cf2", colorCross);
            addLine("cf3", "cf4", colorCross);
            function addLine(a, b, color) {
                addPoint(a, color);
                addPoint(b, color)
            }
            function addPoint(id, color) {
                vertices.push(0, 0, 0);
                colors.push(color.r, color.g, color.b);
                if (pointMap[id] === undefined) {
                    pointMap[id] = []
                }
                pointMap[id].push(vertices.length / 3 - 1)
            }
            geometry.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute("color", new Float32BufferAttribute(colors, 3));
            LineSegments.call(this, geometry, material);
            this.camera = camera;
            if (this.camera.updateProjectionMatrix)
                this.camera.updateProjectionMatrix();
            this.matrix = camera.matrixWorld;
            this.matrixAutoUpdate = false;
            this.pointMap = pointMap;
            this.update()
        }
        CameraHelper.prototype = Object.create(LineSegments.prototype);
        CameraHelper.prototype.constructor = CameraHelper;
        CameraHelper.prototype.update = function() {
            var geometry,
                pointMap;
            var vector = new Vector3;
            var camera = new Camera;
            function setPoint(point, x, y, z) {
                vector.set(x, y, z).unproject(camera);
                var points = pointMap[point];
                if (points !== undefined) {
                    var position = geometry.getAttribute("position");
                    for (var i = 0, l = points.length; i < l; i++) {
                        position.setXYZ(points[i], vector.x, vector.y, vector.z)
                    }
                }
            }
            return function update() {
                geometry = this.geometry;
                pointMap = this.pointMap;
                var w = 1,
                    h = 1;
                camera.projectionMatrix.copy(this.camera.projectionMatrix);
                setPoint("c", 0, 0, -1);
                setPoint("t", 0, 0, 1);
                setPoint("n1", -w, -h, -1);
                setPoint("n2", w, -h, -1);
                setPoint("n3", -w, h, -1);
                setPoint("n4", w, h, -1);
                setPoint("f1", -w, -h, 1);
                setPoint("f2", w, -h, 1);
                setPoint("f3", -w, h, 1);
                setPoint("f4", w, h, 1);
                setPoint("u1", w * .7, h * 1.1, -1);
                setPoint("u2", -w * .7, h * 1.1, -1);
                setPoint("u3", 0, h * 2, -1);
                setPoint("cf1", -w, 0, 1);
                setPoint("cf2", w, 0, 1);
                setPoint("cf3", 0, -h, 1);
                setPoint("cf4", 0, h, 1);
                setPoint("cn1", -w, 0, -1);
                setPoint("cn2", w, 0, -1);
                setPoint("cn3", 0, -h, -1);
                setPoint("cn4", 0, h, -1);
                geometry.getAttribute("position").needsUpdate = true
            }
        }();
        function BoxHelper(object, color) {
            this.object = object;
            if (color === undefined)
                color = 16776960;
            var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
            var positions = new Float32Array(8 * 3);
            var geometry = new BufferGeometry;
            geometry.setIndex(new BufferAttribute(indices, 1));
            geometry.addAttribute("position", new BufferAttribute(positions, 3));
            LineSegments.call(this, geometry, new LineBasicMaterial({
                color: color
            }));
            this.matrixAutoUpdate = false;
            this.update()
        }
        BoxHelper.prototype = Object.create(LineSegments.prototype);
        BoxHelper.prototype.constructor = BoxHelper;
        BoxHelper.prototype.update = function() {
            var box = new Box3;
            return function update(object) {
                if (object !== undefined) {
                    console.warn("THREE.BoxHelper: .update() has no longer arguments.")
                }
                if (this.object !== undefined) {
                    box.setFromObject(this.object)
                }
                if (box.isEmpty())
                    return;
                var min = box.min;
                var max = box.max;
                var position = this.geometry.attributes.position;
                var array = position.array;
                array[0] = max.x;
                array[1] = max.y;
                array[2] = max.z;
                array[3] = min.x;
                array[4] = max.y;
                array[5] = max.z;
                array[6] = min.x;
                array[7] = min.y;
                array[8] = max.z;
                array[9] = max.x;
                array[10] = min.y;
                array[11] = max.z;
                array[12] = max.x;
                array[13] = max.y;
                array[14] = min.z;
                array[15] = min.x;
                array[16] = max.y;
                array[17] = min.z;
                array[18] = min.x;
                array[19] = min.y;
                array[20] = min.z;
                array[21] = max.x;
                array[22] = min.y;
                array[23] = min.z;
                position.needsUpdate = true;
                this.geometry.computeBoundingSphere()
            }
        }();
        BoxHelper.prototype.setFromObject = function(object) {
            this.object = object;
            this.update();
            return this
        };
        function Box3Helper(box, hex) {
            this.type = "Box3Helper";
            this.box = box;
            var color = hex !== undefined ? hex : 16776960;
            var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
            var positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
            var geometry = new BufferGeometry;
            geometry.setIndex(new BufferAttribute(indices, 1));
            geometry.addAttribute("position", new Float32BufferAttribute(positions, 3));
            LineSegments.call(this, geometry, new LineBasicMaterial({
                color: color
            }));
            this.geometry.computeBoundingSphere()
        }
        Box3Helper.prototype = Object.create(LineSegments.prototype);
        Box3Helper.prototype.constructor = Box3Helper;
        Box3Helper.prototype.updateMatrixWorld = function(force) {
            var box = this.box;
            if (box.isEmpty())
                return;
            box.getCenter(this.position);
            box.getSize(this.scale);
            this.scale.multiplyScalar(.5);
            Object3D.prototype.updateMatrixWorld.call(this, force)
        };
        function PlaneHelper(plane, size, hex) {
            this.type = "PlaneHelper";
            this.plane = plane;
            this.size = size === undefined ? 1 : size;
            var color = hex !== undefined ? hex : 16776960;
            var positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];
            var geometry = new BufferGeometry;
            geometry.addAttribute("position", new Float32BufferAttribute(positions, 3));
            geometry.computeBoundingSphere();
            Line.call(this, geometry, new LineBasicMaterial({
                color: color
            }));
            var positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];
            var geometry2 = new BufferGeometry;
            geometry2.addAttribute("position", new Float32BufferAttribute(positions2, 3));
            geometry2.computeBoundingSphere();
            this.add(new Mesh(geometry2, new MeshBasicMaterial({
                color: color,
                opacity: .2,
                transparent: true,
                depthWrite: false
            })))
        }
        PlaneHelper.prototype = Object.create(Line.prototype);
        PlaneHelper.prototype.constructor = PlaneHelper;
        PlaneHelper.prototype.updateMatrixWorld = function(force) {
            var scale = -this.plane.constant;
            if (Math.abs(scale) < 1e-8)
                scale = 1e-8;
            this.scale.set(.5 * this.size, .5 * this.size, scale);
            this.children[0].material.side = scale < 0 ? BackSide : FrontSide;
            this.lookAt(this.plane.normal);
            Object3D.prototype.updateMatrixWorld.call(this, force)
        };
        var lineGeometry,
            coneGeometry;
        function ArrowHelper(dir, origin, length, color, headLength, headWidth) {
            Object3D.call(this);
            if (color === undefined)
                color = 16776960;
            if (length === undefined)
                length = 1;
            if (headLength === undefined)
                headLength = .2 * length;
            if (headWidth === undefined)
                headWidth = .2 * headLength;
            if (lineGeometry === undefined) {
                lineGeometry = new BufferGeometry;
                lineGeometry.addAttribute("position", new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));
                coneGeometry = new CylinderBufferGeometry(0, .5, 1, 5, 1);
                coneGeometry.translate(0, -.5, 0)
            }
            this.position.copy(origin);
            this.line = new Line(lineGeometry, new LineBasicMaterial({
                color: color
            }));
            this.line.matrixAutoUpdate = false;
            this.add(this.line);
            this.cone = new Mesh(coneGeometry, new MeshBasicMaterial({
                color: color
            }));
            this.cone.matrixAutoUpdate = false;
            this.add(this.cone);
            this.setDirection(dir);
            this.setLength(length, headLength, headWidth)
        }
        ArrowHelper.prototype = Object.create(Object3D.prototype);
        ArrowHelper.prototype.constructor = ArrowHelper;
        ArrowHelper.prototype.setDirection = function() {
            var axis = new Vector3;
            var radians;
            return function setDirection(dir) {
                if (dir.y > .99999) {
                    this.quaternion.set(0, 0, 0, 1)
                } else if (dir.y < -.99999) {
                    this.quaternion.set(1, 0, 0, 0)
                } else {
                    axis.set(dir.z, 0, -dir.x).normalize();
                    radians = Math.acos(dir.y);
                    this.quaternion.setFromAxisAngle(axis, radians)
                }
            }
        }();
        ArrowHelper.prototype.setLength = function(length, headLength, headWidth) {
            if (headLength === undefined)
                headLength = .2 * length;
            if (headWidth === undefined)
                headWidth = .2 * headLength;
            this.line.scale.set(1, Math.max(0, length - headLength), 1);
            this.line.updateMatrix();
            this.cone.scale.set(headWidth, headLength, headWidth);
            this.cone.position.y = length;
            this.cone.updateMatrix()
        };
        ArrowHelper.prototype.setColor = function(color) {
            this.line.material.color.copy(color);
            this.cone.material.color.copy(color)
        };
        function AxesHelper(size) {
            size = size || 1;
            var vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];
            var colors = [1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1];
            var geometry = new BufferGeometry;
            geometry.addAttribute("position", new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute("color", new Float32BufferAttribute(colors, 3));
            var material = new LineBasicMaterial({
                vertexColors: VertexColors
            });
            LineSegments.call(this, geometry, material)
        }
        AxesHelper.prototype = Object.create(LineSegments.prototype);
        AxesHelper.prototype.constructor = AxesHelper;
        function Face4(a, b, c, d, normal, color, materialIndex) {
            console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
            return new Face3(a, b, c, normal, color, materialIndex)
        }
        var LineStrip = 0;
        var LinePieces = 1;
        function MeshFaceMaterial(materials) {
            console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
            return materials
        }
        function MultiMaterial(materials) {
            if (materials === undefined)
                materials = [];
            console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
            materials.isMultiMaterial = true;
            materials.materials = materials;
            materials.clone = function() {
                return materials.slice()
            };
            return materials
        }
        function PointCloud(geometry, material) {
            console.warn("THREE.PointCloud has been renamed to THREE.Points.");
            return new Points(geometry, material)
        }
        function Particle(material) {
            console.warn("THREE.Particle has been renamed to THREE.Sprite.");
            return new Sprite(material)
        }
        function ParticleSystem(geometry, material) {
            console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
            return new Points(geometry, material)
        }
        function PointCloudMaterial(parameters) {
            console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
            return new PointsMaterial(parameters)
        }
        function ParticleBasicMaterial(parameters) {
            console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
            return new PointsMaterial(parameters)
        }
        function ParticleSystemMaterial(parameters) {
            console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
            return new PointsMaterial(parameters)
        }
        function Vertex(x, y, z) {
            console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
            return new Vector3(x, y, z)
        }
        function DynamicBufferAttribute(array, itemSize) {
            console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");
            return new BufferAttribute(array, itemSize).setDynamic(true)
        }
        function Int8Attribute(array, itemSize) {
            console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
            return new Int8BufferAttribute(array, itemSize)
        }
        function Uint8Attribute(array, itemSize) {
            console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
            return new Uint8BufferAttribute(array, itemSize)
        }
        function Uint8ClampedAttribute(array, itemSize) {
            console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
            return new Uint8ClampedBufferAttribute(array, itemSize)
        }
        function Int16Attribute(array, itemSize) {
            console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
            return new Int16BufferAttribute(array, itemSize)
        }
        function Uint16Attribute(array, itemSize) {
            console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
            return new Uint16BufferAttribute(array, itemSize)
        }
        function Int32Attribute(array, itemSize) {
            console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
            return new Int32BufferAttribute(array, itemSize)
        }
        function Uint32Attribute(array, itemSize) {
            console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
            return new Uint32BufferAttribute(array, itemSize)
        }
        function Float32Attribute(array, itemSize) {
            console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
            return new Float32BufferAttribute(array, itemSize)
        }
        function Float64Attribute(array, itemSize) {
            console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
            return new Float64BufferAttribute(array, itemSize)
        }
        Curve.create = function(construct, getPoint) {
            console.log("THREE.Curve.create() has been deprecated");
            construct.prototype = Object.create(Curve.prototype);
            construct.prototype.constructor = construct;
            construct.prototype.getPoint = getPoint;
            return construct
        };
        Object.assign(CurvePath.prototype, {
            createPointsGeometry: function(divisions) {
                console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                var pts = this.getPoints(divisions);
                return this.createGeometry(pts)
            },
            createSpacedPointsGeometry: function(divisions) {
                console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                var pts = this.getSpacedPoints(divisions);
                return this.createGeometry(pts)
            },
            createGeometry: function(points) {
                console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                var geometry = new Geometry;
                for (var i = 0, l = points.length; i < l; i++) {
                    var point = points[i];
                    geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0))
                }
                return geometry
            }
        });
        Object.assign(Path.prototype, {
            fromPoints: function(points) {
                console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
                this.setFromPoints(points)
            }
        });
        function ClosedSplineCurve3(points) {
            console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
            CatmullRomCurve3.call(this, points);
            this.type = "catmullrom";
            this.closed = true
        }
        ClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
        function SplineCurve3(points) {
            console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
            CatmullRomCurve3.call(this, points);
            this.type = "catmullrom"
        }
        SplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
        function Spline(points) {
            console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
            CatmullRomCurve3.call(this, points);
            this.type = "catmullrom"
        }
        Spline.prototype = Object.create(CatmullRomCurve3.prototype);
        Object.assign(Spline.prototype, {
            initFromArray: function() {
                console.error("THREE.Spline: .initFromArray() has been removed.")
            },
            getControlPointsArray: function() {
                console.error("THREE.Spline: .getControlPointsArray() has been removed.")
            },
            reparametrizeByArcLength: function() {
                console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")
            }
        });
        function AxisHelper(size) {
            console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
            return new AxesHelper(size)
        }
        function BoundingBoxHelper(object, color) {
            console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
            return new BoxHelper(object, color)
        }
        function EdgesHelper(object, hex) {
            console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
            return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({
                color: hex !== undefined ? hex : 16777215
            }))
        }
        GridHelper.prototype.setColors = function() {
            console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")
        };
        SkeletonHelper.prototype.update = function() {
            console.error("THREE.SkeletonHelper: update() no longer needs to be called.")
        };
        function WireframeHelper(object, hex) {
            console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
            return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({
                color: hex !== undefined ? hex : 16777215
            }))
        }
        Object.assign(Loader.prototype, {
            extractUrlBase: function(url) {
                console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
                return LoaderUtils.extractUrlBase(url)
            }
        });
        function XHRLoader(manager) {
            console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
            return new FileLoader(manager)
        }
        function BinaryTextureLoader(manager) {
            console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
            return new DataTextureLoader(manager)
        }
        Object.assign(Box2.prototype, {
            center: function(optionalTarget) {
                console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
                return this.getCenter(optionalTarget)
            },
            empty: function() {
                console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
                return this.isEmpty()
            },
            isIntersectionBox: function(box) {
                console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
                return this.intersectsBox(box)
            },
            size: function(optionalTarget) {
                console.warn("THREE.Box2: .size() has been renamed to .getSize().");
                return this.getSize(optionalTarget)
            }
        });
        Object.assign(Box3.prototype, {
            center: function(optionalTarget) {
                console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
                return this.getCenter(optionalTarget)
            },
            empty: function() {
                console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
                return this.isEmpty()
            },
            isIntersectionBox: function(box) {
                console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
                return this.intersectsBox(box)
            },
            isIntersectionSphere: function(sphere) {
                console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
                return this.intersectsSphere(sphere)
            },
            size: function(optionalTarget) {
                console.warn("THREE.Box3: .size() has been renamed to .getSize().");
                return this.getSize(optionalTarget)
            }
        });
        Line3.prototype.center = function(optionalTarget) {
            console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
            return this.getCenter(optionalTarget)
        };
        Object.assign(_Math, {
            random16: function() {
                console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
                return Math.random()
            },
            nearestPowerOfTwo: function(value) {
                console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
                return _Math.floorPowerOfTwo(value)
            },
            nextPowerOfTwo: function(value) {
                console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
                return _Math.ceilPowerOfTwo(value)
            }
        });
        Object.assign(Matrix3.prototype, {
            flattenToArrayOffset: function(array, offset) {
                console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
                return this.toArray(array, offset)
            },
            multiplyVector3: function(vector) {
                console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
                return vector.applyMatrix3(this)
            },
            multiplyVector3Array: function() {
                console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")
            },
            applyToBuffer: function(buffer) {
                console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
                return this.applyToBufferAttribute(buffer)
            },
            applyToVector3Array: function() {
                console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")
            }
        });
        Object.assign(Matrix4.prototype, {
            extractPosition: function(m) {
                console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
                return this.copyPosition(m)
            },
            flattenToArrayOffset: function(array, offset) {
                console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
                return this.toArray(array, offset)
            },
            getPosition: function() {
                var v1;
                return function getPosition() {
                    if (v1 === undefined)
                        v1 = new Vector3;
                    console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
                    return v1.setFromMatrixColumn(this, 3)
                }
            }(),
            setRotationFromQuaternion: function(q) {
                console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
                return this.makeRotationFromQuaternion(q)
            },
            multiplyToArray: function() {
                console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")
            },
            multiplyVector3: function(vector) {
                console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
                return vector.applyMatrix4(this)
            },
            multiplyVector4: function(vector) {
                console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
                return vector.applyMatrix4(this)
            },
            multiplyVector3Array: function() {
                console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")
            },
            rotateAxis: function(v) {
                console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
                v.transformDirection(this)
            },
            crossVector: function(vector) {
                console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
                return vector.applyMatrix4(this)
            },
            translate: function() {
                console.error("THREE.Matrix4: .translate() has been removed.")
            },
            rotateX: function() {
                console.error("THREE.Matrix4: .rotateX() has been removed.")
            },
            rotateY: function() {
                console.error("THREE.Matrix4: .rotateY() has been removed.")
            },
            rotateZ: function() {
                console.error("THREE.Matrix4: .rotateZ() has been removed.")
            },
            rotateByAxis: function() {
                console.error("THREE.Matrix4: .rotateByAxis() has been removed.")
            },
            applyToBuffer: function(buffer) {
                console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
                return this.applyToBufferAttribute(buffer)
            },
            applyToVector3Array: function() {
                console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")
            },
            makeFrustum: function(left, right, bottom, top, near, far) {
                console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
                return this.makePerspective(left, right, top, bottom, near, far)
            }
        });
        Plane.prototype.isIntersectionLine = function(line) {
            console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
            return this.intersectsLine(line)
        };
        Quaternion.prototype.multiplyVector3 = function(vector) {
            console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
            return vector.applyQuaternion(this)
        };
        Object.assign(Ray.prototype, {
            isIntersectionBox: function(box) {
                console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
                return this.intersectsBox(box)
            },
            isIntersectionPlane: function(plane) {
                console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
                return this.intersectsPlane(plane)
            },
            isIntersectionSphere: function(sphere) {
                console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
                return this.intersectsSphere(sphere)
            }
        });
        Object.assign(Triangle.prototype, {
            area: function() {
                console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
                return this.getArea()
            },
            barycoordFromPoint: function(point, target) {
                console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
                return this.getBarycoord(point, target)
            },
            midpoint: function(target) {
                console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
                return this.getMidpoint(target)
            },
            normal: function(target) {
                console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
                return this.getNormal(target)
            },
            plane: function(target) {
                console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
                return this.getPlane(target)
            }
        });
        Object.assign(Triangle, {
            barycoordFromPoint: function(point, a, b, c, target) {
                console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
                return Triangle.getBarycoord(point, a, b, c, target)
            },
            normal: function(a, b, c, target) {
                console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
                return Triangle.getNormal(a, b, c, target)
            }
        });
        Object.assign(Shape.prototype, {
            extractAllPoints: function(divisions) {
                console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
                return this.extractPoints(divisions)
            },
            extrude: function(options) {
                console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
                return new ExtrudeGeometry(this, options)
            },
            makeGeometry: function(options) {
                console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
                return new ShapeGeometry(this, options)
            }
        });
        Object.assign(Vector2.prototype, {
            fromAttribute: function(attribute, index, offset) {
                console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
                return this.fromBufferAttribute(attribute, index, offset)
            },
            distanceToManhattan: function(v) {
                console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
                return this.manhattanDistanceTo(v)
            },
            lengthManhattan: function() {
                console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
                return this.manhattanLength()
            }
        });
        Object.assign(Vector3.prototype, {
            setEulerFromRotationMatrix: function() {
                console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")
            },
            setEulerFromQuaternion: function() {
                console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")
            },
            getPositionFromMatrix: function(m) {
                console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
                return this.setFromMatrixPosition(m)
            },
            getScaleFromMatrix: function(m) {
                console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
                return this.setFromMatrixScale(m)
            },
            getColumnFromMatrix: function(index, matrix) {
                console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
                return this.setFromMatrixColumn(matrix, index)
            },
            applyProjection: function(m) {
                console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
                return this.applyMatrix4(m)
            },
            fromAttribute: function(attribute, index, offset) {
                console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
                return this.fromBufferAttribute(attribute, index, offset)
            },
            distanceToManhattan: function(v) {
                console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
                return this.manhattanDistanceTo(v)
            },
            lengthManhattan: function() {
                console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
                return this.manhattanLength()
            }
        });
        Object.assign(Vector4.prototype, {
            fromAttribute: function(attribute, index, offset) {
                console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
                return this.fromBufferAttribute(attribute, index, offset)
            },
            lengthManhattan: function() {
                console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
                return this.manhattanLength()
            }
        });
        Object.assign(Geometry.prototype, {
            computeTangents: function() {
                console.error("THREE.Geometry: .computeTangents() has been removed.")
            },
            computeLineDistances: function() {
                console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")
            }
        });
        Object.assign(Object3D.prototype, {
            getChildByName: function(name) {
                console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
                return this.getObjectByName(name)
            },
            renderDepth: function() {
                console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")
            },
            translate: function(distance, axis) {
                console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
                return this.translateOnAxis(axis, distance)
            },
            getWorldRotation: function() {
                console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")
            }
        });
        Object.defineProperties(Object3D.prototype, {
            eulerOrder: {
                get: function() {
                    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
                    return this.rotation.order
                },
                set: function(value) {
                    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
                    this.rotation.order = value
                }
            },
            useQuaternion: {
                get: function() {
                    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
                },
                set: function() {
                    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
                }
            }
        });
        Object.defineProperties(LOD.prototype, {
            objects: {
                get: function() {
                    console.warn("THREE.LOD: .objects has been renamed to .levels.");
                    return this.levels
                }
            }
        });
        Object.defineProperty(Skeleton.prototype, "useVertexTexture", {
            get: function() {
                console.warn("THREE.Skeleton: useVertexTexture has been removed.")
            },
            set: function() {
                console.warn("THREE.Skeleton: useVertexTexture has been removed.")
            }
        });
        Object.defineProperty(Curve.prototype, "__arcLengthDivisions", {
            get: function() {
                console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
                return this.arcLengthDivisions
            },
            set: function(value) {
                console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
                this.arcLengthDivisions = value
            }
        });
        PerspectiveCamera.prototype.setLens = function(focalLength, filmGauge) {
            console.warn("THREE.PerspectiveCamera.setLens is deprecated. " + "Use .setFocalLength and .filmGauge for a photographic setup.");
            if (filmGauge !== undefined)
                this.filmGauge = filmGauge;
            this.setFocalLength(focalLength)
        };
        Object.defineProperties(Light.prototype, {
            onlyShadow: {
                set: function() {
                    console.warn("THREE.Light: .onlyShadow has been removed.")
                }
            },
            shadowCameraFov: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
                    this.shadow.camera.fov = value
                }
            },
            shadowCameraLeft: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
                    this.shadow.camera.left = value
                }
            },
            shadowCameraRight: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
                    this.shadow.camera.right = value
                }
            },
            shadowCameraTop: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
                    this.shadow.camera.top = value
                }
            },
            shadowCameraBottom: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
                    this.shadow.camera.bottom = value
                }
            },
            shadowCameraNear: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
                    this.shadow.camera.near = value
                }
            },
            shadowCameraFar: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
                    this.shadow.camera.far = value
                }
            },
            shadowCameraVisible: {
                set: function() {
                    console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")
                }
            },
            shadowBias: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
                    this.shadow.bias = value
                }
            },
            shadowDarkness: {
                set: function() {
                    console.warn("THREE.Light: .shadowDarkness has been removed.")
                }
            },
            shadowMapWidth: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
                    this.shadow.mapSize.width = value
                }
            },
            shadowMapHeight: {
                set: function(value) {
                    console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
                    this.shadow.mapSize.height = value
                }
            }
        });
        Object.defineProperties(BufferAttribute.prototype, {
            length: {
                get: function() {
                    console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
                    return this.array.length
                }
            },
            copyIndicesArray: function() {
                console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")
            }
        });
        Object.assign(BufferGeometry.prototype, {
            addIndex: function(index) {
                console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
                this.setIndex(index)
            },
            addDrawCall: function(start, count, indexOffset) {
                if (indexOffset !== undefined) {
                    console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.")
                }
                console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
                this.addGroup(start, count)
            },
            clearDrawCalls: function() {
                console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
                this.clearGroups()
            },
            computeTangents: function() {
                console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")
            },
            computeOffsets: function() {
                console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")
            }
        });
        Object.defineProperties(BufferGeometry.prototype, {
            drawcalls: {
                get: function() {
                    console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
                    return this.groups
                }
            },
            offsets: {
                get: function() {
                    console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
                    return this.groups
                }
            }
        });
        Object.assign(ExtrudeBufferGeometry.prototype, {
            getArrays: function() {
                console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")
            },
            addShapeList: function() {
                console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")
            },
            addShape: function() {
                console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")
            }
        });
        Object.defineProperties(Uniform.prototype, {
            dynamic: {
                set: function() {
                    console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")
                }
            },
            onUpdate: {
                value: function() {
                    console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
                    return this
                }
            }
        });
        Object.defineProperties(Material.prototype, {
            wrapAround: {
                get: function() {
                    console.warn("THREE.Material: .wrapAround has been removed.")
                },
                set: function() {
                    console.warn("THREE.Material: .wrapAround has been removed.")
                }
            },
            wrapRGB: {
                get: function() {
                    console.warn("THREE.Material: .wrapRGB has been removed.");
                    return new Color
                }
            },
            shading: {
                get: function() {
                    console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.")
                },
                set: function(value) {
                    console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
                    this.flatShading = value === FlatShading
                }
            }
        });
        Object.defineProperties(MeshPhongMaterial.prototype, {
            metal: {
                get: function() {
                    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
                    return false
                },
                set: function() {
                    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")
                }
            }
        });
        Object.defineProperties(ShaderMaterial.prototype, {
            derivatives: {
                get: function() {
                    console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
                    return this.extensions.derivatives
                },
                set: function(value) {
                    console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
                    this.extensions.derivatives = value
                }
            }
        });
        Object.assign(WebGLRenderer.prototype, {
            animate: function(callback) {
                console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
                this.setAnimationLoop(callback)
            },
            getCurrentRenderTarget: function() {
                console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
                return this.getRenderTarget()
            },
            getMaxAnisotropy: function() {
                console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
                return this.capabilities.getMaxAnisotropy()
            },
            getPrecision: function() {
                console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
                return this.capabilities.precision
            },
            resetGLState: function() {
                console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
                return this.state.reset()
            },
            supportsFloatTextures: function() {
                console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
                return this.extensions.get("OES_texture_float")
            },
            supportsHalfFloatTextures: function() {
                console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
                return this.extensions.get("OES_texture_half_float")
            },
            supportsStandardDerivatives: function() {
                console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
                return this.extensions.get("OES_standard_derivatives")
            },
            supportsCompressedTextureS3TC: function() {
                console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
                return this.extensions.get("WEBGL_compressed_texture_s3tc")
            },
            supportsCompressedTexturePVRTC: function() {
                console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
                return this.extensions.get("WEBGL_compressed_texture_pvrtc")
            },
            supportsBlendMinMax: function() {
                console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
                return this.extensions.get("EXT_blend_minmax")
            },
            supportsVertexTextures: function() {
                console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
                return this.capabilities.vertexTextures
            },
            supportsInstancedArrays: function() {
                console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
                return this.extensions.get("ANGLE_instanced_arrays")
            },
            enableScissorTest: function(boolean) {
                console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
                this.setScissorTest(boolean)
            },
            initMaterial: function() {
                console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")
            },
            addPrePlugin: function() {
                console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")
            },
            addPostPlugin: function() {
                console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")
            },
            updateShadowMap: function() {
                console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")
            },
            setFaceCulling: function() {
                console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")
            }
        });
        Object.defineProperties(WebGLRenderer.prototype, {
            shadowMapEnabled: {
                get: function() {
                    return this.shadowMap.enabled
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
                    this.shadowMap.enabled = value
                }
            },
            shadowMapType: {
                get: function() {
                    return this.shadowMap.type
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
                    this.shadowMap.type = value
                }
            },
            shadowMapCullFace: {
                get: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
                    return undefined
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")
                }
            }
        });
        Object.defineProperties(WebGLShadowMap.prototype, {
            cullFace: {
                get: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
                    return undefined
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")
                }
            },
            renderReverseSided: {
                get: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
                    return undefined
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")
                }
            },
            renderSingleSided: {
                get: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
                    return undefined
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")
                }
            }
        });
        Object.defineProperties(WebGLRenderTarget.prototype, {
            wrapS: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
                    return this.texture.wrapS
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
                    this.texture.wrapS = value
                }
            },
            wrapT: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
                    return this.texture.wrapT
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
                    this.texture.wrapT = value
                }
            },
            magFilter: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
                    return this.texture.magFilter
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
                    this.texture.magFilter = value
                }
            },
            minFilter: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
                    return this.texture.minFilter
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
                    this.texture.minFilter = value
                }
            },
            anisotropy: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
                    return this.texture.anisotropy
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
                    this.texture.anisotropy = value
                }
            },
            offset: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
                    return this.texture.offset
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
                    this.texture.offset = value
                }
            },
            repeat: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
                    return this.texture.repeat
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
                    this.texture.repeat = value
                }
            },
            format: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
                    return this.texture.format
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
                    this.texture.format = value
                }
            },
            type: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
                    return this.texture.type
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
                    this.texture.type = value
                }
            },
            generateMipmaps: {
                get: function() {
                    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
                    return this.texture.generateMipmaps
                },
                set: function(value) {
                    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
                    this.texture.generateMipmaps = value
                }
            }
        });
        Object.defineProperties(WebVRManager.prototype, {
            standing: {
                set: function() {
                    console.warn("THREE.WebVRManager: .standing has been removed.")
                }
            }
        });
        Audio.prototype.load = function(file) {
            console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
            var scope = this;
            var audioLoader = new AudioLoader;
            audioLoader.load(file, function(buffer) {
                scope.setBuffer(buffer)
            });
            return this
        };
        AudioAnalyser.prototype.getData = function() {
            console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
            return this.getFrequencyData()
        };
        CubeCamera.prototype.updateCubeMap = function(renderer, scene) {
            console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
            return this.update(renderer, scene)
        };
        var GeometryUtils = {
            merge: function(geometry1, geometry2, materialIndexOffset) {
                console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
                var matrix;
                if (geometry2.isMesh) {
                    geometry2.matrixAutoUpdate && geometry2.updateMatrix();
                    matrix = geometry2.matrix;
                    geometry2 = geometry2.geometry
                }
                geometry1.merge(geometry2, matrix, materialIndexOffset)
            },
            center: function(geometry) {
                console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
                return geometry.center()
            }
        };
        ImageUtils.crossOrigin = undefined;
        ImageUtils.loadTexture = function(url, mapping, onLoad, onError) {
            console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
            var loader = new TextureLoader;
            loader.setCrossOrigin(this.crossOrigin);
            var texture = loader.load(url, onLoad, undefined, onError);
            if (mapping)
                texture.mapping = mapping;
            return texture
        };
        ImageUtils.loadTextureCube = function(urls, mapping, onLoad, onError) {
            console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
            var loader = new CubeTextureLoader;
            loader.setCrossOrigin(this.crossOrigin);
            var texture = loader.load(urls, onLoad, undefined, onError);
            if (mapping)
                texture.mapping = mapping;
            return texture
        };
        ImageUtils.loadCompressedTexture = function() {
            console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")
        };
        ImageUtils.loadCompressedTextureCube = function() {
            console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")
        };
        function Projector() {
            console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");
            this.projectVector = function(vector, camera) {
                console.warn("THREE.Projector: .projectVector() is now vector.project().");
                vector.project(camera)
            };
            this.unprojectVector = function(vector, camera) {
                console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");
                vector.unproject(camera)
            };
            this.pickingRay = function() {
                console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")
            }
        }
        function CanvasRenderer() {
            console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");
            this.domElement = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
            this.clear = function() {};
            this.render = function() {};
            this.setClearColor = function() {};
            this.setSize = function() {}
        }
        var SceneUtils = {
            createMultiMaterialObject: function() {
                console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")
            },
            detach: function() {
                console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")
            },
            attach: function() {
                console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")
            }
        };
        function LensFlare() {
            console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")
        }
        exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
        exports.WebGLRenderTarget = WebGLRenderTarget;
        exports.WebGLRenderer = WebGLRenderer;
        exports.ShaderLib = ShaderLib;
        exports.UniformsLib = UniformsLib;
        exports.UniformsUtils = UniformsUtils;
        exports.ShaderChunk = ShaderChunk;
        exports.FogExp2 = FogExp2;
        exports.Fog = Fog;
        exports.Scene = Scene;
        exports.Sprite = Sprite;
        exports.LOD = LOD;
        exports.SkinnedMesh = SkinnedMesh;
        exports.Skeleton = Skeleton;
        exports.Bone = Bone;
        exports.Mesh = Mesh;
        exports.LineSegments = LineSegments;
        exports.LineLoop = LineLoop;
        exports.Line = Line;
        exports.Points = Points;
        exports.Group = Group;
        exports.VideoTexture = VideoTexture;
        exports.DataTexture = DataTexture;
        exports.CompressedTexture = CompressedTexture;
        exports.CubeTexture = CubeTexture;
        exports.CanvasTexture = CanvasTexture;
        exports.DepthTexture = DepthTexture;
        exports.Texture = Texture;
        exports.CompressedTextureLoader = CompressedTextureLoader;
        exports.DataTextureLoader = DataTextureLoader;
        exports.CubeTextureLoader = CubeTextureLoader;
        exports.TextureLoader = TextureLoader;
        exports.ObjectLoader = ObjectLoader;
        exports.MaterialLoader = MaterialLoader;
        exports.BufferGeometryLoader = BufferGeometryLoader;
        exports.DefaultLoadingManager = DefaultLoadingManager;
        exports.LoadingManager = LoadingManager;
        exports.JSONLoader = JSONLoader;
        exports.ImageLoader = ImageLoader;
        exports.ImageBitmapLoader = ImageBitmapLoader;
        exports.FontLoader = FontLoader;
        exports.FileLoader = FileLoader;
        exports.Loader = Loader;
        exports.LoaderUtils = LoaderUtils;
        exports.Cache = Cache;
        exports.AudioLoader = AudioLoader;
        exports.SpotLightShadow = SpotLightShadow;
        exports.SpotLight = SpotLight;
        exports.PointLight = PointLight;
        exports.RectAreaLight = RectAreaLight;
        exports.HemisphereLight = HemisphereLight;
        exports.DirectionalLightShadow = DirectionalLightShadow;
        exports.DirectionalLight = DirectionalLight;
        exports.AmbientLight = AmbientLight;
        exports.LightShadow = LightShadow;
        exports.Light = Light;
        exports.StereoCamera = StereoCamera;
        exports.PerspectiveCamera = PerspectiveCamera;
        exports.OrthographicCamera = OrthographicCamera;
        exports.CubeCamera = CubeCamera;
        exports.ArrayCamera = ArrayCamera;
        exports.Camera = Camera;
        exports.AudioListener = AudioListener;
        exports.PositionalAudio = PositionalAudio;
        exports.AudioContext = AudioContext;
        exports.AudioAnalyser = AudioAnalyser;
        exports.Audio = Audio;
        exports.VectorKeyframeTrack = VectorKeyframeTrack;
        exports.StringKeyframeTrack = StringKeyframeTrack;
        exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
        exports.NumberKeyframeTrack = NumberKeyframeTrack;
        exports.ColorKeyframeTrack = ColorKeyframeTrack;
        exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
        exports.PropertyMixer = PropertyMixer;
        exports.PropertyBinding = PropertyBinding;
        exports.KeyframeTrack = KeyframeTrack;
        exports.AnimationUtils = AnimationUtils;
        exports.AnimationObjectGroup = AnimationObjectGroup;
        exports.AnimationMixer = AnimationMixer;
        exports.AnimationClip = AnimationClip;
        exports.Uniform = Uniform;
        exports.InstancedBufferGeometry = InstancedBufferGeometry;
        exports.BufferGeometry = BufferGeometry;
        exports.Geometry = Geometry;
        exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
        exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
        exports.InterleavedBuffer = InterleavedBuffer;
        exports.InstancedBufferAttribute = InstancedBufferAttribute;
        exports.Face3 = Face3;
        exports.Object3D = Object3D;
        exports.Raycaster = Raycaster;
        exports.Layers = Layers;
        exports.EventDispatcher = EventDispatcher;
        exports.Clock = Clock;
        exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
        exports.LinearInterpolant = LinearInterpolant;
        exports.DiscreteInterpolant = DiscreteInterpolant;
        exports.CubicInterpolant = CubicInterpolant;
        exports.Interpolant = Interpolant;
        exports.Triangle = Triangle;
        exports.Math = _Math;
        exports.Spherical = Spherical;
        exports.Cylindrical = Cylindrical;
        exports.Plane = Plane;
        exports.Frustum = Frustum;
        exports.Sphere = Sphere;
        exports.Ray = Ray;
        exports.Matrix4 = Matrix4;
        exports.Matrix3 = Matrix3;
        exports.Box3 = Box3;
        exports.Box2 = Box2;
        exports.Line3 = Line3;
        exports.Euler = Euler;
        exports.Vector4 = Vector4;
        exports.Vector3 = Vector3;
        exports.Vector2 = Vector2;
        exports.Quaternion = Quaternion;
        exports.Color = Color;
        exports.ImmediateRenderObject = ImmediateRenderObject;
        exports.VertexNormalsHelper = VertexNormalsHelper;
        exports.SpotLightHelper = SpotLightHelper;
        exports.SkeletonHelper = SkeletonHelper;
        exports.PointLightHelper = PointLightHelper;
        exports.RectAreaLightHelper = RectAreaLightHelper;
        exports.HemisphereLightHelper = HemisphereLightHelper;
        exports.GridHelper = GridHelper;
        exports.PolarGridHelper = PolarGridHelper;
        exports.FaceNormalsHelper = FaceNormalsHelper;
        exports.DirectionalLightHelper = DirectionalLightHelper;
        exports.CameraHelper = CameraHelper;
        exports.BoxHelper = BoxHelper;
        exports.Box3Helper = Box3Helper;
        exports.PlaneHelper = PlaneHelper;
        exports.ArrowHelper = ArrowHelper;
        exports.AxesHelper = AxesHelper;
        exports.Shape = Shape;
        exports.Path = Path;
        exports.ShapePath = ShapePath;
        exports.Font = Font;
        exports.CurvePath = CurvePath;
        exports.Curve = Curve;
        exports.ImageUtils = ImageUtils;
        exports.ShapeUtils = ShapeUtils;
        exports.WebGLUtils = WebGLUtils;
        exports.WireframeGeometry = WireframeGeometry;
        exports.ParametricGeometry = ParametricGeometry;
        exports.ParametricBufferGeometry = ParametricBufferGeometry;
        exports.TetrahedronGeometry = TetrahedronGeometry;
        exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
        exports.OctahedronGeometry = OctahedronGeometry;
        exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
        exports.IcosahedronGeometry = IcosahedronGeometry;
        exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
        exports.DodecahedronGeometry = DodecahedronGeometry;
        exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
        exports.PolyhedronGeometry = PolyhedronGeometry;
        exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
        exports.TubeGeometry = TubeGeometry;
        exports.TubeBufferGeometry = TubeBufferGeometry;
        exports.TorusKnotGeometry = TorusKnotGeometry;
        exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
        exports.TorusGeometry = TorusGeometry;
        exports.TorusBufferGeometry = TorusBufferGeometry;
        exports.TextGeometry = TextGeometry;
        exports.TextBufferGeometry = TextBufferGeometry;
        exports.SphereGeometry = SphereGeometry;
        exports.SphereBufferGeometry = SphereBufferGeometry;
        exports.RingGeometry = RingGeometry;
        exports.RingBufferGeometry = RingBufferGeometry;
        exports.PlaneGeometry = PlaneGeometry;
        exports.PlaneBufferGeometry = PlaneBufferGeometry;
        exports.LatheGeometry = LatheGeometry;
        exports.LatheBufferGeometry = LatheBufferGeometry;
        exports.ShapeGeometry = ShapeGeometry;
        exports.ShapeBufferGeometry = ShapeBufferGeometry;
        exports.ExtrudeGeometry = ExtrudeGeometry;
        exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
        exports.EdgesGeometry = EdgesGeometry;
        exports.ConeGeometry = ConeGeometry;
        exports.ConeBufferGeometry = ConeBufferGeometry;
        exports.CylinderGeometry = CylinderGeometry;
        exports.CylinderBufferGeometry = CylinderBufferGeometry;
        exports.CircleGeometry = CircleGeometry;
        exports.CircleBufferGeometry = CircleBufferGeometry;
        exports.BoxGeometry = BoxGeometry;
        exports.BoxBufferGeometry = BoxBufferGeometry;
        exports.ShadowMaterial = ShadowMaterial;
        exports.SpriteMaterial = SpriteMaterial;
        exports.RawShaderMaterial = RawShaderMaterial;
        exports.ShaderMaterial = ShaderMaterial;
        exports.PointsMaterial = PointsMaterial;
        exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
        exports.MeshStandardMaterial = MeshStandardMaterial;
        exports.MeshPhongMaterial = MeshPhongMaterial;
        exports.MeshToonMaterial = MeshToonMaterial;
        exports.MeshNormalMaterial = MeshNormalMaterial;
        exports.MeshLambertMaterial = MeshLambertMaterial;
        exports.MeshDepthMaterial = MeshDepthMaterial;
        exports.MeshDistanceMaterial = MeshDistanceMaterial;
        exports.MeshBasicMaterial = MeshBasicMaterial;
        exports.LineDashedMaterial = LineDashedMaterial;
        exports.LineBasicMaterial = LineBasicMaterial;
        exports.Material = Material;
        exports.Float64BufferAttribute = Float64BufferAttribute;
        exports.Float32BufferAttribute = Float32BufferAttribute;
        exports.Uint32BufferAttribute = Uint32BufferAttribute;
        exports.Int32BufferAttribute = Int32BufferAttribute;
        exports.Uint16BufferAttribute = Uint16BufferAttribute;
        exports.Int16BufferAttribute = Int16BufferAttribute;
        exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
        exports.Uint8BufferAttribute = Uint8BufferAttribute;
        exports.Int8BufferAttribute = Int8BufferAttribute;
        exports.BufferAttribute = BufferAttribute;
        exports.ArcCurve = ArcCurve;
        exports.CatmullRomCurve3 = CatmullRomCurve3;
        exports.CubicBezierCurve = CubicBezierCurve;
        exports.CubicBezierCurve3 = CubicBezierCurve3;
        exports.EllipseCurve = EllipseCurve;
        exports.LineCurve = LineCurve;
        exports.LineCurve3 = LineCurve3;
        exports.QuadraticBezierCurve = QuadraticBezierCurve;
        exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
        exports.SplineCurve = SplineCurve;
        exports.REVISION = REVISION;
        exports.MOUSE = MOUSE;
        exports.CullFaceNone = CullFaceNone;
        exports.CullFaceBack = CullFaceBack;
        exports.CullFaceFront = CullFaceFront;
        exports.CullFaceFrontBack = CullFaceFrontBack;
        exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
        exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
        exports.BasicShadowMap = BasicShadowMap;
        exports.PCFShadowMap = PCFShadowMap;
        exports.PCFSoftShadowMap = PCFSoftShadowMap;
        exports.FrontSide = FrontSide;
        exports.BackSide = BackSide;
        exports.DoubleSide = DoubleSide;
        exports.FlatShading = FlatShading;
        exports.SmoothShading = SmoothShading;
        exports.NoColors = NoColors;
        exports.FaceColors = FaceColors;
        exports.VertexColors = VertexColors;
        exports.NoBlending = NoBlending;
        exports.NormalBlending = NormalBlending;
        exports.AdditiveBlending = AdditiveBlending;
        exports.SubtractiveBlending = SubtractiveBlending;
        exports.MultiplyBlending = MultiplyBlending;
        exports.CustomBlending = CustomBlending;
        exports.AddEquation = AddEquation;
        exports.SubtractEquation = SubtractEquation;
        exports.ReverseSubtractEquation = ReverseSubtractEquation;
        exports.MinEquation = MinEquation;
        exports.MaxEquation = MaxEquation;
        exports.ZeroFactor = ZeroFactor;
        exports.OneFactor = OneFactor;
        exports.SrcColorFactor = SrcColorFactor;
        exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
        exports.SrcAlphaFactor = SrcAlphaFactor;
        exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
        exports.DstAlphaFactor = DstAlphaFactor;
        exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
        exports.DstColorFactor = DstColorFactor;
        exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
        exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
        exports.NeverDepth = NeverDepth;
        exports.AlwaysDepth = AlwaysDepth;
        exports.LessDepth = LessDepth;
        exports.LessEqualDepth = LessEqualDepth;
        exports.EqualDepth = EqualDepth;
        exports.GreaterEqualDepth = GreaterEqualDepth;
        exports.GreaterDepth = GreaterDepth;
        exports.NotEqualDepth = NotEqualDepth;
        exports.MultiplyOperation = MultiplyOperation;
        exports.MixOperation = MixOperation;
        exports.AddOperation = AddOperation;
        exports.NoToneMapping = NoToneMapping;
        exports.LinearToneMapping = LinearToneMapping;
        exports.ReinhardToneMapping = ReinhardToneMapping;
        exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
        exports.CineonToneMapping = CineonToneMapping;
        exports.UVMapping = UVMapping;
        exports.CubeReflectionMapping = CubeReflectionMapping;
        exports.CubeRefractionMapping = CubeRefractionMapping;
        exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
        exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
        exports.SphericalReflectionMapping = SphericalReflectionMapping;
        exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
        exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
        exports.RepeatWrapping = RepeatWrapping;
        exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
        exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
        exports.NearestFilter = NearestFilter;
        exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
        exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
        exports.LinearFilter = LinearFilter;
        exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
        exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
        exports.UnsignedByteType = UnsignedByteType;
        exports.ByteType = ByteType;
        exports.ShortType = ShortType;
        exports.UnsignedShortType = UnsignedShortType;
        exports.IntType = IntType;
        exports.UnsignedIntType = UnsignedIntType;
        exports.FloatType = FloatType;
        exports.HalfFloatType = HalfFloatType;
        exports.UnsignedShort4444Type = UnsignedShort4444Type;
        exports.UnsignedShort5551Type = UnsignedShort5551Type;
        exports.UnsignedShort565Type = UnsignedShort565Type;
        exports.UnsignedInt248Type = UnsignedInt248Type;
        exports.AlphaFormat = AlphaFormat;
        exports.RGBFormat = RGBFormat;
        exports.RGBAFormat = RGBAFormat;
        exports.LuminanceFormat = LuminanceFormat;
        exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
        exports.RGBEFormat = RGBEFormat;
        exports.DepthFormat = DepthFormat;
        exports.DepthStencilFormat = DepthStencilFormat;
        exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
        exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
        exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
        exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
        exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
        exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
        exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
        exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
        exports.RGB_ETC1_Format = RGB_ETC1_Format;
        exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
        exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
        exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
        exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
        exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
        exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
        exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
        exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
        exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
        exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
        exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
        exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
        exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
        exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
        exports.LoopOnce = LoopOnce;
        exports.LoopRepeat = LoopRepeat;
        exports.LoopPingPong = LoopPingPong;
        exports.InterpolateDiscrete = InterpolateDiscrete;
        exports.InterpolateLinear = InterpolateLinear;
        exports.InterpolateSmooth = InterpolateSmooth;
        exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
        exports.ZeroSlopeEnding = ZeroSlopeEnding;
        exports.WrapAroundEnding = WrapAroundEnding;
        exports.TrianglesDrawMode = TrianglesDrawMode;
        exports.TriangleStripDrawMode = TriangleStripDrawMode;
        exports.TriangleFanDrawMode = TriangleFanDrawMode;
        exports.LinearEncoding = LinearEncoding;
        exports.sRGBEncoding = sRGBEncoding;
        exports.GammaEncoding = GammaEncoding;
        exports.RGBEEncoding = RGBEEncoding;
        exports.LogLuvEncoding = LogLuvEncoding;
        exports.RGBM7Encoding = RGBM7Encoding;
        exports.RGBM16Encoding = RGBM16Encoding;
        exports.RGBDEncoding = RGBDEncoding;
        exports.BasicDepthPacking = BasicDepthPacking;
        exports.RGBADepthPacking = RGBADepthPacking;
        exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
        exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
        exports.CubeGeometry = BoxGeometry;
        exports.Face4 = Face4;
        exports.LineStrip = LineStrip;
        exports.LinePieces = LinePieces;
        exports.MeshFaceMaterial = MeshFaceMaterial;
        exports.MultiMaterial = MultiMaterial;
        exports.PointCloud = PointCloud;
        exports.Particle = Particle;
        exports.ParticleSystem = ParticleSystem;
        exports.PointCloudMaterial = PointCloudMaterial;
        exports.ParticleBasicMaterial = ParticleBasicMaterial;
        exports.ParticleSystemMaterial = ParticleSystemMaterial;
        exports.Vertex = Vertex;
        exports.DynamicBufferAttribute = DynamicBufferAttribute;
        exports.Int8Attribute = Int8Attribute;
        exports.Uint8Attribute = Uint8Attribute;
        exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
        exports.Int16Attribute = Int16Attribute;
        exports.Uint16Attribute = Uint16Attribute;
        exports.Int32Attribute = Int32Attribute;
        exports.Uint32Attribute = Uint32Attribute;
        exports.Float32Attribute = Float32Attribute;
        exports.Float64Attribute = Float64Attribute;
        exports.ClosedSplineCurve3 = ClosedSplineCurve3;
        exports.SplineCurve3 = SplineCurve3;
        exports.Spline = Spline;
        exports.AxisHelper = AxisHelper;
        exports.BoundingBoxHelper = BoundingBoxHelper;
        exports.EdgesHelper = EdgesHelper;
        exports.WireframeHelper = WireframeHelper;
        exports.XHRLoader = XHRLoader;
        exports.BinaryTextureLoader = BinaryTextureLoader;
        exports.GeometryUtils = GeometryUtils;
        exports.Projector = Projector;
        exports.CanvasRenderer = CanvasRenderer;
        exports.SceneUtils = SceneUtils;
        exports.LensFlare = LensFlare;
        Object.defineProperty(exports, "__esModule", {
            value: true
        })
    })
}, function(module, exports, __webpack_require__) {
    const Grid = __webpack_require__(42);
    const Camera = __webpack_require__(43);
    const Animation = __webpack_require__(45);
    const MouseControls = __webpack_require__(46);
    const MouseProjector = __webpack_require__(47);
    const KeyboardControls = __webpack_require__(48);
    const ContinuousPan = __webpack_require__(50);
    const InteractionPlane = __webpack_require__(51);
    const PixelPlane = __webpack_require__(54);
    const LinePlane = __webpack_require__(58);
    const SelectionManager = __webpack_require__(67);
    const HoverManager = __webpack_require__(69);
    const GlobalInteractions = __webpack_require__(70);
    const ImageCache = __webpack_require__(71);
    const PluginRegistry = __webpack_require__(72);
    const ThirdPartyAccountManager = __webpack_require__(82);
    const LayerManager = __webpack_require__(83);
    const WidgetManager = __webpack_require__(84);
    const pluginHelper = __webpack_require__(88);
    const ImageRenderer = __webpack_require__(89);
    const config = __webpack_require__(1);
    module.exports = class Canvas {
        constructor(element, app)
        {
            this.element = element;
            this.app = app;
            this.stopRender = false;
            this.renderer = this.createRenderer();
            this.element.appendChild(this.renderer.domElement);
            this.scene = new THREE.Scene;
            this.camera = new Camera(this);
            this.grid = new Grid(this);
            this.mouseControls = new MouseControls(this);
            this.mouseProjector = new MouseProjector(this);
            this.continuousPan = new ContinuousPan(this);
            this.keyboardControls = new KeyboardControls(this);
            this.interactionPlane = new InteractionPlane(this);
            this.widgetManager = new WidgetManager(this);
            this.pixelPlane = new PixelPlane(this);
            this.linePlane = new LinePlane(this);
            this.selectionManager = new SelectionManager(this);
            this.hoverManager = new HoverManager(this);
            this.globalInteractions = new GlobalInteractions(this);
            this.imageCache = new ImageCache(this);
            this.layerManager = new LayerManager(this);
            this.imageRenderer = new ImageRenderer(this);
            this.plugin = {
                registry: new PluginRegistry(this),
                thirdPartyAccount: new ThirdPartyAccountManager(this),
                helper: pluginHelper
            };
            this.animations = [];
            this.directionalLight = new THREE.DirectionalLight(16777215, 1);
            this.directionalLight.position.set(50, 50, 30);
            this.scene.add(this.directionalLight);
            this.directionalLight = new THREE.DirectionalLight(16777215, 1);
            this.directionalLight.position.set(-50, 50, -30);
            this.scene.add(this.directionalLight);
            this.ambientLight = new THREE.AmbientLight(16777215, .5);
            this.scene.add(this.ambientLight);
            this.renderFn = this.render.bind(this);
            this.render();
            window.canvas = this;
            window.addEventListener("resize", this.onResize.bind(this), false)
        }
        animate(fn, frames)
        {
            const animation = new Animation(fn, frames);
            this.animations.push(animation);
            return animation
        }
        createRenderer()
        {
            const renderer = new THREE.WebGLRenderer({
                antialias: true
            });
            renderer.setClearColor(16777215, 1);
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI);
            return renderer
        }
        createPointLight()
        {
            const light = new THREE.PointLight(16777215, .8);
            light.position.set(0, 50, 50);
            return light
        }
        onResize()
        {
            this.camera.resize(window.innerWidth / window.innerHeight);
            this.renderer.setSize(window.innerWidth, window.innerHeight);
            this.interactionPlane.plane.scheduleRender();
            this.pixelPlane.plane.scheduleRender()
        }
        render()
        {
            var anim,
                i,
                t,
                f;
            for (i = 0; i < this.animations.length; i++) {
                anim = this.animations[i];
                anim.currentFrame++;
                t = anim.currentFrame / anim.totalFrames;
                f = t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
                if (anim.fn) {
                    anim.fn(f)
                }
                if (anim.isComplete()) {
                    anim.destroy();
                    this.animations.splice(i, 1)
                }
            }
            if (this.pixelPlane.plane.renderScheduled === true) {
                this.pixelPlane.plane.render()
            }
            if (this.interactionPlane.plane.renderScheduled === true) {
                this.interactionPlane.plane.render()
            }
            if (this.stopRender !== true) {
                this.renderer.render(this.scene, this.camera.getThreeObject())
            }
            requestAnimationFrame(this.renderFn)
        }
        getBlob(s, callback)
        {
            this.imageRenderer.getBlob(s, callback)
        }
        setCanvasElementDimensions(plane, width, height)
        {
            const lineCap = plane.ctx.lineCap;
            const lineJoin = plane.ctx.lineJoin;
            const textAlign = plane.ctx.textAlign;
            const textBaseline = plane.ctx.textBaseline;
            plane.htmlCanvasElement.width = width;
            plane.htmlCanvasElement.height = height;
            plane.ctx.lineCap = lineCap;
            plane.ctx.lineJoin = lineJoin;
            plane.ctx.textAlign = textAlign;
            plane.ctx.textBaseline = textBaseline
        }
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const styles = __webpack_require__(5);
    const S = config.pixelPerUnit;
    module.exports = class Grid {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.htmlCanvasElement = document.createElement("canvas");
            this.htmlCanvasElement.width = S;
            this.htmlCanvasElement.height = S;
            this.ctx = this.htmlCanvasElement.getContext("2d");
            this.texture = new THREE.CanvasTexture(this.htmlCanvasElement);
            this.texture.wrapS = THREE.RepeatWrapping;
            this.texture.wrapT = THREE.RepeatWrapping;
            this.texture.anisotropy = this.canvas.renderer.capabilities.getMaxAnisotropy();
            this.texture.repeat.set(Math.floor(config.gridWidth / 10), Math.floor(config.gridHeight / 10));
            this.material = new THREE.MeshBasicMaterial({
                map: this.texture
            });
            this.geometry = new THREE.PlaneBufferGeometry(config.gridWidth, config.gridHeight, 1, 1);
            this.mesh = new THREE.Mesh(this.geometry, this.material);
            this.mesh.rotation.order = "YXZ";
            this.mesh.rotation.y = -Math.PI / 2;
            this.mesh.rotation.x = -Math.PI / 2;
            this.canvas.scene.add(this.mesh);
            this.updateTexture()
        }
        updateTexture()
        {
            this.ctx.fillStyle = styles.grid.background;
            this.ctx.strokeStyle = styles.grid.secondaryLineColor;
            this.ctx.fillRect(0, 0, S, S);
            this.ctx.beginPath();
            this.ctx.moveTo(0, S / 2);
            this.ctx.lineTo(S, S / 2);
            this.ctx.moveTo(S / 2, 0);
            this.ctx.lineTo(S / 2, S);
            this.ctx.stroke();
            this.ctx.strokeStyle = styles.grid.primaryLineColor;
            this.ctx.beginPath();
            this.ctx.moveTo(0, 1);
            this.ctx.lineTo(S, 1);
            this.ctx.moveTo(S - 1, 0);
            this.ctx.lineTo(S - 1, S);
            this.ctx.stroke();
            this.texture.needsUpdate = true
        }
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const D = 450;
    const EventEmitter = __webpack_require__(2);
    const CameraPersistence = __webpack_require__(44);
    const Rectangle = __webpack_require__(3);
    const tools = __webpack_require__(4);
    const HALF_PI = Math.PI / 2;
    const DIRECTIONS = [0, null, 1, 2, null, 3];
    module.exports = class Camera extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.canvas = canvas;
            this.persistence = new CameraPersistence(canvas);
            this.camera = this.createCamera();
            this.setPosition(D, D, D);
            this.camera.lookAt(this.canvas.scene.position);
            this.canvas.scene.add(this.camera);
            this.rayCaster = new THREE.Raycaster;
            this.startPos = null;
            this.isTopDown = false;
            this.x = D;
            this.y = D;
            this.animation = null;
            this.center2D = new THREE.Vector2(0, 0);
            this.angle = Math.PI / 4;
            this.plane = new THREE.Plane(new THREE.Vector3(0, 1, 0));
            this.mouseStartPos = {};
            this.canvas.app.eventHub.on("init", this.persistence.load, this.persistence)
        }
        getThreeObject()
        {
            return this.camera
        }
        centerView()
        {
            this.camera.lookAt(this.canvas.scene.position)
        }
        rotateLeft()
        {
            this.rotateAnimation(1)
        }
        rotateRight()
        {
            this.rotateAnimation(-1)
        }
        getDiagramDimensions()
        {
            var x1 = Infinity,
                y1 = Infinity,
                x2 = -Infinity,
                y2 = -Infinity;
            Object.values(this.canvas.app.objects.getAll()).forEach(obj => {
                const boundingBox = obj.computeBoundingBox() || obj.boundingBox;
                x1 = Math.min(boundingBox.x1, x1);
                y1 = Math.min(boundingBox.y1, y1);
                x2 = Math.max(boundingBox.x2, x2);
                y2 = Math.max(boundingBox.y2, y2)
            });
            return new Rectangle(x1, y1, x2, y2)
        }
        getViewCenter()
        {
            const rayCaster = new THREE.Raycaster;
            const calcPlane = new THREE.Plane(new THREE.Vector3(0, 1, 0));
            const intersection = new THREE.Vector3;
            rayCaster.setFromCamera(new THREE.Vector2(0, 0), this.camera);
            rayCaster.ray.intersectPlane(calcPlane, intersection);
            return intersection
        }
        showWholeDiagram()
        {
            this.setRotation(Math.PI / 4);
            const diagramDimensions = this.getDiagramDimensions();
            const centerX = diagramDimensions.getCenter().x * config.gridCellSize;
            const centerZ = diagramDimensions.getCenter().y * config.gridCellSize;
            const viewCenter = this.getViewCenter();
            this.camera.position.set(centerX + (this.camera.position.x - viewCenter.x), D, centerZ + (this.camera.position.z - viewCenter.z));
            const distanceToCamera = new THREE.Vector3(centerX, 0, centerZ).distanceTo(this.camera.position);
            const distanceBetweenComponents = Math.max(diagramDimensions.width, diagramDimensions.height) * config.gridCellSize;
            const zoom = 2 * (distanceToCamera * Math.atan(Math.PI / 4)) / distanceBetweenComponents;
            this.setZoom(tools.clamp(zoom, config.minZoom, config.maxZoom));
            setTimeout(() => {
                this.emit("change")
            }, 60)
        }
        getDirection()
        {
            var angle = this.angle;
            if (this.isTopDown) {
                angle += Math.PI / 4
            }
            var r = angle % (Math.PI * 2);
            if (r < 0) {
                r = Math.PI * 2 + r
            }
            return DIRECTIONS[Math.floor(r)]
        }
        toggleTopDown()
        {
            this.completeCurrentAnimation();
            this.isTopDown = !this.isTopDown;
            var startAngle,
                targetAngle,
                r;
            const circle = this.projectCircle();
            const p = circle.center;
            r = circle.radius;
            if (this.isTopDown) {
                startAngle = this.angle;
                targetAngle = this.angle + Math.PI / 4
            } else {
                startAngle = this.angle;
                targetAngle = this.angle - Math.PI / 4;
                r = 636.396103067879
            }
            this.angle = targetAngle;
            this.animation = this.canvas.animate(f => {
                f = Math.min(f, .9999999999);
                const nF = 1 - f;
                const nR = r * (this.isTopDown ? nF : f);
                const angle = startAngle * nF + targetAngle * f;
                this.camera.position.x = p.x + nR * Math.cos(angle);
                this.camera.position.z = p.z + nR * Math.sin(angle);
                this.camera.lookAt(p)
            }, 40);
            this.animation.completeCallback = (() => {
                this.persistence.save();
                this.emit("change")
            })
        }
        completeCurrentAnimation()
        {
            if (this.animation && this.animation.isComplete() === false) {
                this.animation.complete()
            }
        }
        rotateAnimation(m)
        {
            this.completeCurrentAnimation();
            var startAngle = this.angle;
            this.animation = this.canvas.animate(f => {
                this.setRotation(startAngle + HALF_PI * f * m)
            }, config.rotationAnimationDuration);
            this.animation.completeCallback = (() => {
                this.persistence.save();
                this.emit("change")
            })
        }
        projectCircle()
        {
            this.rayCaster.setFromCamera(this.center2D, this.camera);
            const distance = this.rayCaster.ray.distanceToPlane(this.plane);
            const square = Math.pow(distance, 2) - Math.pow(this.camera.position.y, 2);
            return {
                center: this.rayCaster.ray.intersectPlane(this.plane, new THREE.Vector3),
                radius: Math.sqrt(Math.max(0, square))
            }
        }
        setRotation(angle)
        {
            const c = this.projectCircle();
            this.camera.position.x = c.center.x + c.radius * Math.cos(angle);
            this.camera.position.z = c.center.z + c.radius * Math.sin(angle);
            this.camera.lookAt(c.center);
            this.angle = angle
        }
        changeZoomBy(delta)
        {
            const newZoom = tools.clamp(this.camera.zoom + delta, config.minZoom, config.maxZoom);
            this.setZoom(newZoom)
        }
        project(point)
        {
            return this.canvas.mouseProjector.getIntersection({
                clientX: point.x,
                clientY: point.y
            }, this.camera.camera)
        }
        setToRectangle(rectangle)
        {
            this.camera.setViewOffset(window.innerWidth, window.innerHeight, rectangle.x1, rectangle.y1, rectangle.width, rectangle.height)
        }
        setZoom(zoom)
        {
            this.camera.zoom = zoom;
            this.camera.updateProjectionMatrix();
            this.persistence.save();
            this.emit("change")
        }
        setPosition(x, y, z)
        {
            this.camera.position.set(tools.clamp(x, -920, 920), D, tools.clamp(z, -920, 920));
            this.emit("change")
        }
        startPan()
        {
            this.cameraStartPos = this.camera.position.clone();
            this.originalCamera = this.camera.clone();
            this.originalIntersection = this.canvas.mouseProjector.getIntersection(this.canvas.mouseProjector.lastEvent);
            document.body.classList.add("pan");
            this.canvas.mouseControls.on("mousemove", this.onMouseMove, this)
        }
        stopPan(keepPanClass)
        {
            if (!keepPanClass) {
                document.body.classList.remove("pan")
            }
            this.canvas.mouseControls.off("mousemove", this.onMouseMove, this);
            this.persistence.save()
        }
        onMouseMove(event)
        {
            const intersection = this.canvas.mouseProjector.getIntersection(event, this.originalCamera);
            this.setPosition(this.cameraStartPos.x + (this.originalIntersection.x - intersection.x), this.cameraStartPos.y, this.cameraStartPos.z + (this.originalIntersection.z - intersection.z))
        }
        createCamera()
        {
            const aspect = window.innerWidth / window.innerHeight;
            return new THREE.OrthographicCamera(-D * aspect, D * aspect, D, -D, 10, 2e3)
        }
        resize(aspect)
        {
            this.camera.left = -D * aspect;
            this.camera.right = D * aspect;
            this.camera.top = D;
            this.camera.bottom = -D;
            this.camera.updateProjectionMatrix()
        }
        createCameraHelper()
        {
            this.cameraHelper = new THREE.CameraHelper(this.camera);
            this.canvas.scene.add(this.cameraHelper)
        }
    }
}, function(module, exports, __webpack_require__) {
    const defaultUserSettings = __webpack_require__(21);
    const r = val => {
        return Math.round(val * 1e4) / 1e4
    };
    module.exports = class CameraPersistence {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.loadAttempts = 0
        }
        reset()
        {
            this.canvas.app.userSettings.set("cameraPosition", defaultUserSettings.cameraPosition);
            this.canvas.app.userSettings.set("cameraRotation", defaultUserSettings.cameraRotation);
            this.canvas.app.userSettings.set("zoom", defaultUserSettings.zoom);
            this.canvas.app.userSettings.set("cameraIsTopDown", false);
            this.canvas.app.userSettings.set("cameraEuler", null);
            if (this.loadAttempts < 4) {
                this.load()
            }
        }
        load()
        {
            this.loadAttempts++;
            if (!this.canvas.app.userSettings.get("cameraEuler")) {
                this.reset()
            }
            try {
                this.canvas.camera.isTopDown = this.canvas.app.userSettings.get("cameraIsTopDown");
                this.canvas.camera.angle = this.canvas.app.userSettings.get("cameraRotation");
                this.canvas.camera.camera.position.fromArray(this.getArray("cameraPosition"));
                this.canvas.camera.camera.zoom = this.canvas.app.userSettings.get("zoom");
                this.canvas.camera.camera.updateProjectionMatrix();
                const cameraEuler = this.canvas.app.userSettings.get("cameraEuler");
                if (cameraEuler) {
                    this.canvas.camera.camera.rotation.fromArray(cameraEuler)
                } else {
                    this.canvas.camera.camera.lookAt(this.canvas.camera.projectCircle().center)
                }
                requestAnimationFrame(() => {
                    this.canvas.camera.emit("change")
                })
            } catch (e) {
                console.warn("Error while loading camera settings", e);
                this.reset()
            }
        }
        save()
        {
            this.canvas.app.userSettings.set("cameraIsTopDown", this.canvas.camera.isTopDown);
            this.canvas.app.userSettings.set("cameraRotation", this.canvas.camera.angle);
            this.canvas.app.userSettings.set("zoom", this.canvas.camera.camera.zoom);
            this.canvas.app.userSettings.set("cameraEuler", this.canvas.camera.camera.rotation.toArray());
            this.canvas.app.userSettings.set("cameraPosition", this.canvas.camera.camera.position.toArray())
        }
        toHash()
        {
            const euler = this.canvas.camera.camera.rotation.toArray();
            const pos = this.canvas.camera.camera.position.toArray();
            return [this.canvas.camera.isTopDown ? 1 : 0, r(this.canvas.camera.angle), r(this.canvas.camera.camera.zoom), r(euler[0]), r(euler[1]), r(euler[2]), r(pos[0]), r(pos[1]), r(pos[2])].join("_")
        }
        fromHash(hash)
        {
            if (!hash) {
                return null
            }
            const p = hash.split("_").map(parseFloat);
            if (p.length !== 9) {
                return null
            }
            return {
                cameraIsTopDown: p[0] == 1,
                cameraRotation: p[1],
                zoom: p[2],
                cameraEuler: [p[3], p[4], p[5], "XYZ"],
                cameraPosition: [p[6], p[7], p[8]]
            }
        }
        getArray(key)
        {
            const value = this.canvas.app.userSettings.get(key);
            if (value instanceof Array) {
                return value
            } else {
                return [value.x, value.y, value.z]
            }
        }
    }
}, function(module, exports) {
    module.exports = class Animation {
        constructor(fn, frames)
        {
            this.fn = fn;
            this.totalFrames = frames;
            this.currentFrame = 0;
            this.completeCallback = null
        }
        complete()
        {
            this.currentFrame = this.totalFrames;
            this.fn(1);
            this.destroy()
        }
        isComplete()
        {
            return this.currentFrame >= this.totalFrames
        }
        destroy()
        {
            this.fn = null;
            this.totalFrames = null;
            this.currentFrame = null;
            if (this.completeCallback) {
                this.completeCallback()
            }
            this.completeCallback = null
        }
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const EventEmitter = __webpack_require__(2);
    const C = __webpack_require__(0);
    module.exports = class MouseControls extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.canvas = canvas;
            this.cam = this.canvas.camera.getThreeObject();
            this.originalZoom = null;
            this.canvas.element.addEventListener("wheel", this.onMouseWheel.bind(this));
            this.canvas.element.addEventListener("mousedown", this.onMouseDown.bind(this));
            this.canvas.element.addEventListener("touchstart", this.onTouchStart.bind(this));
            this.canvas.element.addEventListener("touchend", this.onTouchEnd.bind(this));
            this.canvas.element.addEventListener("touchmove", this.onTouchMove.bind(this));
            this.canvas.element.addEventListener("click", this.onClick.bind(this));
            this.canvas.element.addEventListener("dblclick", this.onDblClick.bind(this));
            window.addEventListener("mousemove", this.onMouseMove.bind(this));
            window.addEventListener("mouseup", this.onMouseUp.bind(this));
            document.addEventListener("contextmenu", this.onContextMenu.bind(this), false);
            if (config.isEmbed) {
                const hm = new Hammer(document.body);
                hm.get("pinch").set({
                    enable: true
                });
                hm.on("pinchstart", this.onPinchStart.bind(this));
                hm.on("pinch", this.onPinch.bind(this))
            }
        }
        onClick(e)
        {
            this.canvas.keyboardControls.updatePressedKeys(e);
            this.emit("click", e)
        }
        onContextMenu(e)
        {
            this.canvas.keyboardControls.updatePressedKeys(e);
            e.preventDefault();
            this.canvas.app.eventHub.emit("user-cancel")
        }
        onTouchStart(e)
        {
            if (e.targetTouches.length === 1) {
                this.canvas.mouseProjector.lastEvent = e.targetTouches[0];
                this.emit("mousedown", e.targetTouches[0])
            }
        }
        onTouchEnd(e)
        {
            if (e.targetTouches.length === 1) {
                this.emit("mouseup", e.targetTouches[0])
            }
        }
        onTouchMove(e)
        {
            if (e.targetTouches.length === 1) {
                this.emit("mousemove", e.targetTouches[0])
            }
        }
        onPinchStart()
        {
            this.originalZoom = this.canvas.camera.camera.zoom
        }
        onPinch(e)
        {
            this.canvas.camera.setZoom(this.originalZoom * e.scale)
        }
        onMouseWheel(e)
        {
            e.preventDefault();
            var zoomOffset = config.zoomPerWheelDelta;
            if (e.deltaY > 0) {
                zoomOffset *= -1
            }
            this.canvas.camera.changeZoomBy(zoomOffset)
        }
        onMouseDown(e)
        {
            this.canvas.keyboardControls.updatePressedKeys(e);
            if (e.button === 0) {
                this.emit("mousedown", e)
            } else if (e.button === 1) {
                this.canvas.app.interactionMode.set(C.INTERACTION_MODE.PAN)
            }
        }
        onMouseMove(e)
        {
            this.canvas.keyboardControls.updatePressedKeys(e);
            this.emit("mousemove", e)
        }
        onMouseUp(e)
        {
            this.canvas.keyboardControls.updatePressedKeys(e);
            if (e.button === 0) {
                this.emit("mouseup", e)
            } else if (e.button === 1) {
                this.canvas.app.interactionMode.endActiveMode()
            }
        }
        onDblClick(e)
        {
            this.canvas.keyboardControls.updatePressedKeys(e);
            this.emit("dblclick", e)
        }
    }
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(2);
    const Point = __webpack_require__(8);
    const Rectangle = __webpack_require__(3);
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    const D = {};
    D[C.EVENTS.CELL_CHANGED] = {
        factor: 1,
        offset: 0
    };
    D[C.EVENTS.HALF_CELL_INTERSECTION_CHANGED] = {
        factor: 2,
        offset: 2.5
    };
    D[C.EVENTS.HALF_CELL_CHANGED] = {
        factor: 2,
        offset: 0
    };
    D[C.EVENTS.QUARTER_CELL_CHANGED] = {
        factor: 4,
        offset: 0
    };
    D[C.EVENTS.QUARTER_CELL_INTERSECTION_CHANGED] = {
        factor: 4,
        offset: 1.25
    };
    D[C.EVENTS.EIGHTS_CELL_CHANGED] = {
        factor: 8,
        offset: 0
    };
    module.exports = class MouseProjector extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.canvas = canvas;
            this.raycaster = new THREE.Raycaster;
            this.calcPlane = new THREE.Plane(new THREE.Vector3(0, 1, 0));
            this.mousePosition = new THREE.Vector2;
            this.rawPos = new Point;
            this.halfCellPos = new Point;
            this.halfCellIntersectionPos = new Point;
            this.quarterCellPos = new Point;
            this.cellPos = new Point;
            this.eightsCellPos = new Point;
            this.quarterCellIntersectionPos = new Point;
            this.lastRawX = null;
            this.lastRawY = null;
            this.lastEvent = null;
            this.stopMouseTracking = false;
            window.addEventListener("mousemove", this.processMousePosition.bind(this), false);
            window.addEventListener("touchmove", this.onTouchMove.bind(this), false)
        }
        get2DCoordinatesForObject(obj)
        {
            const vector = new THREE.Vector3;
            const widthHalf = .5 * this.canvas.renderer.context.canvas.width;
            const heightHalf = .5 * this.canvas.renderer.context.canvas.height;
            obj.updateMatrixWorld();
            vector.setFromMatrixPosition(obj.matrixWorld);
            vector.project(this.canvas.camera.getThreeObject());
            vector.x = vector.x * widthHalf + widthHalf;
            vector.y = -(vector.y * heightHalf) + heightHalf;
            return new Point(vector.x, vector.y)
        }
        getIntersection(event, camera)
        {
            this.mousePosition.x = event.clientX / window.innerWidth * 2 - 1;
            this.mousePosition.y = -(event.clientY / window.innerHeight) * 2 + 1;
            this.raycaster.setFromCamera(this.mousePosition, camera || this.canvas.camera.getThreeObject());
            return this.raycaster.ray.intersectPlane(this.calcPlane, new THREE.Vector3)
        }
        onTouchMove(e)
        {
            if (e.targetTouches.length === 1) {
                this.processMousePosition(e.targetTouches[0])
            }
        }
        processMousePosition(event)
        {
            if (this.stopMouseTracking === true) {
                return
            }
            const intersection = this.getIntersection(event);
            this.lastEvent = event;
            this.lastRawX = intersection.x / config.gridCellSize;
            this.lastRawY = intersection.z / config.gridCellSize;
            this.updatePosition(C.EVENTS.CELL_CHANGED, this.halfCellIntersectionPos, intersection);
            this.updatePosition(C.EVENTS.HALF_CELL_INTERSECTION_CHANGED, this.halfCellIntersectionPos, intersection);
            this.updatePosition(C.EVENTS.HALF_CELL_CHANGED, this.halfCellPos, intersection);
            this.updatePosition(C.EVENTS.QUARTER_CELL_CHANGED, this.quarterCellPos, intersection);
            this.updatePosition(C.EVENTS.QUARTER_CELL_INTERSECTION_CHANGED, this.quarterCellIntersectionPos, intersection);
            this.updatePosition(C.EVENTS.EIGHTS_CELL_CHANGED, this.eightsCellPos, intersection);
            if (this.hasListeners(C.EVENTS.RAW_POSITION_CHANGED)) {
                const x = intersection.x / config.gridCellSize;
                const y = intersection.z / config.gridCellSize;
                if (this.rawPos.x !== x || this.rawPos.y !== y) {
                    this.rawPos.set(x, y);
                    this.emit(C.EVENTS.RAW_POSITION_CHANGED, this.rawPos)
                }
            }
        }
        updatePosition(eventName, position, intersection)
        {
            if (!this.hasListeners(eventName)) {
                return
            }
            const factor = D[eventName].factor;
            const offset = D[eventName].offset;
            const x = Math.floor((intersection.x + offset) / config.gridCellSize * factor) / factor;
            const y = Math.floor((intersection.z + offset) / config.gridCellSize * factor) / factor;
            if (position.x !== x || position.y !== y) {
                position.set(x, y);
                this.emit(eventName, position)
            }
        }
        getViewPortRectangle()
        {
            const v2 = new THREE.Vector2;
            const f = (x, y) => {
                const v3 = new THREE.Vector3;
                v2.x = x;
                v2.y = y;
                this.raycaster.setFromCamera(v2, this.canvas.camera.getThreeObject());
                this.raycaster.ray.intersectPlane(this.calcPlane, v3);
                return v3
            };
            const p1 = f(-1, -1);
            const p2 = f(1, 1);
            return new Rectangle(p1.x, p1.z, p2.x, p2.z)
        }
        getPlaneCoordinatesForMouseEvent(event, mouseMoveMode)
        {
            const intersection = this.getIntersection(event);
            if (mouseMoveMode === C.EVENTS.RAW_POSITION_CHANGED) {
                return new Point(intersection.x / config.gridCellSize, intersection.z / config.gridCellSize)
            } else {
                return new Point(Math.floor((intersection.x + D[mouseMoveMode].offset) / config.gridCellSize * D[mouseMoveMode].factor) / D[mouseMoveMode].factor, Math.floor((intersection.z + D[mouseMoveMode].offset) / config.gridCellSize * D[mouseMoveMode].factor) / D[mouseMoveMode].factor)
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(2);
    const keyActions = __webpack_require__(49);
    const KEYS = __webpack_require__(9);
    const CMD_KEY_CODES = [91, 93, 224];
    module.exports = class KeyboardControls extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.canvas = canvas;
            this.pressedKeys = {};
            document.addEventListener("keydown", this.onKeyDown.bind(this));
            document.addEventListener("keyup", this.onKeyUp.bind(this))
        }
        onKeyDown(e)
        {
            if (this.isInputEvent(e)) {
                return
            }
            if (this.pressedKeys[e.keyCode] === true) {
                return
            }
            this.pressedKeys[e.keyCode] = true;
            this.updatePressedKeys(e);
            if (keyActions[e.keyCode] && keyActions[e.keyCode].down) {
                if (this.canvas.app.$refs.viewControls.isDashboardMode && keyActions[e.keyCode].isManipulation) {
                    return
                }
                keyActions[e.keyCode].down(this, this.canvas, e)
            }
        }
        onKeyUp(e)
        {
            if (this.isInputEvent(e)) {
                return
            }
            this.pressedKeys[e.keyCode] = false;
            this.updatePressedKeys(e);
            if (keyActions[e.keyCode] && keyActions[e.keyCode].up) {
                if (this.canvas.app.$refs.viewControls.isDashboardMode && keyActions[e.keyCode].isManipulation) {
                    return
                }
                keyActions[e.keyCode].up(this, this.canvas)
            }
        }
        isInputEvent(event)
        {
            return (event.target.nodeName === "INPUT" || event.target.nodeName === "TEXTAREA") && event.keyCode !== KEYS.ESC
        }
        updatePressedKeys(event)
        {
            this.pressedKeys[KEYS.SHIFT] = event.shiftKey;
            this.pressedKeys[KEYS.CTRL] = event.ctrlKey;
            this.pressedKeys[KEYS.ALT] = event.altKey;
            this.pressedKeys[KEYS.CMD] = CMD_KEY_CODES.indexOf(event.keyCode) > -1
        }
        ctrlKeyPressed()
        {
            return this.pressedKeys[KEYS.CTRL] || this.pressedKeys[KEYS.CMD]
        }
    }
}, function(module, exports, __webpack_require__) {
    const KEYS = __webpack_require__(9);
    const C = __webpack_require__(0);
    const KEY_ACTIONS = {};
    KEY_ACTIONS[KEYS.ESC] = {
        desc: "Cancel current action",
        up: (keyboardControls, canvas) => {
            canvas.app.eventHub.emit("user-cancel")
        }
    };
    KEY_ACTIONS[KEYS.DELETE] = KEY_ACTIONS[KEYS.BACKSPACE] = {
        isManipulation: true,
        desc: "Delete currently selected item(s)",
        up: (keyboardControls, canvas) => {
            keyboardControls.emit("delete")
        }
    };
    KEY_ACTIONS[KEYS.SPACE] = {
        desc: "Pan Canvas",
        down: (keyboardControls, canvas) => {
            canvas.app.interactionMode.set(C.INTERACTION_MODE.PAN)
        },
        up: (keyboardControls, canvas) => {
            canvas.app.interactionMode.endActiveMode(true)
        }
    };
    KEY_ACTIONS[KEYS.Y] = {
        isManipulation: true,
        ctrlDesc: "Redo last undo",
        down: (keyboardControls, canvas, event) => {
            if (keyboardControls.ctrlKeyPressed()) {
                event.preventDefault();
                canvas.app.state.history.redo()
            }
        }
    };
    KEY_ACTIONS[KEYS.Z] = {
        isManipulation: true,
        ctrlDesc: "Undo last action",
        down: (keyboardControls, canvas, event) => {
            if (keyboardControls.ctrlKeyPressed()) {
                event.preventDefault();
                if (event.shiftKey) {
                    canvas.app.state.history.redo()
                } else {
                    canvas.app.state.history.undo()
                }
            }
        }
    };
    KEY_ACTIONS[KEYS.S] = {
        isManipulation: true,
        desc: "Rotate Selected Item Left",
        down: (keyboardControls, canvas, event) => {
            canvas.app.eventHub.emit("rotate-item-left")
        }
    };
    KEY_ACTIONS[KEYS.D] = {
        isManipulation: true,
        desc: "Rotate Selected Item Right",
        down: (keyboardControls, canvas, event) => {
            canvas.app.eventHub.emit("rotate-item-right")
        }
    };
    KEY_ACTIONS[KEYS.L] = {
        isManipulation: true,
        desc: "Draw Lines",
        down: (keyboardControls, canvas, event) => {
            canvas.app.interactionMode.set(C.INTERACTION_MODE.DRAW_LINES)
        }
    };
    KEY_ACTIONS[KEYS.A] = {
        isManipulation: true,
        desc: "Draw Area",
        ctrlDesc: "Select All",
        down: (keyboardControls, canvas, event) => {
            if (keyboardControls.ctrlKeyPressed()) {
                event.preventDefault();
                canvas.selectionManager.addMultipleObjectsToSelection(canvas.app.objects.getAll())
            } else {
                canvas.app.interactionMode.set(C.INTERACTION_MODE.DRAW_AREA)
            }
        }
    };
    KEY_ACTIONS[KEYS.P] = {
        desc: "Toggle Dashboard Mode",
        down: (keyboardControls, canvas, event) => {
            canvas.app.$refs.viewControls.toggleDashboardMode()
        }
    };
    KEY_ACTIONS[KEYS.I] = {
        isManipulation: true,
        desc: "Add Icon",
        down: (keyboardControls, canvas, event) => {
            canvas.app.interactionMode.set(C.INTERACTION_MODE.ADD_ICON)
        }
    };
    KEY_ACTIONS[KEYS.B] = {
        isManipulation: true,
        desc: "Add Label",
        down: (keyboardControls, canvas, event) => {
            canvas.app.interactionMode.set(C.INTERACTION_MODE.ADD_LABEL)
        }
    };
    KEY_ACTIONS[KEYS.E] = {
        desc: "Rotate Canvas Left",
        down: (keyboardControls, canvas, event) => {
            canvas.camera.rotateLeft()
        }
    };
    KEY_ACTIONS[KEYS.Q] = {
        desc: "Rotate Canvas Right",
        down: (keyboardControls, canvas, event) => {
            canvas.camera.rotateRight()
        }
    };
    KEY_ACTIONS[KEYS.X] = {
        desc: "Toggle 2D/3D",
        down: (keyboardControls, canvas, event) => {
            canvas.camera.toggleTopDown()
        }
    };
    const PAN_ACTION = {
        desc: "Pan Canvas",
        down: (keyboardControls, canvas, event) => {
            canvas.continuousPan.reset()
        },
        up: (keyboardControls, canvas, event) => {
            canvas.continuousPan.reset()
        }
    };
    KEY_ACTIONS[KEYS.ARROW_LEFT] = PAN_ACTION;
    KEY_ACTIONS[KEYS.ARROW_DOWN] = PAN_ACTION;
    KEY_ACTIONS[KEYS.ARROW_RIGHT] = PAN_ACTION;
    KEY_ACTIONS[KEYS.ARROW_UP] = PAN_ACTION;
    module.exports = KEY_ACTIONS
}, function(module, exports, __webpack_require__) {
    const KEYS = __webpack_require__(9);
    const config = __webpack_require__(1);
    module.exports = class ContinuousPan {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.animationFrame = null;
            this.panByOffsetFn = this.panByOffset.bind(this);
            this.offsetX = 0;
            this.offsetY = 0
        }
        reset()
        {
            this.offsetX = 0;
            this.offsetY = 0;
            const dir = this.canvas.camera.getDirection();
            var a,
                b,
                c,
                d;
            if (dir === 0) {
                a = KEYS.ARROW_LEFT;
                b = KEYS.ARROW_UP;
                c = KEYS.ARROW_RIGHT;
                d = KEYS.ARROW_DOWN
            } else if (dir === 1) {
                a = KEYS.ARROW_DOWN;
                b = KEYS.ARROW_LEFT;
                c = KEYS.ARROW_UP;
                d = KEYS.ARROW_RIGHT
            } else if (dir === 2) {
                a = KEYS.ARROW_RIGHT;
                b = KEYS.ARROW_DOWN;
                c = KEYS.ARROW_LEFT;
                d = KEYS.ARROW_UP
            } else if (dir === 3) {
                a = KEYS.ARROW_UP;
                b = KEYS.ARROW_RIGHT;
                c = KEYS.ARROW_DOWN;
                d = KEYS.ARROW_LEFT
            }
            if (this.canvas.camera.isTopDown) {
                if (this.canvas.keyboardControls.pressedKeys[a]) {
                    this.offsetY += config.continuousPanPerFrame
                }
                if (this.canvas.keyboardControls.pressedKeys[b]) {
                    this.offsetX += config.continuousPanPerFrame * -1
                }
                if (this.canvas.keyboardControls.pressedKeys[c]) {
                    this.offsetY += config.continuousPanPerFrame * -1
                }
                if (this.canvas.keyboardControls.pressedKeys[d]) {
                    this.offsetX += config.continuousPanPerFrame
                }
            } else {
                if (this.canvas.keyboardControls.pressedKeys[a]) {
                    this.offsetY += config.continuousPanPerFrame;
                    this.offsetX += config.continuousPanPerFrame * -1
                }
                if (this.canvas.keyboardControls.pressedKeys[b]) {
                    this.offsetY += config.continuousPanPerFrame * -1;
                    this.offsetX += config.continuousPanPerFrame * -1
                }
                if (this.canvas.keyboardControls.pressedKeys[c]) {
                    this.offsetY += config.continuousPanPerFrame * -1;
                    this.offsetX += config.continuousPanPerFrame
                }
                if (this.canvas.keyboardControls.pressedKeys[d]) {
                    this.offsetY += config.continuousPanPerFrame;
                    this.offsetX += config.continuousPanPerFrame
                }
            }
            if (this.offsetX === 0 && this.offsetY === 0) {
                window.cancelAnimationFrame(this.animationFrame);
                this.animationFrame = null;
                return
            }
            const viewPortRectangle = this.canvas.mouseProjector.getViewPortRectangle();
            const f = Math.min(viewPortRectangle.width, viewPortRectangle.height);
            this.offsetX *= f;
            this.offsetY *= f;
            if (this.animationFrame === null) {
                this.panByOffset()
            }
        }
        panByOffset()
        {
            this.animationFrame = window.requestAnimationFrame(this.panByOffsetFn);
            this.canvas.camera.setPosition(this.canvas.camera.camera.position.x + this.offsetX, 0, this.canvas.camera.camera.position.z + this.offsetY)
        }
        stopContinuousPan()
        {
            window.cancelAnimationFrame(this.animationFrame);
            this.animationFrame = null
        }
    }
}, function(module, exports, __webpack_require__) {
    const AbstractPlane = __webpack_require__(22);
    const ComponentGhost = __webpack_require__(53);
    const style = __webpack_require__(5);
    const C = __webpack_require__(0);
    module.exports = class InteractionPlane {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.plane = new AbstractPlane(this.canvas, .015);
            this.interactions = {};
            this.interactions.componentGhost = new ComponentGhost(this.canvas, this);
            this.highlightRectangle = null;
            this.highlightColor = null;
            this.indicatePosition = null;
            this.indicateDimensionValue = null;
            this.indicateDimension = null;
            this.plane.on("render", this.render, this);
            setTimeout(this.init.bind(this), 1)
        }
        init()
        {
            this.canvas.selectionManager.on("selection-change", this.plane.scheduleRender, this.plane)
        }
        highlightArea(rectangle, color)
        {
            this.highlightRectangle = rectangle;
            this.highlightColor = color;
            this.plane.scheduleRender()
        }
        drawPositionIndicator(position)
        {
            this.indicatePosition = position;
            this.plane.scheduleRender()
        }
        hidePositionIndicator()
        {
            this.indicatePosition = null;
            this.plane.scheduleRender()
        }
        drawSingleDimensionIndicator(value, dimension)
        {
            this.indicateDimensionValue = value;
            this.indicateDimension = dimension;
            this.plane.scheduleRender()
        }
        hideSingleDimensionIndicator()
        {
            this.indicateDimensionValue = null;
            this.indicateDimension = null;
            this.plane.scheduleRender()
        }
        render()
        {
            if (this.highlightRectangle) {
                this.plane.setFillStyle(this.highlightColor);
                this.plane.fillRect(this.highlightRectangle);
                this.highlightRectangle = null;
                this.highlightColor = null
            }
            if (this.indicatePosition) {
                const p = this.indicatePosition;
                this.plane.beginPath();
                this.plane.moveTo({
                    x: p.x,
                    y: p.y - 100
                });
                this.plane.lineTo({
                    x: p.x,
                    y: p.y + 100
                });
                this.plane.moveTo({
                    x: p.x - 100,
                    y: p.y
                });
                this.plane.lineTo({
                    x: p.x + 100,
                    y: p.y
                });
                this.plane.setStrokeStyle(style.highlighting.positionIndicatorLineColor);
                this.plane.setLineDash([.2, .1]);
                this.plane.setLineWidth(.01);
                this.plane.stroke();
                this.plane.setLineDash([0])
            }
            if (this.indicateDimension) {
                this.plane.beginPath();
                this.plane.setLineWidth(.01);
                this.plane.setStrokeStyle(style.highlighting.dimensionIndicatorLineColor);
                if (this.indicateDimension === "x") {
                    this.plane.moveTo({
                        x: this.indicateDimensionValue,
                        y: -100
                    });
                    this.plane.lineTo({
                        x: this.indicateDimensionValue,
                        y: 100
                    })
                } else {
                    this.plane.moveTo({
                        x: -100,
                        y: this.indicateDimensionValue
                    });
                    this.plane.lineTo({
                        x: 100,
                        y: this.indicateDimensionValue
                    })
                }
                this.plane.stroke()
            }
            const objects = this.canvas.app.objects.getAll();
            for (var id in objects) {
                if (C.BOX_SELECTION_TYPES[objects[id].type] || objects[id].isBoxSelectionType) {
                    if (objects[id].isSelected) {
                        this.renderSelectionBox(objects[id], this.getLayerColor(id, false))
                    } else if (objects[id].isHovered) {
                        this.renderSelectionBox(objects[id], this.getLayerColor(id, true))
                    }
                }
            }
        }
        getLayerColor(objectId, isHovered)
        {
            const layer = this.canvas.layerManager.getLayerForObject(objectId);
            if (layer) {
                if (isHovered) {
                    return layer.color + "99"
                } else {
                    return layer.color
                }
            } else if (isHovered) {
                return style.selection.selectColor
            } else {
                return style.selection.hoverColor
            }
        }
        renderSelectionBox(object, strokeStyle)
        {
            const bb = object.computeBoundingBox();
            const w = style.selection.selectionBoxSideLength;
            const p = style.selection.selectionBoxPadding;
            const x1 = bb.x1 - p;
            const y1 = bb.y1 - p;
            const x2 = bb.x2 + p;
            const y2 = bb.y2 + p;
            this.plane.setStrokeStyle(strokeStyle);
            this.plane.beginPath();
            this.plane.moveTo({
                x: x1,
                y: y1 + w
            });
            this.plane.lineTo({
                x: x1,
                y: y1
            });
            this.plane.lineTo({
                x: x1 + w,
                y: y1
            });
            this.plane.moveTo({
                x: x2 - w,
                y: y1
            });
            this.plane.lineTo({
                x: x2,
                y: y1
            });
            this.plane.lineTo({
                x: x2,
                y: y1 + w
            });
            this.plane.moveTo({
                x: x2,
                y: y2 - w
            });
            this.plane.lineTo({
                x: x2,
                y: y2
            });
            this.plane.lineTo({
                x: x2 - w,
                y: y2
            });
            this.plane.moveTo({
                x: x1 + w,
                y: y2
            });
            this.plane.lineTo({
                x: x1,
                y: y2
            });
            this.plane.lineTo({
                x: x1,
                y: y2 - w
            });
            this.plane.setLineWidth(style.selection.selectionBoxLineWidth);
            this.plane.stroke()
        }
    }
}, function(module, exports) {
    module.exports = class DrawStep {
        constructor(name, args)
        {
            this.name = name;
            if (args !== undefined) {
                this.args = args instanceof Array ? args : [args]
            } else {
                this.args = []
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    module.exports = class ComponentGhost {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.ghostId = null
        }
        show(componentId)
        {
            const createTransition = this.canvas.app.objectCreator.getComponentCreateTransition(componentId);
            createTransition.data.position.x = -2e3;
            createTransition.data.position.y = -2e3;
            createTransition.data.opacity = .5;
            this.ghostId = createTransition.id;
            this.canvas.app.state.startTransientPhase();
            this.canvas.app.state.processTransaction(createTransition);
            this.canvas.mouseProjector.on(C.EVENTS.HALF_CELL_CHANGED, this.update, this);
            this.canvas.mouseControls.on("click", this.place, this);
            this.canvas.selectionManager.clearCurrentSelection();
            this.canvas.selectionManager.addObjectToSelection(this.canvas.app.objects.getById(this.ghostId))
        }
        remove()
        {
            this.end()
        }
        update(point)
        {
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.UPDATE,
                id: this.ghostId,
                data: {
                    position: point.getSerializable()
                }
            })
        }
        place()
        {
            const data = this.canvas.app.state.getStateForId(this.ghostId, true);
            data.opacity = this.canvas.app.userSettings.get("componentOpacity");
            this.canvas.app.state.endTransientPhase();
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.CREATE,
                type: C.TYPES.COMPONENT,
                id: this.canvas.app.state.generateId(),
                data: data
            });
            this.canvas.app.state.startTransientPhase()
        }
        end()
        {
            if (this.ghostId) {
                this.canvas.app.state.processTransaction({
                    action: C.ACTIONS.DELETE,
                    id: this.ghostId
                })
            }
            this.canvas.mouseProjector.off(C.EVENTS.HALF_CELL_CHANGED, this.update, this);
            this.canvas.mouseControls.off("click", this.place, this);
            this.ghostId = null;
            this.canvas.app.state.endTransientPhase()
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const config = __webpack_require__(1);
    const PixelObject = __webpack_require__(10);
    const AbstractPlane = __webpack_require__(22);
    const PixelPlaneInteractions = __webpack_require__(55);
    const PixelObjectRenderer = __webpack_require__(56);
    const PixelObjectImage = __webpack_require__(23);
    const PixelObjectLabel = __webpack_require__(57);
    module.exports = class PixelPlane {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.addType = null;
            this.creationInProgress = false;
            this.plane = new AbstractPlane(this.canvas, .005);
            this.plane.setLineCap("round");
            this.plane.setLineJoin("round");
            this.plane.enableTextBlending();
            this.interactions = new PixelPlaneInteractions(canvas);
            this.pixelObjectRenderer = new PixelObjectRenderer(canvas);
            this.createStateFn = null;
            if (document.fonts) {
                document.fonts.onloadingdone = this.onFontsLoaded.bind(this)
            }
            setTimeout(this.init.bind(this), 1)
        }
        init()
        {
            this.canvas.app.state.on("create-label", this.createPixelObject, this);
            this.canvas.app.state.on("delete-label", this.deletePixelObject, this);
            this.canvas.app.state.on("create-icon", this.createPixelObject, this);
            this.canvas.app.state.on("delete-icon", this.deletePixelObject, this);
            this.canvas.app.state.on("create-image", this.createPixelObject, this);
            this.canvas.app.state.on("delete-image", this.deletePixelObject, this);
            this.canvas.app.state.on("create-widget", this.createPixelObject, this);
            this.canvas.app.state.on("delete-widget", this.deletePixelObject, this)
        }
        startAddWidget(createStateFn)
        {
            this.createStateFn = createStateFn;
            this.addType = C.TYPES.WIDGET;
            this.interactions.showAddPosition(3, 2)
        }
        startAddLabel()
        {
            this.addType = C.TYPES.LABEL;
            this.interactions.showAddPosition(config.labelDefaultWidth, config.labelDefaultHeight)
        }
        startAddIcon()
        {
            this.addType = C.TYPES.ICON;
            this.interactions.showAddPosition(.5, .5)
        }
        startAddImage()
        {
            this.addType = C.TYPES.IMAGE;
            this.interactions.showAddPosition(3, 2)
        }
        stopAdd()
        {
            this.addType = null;
            this.interactions.endAdd()
        }
        onFontsLoaded(event)
        {
            this.plane.scheduleRender()
        }
        getPixelObjectForPoint(point)
        {
            const objects = this.canvas.app.objects.getAll();
            for (var id in objects) {
                if (objects[id] instanceof PixelObject && objects[id].boundingBox.containsPoint(point)) {
                    return objects[id]
                }
            }
            return null
        }
        createPixelObject(transaction)
        {
            var pixelObject;
            if (transaction.type === C.TYPES.WIDGET && this.canvas.widgetManager.isPixelWidget(transaction.data.widgetType)) {
                pixelObject = this.canvas.widgetManager.createWidget(transaction.id)
            } else if (transaction.type === C.TYPES.IMAGE) {
                pixelObject = new PixelObjectImage(this.canvas, transaction.id)
            } else if (transaction.type === C.TYPES.LABEL) {
                pixelObject = new PixelObjectLabel(this.canvas, transaction.id)
            } else {
                pixelObject = new PixelObject(this.canvas, transaction.id, transaction.type)
            }
            this.canvas.app.objects.add(pixelObject);
            if (this.creationInProgress) {
                if (!transaction.isTransient) {
                    this.canvas.app.interactionMode.endActiveMode();
                    this.creationInProgress = false
                }
                this.canvas.selectionManager.clearCurrentSelection();
                if (transaction.isTransient) {
                    this.canvas.selectionManager.addObjectToSelection(pixelObject)
                }
                requestAnimationFrame(() => {
                    const labelTextInput = document.querySelector('.label-settings input[type="text"]');
                    if (labelTextInput) {
                        labelTextInput.focus()
                    }
                })
            }
        }
        deletePixelObject(transaction)
        {
            this.canvas.app.objects.removeById(transaction.id)
        }
        createPixelObjectState(rectangle)
        {
            if (!this.addType) {
                return
            }
            this.creationInProgress = true;
            const data = {
                position: {
                    x: rectangle.x1,
                    y: rectangle.y1
                },
                dimensions: {
                    width: rectangle.width,
                    height: rectangle.height
                }
            };
            if (this.createStateFn) {
                this.createStateFn(data, this.canvas);
                this.createStateFn = null
            }
            if (this.addType === C.TYPES.LABEL) {
                data.color = this.canvas.app.userSettings.get("labelFontColor");
                data.fontSize = this.canvas.app.userSettings.get("labelFontSize");
                data.fontFamily = this.canvas.app.userSettings.get("labelFontFamily");
                data.fontStyle = this.canvas.app.userSettings.get("labelFontStyle");
                data.text = config.labelDefaultText;
                data.textAlign = this.canvas.app.userSettings.get("labelTextAlign");
                data.outlineColor = this.canvas.app.userSettings.get("labelOutlineColor");
                data.rotation = this.canvas.app.userSettings.get("labelRotation")
            } else if (this.addType === C.TYPES.ICON) {
                data.icon = this.canvas.app.userSettings.get("icon");
                data.color = this.canvas.app.userSettings.get("iconColor");
                data.fontSize = this.canvas.app.userSettings.get("iconFontSize");
                data.rotation = this.canvas.app.userSettings.get("iconRotation");
                data.outlineColor = this.canvas.app.userSettings.get("iconOutlineColor");
                data.outlineWidth = this.canvas.app.userSettings.get("iconOutlineWidth")
            } else if (this.addType === C.TYPES.IMAGE) {
                data.path = config.defaultImagePath;
                data.stretchToSize = this.canvas.app.userSettings.get("imageStretchToSize");
                data.rotation = this.canvas.app.userSettings.get("imageRotation")
            }
            const id = this.canvas.app.state.generateId();
            this.canvas.app.state.processTransaction({
                id: id,
                type: this.addType,
                action: C.ACTIONS.CREATE,
                data: data
            });
            return id
        }
    }
}, function(module, exports, __webpack_require__) {
    const Rectangle = __webpack_require__(3);
    const C = __webpack_require__(0);
    const config = __webpack_require__(1);
    const ICONS = __webpack_require__(11);
    module.exports = class PixelPlaneInteractions {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.highlightRectangle = new Rectangle(0, 0, 0, 0);
            this.highlight = false;
            this.currentId = null
        }
        showAddPosition(width, height)
        {
            this.highlightRectangle.setDimensions(width, height);
            this.canvas.app.state.startTransientPhase();
            this.currentId = this.canvas.pixelPlane.createPixelObjectState(this.highlightRectangle);
            this.canvas.mouseProjector.on(C.EVENTS.HALF_CELL_CHANGED, this.updateAddPosition, this);
            this.canvas.mouseControls.on("mouseup", this.onAddConfirmed, this)
        }
        updateAddPosition(point)
        {
            this.canvas.app.state.processTransaction({
                id: this.currentId,
                action: C.ACTIONS.UPDATE,
                data: {
                    position: point.getSerializable()
                }
            })
        }
        onAddConfirmed()
        {
            const data = this.canvas.app.state.getStateForId(this.currentId);
            this.endAdd();
            this.canvas.app.state.processTransaction({
                id: this.canvas.app.state.generateId(),
                action: C.ACTIONS.CREATE,
                type: this.canvas.pixelPlane.addType,
                data: data
            })
        }
        endAdd()
        {
            this.canvas.mouseProjector.off(C.EVENTS.HALF_CELL_CHANGED, this.updateAddPosition, this);
            this.canvas.mouseControls.off("mouseup", this.onAddConfirmed, this);
            if (this.currentId) {
                this.canvas.app.state.processTransaction({
                    id: this.currentId,
                    action: C.ACTIONS.DELETE
                })
            }
            this.currentId = null;
            this.canvas.app.state.endTransientPhase();
            this.canvas.interactionPlane.plane.scheduleRender()
        }
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    const styles = __webpack_require__(5);
    const ICONS = __webpack_require__(11);
    const Rectangle = __webpack_require__(3);
    const SOLID = "solid";
    const FONTSIZE_TO_LINEWIDTH = 15;
    module.exports = class PixelObjectRenderer {
        constructor(canvas)
        {
            this.canvas = canvas;
            setTimeout(this.init.bind(this), 1)
        }
        init()
        {
            this.canvas.interactionPlane.plane.on("render", this.renderInteractions, this);
            this.canvas.pixelPlane.plane.on("render", this.renderObjects, this, 2)
        }
        renderInteractions()
        {
            const objects = this.canvas.app.objects.getAll();
            for (var id in objects) {
                if ((objects[id].type === C.TYPES.IMAGE || objects[id].showResizeOnSelect) && objects[id].isSelected && objects[id].isEditable) {
                    this.renderImageResizeHandles(objects[id])
                }
            }
        }
        renderObjects()
        {
            var obj,
                id;
            for (id in this.canvas.app.state.data) {
                obj = this.canvas.app.state.data[id];
                if (!this.canvas.layerManager.isVisible(obj)) {
                    continue
                }
                if (obj.type === C.TYPES.LABEL) {
                    this.renderLabel(obj.data, id)
                } else if (obj.type === C.TYPES.ICON) {
                    this.renderIcon(obj.data, id)
                } else if (obj.type === C.TYPES.IMAGE) {
                    this.renderImage(obj.data, id)
                } else if (obj.type === C.TYPES.WIDGET) {
                    this.canvas.app.objects.getById(id).render(obj.data, id)
                } else if (obj.data.showMetaData === true) {
                    this.renderMetaData(obj.data, id)
                }
            }
        }
        setIconFont(data, plane)
        {
            plane = plane || this.canvas.pixelPlane.plane;
            if (ICONS[data.icon].style === SOLID) {
                plane.setFont(data.fontSize, '"Font Awesome 5 Free"', {
                    bold: true,
                    italic: false
                })
            } else {
                plane.setFont(data.fontSize, '"Font Awesome 5 Brands"', {
                    bold: false,
                    italic: false
                })
            }
        }
        renderMetaData(data, id)
        {
            const fontFamily = '"Open Sans",-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif';
            const rotationAxisIsX = Math.floor(data.metaDataRotation) % 3 === 0;
            const sizeOnGrid = canvas.app.objects.getById(id).model.sizeOnGrid;
            this.canvas.pixelPlane.plane.setTextAlign(data.metaDataTextAlign);
            var i = 1 - data.metaDataFontSize,
                x = data.position.x,
                y = data.position.y,
                w = sizeOnGrid.width,
                h = sizeOnGrid.height,
                o = 0,
                pos,
                key;
            if (data.metaDataTextAlign === "center") {
                o = .5
            } else if (data.metaDataTextAlign === "right") {
                o = 1
            }
            const dir = data.metaDataRotation ? Math.floor(data.metaDataRotation) : 0;
            if (dir === 1 || dir === 3) {
                i = 0
            }
            for (key in data.meta) {
                i += data.metaDataFontSize * (data.showMetaDataKeys ? 2 : 1.4);
                if (dir === 0) {
                    pos = {
                        x: x + w * o,
                        y: y + i
                    }
                } else if (dir === 1) {
                    pos = {
                        x: x - i,
                        y: y + h * o
                    }
                } else if (dir === 3) {
                    pos = {
                        x: x + 1 - o,
                        y: y - i
                    }
                } else if (dir === 4) {
                    pos = {
                        x: x + i,
                        y: y + 1 - o
                    }
                }
                if (data.showMetaDataKeys) {
                    this.canvas.pixelPlane.plane.setFillStyle("#666666");
                    this.canvas.pixelPlane.plane.setFont(data.metaDataFontSize * .6, fontFamily, {
                        bold: true,
                        italic: false
                    });
                    this.canvas.pixelPlane.plane.fillText(key, pos, data.metaDataRotation)
                }
                pos = {
                    x: pos.x,
                    y: pos.y
                };
                if (dir === 0) {
                    pos.y += data.metaDataFontSize
                } else if (dir === 1) {
                    pos.x += data.metaDataFontSize
                } else if (dir === 3) {
                    pos.y -= data.metaDataFontSize
                } else if (dir === 4) {
                    pos.x += data.metaDataFontSize
                }
                this.canvas.pixelPlane.plane.setFillStyle("#222222");
                this.canvas.pixelPlane.plane.setFont(data.metaDataFontSize, fontFamily, {
                    bold: true,
                    italic: false
                });
                this.canvas.pixelPlane.plane.fillText(data.meta[key], pos, data.metaDataRotation)
            }
        }
        renderLabel(data, id)
        {
            const obj = this.canvas.app.objects.getById(id);
            if (!obj) {
                return
            }
            this.canvas.pixelPlane.plane.setTextAlign(data.textAlign);
            this.canvas.pixelPlane.plane.setFont(data.fontSize, data.fontFamily, data.fontStyle);
            this.canvas.pixelPlane.plane.setFillStyle(data.color);
            const lines = data.text.split("\n");
            const lineHeight = data.fontSize * styles.label.lineHeight;
            const dir = Math.floor(data.rotation);
            var i,
                pos;
            if (data.outlineColor !== styles.transparentColor) {
                this.canvas.pixelPlane.plane.setLineWidth(data.outlineWidth);
                this.canvas.pixelPlane.plane.setStrokeStyle(data.outlineColor)
            }
            for (i = 0; i < lines.length; i++) {
                if (dir === 0) {
                    pos = {
                        x: data.position.x,
                        y: data.position.y + i * lineHeight
                    }
                } else if (dir === 1) {
                    pos = {
                        x: data.position.x - i * lineHeight,
                        y: data.position.y
                    }
                } else if (dir === 3) {
                    pos = {
                        x: data.position.x,
                        y: data.position.y - i * lineHeight
                    }
                } else if (dir === 4) {
                    pos = {
                        x: data.position.x + i * lineHeight,
                        y: data.position.y
                    }
                }
                if (data.outlineColor !== styles.transparentColor) {
                    this.canvas.pixelPlane.plane.strokeText(lines[i], pos, data.rotation, pos)
                }
                this.canvas.pixelPlane.plane.fillText(lines[i], pos, data.rotation, pos)
            }
            obj.computeBoundingBox(data, true)
        }
        renderIcon(data, id)
        {
            const obj = this.canvas.app.objects.getById(id);
            if (!obj) {
                return
            }
            const center = obj.computeBoundingBox().getCenter();
            center.x -= .01;
            center.y -= .01;
            this.setIconFont(data);
            this.canvas.pixelPlane.plane.setTextAlign("center");
            this.canvas.pixelPlane.plane.setFillStyle(data.color);
            if (data.outlineColor !== styles.transparentColor) {
                this.canvas.pixelPlane.plane.setLineWidth(data.outlineWidth);
                this.canvas.pixelPlane.plane.setStrokeStyle(data.outlineColor);
                this.canvas.pixelPlane.plane.strokeText(ICONS[data.icon].unicode, center, data.rotation, center)
            }
            this.canvas.pixelPlane.plane.fillText(ICONS[data.icon].unicode, center, data.rotation, center)
        }
        renderImage(data)
        {
            const srcImage = this.canvas.imageCache.getImage(data.path);
            var x,
                y,
                width,
                height,
                _x,
                _y,
                _width,
                _height;
            if (data.rotation % Math.PI === 0) {
                _width = data.dimensions.width;
                _height = data.dimensions.height;
                _x = data.position.x;
                _y = data.position.y
            } else {
                _width = data.dimensions.height;
                _height = data.dimensions.width;
                _x = data.position.x + data.dimensions.width / 2 - data.dimensions.height / 2;
                _y = data.position.y + data.dimensions.height / 2 - data.dimensions.width / 2
            }
            if (data.stretchToSize || srcImage === null) {
                x = _x;
                y = _y;
                width = _width;
                height = _height
            } else {
                if (srcImage.width / srcImage.height > _width / _height) {
                    width = _width;
                    height = _width / srcImage.width * srcImage.height;
                    x = _x;
                    y = _y + (_height - height) / 2
                } else {
                    height = _height;
                    width = _height / srcImage.height * srcImage.width;
                    x = _x + (_width - width) / 2;
                    y = _y
                }
            }
            if (srcImage === null) {
                this.canvas.pixelPlane.plane.setFillStyle("#CCC");
                this.canvas.pixelPlane.plane.fillRect(new Rectangle(x, y, x + width, y + height))
            } else {
                this.canvas.pixelPlane.plane.drawImage(srcImage, x, y, width, height, data.rotation)
            }
        }
        renderImageResizeHandles(img)
        {
            const bb = img.computeBoundingBox();
            const anchors = bb.getAnchors();
            this.canvas.interactionPlane.plane.setStrokeStyle(styles.themeColor);
            this.canvas.interactionPlane.plane.setLineWidth(.04);
            this.canvas.interactionPlane.plane.setLineDash([.1, .1]);
            this.canvas.interactionPlane.plane.strokeRect(bb);
            this.canvas.interactionPlane.plane.setLineDash([]);
            this.canvas.interactionPlane.plane.setFillStyle(styles.themeColor);
            for (var i = 0; i < anchors.length; i++) {
                this.canvas.interactionPlane.plane.drawCircle(anchors[i], .15, false, true)
            }
            if (img.hoveredAnchor && !img.selectedAnchor) {
                this.canvas.interactionPlane.plane.setFillStyle(styles.selection.hoverColor);
                this.canvas.interactionPlane.plane.drawCircle(img.hoveredAnchor, .2, false, true)
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const PixelObject = __webpack_require__(10);
    const C = __webpack_require__(0);
    const styles = __webpack_require__(5);
    const LEFT = "left";
    const CENTER = "center";
    const RIGHT = "right";
    const TOP = "top";
    const MIDDLE = "middle";
    const BOTTOM = "bottom";
    module.exports = class PixelObjectLabel extends PixelObject {
        constructor(canvas, id)
        {
            super(canvas, id, C.TYPES.LABEL);
            this.currentState = null
        }
        alignWith(pos, dir)
        {
            const data = this.canvas.app.state.getStateForId(this.id);
            const bb = this.computeBoundingBox(null, true);
            const rot = Math.floor(data.rotation);
            const halfLine = data.fontSize / 2;
            var x = data.position.x;
            var y = data.position.y;
            if (rot === 0) {
                if (dir === LEFT) {
                    y = pos.y
                } else if (dir === MIDDLE || dir === RIGHT) {
                    y = pos.y + halfLine
                } else if (dir === TOP || dir === CENTER || dir === BOTTOM) {
                    if (data.textAlign === LEFT) {
                        x = pos.x
                    } else if (data.textAlign === CENTER) {
                        x = pos.x + bb.width / 2
                    } else if (data.textAlign === RIGHT) {
                        x = pos.x + bb.width
                    }
                }
            } else if (rot === 3) {
                if (dir === RIGHT || dir === MIDDLE || dir === LEFT) {
                    y = pos.y + bb.height - halfLine
                }
                if (dir === TOP || dir === CENTER || dir === BOTTOM) {
                    if (data.textAlign === LEFT) {
                        x = pos.x + bb.width
                    } else if (data.textAlign === CENTER) {
                        x = pos.x + bb.width / 2
                    } else if (data.textAlign === RIGHT) {
                        x = pos.x
                    }
                }
            } else if (rot === 1) {
                if (dir === RIGHT || dir === MIDDLE || dir === LEFT) {
                    if (data.textAlign === LEFT) {
                        y = pos.y
                    } else if (data.textAlign === CENTER) {
                        y = pos.y + bb.height / 2
                    } else if (data.textAlign === RIGHT) {
                        y = pos.y + bb.height
                    }
                }
                if (dir === TOP || dir === CENTER || dir === BOTTOM) {
                    x = pos.x + bb.width - halfLine
                }
            } else if (rot === 4) {
                if (dir === RIGHT || dir === MIDDLE || dir === LEFT) {
                    if (data.textAlign === LEFT) {
                        y = pos.y + bb.height
                    } else if (data.textAlign === CENTER) {
                        y = pos.y + bb.height / 2
                    } else if (data.textAlign === RIGHT) {
                        y = pos.y
                    }
                }
                if (dir === TOP || dir === CENTER || dir === BOTTOM) {
                    x = pos.x + halfLine
                }
            }
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.UPDATE,
                id: this.id,
                data: {
                    position: {
                        x: x,
                        y: y
                    }
                }
            })
        }
        computeBoundingBox(data, force)
        {
            if (!this.isPristine && !force) {
                return this.boundingBox
            }
            if (!data) {
                data = this.canvas.app.state.getStateForId(this.id)
            }
            const lines = data.text.split("\n");
            const lineHeight = data.fontSize * styles.label.lineHeight;
            const rot = Math.floor(data.rotation);
            var height = lineHeight * lines.length - (lineHeight - data.fontSize);
            var textWidth,
                width = 0,
                i,
                x,
                y,
                x1,
                y1,
                x2,
                y2,
                xOffset = 0,
                yOffset = 0;
            for (i = 0; i < lines.length; i++) {
                textWidth = this.canvas.pixelPlane.plane.measureText(lines[i]);
                if (textWidth > width) {
                    width = textWidth
                }
            }
            if (rot === 0 || rot === 3) {
                x = data.position.x;
                y = data.position.y - data.fontSize / 2
            } else {
                x = data.position.x + data.fontSize / 2;
                y = data.position.y
            }
            if (rot === 0) {
                x1 = x;
                y1 = y;
                x2 = x + width;
                y2 = y + height;
                xOffset = -1
            } else if (rot === 3) {
                x1 = x - width;
                y1 = y - height;
                x2 = x;
                y2 = y;
                y1 += data.fontSize;
                y2 += data.fontSize;
                xOffset = 1
            } else if (rot === 1) {
                x1 = x - height;
                y1 = y + width;
                x2 = x;
                y2 = y;
                yOffset = -1
            } else if (rot === 4) {
                x1 = x + height;
                y1 = y - width;
                x2 = x;
                y2 = y;
                x1 -= data.fontSize;
                x2 -= data.fontSize;
                yOffset = 1
            }
            if (data.textAlign === CENTER) {
                const halfWidth = width / 2;
                x1 += halfWidth * xOffset;
                x2 += halfWidth * xOffset;
                y1 += halfWidth * yOffset;
                y2 += halfWidth * yOffset
            } else if (data.textAlign === RIGHT) {
                x1 += width * xOffset;
                x2 += width * xOffset;
                y1 += width * yOffset;
                y2 += width * yOffset
            }
            this.boundingBox.set(x1, y1, x2, y2);
            this.isPristine = false;
            return this.boundingBox
        }
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    const LineGroup = __webpack_require__(59);
    const LineRenderer = __webpack_require__(61);
    const AreaCreator = __webpack_require__(62);
    const AreaRenderer = __webpack_require__(63);
    const AreaManager = __webpack_require__(64);
    const lineTools = __webpack_require__(7);
    const tools = __webpack_require__(4);
    module.exports = class LinePlane {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.areaCreator = new AreaCreator(this.canvas);
            this.areaRenderer = new AreaRenderer(this.canvas);
            this.areaManager = new AreaManager(this.canvas);
            this.renderer = new LineRenderer(this.canvas);
            this.activeLineGroup = null;
            this.currentTargetPoint = null;
            this.createInProgress = false;
            this.boundingBoxes = [];
            setTimeout(this.init.bind(this), 1)
        }
        init()
        {
            this.canvas.app.state.on("create-line-group", this.onLineGroupCreated, this);
            this.canvas.app.state.on("update-line-group", this.onLineGroupUpdated, this);
            this.canvas.app.state.on("delete-line-group", this.onLineGroupDeleted, this);
            this.areaManager.init()
        }
        start(lineGroup)
        {
            this.currentTargetPoint = this.canvas.mouseProjector.halfCellIntersectionPos.clone();
            this.activeLineGroup = lineGroup || null;
            setTimeout(() => {
                this.canvas.mouseControls.on("mouseup", this.onMouseUp, this, 3);
                this.canvas.mouseProjector.on(C.EVENTS.HALF_CELL_INTERSECTION_CHANGED, this.onMouseMove, this)
            }, 0)
        }
        stop()
        {
            this.canvas.mouseControls.off("mouseup", this.onMouseUp, this);
            this.canvas.mouseProjector.off(C.EVENTS.HALF_CELL_INTERSECTION_CHANGED, this.onMouseMove, this);
            if (this.activeLineGroup && this.activeLineGroup.subparts) {
                this.activeLineGroup.subparts.reset(true)
            }
            this.currentTargetPoint = null;
            this.activeLineGroup = null;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        startArea()
        {
            this.areaCreator.showAreaPreview()
        }
        stopArea()
        {
            this.areaCreator.endAreaPreview()
        }
        createLineGroup()
        {
            this.createInProgress = true;
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.CREATE,
                type: C.TYPES.LINE_GROUP,
                id: canvas.app.state.generateId(),
                data: {
                    strokeStyle: this.canvas.app.userSettings.get("lineColor"),
                    lineWidth: this.canvas.app.userSettings.get("lineWidth"),
                    lineDash: this.canvas.app.userSettings.get("lineDash"),
                    arrowAnchorIndices: {},
                    anchors: [],
                    lines: []
                }
            })
        }
        onMouseUp()
        {
            if (this.activeLineGroup === null) {
                this.createLineGroup()
            }
            const anchorPoint = this.getAnchorPointAtCoordinates(this.currentTargetPoint);
            if (anchorPoint) {
                this.activeLineGroup.connectToAnchorPoint(anchorPoint)
            } else {
                this.activeLineGroup.addAnchorPointAndLineSegment({
                    type: C.ANCHOR_TYPES.STANDALONE,
                    x: this.currentTargetPoint.x,
                    y: this.currentTargetPoint.y
                })
            }
        }
        getAnchorPointAtCoordinates(point)
        {
            var id,
                i,
                anchorPoint;
            const lineGroups = this.canvas.app.state.getAllOfType(C.TYPES.LINE_GROUP);
            for (id in lineGroups) {
                for (i = 0; i < lineGroups[id].data.anchors.length; i++) {
                    anchorPoint = lineTools.toAnchorPoint(lineGroups[id].data.anchors[i]);
                    if (anchorPoint && point.equals(anchorPoint)) {
                        return anchorPoint
                    }
                }
            }
            const components = this.canvas.app.objects.getAllOfType(C.TYPES.COMPONENT);
            for (id in components) {
                for (i = 0; i < components[id].anchorPoints.anchors.length; i++) {
                    anchorPoint = lineTools.toAnchorPoint(components[id].anchorPoints.anchors[i]);
                    if (point.equals(anchorPoint)) {
                        return {
                            type: anchorPoint.type,
                            index: anchorPoint.index,
                            id: anchorPoint.id
                        }
                    }
                }
            }
            return null
        }
        onMouseMove(point)
        {
            this.currentTargetPoint = point;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        deleteAnchorPointsForObjectId(objectId)
        {
            const lineGroups = this.canvas.app.state.getAllOfType(C.TYPES.LINE_GROUP);
            var lineGroup,
                id,
                i;
            for (id in lineGroups) {
                for (i = 0; i < lineGroups[id].data.anchors.length; i++) {
                    if (lineGroups[id].data.anchors[i] === null) {
                        continue
                    }
                    if (lineGroups[id].data.anchors[i].type === C.ANCHOR_TYPES.OBJECT && lineGroups[id].data.anchors[i].id === objectId) {
                        lineGroup = this.canvas.app.objects.getById(id);
                        if (lineGroup) {
                            lineGroup.subparts.setSelected(i, C.SUB_PART_TYPES.ANCHOR_POINT);
                            lineGroup.subparts.deleteSelectedSubPart(true)
                        }
                    }
                }
            }
        }
        onLineGroupCreated(lineGroupState)
        {
            const newLineGroup = new LineGroup(lineGroupState.id, this.canvas);
            this.canvas.app.objects.add(newLineGroup);
            if (this.createInProgress) {
                this.activeLineGroup = newLineGroup;
                this.createInProgress = false
            }
            this.drawAll()
        }
        onLineGroupUpdated(transaction)
        {
            const lineGroup = this.canvas.app.objects.getById(transaction.id);
            if (lineGroup) {
                lineGroup.subparts.reconcile()
            }
            this.drawAll()
        }
        drawAll()
        {
            this.canvas.interactionPlane.plane.scheduleRender();
            this.canvas.pixelPlane.plane.scheduleRender()
        }
        onLineGroupDeleted(transaction)
        {
            if (this.activeLineGroup && this.activeLineGroup.id === transaction.id) {
                this.activeLineGroup = null
            }
            this.canvas.app.objects.removeById(transaction.id);
            this.drawAll()
        }
        getLineObjectForPoint(point)
        {
            var minDistance = Infinity,
                closestLineGroup = null,
                distance,
                id;
            const lineObjects = tools.mergeMaps(this.canvas.app.objects.getAllOfType(C.TYPES.LINE_GROUP), this.canvas.app.objects.getAllOfType(C.TYPES.AREA));
            for (id in lineObjects) {
                distance = lineObjects[id].lineFinder.getClosestLineSegment(point).distance;
                if (distance < config.lineSelectionProximity && distance < minDistance) {
                    minDistance = distance;
                    closestLineGroup = lineObjects[id]
                }
            }
            return closestLineGroup
        }
        computeBoundingBoxes()
        {
            return []
        }
    }
}, function(module, exports, __webpack_require__) {
    const styles = __webpack_require__(5);
    const config = __webpack_require__(1);
    const LineSubparts = __webpack_require__(60);
    const LineFinder = __webpack_require__(24);
    const C = __webpack_require__(0);
    const lineTools = __webpack_require__(7);
    const Rectangle = __webpack_require__(3);
    const tools = __webpack_require__(4);
    module.exports = class LineGroup {
        constructor(id, canvas)
        {
            this.id = id;
            this.canvas = canvas;
            this.isLineGroup = true;
            this.isSelected = false;
            this.isSelectable = true;
            this.isHovered = false;
            this.isHoverable = true;
            this.isDestroyed = false;
            this.isEditable = false;
            this.subparts = new LineSubparts(this);
            this.lineFinder = new LineFinder(this);
            this.anchorPointWasMoved = false;
            this.type = C.TYPES.LINE_GROUP;
            this.currentState = null
        }
        saveState(data, isTransient)
        {
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.UPDATE,
                id: this.id,
                isTransient: isTransient,
                data: data
            })
        }
        delete()
        {
            if (this.isDestroyed) {
                return
            }
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.DELETE,
                id: this.id
            })
        }
        destroy()
        {
            this.canvas.mouseControls.off("mouseup", this.onMouseUp, this);
            this.canvas.mouseControls.off("mousedown", this.onMouseDown, this);
            this.canvas.mouseControls.off("dblclick", this.onDblClick, this);
            this.canvas.mouseProjector.off(C.EVENTS.HALF_CELL_INTERSECTION_CHANGED, this.onMouseMove, this);
            this.subparts.destroy();
            this.lineFinder.destroy();
            this.id = null;
            this.canvas = null;
            this.isDestroyed = true
        }
        onHover(event, planeIntersectionPoint)
        {
            if (this.isSelected === false) {
                return
            }
            this.subparts.reset();
            this.lineFinder.setClosestSubPartHovered(planeIntersectionPoint);
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        storeCurrentPosition()
        {
            this.currentState = this.canvas.app.state.getStateForId(this.id, true)
        }
        setPositionDelta(deltaX, deltaY, isTransient)
        {
            const newState = tools.deepClone(this.currentState);
            var i,
                anchor;
            for (i = 0; i < newState.anchors.length; i++) {
                anchor = newState.anchors[i];
                if (anchor && anchor.type === C.ANCHOR_TYPES.STANDALONE) {
                    anchor.x += deltaX;
                    anchor.y += deltaY
                }
            }
            this.saveState(newState, isTransient)
        }
        connectToAnchorPoint(_anchorPoint)
        {
            const data = this.canvas.app.state.getStateForId(this.id, true);
            const anchorPoint = lineTools.toAnchorPoint(_anchorPoint);
            var anchorPointIndex = null,
                i,
                currentAnchor;
            for (i = 0; i < data.anchors.length; i++) {
                if (data.anchors[i] === null) {
                    continue
                }
                currentAnchor = lineTools.toAnchorPoint(data.anchors[i]);
                if (currentAnchor.x === anchorPoint.x && currentAnchor.y === anchorPoint.y) {
                    anchorPointIndex = i;
                    break
                }
            }
            if (anchorPointIndex === null) {
                this.addAnchorPointAndLineSegment(anchorPoint)
            } else if (typeof this.subparts.selectedSubPartIndex === "number") {
                data.lines.push([this.subparts.selectedSubPartIndex, anchorPointIndex]);
                this.subparts.setSelected(anchorPointIndex, C.SUB_PART_TYPES.ANCHOR_POINT);
                this.saveState(data)
            }
        }
        addAnchorPointAndLineSegment(anchorPoint)
        {
            const data = this.canvas.app.state.getStateForId(this.id, true);
            data.anchors.push(anchorPoint);
            const newAnchorIndex = data.anchors.length - 1;
            if (this.subparts.selectedSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT && typeof this.subparts.selectedSubPartIndex === "number") {
                data.lines.push([this.subparts.selectedSubPartIndex, newAnchorIndex])
            }
            this.subparts.setSelected(newAnchorIndex, C.SUB_PART_TYPES.ANCHOR_POINT);
            this.saveState(data)
        }
        getSelectedAnchor()
        {
            if (this.subparts.selectedSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT) {
                return this.canvas.app.state.getStateForId(this.id).anchors[this.subparts.selectedSubPartIndex]
            } else {
                return null
            }
        }
        showHover()
        {
            this.isHovered = true;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        hideHover()
        {
            this.isHovered = false;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        showSelected(isMultiSelection)
        {
            this.isSelected = true;
            this.isHoverable = false;
            this.isEditable = !isMultiSelection;
            if (this.isEditable) {
                this.canvas.mouseControls.on("mouseup", this.onMouseUp, this, 0);
                this.canvas.mouseControls.on("mousedown", this.onMouseDown, this, 0);
                this.canvas.mouseControls.on("dblclick", this.onDblClick, this)
            }
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        hideSelected()
        {
            if (this.isSelected && this.canvas.app.interactionMode.getActiveMode() === "draw-lines") {
                return false
            }
            this.isEditable = false;
            this.isSelected = false;
            this.isHoverable = !this.isLocked;
            this.isHovered = false;
            this.subparts.reset(true);
            this.canvas.mouseControls.off("mouseup", this.onMouseUp, this);
            this.canvas.mouseControls.off("mousedown", this.onMouseDown, this);
            this.canvas.mouseControls.off("dblclick", this.onDblClick, this);
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        onDblClick(event)
        {
            if (this.subparts.hoveredSubPartType !== C.SUB_PART_TYPES.LINE_SEGMENT) {
                return
            }
            const line = this.subparts.getHoveredSubPart();
            const point = this.canvas.mouseProjector.getPlaneCoordinatesForMouseEvent(event, C.EVENTS.HALF_CELL_INTERSECTION_CHANGED);
            this.subparts.splitLineAtPoint(line, point)
        }
        onMouseUp()
        {
            this.canvas.interactionPlane.hidePositionIndicator();
            if (this.canvas.app.interactionMode.getActiveMode() === "draw-lines") {
                return
            }
            this.canvas.mouseProjector.off(C.EVENTS.HALF_CELL_INTERSECTION_CHANGED, this.onMouseMove, this);
            if (this.anchorPointWasMoved === true) {
                const data = this.canvas.app.state.getStateForId(this.id, true);
                this.saveState(data);
                return
            }
            if (this.subparts.selectedSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT) {
                this.canvas.app.interactionMode.set("draw-lines", this)
            }
        }
        onMouseDown()
        {
            if (this.canvas.app.interactionMode.getActiveMode() === "draw-lines") {
                return
            }
            this.anchorPointWasMoved = false;
            this.canvas.mouseProjector.on(C.EVENTS.HALF_CELL_INTERSECTION_CHANGED, this.onMouseMove, this);
            if (this.subparts.hoveredSubPartType !== null) {
                this.subparts.selectHoveredSubPart();
                this.canvas.interactionPlane.drawPositionIndicator(this.canvas.app.state.getStateForId(this.id).anchors[this.subparts.selectedSubPartIndex]);
                this.canvas.interactionPlane.plane.scheduleRender();
                return false
            }
        }
        onMouseMove(point, event)
        {
            if (this.subparts.selectedSubPartType !== C.SUB_PART_TYPES.ANCHOR_POINT) {
                return
            }
            const data = this.canvas.app.state.getStateForId(this.id, true);
            this.anchorPointWasMoved = true;
            data.anchors[this.subparts.selectedSubPartIndex].x = point.x;
            data.anchors[this.subparts.selectedSubPartIndex].y = point.y;
            this.canvas.interactionPlane.drawPositionIndicator(point);
            this.saveState(data, true)
        }
        computeBoundingBox()
        {
            return lineTools.computeBoundingBox(this.canvas.app.state.getStateForId(this.id))
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const EventEmitter = __webpack_require__(2);
    module.exports = class LineSubparts extends EventEmitter {
        constructor(lineGroup)
        {
            super();
            this.lineGroup = lineGroup;
            this.hoveredSubPartIndex = null;
            this.hoveredSubPartType = null;
            this.selectedSubPartIndex = null;
            this.selectedSubPartType = null;
            this.lineGroup.canvas.keyboardControls.on("delete", this.deleteSelectedSubPart, this, 0)
        }
        destroy()
        {
            this.lineGroup.canvas.keyboardControls.off("delete", this.deleteSelectedSubPart, this);
            this.lineGroup = null
        }
        setHovered(index, type)
        {
            this.hoveredSubPartIndex = index;
            this.hoveredSubPartType = type
        }
        setSelected(index, type)
        {
            this.selectedSubPartIndex = index;
            this.selectedSubPartType = type;
            this.emit("selectedSubPartChanged")
        }
        selectHoveredSubPart()
        {
            this.selectedSubPartIndex = this.hoveredSubPartIndex;
            this.selectedSubPartType = this.hoveredSubPartType;
            this.emit("selectedSubPartChanged")
        }
        reconcile()
        {
            const data = this.lineGroup.canvas.app.state.getStateForId(this.lineGroup.id);
            if (this.selectedSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT && !data.anchors[this.selectedSubPartIndex] || this.selectedSubPartType === C.SUB_PART_TYPES.LINE_SEGMENT && !data.lines[this.selectedSubPartIndex]) {
                this.selectedSubPartIndex = null;
                this.selectedSubPartType = null
            }
            if (this.hoveredSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT && !data.anchors[this.hoveredSubPartIndex] || this.hoveredSubPartType === C.SUB_PART_TYPES.LINE_SEGMENT && !data.lines[this.hoveredSubPartIndex]) {
                this.hoveredSubPartIndex = null;
                this.hoveredSubPartType = null
            }
        }
        reset(resetSelection)
        {
            this.hoveredSubPartIndex = null;
            this.hoveredSubPartType = null;
            if (resetSelection) {
                this.selectedSubPartIndex = null;
                this.selectedSubPartType = null
            }
        }
        getHoveredSubPart()
        {
            const data = this.lineGroup.canvas.app.state.getStateForId(this.lineGroup.id);
            if (this.hoveredSubPartType === C.SUB_PART_TYPES.LINE_SEGMENT) {
                return data.lines[this.hoveredSubPartIndex]
            } else if (this.hoveredSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT) {
                return data.anchors[this.hoveredSubPartIndex]
            } else {
                return null
            }
        }
        splitLineAtPoint(line, point)
        {
            const data = this.lineGroup.canvas.app.state.getStateForId(this.lineGroup.id, true);
            data.anchors.push({
                x: point.x,
                y: point.y,
                type: C.ANCHOR_TYPES.STANDALONE
            });
            const newAnchorIndex = data.anchors.length - 1;
            data.lines.splice(this.hoveredSubPartIndex, 1);
            data.lines.push([line[0], newAnchorIndex]);
            data.lines.push([newAnchorIndex, line[1]]);
            this.selectedSubPartType = C.SUB_PART_TYPES.ANCHOR_POINT;
            this.selectedSubPartIndex = newAnchorIndex;
            this.lineGroup.saveState(data)
        }
        deleteSelectedSubPart(force)
        {
            if (!force) {
                if (this.selectedSubPartType === null || this.lineGroup.isSelected === false) {
                    return
                }
                if (this.lineGroup.canvas.selectionManager.selectedObjects.length > 1) {
                    return
                }
            }
            const selectedSubPartType = this.selectedSubPartType;
            const data = this.lineGroup.canvas.app.state.getStateForId(this.lineGroup.id, true);
            if (selectedSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT) {
                this.deleteAnchorPoint(this.selectedSubPartIndex, data)
            } else if (selectedSubPartType === C.SUB_PART_TYPES.LINE_SEGMENT) {
                this.deleteLineSegment(this.selectedSubPartIndex, data)
            }
            this.selectedSubPartIndex = null;
            this.selectedSubPartType = null;
            if (data.lines.length === 0) {
                this.lineGroup.delete();
                return false
            } else if (selectedSubPartType !== null) {
                this.lineGroup.saveState(data);
                return false
            }
        }
        deleteAnchorPoint(index, data)
        {
            data.anchors[index] = null;
            var i = data.lines.length;
            while (i--) {
                if (data.lines[i][0] === index || data.lines[i][1] === index) {
                    this.deleteLineSegment(i, data)
                }
            }
            if (this.selectedSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT && this.selectedSubPartIndex === index) {
                this.selectedSubPartIndex = null;
                this.selectedSubPartType = null
            }
            if (this.hoveredSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT && this.hoveredSubPartIndex === index) {
                this.hoveredSubPartIndex = null;
                this.hoveredSubPartType = null
            }
            if (this.lineGroup.canvas.app.interactionMode.getActiveMode() === "draw-lines") {
                this.lineGroup.canvas.app.interactionMode.endActiveMode()
            }
        }
        deleteLineSegment(index, data)
        {
            data.lines.splice(index, 1);
            var activeAnchorPointIndices = [],
                i;
            for (i = 0; i < data.lines.length; i++) {
                activeAnchorPointIndices = activeAnchorPointIndices.concat(data.lines[i])
            }
            for (i = 0; i < data.anchors.length; i++) {
                if (activeAnchorPointIndices.indexOf(i) === -1) {
                    data.anchors[i] = null
                }
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const styles = __webpack_require__(5);
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    const lineTools = __webpack_require__(7);
    module.exports = class LineRenderer {
        constructor(canvas)
        {
            this.canvas = canvas;
            setTimeout(this.init.bind(this), 0)
        }
        init()
        {
            this.canvas.interactionPlane.plane.on("render", this.drawInteractions, this, 0);
            this.canvas.pixelPlane.plane.on("render", this.drawLines, this, 1)
        }
        drawLines()
        {
            const lineGroups = this.canvas.layerManager.removeInvisible(this.canvas.app.state.getAllOfType(C.TYPES.LINE_GROUP));
            for (var id in lineGroups) {
                this.drawLinesForGroup(lineGroups[id], lineGroups[id].data.lines, this.canvas.pixelPlane.plane, lineGroups[id].data.strokeStyle, lineGroups[id].data.lineWidth, lineGroups[id].data.lineDash);
                this.drawArrowsForGroup(lineGroups[id].data)
            }
        }
        drawInteractions()
        {
            const lineGroups = this.canvas.layerManager.removeInvisible(this.canvas.app.objects.getAllOfType(C.TYPES.LINE_GROUP));
            for (var id in lineGroups) {
                this.drawInteractionsForGroup(id, lineGroups[id])
            }
            if (canvas.app.interactionMode.getActiveMode() === "draw-lines") {
                this.drawObjectAnchorPoints();
                this.drawLineHelper()
            }
        }
        drawObjectAnchorPoints()
        {
            const components = this.canvas.app.objects.getAllOfType(C.TYPES.COMPONENT);
            if (!components || components.length === 0) {
                return
            }
            this.canvas.interactionPlane.plane.setFillStyle(styles.objectAnchorPoint.color);
            var id,
                j;
            for (id in components) {
                for (j = 0; j < components[id].anchorPoints.anchors.length; j++) {
                    this.canvas.interactionPlane.plane.drawCircle(components[id].anchorPoints.anchors[j], styles.objectAnchorPoint.radius, false, true)
                }
            }
        }
        drawLineHelper()
        {
            this.canvas.interactionPlane.plane.setLineWidth(this.canvas.app.userSettings.get("lineWidth"));
            this.canvas.interactionPlane.plane.setStrokeStyle(this.canvas.app.userSettings.get("lineColor"));
            if (this.canvas.linePlane.currentTargetPoint) {
                this.canvas.interactionPlane.plane.setLineDash(styles.lineHelper.lineDash);
                this.canvas.interactionPlane.plane.setLineWidth(styles.lineHelper.lineWidth);
                this.canvas.interactionPlane.plane.drawCircle(this.canvas.linePlane.currentTargetPoint, styles.lineHelper.radius, true, false);
                this.canvas.interactionPlane.plane.setLineDash([])
            }
            if (!this.canvas.linePlane.activeLineGroup) {
                return
            }
            if (this.canvas.linePlane.activeLineGroup) {
                const data = this.canvas.app.state.getStateForId(this.canvas.linePlane.activeLineGroup.id);
                this.canvas.interactionPlane.plane.setStrokeStyle(data.strokeStyle);
                this.canvas.interactionPlane.plane.setLineWidth(data.lineWidth)
            }
            const selectedAnchor = this.canvas.linePlane.activeLineGroup.getSelectedAnchor();
            if (selectedAnchor && this.canvas.linePlane.currentTargetPoint) {
                this.canvas.interactionPlane.plane.beginPath();
                this.canvas.interactionPlane.plane.moveTo(lineTools.toAnchorPoint(selectedAnchor));
                this.canvas.interactionPlane.plane.lineTo(this.canvas.linePlane.currentTargetPoint);
                this.canvas.interactionPlane.plane.stroke()
            }
        }
        drawLinesForGroup(group, lines, plane, style, width, lineDash)
        {
            const data = group.id ? this.canvas.app.state.getStateForId(group.id) : group.data;
            const arrowWidth = data.lineWidth * 5;
            var i,
                anchorA = null,
                anchorB = null;
            plane.setStrokeStyle(style);
            plane.setFillStyle(style);
            plane.setLineWidth(width);
            if (lineDash) {
                plane.setLineDash(styles.lineDrawing.lineDash[lineDash])
            }
            plane.beginPath();
            for (i = 0; i < lines.length; i++) {
                anchorA = lineTools.toAnchorPoint(data.anchors[lines[i][0]]);
                if (data.arrowAnchorIndices[lines[i][0]]) {
                    anchorA = this.adjustForArrowHead(anchorA, lineTools.toAnchorPoint(data.anchors[lines[i][1]]), arrowWidth)
                }
                if (!anchorB || (anchorB.x !== anchorA.x || anchorB.y !== anchorA.y)) {
                    plane.moveTo(anchorA)
                }
                anchorB = lineTools.toAnchorPoint(data.anchors[lines[i][1]]);
                if (data.arrowAnchorIndices[lines[i][1]]) {
                    anchorB = this.adjustForArrowHead(anchorB, anchorA, arrowWidth)
                }
                plane.lineTo(anchorB)
            }
            plane.stroke();
            plane.setLineDash([])
        }
        drawArrowsForGroup(data)
        {
            for (var i = 0; i < data.lines.length; i++) {
                if (data.arrowAnchorIndices[data.lines[i][0]]) {
                    this.drawArrow(lineTools.toAnchorPoint(data.anchors[data.lines[i][0]]), lineTools.toAnchorPoint(data.anchors[data.lines[i][1]]), data.lineWidth * 5)
                }
                if (data.arrowAnchorIndices[data.lines[i][1]]) {
                    this.drawArrow(lineTools.toAnchorPoint(data.anchors[data.lines[i][1]]), lineTools.toAnchorPoint(data.anchors[data.lines[i][0]]), data.lineWidth * 5)
                }
            }
        }
        adjustForArrowHead(pa, pb, arrowWidth)
        {
            const angle = Math.atan2(pa.y - pb.y, pa.x - pb.x);
            const x1 = pa.x - arrowWidth * Math.cos(angle - Math.PI / 6);
            const y1 = pa.y - arrowWidth * Math.sin(angle - Math.PI / 6);
            const x2 = pa.x - arrowWidth * Math.cos(angle + Math.PI / 6);
            const y2 = pa.y - arrowWidth * Math.sin(angle + Math.PI / 6);
            return {
                x: (x1 + x2) / 2,
                y: (y1 + y2) / 2
            }
        }
        drawArrow(pa, pb, arrowWidth)
        {
            var angle = Math.atan2(pa.y - pb.y, pa.x - pb.x);
            const plane = this.canvas.pixelPlane.plane;
            plane.beginPath();
            plane.moveTo(pa);
            plane.lineTo({
                x: pa.x - arrowWidth * Math.cos(angle - Math.PI / 6),
                y: pa.y - arrowWidth * Math.sin(angle - Math.PI / 6)
            });
            plane.lineTo({
                x: pa.x - arrowWidth * Math.cos(angle + Math.PI / 6),
                y: pa.y - arrowWidth * Math.sin(angle + Math.PI / 6)
            });
            plane.closePath();
            plane.fill()
        }
        drawSubparts(group, hoverStyle, hoverWidth)
        {
            const data = this.canvas.app.state.getStateForId(group.id);
            if (group.subparts.hoveredSubPartType === C.SUB_PART_TYPES.LINE_SEGMENT) {
                this.drawLinesForGroup(group, [data.lines[group.subparts.hoveredSubPartIndex]], this.canvas.interactionPlane.plane, hoverStyle, hoverWidth)
            }
            if (group.subparts.selectedSubPartType === C.SUB_PART_TYPES.LINE_SEGMENT) {
                this.drawLinesForGroup(group, [data.lines[group.subparts.selectedSubPartIndex]], this.canvas.interactionPlane.plane, hoverStyle, hoverWidth)
            }
            if (group.subparts.hoveredSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT) {
                this.canvas.interactionPlane.plane.setFillStyle(hoverStyle);
                this.canvas.interactionPlane.plane.drawCircle(lineTools.toAnchorPoint(data.anchors[group.subparts.hoveredSubPartIndex]), data.lineWidth + styles.lineDrawing.anchorPointToLineWidthOffset * 2, false, true)
            }
            if (group.subparts.selectedSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT) {
                this.canvas.interactionPlane.plane.setFillStyle(hoverStyle);
                this.canvas.interactionPlane.plane.drawCircle(lineTools.toAnchorPoint(data.anchors[group.subparts.selectedSubPartIndex]), data.lineWidth + styles.lineDrawing.anchorPointToLineWidthOffset * 2, false, true)
            }
        }
        drawAnchorPoints(group)
        {
            const data = this.canvas.app.state.getStateForId(group.id);
            this.canvas.interactionPlane.plane.setFillStyle(data.strokeStyle.substring(0, 7) + styles.lineDrawing.anchorPointOpacity);
            this.canvas.interactionPlane.plane.setStrokeStyle(data.strokeStyle);
            this.canvas.interactionPlane.plane.setLineWidth(data.lineWidth);
            for (var i = 0; i < data.anchors.length; i++) {
                if (data.anchors[i] === null) {
                    continue
                }
                if (data.anchors[i].type === C.ANCHOR_TYPES.STANDALONE) {
                    this.canvas.interactionPlane.plane.drawCircle(lineTools.toAnchorPoint(data.anchors[i]), data.lineWidth + styles.lineDrawing.anchorPointToLineWidthOffset, false, true)
                } else if (data.anchors[i].type === C.ANCHOR_TYPES.OBJECT) {
                    this.canvas.interactionPlane.plane.setLineWidth(data.lineWidth);
                    this.canvas.interactionPlane.plane.drawCircle(lineTools.toAnchorPoint(data.anchors[i]), data.lineWidth * 3.5, true, false);
                    this.canvas.interactionPlane.plane.drawCircle(lineTools.toAnchorPoint(data.anchors[i]), data.lineWidth * 2, false, true)
                }
            }
        }
        drawInteractionsForGroup(id, group)
        {
            const data = this.canvas.app.state.getStateForId(id);
            const hoverStyle = data.strokeStyle.substring(0, 7) + styles.lineDrawing.hoverHighlightOpacity;
            const hoverWidth = data.lineWidth + styles.lineDrawing.hoverHighlightWidth;
            if (group.isSelected && group.isEditable || canvas.app.interactionMode.getActiveMode() === "draw-lines" && canvas.linePlane.activeLineGroup === group) {
                this.drawSubparts(group, hoverStyle, hoverWidth);
                this.drawAnchorPoints(group)
            } else if (group.isHovered) {
                this.drawLinesForGroup(group, data.lines, this.canvas.interactionPlane.plane, hoverStyle, hoverWidth)
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const Rectangle = __webpack_require__(3);
    const styles = __webpack_require__(5);
    module.exports = class AreaCreator {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.areaPreviewVisible = false;
            this.areaPreviewHelperPosition = null;
            this.previewPointPositionA = null
        }
        showAreaPreview()
        {
            this.canvas.mouseProjector.on(C.EVENTS.EIGHTS_CELL_CHANGED, this.onMouseMove, this);
            this.canvas.mouseControls.on("mousedown", this.onMouseDown, this);
            this.canvas.mouseControls.on("mouseup", this.onMouseUp, this);
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        onMouseMove(point)
        {
            this.areaPreviewHelperPosition = point;
            this.areaPreviewVisible = true;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        onMouseDown()
        {
            this.previewPointPositionA = this.areaPreviewHelperPosition.clone()
        }
        onMouseUp()
        {
            if (!this.previewPointPositionA) {
                return
            }
            const rect = Rectangle.fromPoints(this.areaPreviewHelperPosition, this.previewPointPositionA);
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.CREATE,
                type: C.TYPES.AREA,
                id: this.canvas.app.state.generateId(),
                data: {
                    anchors: rect.getAnchors(),
                    lineColor: this.canvas.app.userSettings.get("areaLineColor"),
                    lineWidth: this.canvas.app.userSettings.get("areaLineWidth"),
                    fillColor: this.canvas.app.userSettings.get("areaFillColor"),
                    shadowLevel: this.canvas.app.userSettings.get("areaShadowLevel"),
                    zIndex: 0
                }
            });
            this.canvas.app.interactionMode.endActiveMode()
        }
        endAreaPreview()
        {
            this.canvas.mouseProjector.off(C.EVENTS.EIGHTS_CELL_CHANGED, this.onMouseMove, this);
            this.canvas.mouseControls.off("mouseup", this.onMouseUp, this);
            this.canvas.mouseControls.off("mousedown", this.onMouseDown, this);
            this.areaPreviewVisible = false;
            this.areaPreviewHelperPosition = null;
            this.previewPointPositionA = null
        }
    }
}, function(module, exports, __webpack_require__) {
    const styles = __webpack_require__(5);
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    const Rectangle = __webpack_require__(3);
    const tools = __webpack_require__(4);
    module.exports = class AreaRenderer {
        constructor(canvas)
        {
            this.canvas = canvas;
            setTimeout(this.init.bind(this), 0)
        }
        init()
        {
            this.canvas.interactionPlane.plane.on("render", this.drawInteractions, this, 0);
            this.canvas.pixelPlane.plane.on("render", this.drawAreas, this, 0)
        }
        drawInteractions()
        {
            if (this.canvas.linePlane.areaCreator.areaPreviewVisible) {
                this.drawAreaPreview()
            }
            const areas = this.canvas.layerManager.removeInvisible(this.canvas.app.objects.getAllOfType(C.TYPES.AREA));
            for (var id in areas) {
                if (areas[id].isHovered) {
                    this.drawHover(areas[id])
                }
                if (areas[id].isSelected && areas[id].isEditable) {
                    this.drawSelected(areas[id])
                }
            }
        }
        drawHover(area)
        {
            const data = this.canvas.app.state.getStateForId(area.id);
            this.canvas.interactionPlane.plane.beginPath();
            this.canvas.interactionPlane.plane.moveTo(data.anchors[0]);
            for (var i = 1; i < data.anchors.length; i++) {
                this.canvas.interactionPlane.plane.lineTo(data.anchors[i])
            }
            this.canvas.interactionPlane.plane.closePath();
            if (data.lineColor === styles.transparentColor) {
                this.canvas.interactionPlane.plane.setStrokeStyle(styles.area.transparentOutlineInteractionColor)
            } else {
                this.canvas.interactionPlane.plane.setStrokeStyle(data.lineColor);
                this.canvas.interactionPlane.plane.setLineWidth(data.lineWidth * 1.5)
            }
            this.canvas.interactionPlane.plane.stroke()
        }
        drawSelected(area)
        {
            const data = this.canvas.app.state.getStateForId(area.id);
            const anchorPointRadius = data.lineWidth + styles.lineDrawing.anchorPointToLineWidthOffset;
            var lineColor;
            if (data.lineColor === styles.transparentColor) {
                lineColor = styles.area.transparentOutlineInteractionColor
            } else {
                lineColor = data.lineColor
            }
            for (var i = 0; i < data.anchors.length; i++) {
                if (area.selectedAnchorIndex === i) {
                    this.canvas.interactionPlane.plane.setFillStyle(lineColor.substring(0, 7) + "66");
                    this.canvas.interactionPlane.plane.drawCircle(data.anchors[i], anchorPointRadius + .2, false, true)
                } else if (area.hoveredAnchorIndex === i) {
                    this.canvas.interactionPlane.plane.setFillStyle(lineColor.substring(0, 7) + styles.area.hoverHighlightOpacity);
                    this.canvas.interactionPlane.plane.drawCircle(data.anchors[i], anchorPointRadius + .2, false, true)
                }
                this.canvas.interactionPlane.plane.setFillStyle(lineColor);
                this.canvas.interactionPlane.plane.drawCircle(data.anchors[i], anchorPointRadius, false, true)
            }
        }
        drawAreaPreview()
        {
            const plane = this.canvas.interactionPlane.plane;
            const pos = this.canvas.linePlane.areaCreator.areaPreviewHelperPosition;
            this.drawAreaPreviewHelper(this.canvas.linePlane.areaCreator.areaPreviewHelperPosition, plane);
            if (this.canvas.linePlane.areaCreator.previewPointPositionA) {
                plane.setFillStyle("#e6189833");
                plane.fillRect(Rectangle.fromPoints(this.canvas.linePlane.areaCreator.areaPreviewHelperPosition, this.canvas.linePlane.areaCreator.previewPointPositionA));
                this.drawAreaPreviewHelper(this.canvas.linePlane.areaCreator.previewPointPositionA, plane)
            }
        }
        drawAreaPreviewHelper(pos, plane)
        {
            const w = .2;
            plane.setStrokeStyle("#e61898");
            plane.setLineWidth(.04);
            plane.beginPath();
            plane.moveTo({
                x: pos.x - w,
                y: pos.y
            });
            plane.lineTo({
                x: pos.x + w,
                y: pos.y
            });
            plane.moveTo({
                x: pos.x,
                y: pos.y - w
            });
            plane.lineTo({
                x: pos.x,
                y: pos.y + w
            });
            plane.stroke()
        }
        drawAreas()
        {
            var areaStates;
            areaStates = canvas.app.state.getAllOfType(C.TYPES.AREA);
            areaStates = this.canvas.layerManager.removeInvisible(areaStates);
            areaStates = tools.mapToArray(areaStates);
            areaStates.sort((a, b) => {
                if (a.data.zIndex === b.data.zIndex) {
                    return 0
                } else if (a.data.zIndex > b.data.zIndex) {
                    return 1
                } else {
                    return -1
                }
            });
            var i,
                j;
            const plane = this.canvas.pixelPlane.plane;
            for (i = 0; i < areaStates.length; i++) {
                plane.beginPath();
                plane.moveTo(areaStates[i].data.anchors[0]);
                for (j = 1; j < areaStates[i].data.anchors.length; j++) {
                    plane.lineTo(areaStates[i].data.anchors[j])
                }
                plane.closePath();
                plane.setFillStyle(areaStates[i].data.fillColor);
                plane.setStrokeStyle(areaStates[i].data.lineColor);
                plane.setLineWidth(areaStates[i].data.lineWidth);
                plane.setShadowLevel(areaStates[i].data.shadowLevel);
                plane.fill();
                plane.stroke();
                plane.setShadowLevel(0);
                plane.fill();
                plane.stroke()
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const Area = __webpack_require__(65);
    module.exports = class AreaManager {
        constructor(canvas)
        {
            this.canvas = canvas
        }
        init()
        {
            this.canvas.app.state.on("create-area", this.onAreaCreated, this);
            this.canvas.app.state.on("update-area", this.onAreaUpdated, this);
            this.canvas.app.state.on("delete-area", this.onAreaDeleted, this)
        }
        onAreaCreated(transaction)
        {
            this.canvas.app.objects.add(new Area(this.canvas, transaction.id));
            this.canvas.interactionPlane.plane.scheduleRender();
            this.canvas.pixelPlane.plane.scheduleRender()
        }
        onAreaUpdated()
        {
            this.canvas.interactionPlane.plane.scheduleRender();
            this.canvas.pixelPlane.plane.scheduleRender()
        }
        onAreaDeleted(transaction)
        {
            this.canvas.app.objects.removeById(transaction.id);
            this.canvas.interactionPlane.plane.scheduleRender();
            this.canvas.pixelPlane.plane.scheduleRender()
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const lineTools = __webpack_require__(7);
    const LineFinder = __webpack_require__(24);
    const AreaWallGeometry = __webpack_require__(66);
    const tools = __webpack_require__(4);
    const calc = __webpack_require__(12);
    module.exports = class Area {
        constructor(canvas, id)
        {
            this.canvas = canvas;
            this.id = id;
            this.type = C.TYPES.AREA;
            this.isSelected = false;
            this.isSelectable = true;
            this.isHovered = false;
            this.isHoverable = true;
            this.isEditable = false;
            this.hoveredAnchorIndex = null;
            this.lineFinder = new LineFinder(this);
            this.originalAnchorPositions = null;
            this.wallGeometry = null;
            this.updateWallGeometry();
            this.canvas.app.state.on(`${this.id}-${C.ACTIONS.UPDATE}`, this.updateWallGeometry, this)
        }
        saveState(data, isTransient)
        {
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.UPDATE,
                id: this.id,
                isTransient: isTransient,
                data: data
            })
        }
        destroy()
        {
            this.canvas.mouseProjector.off(C.EVENTS.EIGHTS_CELL_CHANGED, this.onMouseMove, this);
            this.canvas.mouseControls.off("mousedown", this.onMouseDown, this, 0);
            this.canvas.mouseControls.off("dblclick", this.addAnchorPoint, this, 0);
            this.canvas.mouseControls.off("mouseup", this.onMouseUp, this);
            this.canvas.app.state.off(`${this.id}-${C.ACTIONS.UPDATE}`, this.updateWallGeometry, this);
            if (this.wallGeometry) {
                this.wallGeometry.destroy();
                this.wallGeometry = null
            }
            this.canvas.linePlane.drawAll();
            this.canvas = null;
            this.id = null;
            this.lineFinder.destroy()
        }
        delete()
        {
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.DELETE,
                id: this.id
            })
        }
        updateWallGeometry()
        {
            const state = this.canvas.app.state.getStateForId(this.id);
            if (state.areaType === C.AREA_TYPES.STANDARD && this.wallGeometry) {
                this.wallGeometry.destroy();
                this.wallGeometry = null
            }
            if (typeof state.areaType !== "undefined" && state.areaType !== C.AREA_TYPES.STANDARD) {
                if (!this.wallGeometry) {
                    this.wallGeometry = new AreaWallGeometry(this.canvas, this.id)
                }
            }
            if (this.wallGeometry) {
                this.wallGeometry.setHeight(state.wallHeight);
                this.wallGeometry.setColor(state.wallColor)
            }
        }
        storeCurrentPosition()
        {
            this.originalAnchorPositions = tools.deepClone(this.canvas.app.state.getStateForId(this.id).anchors)
        }
        setPositionDelta(deltaX, deltaY, isTransient)
        {
            const newAnchors = [];
            for (var i = 0; i < this.originalAnchorPositions.length; i++) {
                newAnchors.push({
                    x: this.originalAnchorPositions[i].x + deltaX,
                    y: this.originalAnchorPositions[i].y + deltaY
                })
            }
            this.canvas.app.state.processTransaction({
                id: this.id,
                isTransient: isTransient,
                action: C.ACTIONS.UPDATE,
                data: {
                    anchors: newAnchors
                }
            })
        }
        showHover()
        {
            this.isHovered = true;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        hideHover()
        {
            this.isHovered = false;
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        showSelected(isMultiSelection)
        {
            this.isSelected = true;
            this.isHoverable = false;
            this.isHovered = false;
            this.isEditable = !isMultiSelection;
            if (this.isEditable) {
                this.canvas.mouseProjector.on(C.EVENTS.EIGHTS_CELL_CHANGED, this.onMouseMove, this);
                this.canvas.mouseControls.on("mousedown", this.onMouseDown, this, 0);
                this.canvas.mouseControls.on("dblclick", this.addAnchorPoint, this, 0)
            }
        }
        hideSelected()
        {
            this.isSelected = false;
            this.isHoverable = !this.isLocked;
            this.isHovered = false;
            this.isEditable = false;
            this.canvas.mouseProjector.off(C.EVENTS.EIGHTS_CELL_CHANGED, this.onMouseMove, this);
            this.canvas.mouseControls.off("mousedown", this.onMouseDown, this, 0);
            this.canvas.mouseControls.off("dblclick", this.addAnchorPoint, this, 0)
        }
        computeBoundingBox()
        {
            return lineTools.computeBoundingBox(this.canvas.app.state.getStateForId(this.id))
        }
        addAnchorPoint(event)
        {
            const position = this.canvas.mouseProjector.getPlaneCoordinatesForMouseEvent(event, C.EVENTS.HALF_CELL_INTERSECTION_CHANGED);
            const lineSegment = this.lineFinder.getClosestLineSegment(position);
            const anchors = this.canvas.app.state.getStateForId(this.id).anchors;
            const index = lineSegment.index === anchors.length - 1 ? 0 : lineSegment.index + 1;
            anchors.splice(index, 0, position);
            this.saveState({
                anchors: anchors
            })
        }
        onMouseDown()
        {
            this.selectedAnchorIndex = this.hoveredAnchorIndex;
            if (this.hoveredAnchorIndex !== null) {
                this.moveSelectedAnchor = true;
                this.canvas.mouseControls.on("mouseup", this.onMouseUp, this);
                this.canvas.interactionPlane.drawPositionIndicator(this.canvas.app.state.getStateForId(this.id).anchors[this.selectedAnchorIndex]);
                this.canvas.interactionPlane.plane.scheduleRender();
                return false
            }
        }
        onMouseMove(pos)
        {
            const anchors = this.canvas.app.state.getStateForId(this.id).anchors;
            if (this.moveSelectedAnchor) {
                this.updateSelectedAnchorPosition(anchors, pos);
                this.canvas.interactionPlane.drawPositionIndicator(anchors[this.selectedAnchorIndex])
            } else {
                this.findHoveredAnchors(anchors, pos)
            }
        }
        onMouseUp()
        {
            this.moveSelectedAnchor = false;
            this.saveState({
                anchors: this.canvas.app.state.getStateForId(this.id).anchors
            });
            this.canvas.mouseControls.off("mouseup", this.onMouseUp, this);
            this.canvas.interactionPlane.hidePositionIndicator()
        }
        updateSelectedAnchorPosition(anchors, pos)
        {
            anchors[this.selectedAnchorIndex].x = pos.x;
            anchors[this.selectedAnchorIndex].y = pos.y;
            this.saveState({
                anchors: anchors
            }, true)
        }
        findHoveredAnchors(anchors, pos)
        {
            const closestAnchor = calc.getClosestPoint(pos, anchors);
            const oldHoveredAnchorIndex = this.hoveredAnchorIndex;
            if (closestAnchor.distance < .5) {
                this.hoveredAnchorIndex = closestAnchor.index
            } else {
                this.hoveredAnchorIndex = null
            }
            if (this.hoveredAnchorIndex !== oldHoveredAnchorIndex) {
                this.canvas.interactionPlane.plane.scheduleRender()
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const GATE_WIDTH = .4;
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    const lineTools = __webpack_require__(7);
    const calc = __webpack_require__(12);
    module.exports = class AreaWallGeometry {
        constructor(canvas, id)
        {
            this.canvas = canvas;
            this.id = id;
            this.currentPoints = null;
            this.height = 2;
            this.color = "#CCCCCC";
            this.canvas.app.state.on(`${this.id}-${C.ACTIONS.UPDATE}`, this.update, this);
            this.canvas.app.state.on(`${C.ACTIONS.CREATE}-${C.TYPES.LINE_GROUP}`, this.update, this);
            this.canvas.app.state.on(`${C.ACTIONS.UPDATE}-${C.TYPES.LINE_GROUP}`, this.update, this);
            this.canvas.app.state.on(`${C.ACTIONS.DELETE}-${C.TYPES.LINE_GROUP}`, this.update, this);
            this.group = new THREE.Group;
            this.mesh = new THREE.Mesh(new THREE.Geometry, new THREE.MeshLambertMaterial({
                color: 13421772,
                side: THREE.DoubleSide
            }));
            this.group.add(this.mesh);
            this.edgeLines = new THREE.LineSegments(new THREE.Geometry, new THREE.LineBasicMaterial({
                color: 6710886,
                linewidth: 1
            }));
            this.group.add(this.edgeLines);
            this.update();
            this.canvas.scene.add(this.group);
            this.canvas.layerManager.on("change", this.applyLayerSettings, this);
            this.applyLayerSettings()
        }
        update(force)
        {
            const points = this.computePoints();
            if (!force && this.isUnchanged(points)) {
                return
            }
            this.currentPoints = points;
            this.createMeshGeometry(points);
            this.createEdgeGeometry();
            this.applyLayerSettings()
        }
        applyLayerSettings()
        {
            this.group.visible = this.canvas.layerManager.getLayerForObject(this.id).visible
        }
        setHeight(height)
        {
            if (height === this.height || typeof height !== "number") {
                return
            }
            this.height = height;
            this.update(true)
        }
        setColor(color)
        {
            if (this.color === color) {
                return
            }
            this.color = color;
            this.mesh.material.color.setStyle(color)
        }
        isUnchanged(points)
        {
            if (this.currentPoints === null) {
                return false
            }
            if (points.length !== this.currentPoints.length) {
                return false
            }
            for (var i = 0; i < points.length; i++) {
                if (!(points[i].x === this.currentPoints[i].x && points[i].y === this.currentPoints[i].y && points[i].isGate === this.currentPoints[i].isGate)) {
                    return false
                }
            }
            return true
        }
        computePoints()
        {
            const anchors = this.canvas.app.state.getStateForId(this.id, true).anchors;
            const intersectionPoints = this.calculateLineIntersections(anchors);
            var i = 0,
                gateLeft,
                gateRight;
            for (i; i < intersectionPoints.length; i++) {
                gateLeft = this.getOffsetIntersectionPoint(intersectionPoints[i], intersectionPoints[i].startAnchor);
                gateLeft.isGate = true;
                gateRight = this.getOffsetIntersectionPoint(intersectionPoints[i], intersectionPoints[i].endAnchor);
                anchors.splice(anchors.indexOf(intersectionPoints[i].endAnchor), 0, gateLeft, gateRight)
            }
            return anchors
        }
        calculateLineIntersections(areaAnchors)
        {
            const lineGroups = this.canvas.app.state.getAllOfType(C.TYPES.LINE_GROUP);
            var id,
                i,
                p1,
                p2,
                data,
                intersectionPoints = [];
            for (id in lineGroups) {
                for (i = 0; i < lineGroups[id].data.lines.length; i++) {
                    data = lineGroups[id].data;
                    p1 = lineTools.toAnchorPoint(data.anchors[data.lines[i][0]]);
                    p2 = lineTools.toAnchorPoint(data.anchors[data.lines[i][1]]);
                    intersectionPoints = intersectionPoints.concat(this.getLineIntersectionPoints(p1, p2, areaAnchors))
                }
            }
            intersectionPoints.sort((a, b) => {
                if (a.distanceToOrigin === b.distanceToOrigin) {
                    return 0
                }
                if (a.distanceToOrigin > b.distanceToOrigin) {
                    return 1
                } else {
                    return -1
                }
            });
            return intersectionPoints
        }
        getLineIntersectionPoints(p1, p2, areaAnchors)
        {
            var p3,
                p4,
                i,
                point,
                intersectionPoints = [];
            areaAnchors = areaAnchors.slice();
            areaAnchors.push(areaAnchors[0]);
            for (i = 0; i < areaAnchors.length - 1; i++) {
                p3 = areaAnchors[i];
                p4 = areaAnchors[i + 1];
                point = calc.getLineIntersectionPoint(p1, p2, p3, p4);
                if (point) {
                    point.startAnchor = p3;
                    point.endAnchor = p4;
                    point.distanceToOrigin = calc.getDistanceBetweenPoints(point, p3);
                    intersectionPoints.push(point)
                }
            }
            return intersectionPoints
        }
        getOffsetIntersectionPoint(p1, p2)
        {
            const angle = Math.atan2(p2.y - p1.y, p2.x - p1.x);
            return {
                x: Math.cos(angle) * (GATE_WIDTH / 2) + p1.x,
                y: Math.sin(angle) * (GATE_WIDTH / 2) + p1.y
            }
        }
        createMeshGeometry(anchors)
        {
            this.mesh.geometry = new THREE.Geometry;
            var i,
                x,
                y,
                j,
                vertice;
            for (i = 0; i < anchors.length; i++) {
                x = anchors[i].x * config.gridCellSize;
                y = anchors[i].y * config.gridCellSize;
                j = i * 2;
                this.mesh.geometry.vertices.push(new THREE.Vector3(x, 0, y));
                vertice = new THREE.Vector3(x, this.height, y);
                vertice.isGate = anchors[i].isGate;
                this.mesh.geometry.vertices.push(vertice);
                if (i === anchors.length - 1) {
                    this.mesh.geometry.faces.push(new THREE.Face3(j, j + 1, 0));
                    this.mesh.geometry.faces.push(new THREE.Face3(0, 1, j + 1))
                } else if (!anchors[i].isGate) {
                    this.mesh.geometry.faces.push(new THREE.Face3(j, j + 1, j + 2));
                    this.mesh.geometry.faces.push(new THREE.Face3(j + 1, j + 3, j + 2))
                }
            }
            this.mesh.geometry.computeFaceNormals();
            this.mesh.geometry.normalsNeedUpdate = true;
            this.mesh.geometry.computeBoundingSphere()
        }
        createEdgeGeometry()
        {
            this.edgeLines.geometry = new THREE.Geometry;
            for (var i = 1; i < this.mesh.geometry.vertices.length - 1; i += 2) {
                if (!this.mesh.geometry.vertices[i].isGate) {
                    this.edgeLines.geometry.vertices.push(this.mesh.geometry.vertices[i], this.mesh.geometry.vertices[i + 2])
                }
                this.edgeLines.geometry.vertices.push(this.mesh.geometry.vertices[i - 1], this.mesh.geometry.vertices[i + 1]);
                this.edgeLines.geometry.vertices.push(this.mesh.geometry.vertices[i - 1], this.mesh.geometry.vertices[i])
            }
            this.edgeLines.geometry.vertices.push(this.mesh.geometry.vertices[1], this.mesh.geometry.vertices[this.mesh.geometry.vertices.length - 1]);
            this.edgeLines.geometry.vertices.push(this.mesh.geometry.vertices[this.mesh.geometry.vertices.length - 2], this.mesh.geometry.vertices[this.mesh.geometry.vertices.length - 1])
        }
        destroy()
        {
            this.canvas.app.state.off(`${this.id}-${C.ACTIONS.UPDATE}`, this.update, this);
            this.canvas.app.state.off(`${C.ACTIONS.CREATE}-${C.TYPES.LINE_GROUP}`, this.update, this);
            this.canvas.app.state.off(`${C.ACTIONS.UPDATE}-${C.TYPES.LINE_GROUP}`, this.update, this);
            this.canvas.app.state.off(`${C.ACTIONS.DELETE}-${C.TYPES.LINE_GROUP}`, this.update, this);
            this.canvas.layerManager.off("change", this.applyLayerSettings, this);
            this.canvas.scene.remove(this.group);
            this.mesh.geometry.dispose();
            this.mesh.material.dispose();
            this.edgeLines.geometry.dispose();
            this.edgeLines.material.dispose()
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const KEYS = __webpack_require__(9);
    const config = __webpack_require__(1);
    const SelectionRectangle = __webpack_require__(68);
    const EventEmitter = __webpack_require__(2);
    const tools = __webpack_require__(4);
    module.exports = class SelectionManager extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.propagateSelectionChangeTimeout = null;
            this.canvas = canvas;
            this.canvas.mouseControls.on("mousedown", this.onMouseDown, this, 1);
            this.canvas.mouseControls.on("dblclick", this.onDblClick, this, 1);
            this.canvas.mouseControls.on("mouseup", this.onMouseUp, this, 3);
            this.canvas.app.eventHub.on("user-cancel", this.clearCurrentSelection, this, 3);
            this.selectedObjects = [];
            this.selectionRectangle = new SelectionRectangle(this.canvas, this.applyRectangleSelection.bind(this));
            this.canvas.keyboardControls.on("delete", this.deleteSelectedObjects, this, 2)
        }
        applyRectangleSelection(rectangle)
        {
            this.clearCurrentSelection();
            this.addMultipleObjectsToSelection(this.canvas.app.objectFinder.getObjectsWithinRectangle(rectangle))
        }
        deleteSelectedObjects()
        {
            this.canvas.app.state.startTransactionBlock("deleted multiple objects");
            const selectedObjects = this.selectedObjects.splice(0);
            for (var i = 0; i < selectedObjects.length; i++) {
                if (selectedObjects[i].delete) {
                    selectedObjects[i].delete()
                }
            }
            this.canvas.app.state.endTransactionBlock()
        }
        onDblClick(event)
        {
            if (this.canvas.app.interactionMode.getActiveMode() !== "select") {
                return
            }
            var clickedObjects = this.canvas.app.objectFinder.getObjectsForMouseEvent(event);
            if (clickedObjects.length !== 1) {
                return
            }
            if ((clickedObjects[0].type === C.TYPES.LINE_GROUP || clickedObjects[0].type === C.TYPES.AREA) && clickedObjects[0].isSelected) {
                return
            }
            this.clearCurrentSelection();
            const selectedType = clickedObjects[0].type;
            var allOfType = tools.mapToArray(this.canvas.app.objects.getAllOfType(selectedType));
            if (selectedType === C.TYPES.COMPONENT) {
                allOfType = allOfType.filter(obj => {
                    return obj.config.id === clickedObjects[0].config.id
                })
            }
            this.addMultipleObjectsToSelection(allOfType)
        }
        onMouseDown(event)
        {
            if (this.canvas.app.interactionMode.getActiveMode() !== "select") {
                return
            }
            var clickedObjects = this.canvas.app.objectFinder.getObjectsForMouseEvent(event);
            var i;
            for (i = 0; i < clickedObjects.length; i++) {
                if (clickedObjects[i].isSelected) {
                    if (this.canvas.keyboardControls.pressedKeys[KEYS.CTRL]) {
                        this.removeObjectFromSelection(clickedObjects[i])
                    }
                    return
                }
            }
            this.clearCurrentSelection();
            var addedObject = false;
            for (i = 0; i < clickedObjects.length; i++) {
                if (clickedObjects[i].isSelectable) {
                    if (clickedObjects[i].isSelected) {
                        this.removeObjectFromSelection(clickedObjects[i])
                    } else {
                        if (addedObject === false) {
                            addedObject = true;
                            this.addObjectToSelection(clickedObjects[i])
                        }
                    }
                }
            }
            this.propagateSelectionChange()
        }
        onMouseUp(event)
        {
            if (this.canvas.app.interactionMode.getActiveMode() !== "select") {
                return
            }
            if (this.canvas.keyboardControls.pressedKeys[KEYS.CTRL]) {
                return
            }
            var clickedObjects = this.canvas.app.objectFinder.getObjectsForMouseEvent(event);
            if (clickedObjects.length !== 1) {
                return
            }
            if (this.selectedObjects.length > 1) {
                this.clearCurrentSelection();
                this.addObjectToSelection(clickedObjects[0])
            }
            this.propagateSelectionChange()
        }
        clearCurrentSelection(force)
        {
            var ctrlPressed = !!this.canvas.keyboardControls.pressedKeys[KEYS.CTRL];
            if (ctrlPressed && !force) {
                return
            }
            for (var i = 0; i < this.selectedObjects.length; i++) {
                if (this.selectedObjects[i].hideSelected() === false) {
                    return
                }
            }
            this.selectedObjects = [];
            this.propagateSelectionChange()
        }
        removeObjectFromSelection(obj)
        {
            var index = this.selectedObjects.indexOf(obj);
            if (index > -1) {
                this.selectedObjects.splice(index, 1)
            }
            obj.hideSelected();
            this.propagateSelectionChange()
        }
        addMultipleObjectsToSelection(objects)
        {
            for (var id in objects) {
                if (objects[id].isSelectable && this.selectedObjects.indexOf(objects[id]) === -1) {
                    if (this.canvas.app.$refs.viewControls.isDashboardMode && objects[id].type !== C.TYPES.COMPONENT) {
                        continue
                    }
                    this.selectedObjects.push(objects[id]);
                    objects[id].showSelected(objects.length > 1 || this.selectedObjects.length > 1)
                }
            }
            this.propagateSelectionChange()
        }
        addObjectToSelection(obj)
        {
            if (this.canvas.app.$refs.viewControls.isDashboardMode && obj.type !== C.TYPES.COMPONENT) {
                this.propagateSelectionChange();
                return
            }
            if (this.selectedObjects.indexOf(obj) === -1) {
                this.selectedObjects.push(obj)
            }
            obj.showSelected();
            this.propagateSelectionChange()
        }
        propagateSelectionChange()
        {
            if (this.propagateSelectionChangeTimeout === null) {
                this.propagateSelectionChangeTimeout = setTimeout(this.onSelectionChange.bind(this), 0)
            }
        }
        onSelectionChange()
        {
            this.propagateSelectionChangeTimeout = null;
            this.canvas.interactionPlane.plane.scheduleRender();
            if (window.getSelection) {
                window.getSelection().removeAllRanges()
            } else if (document.selection) {
                document.selection.empty()
            }
            this.emit("selection-change", this.selectedObjects)
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const config = __webpack_require__(1);
    const Rectangle = __webpack_require__(3);
    const styles = __webpack_require__(5);
    module.exports = class SelectionRectangle {
        constructor(canvas, applyCallback)
        {
            this.canvas = canvas;
            this.applyCallback = applyCallback;
            this.canvas.mouseControls.on("mousedown", this.start, this, 4);
            this.canvas.interactionPlane.plane.on("render", this.render, this, 4);
            this.activeRectangle = null;
            this.startPos = null;
            this.currentPos = null
        }
        render()
        {
            if (this.activeRectangle === null) {
                return
            }
            this.canvas.interactionPlane.plane.setFillStyle(styles.selectionRectangle.background);
            this.canvas.interactionPlane.plane.setStrokeStyle(styles.selectionRectangle.border);
            this.canvas.interactionPlane.plane.setLineWidth(styles.selectionRectangle.borderWidth);
            this.canvas.interactionPlane.plane.setLineDash(styles.selectionRectangle.lineDash);
            this.canvas.interactionPlane.plane.fillRect(this.activeRectangle);
            this.canvas.interactionPlane.plane.strokeRect(this.activeRectangle);
            this.canvas.interactionPlane.plane.setLineDash([])
        }
        start(event)
        {
            if (this.canvas.app.interactionMode.getActiveMode() !== "select") {
                return
            }
            if (this.canvas.app.$refs.viewControls.isDashboardMode) {
                return
            }
            this.startPos = this.canvas.mouseProjector.getPlaneCoordinatesForMouseEvent(event, C.EVENTS.RAW_POSITION_CHANGED);
            this.canvas.mouseProjector.on(C.EVENTS.RAW_POSITION_CHANGED, this.update, this);
            this.canvas.mouseControls.on("mouseup", this.apply, this, 0)
        }
        update(point)
        {
            this.currentPos = point;
            this.activeRectangle = Rectangle.fromPoints(this.currentPos, this.startPos);
            this.canvas.interactionPlane.plane.scheduleRender();
            const hoveredObjects = this.canvas.app.objectFinder.getObjectsWithinRectangle(this.activeRectangle);
            const objects = this.canvas.app.objects.getAll();
            var obj,
                id;
            for (id in objects) {
                obj = objects[id];
                if (obj && obj.isHoverable && !obj.isSelected) {
                    if (hoveredObjects.indexOf(obj) === -1) {
                        obj.hideHover()
                    } else {
                        obj.showHover()
                    }
                }
            }
        }
        apply(event)
        {
            this.canvas.mouseControls.off("mouseup", this.apply, this);
            this.canvas.mouseProjector.off(C.EVENTS.RAW_POSITION_CHANGED, this.update, this);
            this.canvas.interactionPlane.plane.scheduleRender();
            if (!this.currentPos) {
                return
            }
            const rectangle = Rectangle.fromPoints(this.currentPos, this.startPos);
            this.startPos = null;
            this.currentPos = null;
            this.activeRectangle = null;
            if (rectangle.width > config.minSelectionSize || rectangle.height > config.minSelectionSize) {
                this.applyCallback(rectangle);
                return false
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    module.exports = class HoverManager {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.hoveredObjects = [];
            this.onMouseMoveFn = this.onMouseMove.bind(this);
            this.stopMouseTracking = false;
            setTimeout(() => {
                this.canvas.app.interactionMode.on("change", this.onInteractionModeChange, this);
                this.onInteractionModeChange()
            }, 1)
        }
        onInteractionModeChange()
        {
            if (this.canvas.app.interactionMode.getActiveMode() === "select") {
                document.addEventListener("mousemove", this.onMouseMoveFn)
            } else {
                document.removeEventListener("mousemove", this.onMouseMoveFn)
            }
        }
        onMouseMove(event)
        {
            if (this.stopMouseTracking === true) {
                return
            }
            const hoveredObjects = this.canvas.app.objectFinder.getObjectsForMouseEvent(event);
            const isDashboardMode = this.canvas.app.$refs.viewControls.isDashboardMode;
            if (!hoveredObjects.planeIntersectionPoint) {
                return
            }
            const objects = this.canvas.app.objects.getAll();
            var id,
                obj,
                isMatch,
                hoverUpdated = false,
                componentHovered = false;
            for (id in objects) {
                obj = objects[id];
                if (obj.isSelected && obj.onHover) {
                    obj.onHover(event, hoveredObjects.planeIntersectionPoint)
                }
                if (obj && obj.isHoverable) {
                    isMatch = hoveredObjects.indexOf(obj) > -1;
                    if (isMatch && isDashboardMode) {
                        isMatch = obj.type === C.TYPES.COMPONENT;
                        if (isMatch) {
                            componentHovered = true
                        }
                    }
                    if (!obj.isHovered && isMatch) {
                        obj.showHover();
                        hoverUpdated = true
                    }
                    if (obj.isHovered && !isMatch) {
                        obj.hideHover();
                        hoverUpdated = true
                    }
                }
            }
            var hasHoveredObjects = false,
                i;
            for (i = 0; i < hoveredObjects.length; i++) {
                if (hoveredObjects[i].isHoverable) {
                    hasHoveredObjects = true;
                    break
                }
            }
            if (!hasHoveredObjects) {
                document.body.classList.remove("hover")
            } else if (!isDashboardMode || componentHovered) {
                document.body.classList.add("hover")
            }
            if (hoverUpdated === true) {
                this.canvas.interactionPlane.plane.scheduleRender()
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const Point = __webpack_require__(8);
    const config = __webpack_require__(1);
    const lineTools = __webpack_require__(7);
    const ARC_COPY = "arcentry-copy";
    const INPUT = "INPUT";
    const TEXTAREA = "TEXTAREA";
    const COPYABLE_CLASS = "copyable";
    module.exports = class GlobalInteractions {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.originalPositions = {};
            this.mouseDownPoint = null;
            this.deltaX = null;
            this.deltaY = null;
            this.cellMoveMode = null;
            this.hasMoved = false;
            this.canvas.mouseControls.on("mousedown", this.onMouseDown, this, 2);
            document.addEventListener("copy", this.onCopy.bind(this), true);
            document.addEventListener("paste", this.onPaste.bind(this), true)
        }
        isCopyable(element)
        {
            const isTextElement = element.nodeName === INPUT || element.nodeName === TEXTAREA || element.classList.contains(COPYABLE_CLASS);
            if (!isTextElement) {
                return false
            }
            if (window.getSelection().rangeCount === 0) {
                return false
            }
            return window.getSelection().getRangeAt(0).endOffset > 0 || window.getSelection().toString().length > 0
        }
        onCopy(event)
        {
            if (this.isCopyable(event.target)) {
                return
            }
            event.preventDefault();
            const transactions = [];
            var i,
                obj;
            for (i = 0; i < this.canvas.selectionManager.selectedObjects.length; i++) {
                obj = this.canvas.selectionManager.selectedObjects[i];
                transactions.push({
                    action: C.ACTIONS.CREATE,
                    type: obj.type,
                    id: obj.id,
                    data: this.canvas.app.state.getStateForId(obj.id)
                })
            }
            event.clipboardData.setData("application/json", JSON.stringify({
                type: ARC_COPY,
                transactions: transactions
            }))
        }
        onPaste(event)
        {
            if (event.target.nodeName === INPUT || event.target.nodeName === TEXTAREA || event.target.classList.contains(COPYABLE_CLASS)) {
                return
            }
            event.preventDefault();
            var i,
                data,
                id,
                minX = Infinity,
                minY = Infinity;
            const dataString = event.clipboardData.getData("application/json");
            if (!dataString) {
                return
            }
            try {
                data = JSON.parse(dataString)
            } catch (e) {
                return
            }
            if (data.type !== ARC_COPY) {
                return
            }
            this.iterateThroughPositions(data, pos => {
                if (pos.x < minX)
                    minX = pos.x;
                if (pos.y < minY)
                    minY = pos.y
            });
            const x = Math.floor(this.canvas.mouseProjector.lastRawX * 2) / 2;
            const y = Math.floor(this.canvas.mouseProjector.lastRawY * 2) / 2;
            const oldToNewIds = {};
            for (i = 0; i < data.transactions.length; i++) {
                oldToNewIds[data.transactions[i].id] = this.canvas.app.state.generateId();
                data.transactions[i].id = oldToNewIds[data.transactions[i].id]
            }
            this.forEachObjectAnchor(data, anchor => {
                if (oldToNewIds[anchor.id]) {
                    anchor.id = oldToNewIds[anchor.id]
                } else {
                    var relAnchorPos = lineTools.toAnchorPoint(anchor);
                    delete anchor.id;
                    delete anchor.index;
                    anchor.type = C.ANCHOR_TYPES.STANDALONE;
                    anchor.x = relAnchorPos.x;
                    anchor.y = relAnchorPos.y
                }
            });
            this.iterateThroughPositions(data, pos => {
                pos.x = x + (pos.x - minX);
                pos.y = y + (pos.y - minY)
            });
            this.canvas.app.state.startTransactionBlock("Paste");
            for (i = 0; i < data.transactions.length; i++) {
                this.canvas.app.state.processTransaction(data.transactions[i])
            }
            this.canvas.app.state.endTransactionBlock()
        }
        iterateThroughPositions(data, callback)
        {
            var i = 0,
                j = 0,
                objData;
            for (i; i < data.transactions.length; i++) {
                objData = data.transactions[i].data;
                if (objData.position) {
                    callback(objData.position)
                } else if (data.transactions[i].type === C.TYPES.LINE_GROUP || data.transactions[i].type === C.TYPES.AREA) {
                    for (j = 0; j < objData.anchors.length; j++) {
                        if (objData.anchors[j] && objData.anchors[j].type !== C.ANCHOR_TYPES.OBJECT) {
                            callback(objData.anchors[j])
                        }
                    }
                }
            }
        }
        forEachObjectAnchor(data, callback)
        {
            var i = 0,
                j = 0,
                anchors;
            for (i; i < data.transactions.length; i++) {
                if (data.transactions[i].type !== C.TYPES.LINE_GROUP) {
                    continue
                }
                anchors = data.transactions[i].data.anchors;
                for (j = 0; j < anchors.length; j++) {
                    if (anchors[j] && anchors[j].type === C.ANCHOR_TYPES.OBJECT) {
                        callback(anchors[j])
                    }
                }
            }
        }
        onMouseDown(event)
        {
            if (canvas.app.interactionMode.getActiveMode() !== C.INTERACTION_MODE.SELECT) {
                return
            }
            if (this.canvas.app.$refs.viewControls.isDashboardMode) {
                return
            }
            this.deltaX = 0;
            this.deltaY = 0;
            this.hasMoved = false;
            const clickedObject = this.canvas.app.objectFinder.getObjectsForMouseEvent(event)[0];
            if (!clickedObject) {
                return
            }
            var i,
                obj,
                state;
            var selectionContainsComponents = false;
            var selectionContainsOnlyIcons = true;
            var selectionContainsLineGroups = false;
            for (i = 0; i < this.canvas.selectionManager.selectedObjects.length; i++) {
                obj = this.canvas.selectionManager.selectedObjects[i];
                if (obj.type === C.TYPES.COMPONENT || obj.moveHalfCell) {
                    selectionContainsComponents = true
                }
                if (obj.type === C.TYPES.LINE_GROUP) {
                    selectionContainsLineGroups = true
                }
                if (obj.type !== C.TYPES.ICON) {
                    selectionContainsOnlyIcons = false
                }
                if (obj.storeCurrentPosition) {
                    obj.storeCurrentPosition();
                    this.originalPositions[obj.id] = obj
                } else {
                    state = this.canvas.app.state.getStateForId(obj.id);
                    if (state.position) {
                        this.originalPositions[obj.id] = Point.fromPoint(state.position);
                        if (this.canvas.selectionManager.selectedObjects.length === 1) {
                            this.showPosition(state.position, obj.id)
                        }
                    }
                }
            }
            if (selectionContainsComponents || selectionContainsLineGroups) {
                this.cellMoveMode = C.EVENTS.HALF_CELL_CHANGED
            } else {
                this.cellMoveMode = C.EVENTS.EIGHTS_CELL_CHANGED
            }
            this.mouseDownPoint = this.canvas.mouseProjector.getPlaneCoordinatesForMouseEvent(event, this.cellMoveMode);
            this.canvas.mouseProjector.on(this.cellMoveMode, this.onMouseMove, this);
            this.canvas.app.eventHub.on("user-cancel", this.onMouseUp, this, 3);
            this.canvas.mouseControls.on("mouseup", this.onMouseUp, this, 1);
            if (clickedObject.isSelected) {
                return false
            }
        }
        onMouseMove(point)
        {
            this.deltaX = point.x - this.mouseDownPoint.x;
            this.deltaY = point.y - this.mouseDownPoint.y;
            this.hasMoved = true;
            this.canvas.interactionPlane.plane.scheduleRender();
            this.updateState(true);
            return false
        }
        updateState(isTransient)
        {
            this.canvas.app.state.startTransactionBlock("Moved Objects");
            var id,
                position;
            for (id in this.originalPositions) {
                if (this.originalPositions[id].isPoint) {
                    position = {
                        x: this.originalPositions[id].x + this.deltaX,
                        y: this.originalPositions[id].y + this.deltaY
                    };
                    this.canvas.app.state.processTransaction({
                        id: id,
                        action: C.ACTIONS.UPDATE,
                        isTransient: isTransient,
                        data: {
                            position: position
                        }
                    });
                    if (Object.keys(this.originalPositions).length === 1) {
                        this.showPosition(position, id)
                    }
                } else {
                    this.originalPositions[id].setPositionDelta(this.deltaX, this.deltaY, isTransient)
                }
            }
            this.canvas.app.state.endTransactionBlock()
        }
        showPosition(position, id)
        {
            const obj = this.canvas.app.objects.getById(id);
            if (obj.type === C.TYPES.COMPONENT) {
                this.canvas.interactionPlane.drawPositionIndicator({
                    x: position.x + obj.model.sizeOnGrid.width / 2,
                    y: position.y + obj.model.sizeOnGrid.height / 2
                })
            } else if (obj.type === C.TYPES.ICON) {
                const halfSize = this.canvas.app.state.getStateForId(obj.id).fontSize / 2;
                this.canvas.interactionPlane.drawPositionIndicator({
                    x: position.x + halfSize,
                    y: position.y + halfSize
                })
            } else if (obj.type === C.TYPES.IMAGE || obj.type === C.TYPES.WIDGET) {
                const data = this.canvas.app.state.getStateForId(obj.id);
                this.canvas.interactionPlane.drawPositionIndicator({
                    x: position.x + data.dimensions.width / 2,
                    y: position.y + data.dimensions.height / 2
                })
            } else {
                this.canvas.interactionPlane.drawPositionIndicator(position)
            }
        }
        onMouseUp()
        {
            if (this.hasMoved) {
                this.updateState(false)
            }
            this.originalPositions = {};
            this.canvas.mouseProjector.off(this.cellMoveMode, this.onMouseMove, this);
            this.canvas.app.eventHub.off("user-cancel", this.onMouseUp, this);
            this.canvas.mouseControls.off("mouseup", this.onMouseUp, this);
            this.canvas.interactionPlane.hidePositionIndicator();
            if (this.hasMoved) {
                return false
            }
        }
        devMode()
        {
            config.maxZoom = 1e3;
            var meshes = [];
            var allComponents = canvas.app.objects.getAllOfType("component");
            for (var id in allComponents) {
                meshes.push(allComponents[id].mesh)
            }
            const mousePosition = new THREE.Vector2;
            const raycaster = new THREE.Raycaster;
            window.selectedFaces = [];
            document.addEventListener("click", event => {
                mousePosition.x = event.clientX / window.innerWidth * 2 - 1;
                mousePosition.y = -(event.clientY / window.innerHeight) * 2 + 1;
                raycaster.setFromCamera(mousePosition, canvas.camera.camera);
                var intersection = raycaster.intersectObjects(meshes)[0];
                if (!intersection) {
                    return
                }
                intersection.object.geometry.faces[intersection.faceIndex].materialIndex = 1;
                intersection.object.geometry.elementsNeedUpdate = true;
                console.log(intersection.faceIndex);
                window.selectedFaces.push(intersection.faceIndex)
            }, false);
            window.logoPlane = canvas.selectionManager.selectedObjects[0].logoPlane;
            logoPlane.mesh.material.transparent = false
        }
        sortFaces(faces)
        {
            const uniqueFaces = [];
            for (var i = 0; i < faces.length; i++) {
                if (uniqueFaces.indexOf(faces[i]) === -1) {
                    uniqueFaces.push(faces[i])
                }
            }
            return JSON.stringify(uniqueFaces.sort((a, b) => {
                return a > b ? 1 : -1
            }))
        }
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const icons = __webpack_require__(11);
    const EventEmitter = __webpack_require__(2);
    module.exports = class ImageCache {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.onImageLoadFn = this.onImageLoad.bind(this);
            this.imageReadyEventEmitter = new EventEmitter;
            this.images = {}
        }
        getImage(path, callback)
        {
            if (this.images[path] && this.images[path].complete) {
                if (callback) {
                    callback(this.images[path])
                }
                return this.images[path]
            }
            callback && this.imageReadyEventEmitter.on(path, callback);
            if (this.images[path]) {
                return null
            }
            this.images[path] = new Image;
            this.images[path].onload = (() => {
                if (this.images[path].naturalWidth > 0) {
                    this.imageReadyEventEmitter.emit(path);
                    delete this.imageReadyEventEmitter.listener[path];
                    this.onImageLoadFn && this.onImageLoadFn(this.images[path])
                }
            });
            this.images[path].crossOrigin = "Anonymous";
            if (path.indexOf(config.logoFolder) > -1) {
                this.images[path].src = path
            } else {
                this.images[path].src = config.imageRoot + path
            }
            return null
        }
        getImage128Square(imagePath, callback)
        {
            this.getImage(imagePath, () => {
                const srcImage = this.images[imagePath];
                const canvas = document.createElement("canvas");
                canvas.width = canvas.height = 128;
                const ctx = canvas.getContext("2d");
                if (srcImage.width > srcImage.height) {
                    const destHeight = srcImage.height / srcImage.width * 128;
                    ctx.drawImage(srcImage, 0, 0, srcImage.width, srcImage.height, 0, (128 - destHeight) / 2, 128, destHeight)
                } else {
                    const destWidth = srcImage.width / srcImage.height * 128;
                    ctx.drawImage(srcImage, 0, 0, srcImage.width, srcImage.height, (128 - destWidth) / 2, 0, destWidth, 128)
                }
                callback(canvas)
            })
        }
        getIconTexture(icon, color, callback)
        {
            const canvas = document.createElement("canvas");
            canvas.width = canvas.height = 128;
            const ctx = canvas.getContext("2d");
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillStyle = color;
            if (icons[icon].style === "solid") {
                ctx.font = 'bold 128px "Font Awesome 5 Free"'
            } else {
                ctx.font = '128px "Font Awesome 5 Brands"'
            }
            document.fonts.load(ctx.font).then(() => {
                ctx.fillText(icons[icon].unicode, 64, 64, 128);
                callback(canvas)
            })
        }
        onImageLoad()
        {
            this.canvas.pixelPlane.plane.scheduleRender()
        }
    }
}, function(module, exports, __webpack_require__) {
    const CURRENT_PLUGINS = {
        "monitoring-aws-cloudwatch": {
            main: __webpack_require__(73),
            manifest: __webpack_require__(81),
            isActive: false,
            instance: null
        }
    };
    const EventEmitter = __webpack_require__(2);
    module.exports = class PluginLoader extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.canvas = canvas;
            this.plugins = CURRENT_PLUGINS;
            this.canvas.app.$on("init", this.activateStoredPlugins.bind(this))
        }
        activateStoredPlugins()
        {
            const pluginsToActive = this.canvas.app.userSettings.get("activePlugIns");
            var i = -1;
            const activateNext = () => {
                i++;
                if (pluginsToActive[i]) {
                    this.activatePlugin(pluginsToActive[i], activateNext)
                }
            };
            activateNext()
        }
        registerPlugin(id, manifest, main)
        {
            this.plugins[id] = {
                manifest: manifest,
                main: main,
                isActive: false,
                instance: null
            };
            this.emit("change")
        }
        getAll()
        {
            return this.plugins
        }
        getById(id)
        {
            return this.plugins[id] || null
        }
        getSettingComponents()
        {
            const settingComponents = [];
            for (var key in this.plugins) {
                if (this.plugins[key].isActive) {
                    settingComponents.push(this.plugins[key].manifest.settingsComponent)
                }
            }
            return settingComponents
        }
        activatePlugin(id, callback)
        {
            this.checkPluginId(id);
            this.plugins[id].instance = this.plugins[id].main(this.canvas);
            this.plugins[id].instance.on("ready", () => {
                this.plugins[id].isActive = true;
                this.storePluginState(id, true);
                this.emit("change");
                if (callback) {
                    callback()
                }
            })
        }
        deactivatePlugin(id)
        {
            this.checkPluginId(id);
            this.storePluginState(id, false);
            this.plugins[id].instance.destroy();
            this.plugins[id].instance = null;
            this.plugins[id].isActive = false;
            this.emit("change")
        }
        storePluginState(id, isActive)
        {
            const pluginState = this.canvas.app.userSettings.get("activePlugIns");
            const index = pluginState.indexOf(id);
            if (isActive && index === -1) {
                pluginState.push(id)
            }
            if (!isActive && index > -1) {
                pluginState.splice(index, 1)
            }
            this.canvas.app.userSettings.set("activePlugIns", pluginState)
        }
        checkPluginId(id)
        {
            if (!this.plugins[id]) {
                throw new Error("Unknown Plugin " + id)
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const AwsCloudwatchMonitoringPlugin = __webpack_require__(74);
    __webpack_require__(78);
    module.exports = function(canvas) {
        return new AwsCloudwatchMonitoringPlugin(canvas)
    }
}, function(module, exports, __webpack_require__) {
    const CloudwatchClient = __webpack_require__(75);
    const EventEmitter = __webpack_require__(25).EventEmitter;
    const CloudwatchSettingsPersistance = __webpack_require__(77);
    const Datasource = __webpack_require__(26);
    module.exports = class AwsCloudwatchMonitoringPlugin extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.canvas = canvas;
            this.isReady = false;
            this.persistence = new CloudwatchSettingsPersistance(canvas);
            this.canvas.plugin.helper.loadScript("js/lib/aws-sdk-cloudwatch.js");
            this.showCredentialsDialog();
            this.datasources = {}
        }
        destroy()
        {
            this.client.destroy();
            this.canvas.plugin.thirdPartyAccount.removeCredentialsFor("aws", ["CloudWatchReadOnlyAccess"])
        }
        hasDataSource(metricId)
        {
            return !!this.datasources[metricId]
        }
        getDataSource(metricId, settings, id)
        {
            if (!this.datasources[metricId]) {
                this.datasources[metricId] = new Datasource(settings, id, metricId, this.canvas)
            }
            return this.datasources[metricId]
        }
        showCredentialsDialog(err)
        {
            const externalId = "aws-link-" + this.canvas.app.accountData.get("userId");
            const accountId = "791199207202";
            var msg = "";
            if (err) {
                msg += `<div class="err-msg">${err}</div>`
            }
            msg += `\n            <p>\n                To access AWS Cloudwatch securely, Arcentry needs the\n                <em>ARN</em> (Amazon Resource Identifier, a URL for AWS services) for a role with\n                <em>CloudWatchReadOnlyAccess</em> Policy that can be accessed by Arcentry's AWS account.\n            </p>\n\n            Don't worry, this is a lot simpler than it sounds! You'll need two bits of information from us:\n            <ul>\n                <li>\n                    <b>Arcentry's AWS Account ID:</b>\n                    <span class="copyable">${accountId}</span>\n                </li>\n                <li>\n                    <b>Your Personal External ID:</b>\n                    <span class="copyable">${externalId}</span>\n                </li>\n            </ul>\n\n\n            <a class="main" href="https://www.youtube.com/watch?v=1NjZEA9_Dds" target="_blank">\n                Click here for a step by step guide on how to set up this role\n            </a>\n            <a class="secondary" target="_blank" href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">\n                Click here to learn more about the mechanism Arcentry uses to securely connect to your account.\n            </a>\n        `;
            this.canvas.plugin.thirdPartyAccount.requestCredentialsFor("aws", msg, ["CloudWatchReadOnlyAccess"], this.onCredentials.bind(this))
        }
        onCredentials(err, credentials)
        {
            if (err) {
                this.destroy()
            } else if (this.client) {
                this.client.upgradeCredentials(credentials)
            } else {
                this.client = new CloudwatchClient(credentials);
                this.testConnection()
            }
        }
        testConnection()
        {
            if (!this.canvas.app.isEmbed) {
                this.canvas.app.$refs.sidebar.$refs.overlay.showLoading("testing connection")
            }
            this.client.testConnection(result => {
                if (result === true) {
                    if (!this.canvas.app.isEmbed) {
                        this.canvas.app.$refs.sidebar.$refs.overlay.hide()
                    }
                    this.isReady = true;
                    this.emit("ready")
                } else {
                    this.canvas.plugin.thirdPartyAccount.removeCredentialsFor("aws", ["CloudWatchReadOnlyAccess"]);
                    this.showCredentialsDialog(result)
                }
            })
        }
    }
}, function(module, exports, __webpack_require__) {
    const MetricCache = __webpack_require__(76);
    module.exports = class CloudwatchClient {
        constructor(credentials)
        {
            this.cache = new MetricCache;
            this.region = credentials.region;
            this.client = new AWS.CloudWatch(credentials)
        }
        destroy()
        {
            this.cache.destroy()
        }
        upgradeCredentials(credentials)
        {
            this.client = new AWS.CloudWatch(credentials)
        }
        testConnection(callback)
        {
            this.client.listMetrics({}, (err, data) => {
                if (err) {
                    callback("Failed to connect to AWS: " + err.toString())
                } else {
                    if (data.Metrics.length === 0) {
                        callback("Connection to AWS successful, but no Metrics found for region " + this.region)
                    } else {
                        callback(true)
                    }
                }
            })
        }
        getMetricNamesForNamespaceAndDimension(ns, dimsArray, callback)
        {
            const dims = {};
            for (var x = 0; x < dimsArray.length; x++) {
                dims[dimsArray[x].Name] = dimsArray[x].Value
            }
            this.getMetricsForNamespace(ns, metrics => {
                const metricNames = [];
                var i,
                    j;
                outer:
                for (i = 0; i < metrics.length; i++) {
                    for (j = 0; j < metrics[i].Dimensions.length; j++) {
                        if (dims[metrics[i].Dimensions[j].Name] !== metrics[i].Dimensions[j].Value) {
                            continue outer
                        }
                    }
                    if (metricNames.indexOf(metrics[i].MetricName) === -1) {
                        metricNames.push(metrics[i].MetricName)
                    }
                }
                callback(metricNames.sort())
            })
        }
        getDimensionsForNamespace(ns, callback)
        {
            this.getMetricsForNamespace(ns, metrics => {
                const dimensions = {};
                var i,
                    j,
                    dim,
                    key;
                for (i = 0; i < metrics.length; i++) {
                    for (j = 0; j < metrics[i].Dimensions.length; j++) {
                        dim = metrics[i].Dimensions[j];
                        if (!dimensions[dim.Name]) {
                            dimensions[dim.Name] = []
                        }
                        if (dimensions[dim.Name].indexOf(dim.Value) === -1) {
                            dimensions[dim.Name].push(dim.Value)
                        }
                    }
                }
                for (key in dimensions) {
                    dimensions[key].sort()
                }
                callback(dimensions)
            })
        }
        getMetricsForNamespace(ns, callback)
        {
            const getNext = nextToken => {
                const params = {
                    Namespace: ns
                };
                if (nextToken) {
                    params.NextToken = nextToken
                }
                this.client.listMetrics(params, (err, res) => {
                    if (err) {
                        return
                    }
                    data = data.concat(res.Metrics);
                    if (res.NextToken) {
                        getNext(res.NextToken)
                    } else {
                        this.cache.set(ns, data);
                        callback(data.sort())
                    }
                })
            };
            const cachedMetrics = this.cache.get(ns);
            var data = [];
            if (cachedMetrics) {
                setTimeout(() => {
                    callback(cachedMetrics.sort())
                }, 0)
            } else {
                getNext(null)
            }
        }
    }
}, function(module, exports) {
    const MINUTE = 1e3 * 60;
    const CACHE_EVICTION_TIME = MINUTE * 30;
    const CACHE_EVICTION_INTERVAL = MINUTE * 5;
    module.exports = class MetricCache {
        constructor()
        {
            this.data = {};
            this.cleanupInterval = setInterval(this.cleanup.bind(this), CACHE_EVICTION_INTERVAL)
        }
        get(key)
        {
            return this.data[key] ? this.data[key].data : null
        }
        set(key, data)
        {
            this.data[key] = {
                data: data,
                created: Date.now()
            }
        }
        cleanup()
        {
            const MIN_DATE = Date.now() - CACHE_EVICTION_TIME;
            for (var key in this.data) {
                if (this.data[key].created < MIN_DATE) {
                    delete this.data[key]
                }
            }
        }
        destroy()
        {
            clearInterval(this.cleanupInterval);
            this.data = null
        }
    }
}, function(module, exports) {
    const PLUGIN_NAME = "monitoring-aws-cloudwatch";
    module.exports = class CloudwatchSettingsPersistance {
        constructor(canvas)
        {
            this.canvas = canvas
        }
        generateMetricId()
        {
            return "metric-" + this.canvas.app.state.generateId()
        }
        getSettings(componentId, metricId)
        {
            return this.canvas.app.state.getStateForId(componentId, true)[PLUGIN_NAME].metrics[metricId]
        }
        deleteMetric(componentId, metricId)
        {
            var state = this.canvas.app.state.getStateForId(componentId)[PLUGIN_NAME];
            delete state.metrics[metricId];
            this.storeState(componentId, state)
        }
        storeMetricSettings(componentId, metricId, metricSettings)
        {
            var state = this.canvas.app.state.getStateForId(componentId, true)[PLUGIN_NAME];
            if (!state) {
                state = {}
            }
            if (!state.metrics) {
                state.metrics = {}
            }
            if (!state.metrics[metricId]) {
                state.metrics[metricId] = {}
            }
            for (var key in metricSettings) {
                state.metrics[metricId][key] = metricSettings[key]
            }
            this.storeState(componentId, state)
        }
        storeState(componentId, state)
        {
            this.canvas.app.state.processTransaction({
                id: componentId,
                action: "update",
                data: {
                    [PLUGIN_NAME]: state
                }
            })
        }
    }
}, function(module, exports, __webpack_require__) {
    const CLOUDWATCH_NAMESPACES = __webpack_require__(27);
    __webpack_require__(79);
    Vue.component("monitoring-aws-cloudwatch-settings", {
        template: `\n        <div class="monitoring-aws-cloudwatch-settings">\n            <ul class="metrics">\n                <li v-for="(metric,metricId) in metrics" :key="metricId">\n                    <h3>{{metric.metric}} - {{metric.statistic}}</h3>\n                    <chart \n                        :dataSource="getDataSource(metric,metricId)"\n                        :timeSpanChangeCallback="setTimeSpan.bind(this,metricId)"\n                        :editCallback="editSettings.bind(this,metricId)"\n                        :deleteCallback="deleteMetric.bind(this,metricId)"\n                    ></chart>\n                </li>\n            </ul>\n            <div class="add btn" @click="addMetric" v-if="canAddEntries">\n                <i class="fas fa-plus"></i>\n                <span>add AWS Cloudwatch metric</span>\n            </div>\n        </div>\n    `,
        props: ["id", "canAddEntries"],
        watch: {
            id: function(id, oldId) {
                this.setId(id, oldId)
            }
        },
        data() {
            return {
                metrics: {},
                hasMetrics: false,
                namespace: null
            }
        },
        created: function() {
            this.datasources = {};
            this.setId(this.$props.id, null)
        },
        methods: {
            setId(id, oldId) {
                if (oldId) {
                    this.$root.state.off(oldId + "-update", this.refreshMetrics, this)
                }
                this.$root.state.on(id + "-update", this.refreshMetrics, this);
                const state = this.$root.state.getStateForId(id);
                if (state.componentId) {
                    this.$data.namespace = CLOUDWATCH_NAMESPACES[state.componentId.split(".")[1]]
                }
                this.refreshMetrics()
            },
            setTimeSpan(metricId, span) {
                this.getPlugin().persistence.storeMetricSettings(this.$props.id, metricId, {
                    span: span
                })
            },
            deleteMetric(metricId) {
                const msg = "Are you sure you want to remove this Cloudwatch Metric?";
                this.$root.$refs.sidebar.$refs.overlay.confirm(msg, () => {
                    this.getPlugin().persistence.deleteMetric(this.$props.id, metricId)
                })
            },
            getPlugin() {
                return this.$root.canvas.plugin.registry.getById("monitoring-aws-cloudwatch").instance
            },
            getDataSource(metricSettings, metricId) {
                const plugin = this.getPlugin();
                if (!plugin) {
                    return null
                }
                return plugin.getDataSource(metricId, metricSettings, this.$props.id)
            },
            editSettings(metricId) {
                this.$root.$refs.sidebar.$refs.overlay.showComponent("monitoring-aws-cloudwatch-metric-config", {
                    componentId: this.$props.id,
                    metricId: metricId,
                    namespace: this.$data.namespace
                }, "monitoring-aws-cloudwatch-metric-config")
            },
            refreshMetrics() {
                const state = this.$root.state.getStateForId(this.$props.id, true);
                if (state["monitoring-aws-cloudwatch"] && state["monitoring-aws-cloudwatch"].metrics) {
                    this.$data.metrics = state["monitoring-aws-cloudwatch"].metrics
                } else {
                    this.$data.metrics = {}
                }
                this.$data.hasMetrics = Object.keys(this.$data.metrics).length > 0;
                for (var metricId in this.$data.metrics) {
                    if (this.getPlugin() && this.getPlugin().hasDataSource(metricId)) {
                        this.getPlugin().getDataSource(metricId).updateSettings(this.$data.metrics[metricId])
                    }
                }
            },
            addMetric(confirmCallback) {
                this.$root.$refs.sidebar.$refs.overlay.showComponent("monitoring-aws-cloudwatch-metric-config", {
                    componentId: this.$props.id,
                    metricId: null,
                    namespace: this.$data.namespace,
                    confirmCallback: typeof confirmCallback === "function" ? confirmCallback : null
                }, "monitoring-aws-cloudwatch-metric-config")
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const NAMESPACES = __webpack_require__(27);
    const CloudwatchChartDatasource = __webpack_require__(26);
    __webpack_require__(80);
    Vue.component("monitoring-aws-cloudwatch-metric-config", {
        template: `\n        <div class="monitoring-aws-cloudwatch-metric-config-component">\n            <header>\n                <div class="img">\n                    <img src="/assets/images/aws-amazon-cloudwatch-logo.png" />\n                </div>\n                <h2>Add Cloudwatch Metric</h2>\n            </header>\n            <chart \n                :dataSource="chartDataSource"\n                :timeSpanChangeCallback="updateChart" \n                ref="chart"></chart>\n            <label>Namespace</label>\n            <autocomplete :options="namespaceOptions" :value="namespace" :callback="setNamespace"></autocomplete>\n            <label>Dimensions</label>\n            <ul class="dimensions">\n                <monitoring-aws-cloudwatch-metric-config-dimension\n                    v-for="dim in dimensions" \n                    :key="dim.id"\n                    :id="dim.id"\n                    :name="dim.Name"\n                    :value="dim.Value"\n                    :namespace="namespace"\n                    :callback="onDimensionChange"\n                ></monitoring-aws-cloudwatch-metric-config-dimension>\n            </ul>\n            <a href="#" class="add" @click="addDimension">+ add dimension</a>\n            <div class="metric-statistic">\n                <div class="metric">\n                    <label>Metric</label>\n                    <autocomplete \n                        :options="metricOptions"\n                        :value="metricName"\n                        :callback="onMetricName"\n                        :is-loading="metricNameLoading"\n                    ></autocomplete>\n                </div>\n                <div class="statistic">\n                    <label>Statistic</label>\n                    <autocomplete :value="statistic" :options="['SampleCount', 'Average', 'Sum', 'Minimum', 'Maximum']" :callback="setStatistic"></autocomplete>\n                </div>\n            </div>\n        </div>\n    `,
        props: ["settings"],
        data() {
            const data = {};
            data.namespaceOptions = this.getNamespaceOptions();
            data.metricOptions = [];
            data.metricNameLoading = false;
            data.dimensionCount = 1;
            data.chartDataSource = new CloudwatchChartDatasource({}, this.$props.settings.id, this.$props.metricId, this.$root.canvas);
            if (this.$props.settings.metricId) {
                const settings = this.getPluginInstance().persistence.getSettings(this.$props.settings.componentId, this.$props.settings.metricId);
                data.namespace = settings.namespace;
                data.dimensions = settings.dimensions;
                data.metricName = settings.metric;
                data.statistic = settings.statistic;
                data.span = settings.span;
                for (var i = 0; i < data.dimensions.length; i++) {
                    data.dimensions[i].id = "dim-" + data.dimensionCount;
                    data.dimensionCount++
                }
            } else {
                data.namespace = this.$props.settings.namespace;
                data.dimensions = [{
                    Name: "",
                    Value: "",
                    id: "dim-0"
                }];
                data.metricName = null;
                data.statistic = "SampleCount";
                data.span = "4H"
            }
            return data
        },
        created() {
            if (!this.$props.settings.metricId) {
                this.setNamespace(this.$props.settings.namespace)
            } else {
                this.onDimensionChange()
            }
        },
        methods: {
            onConfirm() {
                const persistence = this.getPluginInstance().persistence;
                const metricId = this.$props.settings.metricId || persistence.generateMetricId();
                const componentId = this.$props.settings.componentId;
                const metricSettings = this.getSettings();
                persistence.storeMetricSettings(componentId, metricId, metricSettings);
                if (this.$props.settings.confirmCallback) {
                    this.$props.settings.confirmCallback(metricId, metricSettings)
                }
            },
            removeDimension(id) {
                for (var i = 0; i < this.$data.dimensions.length; i++) {
                    if (this.$data.dimensions[i].id === id) {
                        this.$data.dimensions.splice(i, 1)
                    }
                }
                this.onDimensionChange()
            },
            getNamespaceOptions() {
                return Object.values(NAMESPACES).join(",").split(",")
            },
            getPluginInstance() {
                return this.$root.canvas.plugin.registry.getById("monitoring-aws-cloudwatch").instance
            },
            setNamespace(namespace) {
                this.$data.namespace = namespace;
                this.updateChart()
            },
            addDimension() {
                this.$data.dimensions.push({
                    Name: "",
                    Value: "",
                    id: "dim-" + this.$data.dimensionCount
                });
                this.$data.dimensionCount++;
                this.updateChart()
            },
            getDimensions() {
                const dimensions = [];
                for (var i = 0; i < this.$children.length; i++) {
                    if (this.$children[i].isDimension) {
                        dimensions.push(this.$children[i].getData())
                    }
                }
                return dimensions
            },
            onDimensionChange() {
                this.$data.metricNameLoading = true;
                this.getPluginInstance().client.getMetricNamesForNamespaceAndDimension(this.$data.namespace, this.getDimensions(), metricNames => {
                    this.$data.metricOptions = metricNames;
                    this.$data.metricNameLoading = false;
                    this.updateChart()
                })
            },
            onMetricName(metricName) {
                this.$data.metricName = metricName;
                this.updateChart()
            },
            setStatistic(statistic) {
                this.$data.statistic = statistic;
                this.updateChart()
            },
            getSettings() {
                var span;
                if (this.$refs.chart) {
                    span = this.$refs.chart.getTimeSpan()
                }
                if (!span) {
                    span = this.$data.span
                }
                if (!span) {
                    span = "4H"
                }
                return {
                    namespace: this.$data.namespace,
                    dimensions: this.getDimensions(),
                    metric: this.$data.metricName,
                    statistic: this.$data.statistic,
                    span: span
                }
            },
            updateChart() {
                this.$data.chartDataSource.updateSettings(this.getSettings())
            }
        }
    })
}, function(module, exports) {
    Vue.component("monitoring-aws-cloudwatch-metric-config-dimension", {
        template: `\n        <li class="monitoring-aws-cloudwatch-metric-config-dimension">\n            <autocomplete \n                :options="nameOptions" \n                :value="nameInput" \n                :callback="setName"\n                :is-loading="nameLoading"\n            ></autocomplete>\n            <span>=</span>\n            <autocomplete :options="valueOptions" :value="valueInput" :callback="setValue"></autocomplete>\n            <i class="fas fa-times" @click="remove"></i>\n        </li>\n    `,
        props: ["namespace", "callback", "name", "value", "id"],
        data() {
            return {
                nameInput: this.$props.name || "",
                nameOptions: [],
                valueInput: this.$props.value || "",
                valueOptions: [],
                isDimension: true,
                nameLoading: false,
                valueLoading: false
            }
        },
        watch: {
            namespace(namespace) {
                this.setNamespace(namespace)
            }
        },
        created() {
            this.setNamespace(this.$props.namespace);
            if (this.$props.name) {
                this.setName(this.$props.name)
            }
        },
        methods: {
            remove() {
                this.$parent.removeDimension(this.$props.id)
            },
            setNamespace(namespace) {
                this.$data.nameLoading = true;
                const plugin = this.$root.canvas.plugin.registry.getById("monitoring-aws-cloudwatch");
                if (!plugin || !plugin.instance) {
                    return
                }
                const cloudwatch = this.$root.canvas.plugin.registry.getById("monitoring-aws-cloudwatch").instance.client;
                cloudwatch.getDimensionsForNamespace(namespace, metrics => {
                    this.$data.nameLoading = false;
                    this.$data.nameOptions = Object.keys(metrics).sort()
                })
            },
            setName(name) {
                this.$data.valueLoading = true;
                this.$data.nameInput = name;
                const cloudwatch = this.$root.canvas.plugin.registry.getById("monitoring-aws-cloudwatch").instance.client;
                cloudwatch.getDimensionsForNamespace(this.$props.namespace, metrics => {
                    this.$data.valueLoading = false;
                    this.$data.valueOptions = metrics[name]
                })
            },
            setValue(value) {
                this.$data.valueInput = value;
                this.callback()
            },
            getData() {
                return {
                    Name: this.$data.nameInput,
                    Value: this.$data.valueInput
                }
            }
        }
    })
}, function(module, exports) {
    module.exports = {
        id: "monitoring-aws-cloudwatch",
        name: "AWS Cloudwatch Monitoring",
        category: "monitoring",
        desc: "Integrates Metrics and Alerts from AWS Cloudwatch into Arcentry",
        logo: "/assets/images/aws-amazon-cloudwatch-logo.png",
        settingsComponent: "monitoring-aws-cloudwatch-settings",
        tags: ["monitoring", "realtime", "alerts", "metrics", "amazon", "web", "services"]
    }
}, function(module, exports) {
    const ACCOUNT_PROVIDER_SETTINGS = {
        aws: {
            logo: "/assets/images/aws-logo.png",
            resolveFn: "resolveAwsAccessData",
            fields: {
                region: {
                    label: "Default Region",
                    type: "select",
                    options: {
                        "us-west-2": "US West (Oregon)",
                        "us-west-1": "US West (N. California)",
                        "us-east-2": "US East (Ohio)",
                        "us-east-1": "US East (N. Virginia)",
                        "ap-south-1": "Asia Pacific (Mumbai)",
                        "ap-northeast-2": "Asia Pacific (Seoul)",
                        "ap-southeast-1": "Asia Pacific (Singapore)",
                        "ap-southeast-2": "Asia Pacific (Sydney)",
                        "ap-northeast-1": "Asia Pacific (Tokyo)",
                        "ca-central-1": "Canada (Central)",
                        "cn-north-1": "China (Beijing)",
                        "eu-central-1": "EU (Frankfurt)",
                        "eu-west-1": "EU (Ireland)",
                        "eu-west-2": "EU (London)",
                        "eu-west-3": "EU (Paris)",
                        "sa-east-1": "South America (São Paulo)",
                        "us-gov-west-1": "AWS GovCloud (US)"
                    }
                },
                roleArn: {
                    label: "AWS Role ARN",
                    type: "text"
                }
            }
        }
    };
    module.exports = class ThirdPartyAccountManager {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.refreshTimeout = null
        }
        removeCredentialsFor(accountProvider, attributes)
        {
            clearTimeout(this.refreshTimeout);
            this.canvas.app.userSettings.set(accountProvider + "-access-data", null)
        }
        requestCredentialsFor(accountProvider, msg, attributes, callback)
        {
            if (!ACCOUNT_PROVIDER_SETTINGS[accountProvider]) {
                throw new Error(`\n                Unknown third party account provider ${accountProvider}.\n                Supported account provider are ${SUPPORTED_ACCOUNT_PROVIDER.join(", ")}\n            `)
            }
            const accessDataKey = accountProvider + "-access-data";
            const accessData = this.canvas.app.userSettings.get(accessDataKey);
            const s = ACCOUNT_PROVIDER_SETTINGS[accountProvider];
            if (accessData) {
                this[s.resolveFn](accessData, callback, err => {
                    this.canvas.app.userSettings.set(accessDataKey, null);
                    this.requestCredentialsFor(accountProvider, msg, attributes, callback)
                });
                return
            }
            if (!this.canvas.app.$refs.sidebar || !this.canvas.app.$refs.sidebar.$refs.overlay) {
                return
            }
            this.canvas.app.$refs.sidebar.$refs.overlay.requestCredentials(s.logo, msg, s.fields, accountProvider, (err, accessData) => {
                if (err) {} else {
                    this.canvas.app.userSettings.set(accessDataKey, accessData);
                    this.canvas.app.$refs.sidebar.$refs.overlay.showLoading("checking credentials");
                    this[s.resolveFn](accessData, callback, err => {
                        const msg = `<div class="err-msg">Credentials could not be verified: ${err.message}</div>`;
                        this.requestCredentialsFor(accountProvider, msg, attributes, callback)
                    })
                }
            })
        }
        resolveAwsAccessData(accessData, callback, onFail)
        {
            clearTimeout(this.refreshTimeout);
            this.canvas.app.$http.post("account/get-aws-credentials", {
                roleArn: accessData.roleArn
            }).then(res => {
                if (res.body.err) {
                    onFail(res.body.err)
                } else {
                    callback(null, {
                        region: accessData.region,
                        credentials: {
                            accessKeyId: res.body.data.AccessKeyId,
                            secretAccessKey: res.body.data.SecretAccessKey,
                            sessionToken: res.body.data.SessionToken
                        }
                    });
                    const refreshCredentialsIn = new Date(res.body.data.Expiration).getTime() - Date.now() - 1e3 * 60 * 10;
                    this.refreshTimeout = setTimeout(() => {
                        this.resolveAwsAccessData(accessData, callback, onFail)
                    }, refreshCredentialsIn)
                }
            })
        }
    }
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(2);
    const tools = __webpack_require__(4);
    const C = __webpack_require__(0);
    const DEFAULT_LAYER = {
        name: "Default Layer",
        id: "default",
        color: "#e61898",
        visible: true,
        locked: false
    };
    module.exports = class LayerManager extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.canvas = canvas;
            this.lastSavedStringData = null;
            this.layers = [];
            this.layerMap = {};
            this.canvas.app.eventHub.on("init", this.init, this)
        }
        buildLayerMap()
        {
            this.layerMap = {};
            for (var i = 0; i < this.layers.length; i++) {
                this.layerMap[this.layers[i].id] = this.layers[i]
            }
        }
        init()
        {
            const metaKey = this.canvas.app.state.meta.createMetaKey(C.META_TYPES.LAYER);
            this.canvas.app.state.on(metaKey + "-" + C.ACTIONS.CREATE, this.loadLayers, this);
            this.canvas.app.state.on(metaKey + "-" + C.ACTIONS.UPDATE, this.loadLayers, this);
            this.canvas.app.state.on("state-loaded", this.loadLayers, this);
            this.loadLayers()
        }
        loadLayers()
        {
            const layers = this.canvas.app.state.meta.load(C.META_TYPES.LAYER);
            if (layers) {
                this.layers = layers
            } else {
                this.layers = [DEFAULT_LAYER]
            }
            this.buildLayerMap();
            this.setObjectProperties();
            this.canvas.interactionPlane.plane.scheduleRender();
            this.canvas.pixelPlane.plane.scheduleRender();
            this.emit("change")
        }
        getAll()
        {
            return this.layers
        }
        getIds()
        {
            return this.layers.map(layer => {
                return layer.id
            })
        }
        getObjectIdsForLayerId(layerId)
        {
            const objectIds = [];
            for (var objId in this.canvas.app.state.data) {
                if (this.canvas.app.state.data[objId].data.layerId === layerId) {
                    objectIds.push(objId)
                }
            }
            return objectIds
        }
        getLayerForObject(objectId)
        {
            const objectData = this.canvas.app.state.getStateForId(objectId);
            if (!objectData.layerId) {
                return DEFAULT_LAYER
            }
            return this.layerMap[objectData.layerId] || DEFAULT_LAYER
        }
        addLayer()
        {
            const id = this.canvas.app.state.generateId();
            this.layers.push({
                name: "New Layer",
                id: id,
                color: "#FF0000",
                visible: true,
                locked: false
            });
            this.save();
            return id
        }
        updateLayer(id, layer)
        {
            for (var i = 0; i < this.layers.length; i++) {
                if (this.layers[i].id === id) {
                    this.layers[i] = layer;
                    break
                }
            }
            this.save()
        }
        deleteLayer(id)
        {
            this.layers = this.layers.filter(layer => {
                return layer.id !== id
            });
            this.save()
        }
        getLayerById(id)
        {
            if (this.layerMap[id]) {
                return tools.deepClone(this.layerMap[id])
            } else {
                return null
            }
        }
        removeInvisible(objects)
        {
            const visible = {};
            for (var id in objects) {
                if (this.isVisible(objects[id])) {
                    visible[id] = objects[id]
                }
            }
            return visible
        }
        isVisible(object)
        {
            var layerId = null;
            if (!object.data) {
                layerId = this.canvas.app.state.getStateForId(object.id).layerId
            } else if (object.data.layerId) {
                layerId = object.data.layerId
            }
            if (!layerId || !this.layerMap[layerId]) {
                return true
            }
            return this.layerMap[layerId].visible
        }
        save()
        {
            const stringData = JSON.stringify(this.layers);
            if (stringData === this.lastSavedStringData) {
                return
            }
            this.lastSavedStringData = stringData;
            this.canvas.app.state.meta.save(C.META_TYPES.LAYER, this.layers);
            this.buildLayerMap();
            this.setObjectProperties();
            this.emit("change");
            this.canvas.interactionPlane.plane.scheduleRender();
            this.canvas.pixelPlane.plane.scheduleRender()
        }
        setObjectProperties()
        {
            const objects = this.canvas.app.objects.getAll();
            for (var id in objects) {
                if (this.getLayerForObject(id).locked) {
                    objects[id].isHoverable = false;
                    objects[id].isHovered = false;
                    objects[id].isSelectable = false;
                    objects[id].isSelected = false;
                    objects[id].isLocked = true
                } else {
                    objects[id].isHoverable = true;
                    objects[id].isSelectable = true;
                    objects[id].isLocked = false
                }
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const WidgetScaleGroupLinkedComponentManager = __webpack_require__(85);
    const ADD_TYPES = {
        PIXEL: "pixel"
    };
    const WIDGETS = {
        [C.WIDGET_TYPES.CHART]: {
            addType: ADD_TYPES.PIXEL,
            objClass: __webpack_require__(86)
        },
        [C.WIDGET_TYPES.SCALE_GROUP]: {
            addType: ADD_TYPES.PIXEL,
            objClass: __webpack_require__(87)
        }
    };
    module.exports = class WidgetManager {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.widgetScaleGroupLinkedComponentManager = new WidgetScaleGroupLinkedComponentManager(canvas)
        }
        isPixelWidget(type)
        {
            return WIDGETS[type].addType === ADD_TYPES.PIXEL
        }
        add(type)
        {
            this.checkType(type);
            if (this.isPixelWidget(type)) {
                this.addPixelType(type)
            }
        }
        checkType(type)
        {
            if (!WIDGETS[type]) {
                throw new Error("Unknown widget type " + type)
            }
        }
        createWidget(id)
        {
            const state = this.canvas.app.state.getStateForId(id);
            this.checkType(state.widgetType);
            return new WIDGETS[state.widgetType].objClass(this.canvas, id, state)
        }
        addPixelType(type)
        {
            this.canvas.pixelPlane.startAddWidget(state => {
                WIDGETS[type].objClass.createState(state, this.canvas)
            })
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    module.exports = class WidgetScaleGroupLinkedComponentManager {
        constructor(canvas)
        {
            this.canvas = canvas
        }
        getLinkedComponentId(scaleGroupId)
        {
            const allComponents = this.canvas.app.state.getAllOfType(C.TYPES.COMPONENT);
            const position = this.canvas.app.state.getStateForId(scaleGroupId).position;
            for (var id in allComponents) {
                if (allComponents[id].data.position.x === position.x && allComponents[id].data.position.y === position.y) {
                    return id
                }
            }
            return null
        }
        updateLinkedComponents(scaleGroupId)
        {
            const state = this.canvas.app.state.getStateForId(scaleGroupId);
            const linkedComponentId = this.getLinkedComponentId(scaleGroupId);
            if (!linkedComponentId) {
                this.canvas.app.state.processTransaction({
                    id: scaleGroupId,
                    action: C.ACTIONS.UPDATE,
                    data: {
                        instanceCount: 1
                    }
                });
                state.instanceCount = 1
            }
            if (state.instanceCount - 1 !== state.generatedComponentIds.length) {
                this.reconcileLinkedComponents(state, scaleGroupId, linkedComponentId)
            }
            this.updateLinkedComponentPositions(state)
        }
        updateLinkedComponentPositions(state)
        {
            var i,
                currentPosition,
                x,
                y;
            y = state.position.y;
            for (i = 0; i < state.generatedComponentIds.length; i++) {
                x = state.position.x + (i + 1) * 1.5;
                currentPosition = this.canvas.app.state.getStateForId(state.generatedComponentIds[i]).position;
                if (currentPosition.x !== x || currentPosition.y !== y) {
                    this.canvas.app.state.processTransaction({
                        id: state.generatedComponentIds[i],
                        action: C.ACTIONS.UPDATE,
                        data: {
                            position: {
                                x: x,
                                y: y
                            }
                        }
                    })
                }
            }
        }
        reconcileLinkedComponents(state, scaleGroupId, linkedComponentId)
        {
            const instanceIds = [];
            var i,
                id;
            for (i = 1; i < state.instanceCount; i++) {
                if (state.generatedComponentIds[i - 1]) {
                    instanceIds.push(state.generatedComponentIds[i - 1])
                } else {
                    id = this.canvas.app.state.generateId();
                    instanceIds.push(id);
                    this.canvas.app.state.processTransaction({
                        id: id,
                        type: C.TYPES.COMPONENT,
                        action: C.ACTIONS.CREATE,
                        data: this.canvas.app.state.getStateForId(linkedComponentId, true)
                    })
                }
            }
            for (i = state.instanceCount - 1; i < state.generatedComponentIds.length; i++) {
                if (this.canvas.app.state.getStateForId(state.generatedComponentIds[i])) {
                    this.canvas.app.state.processTransaction({
                        id: state.generatedComponentIds[i],
                        action: C.ACTIONS.DELETE
                    })
                }
            }
            this.canvas.app.state.processTransaction({
                id: scaleGroupId,
                action: C.ACTIONS.UPDATE,
                data: {
                    generatedComponentIds: instanceIds
                }
            })
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const PixelObjectImage = __webpack_require__(23);
    const Rectangle = __webpack_require__(3);
    module.exports = class WidgetChart extends PixelObjectImage {
        constructor(canvas, id)
        {
            super(canvas, id);
            this.type = C.TYPES.WIDGET;
            this.canvas = canvas;
            this.id = id;
            this.renderFn = (() => {
                this.canvas.pixelPlane.plane.scheduleRender()
            });
            this.extremes = {
                minY: 0,
                maxY: 0
            };
            this.errorText = null;
            this.dataSource = null;
            this.isBoxSelectionType = true;
            this.showResizeOnSelect = true
        }
        static createState(state, canvas)
        {
            state.widgetType = C.WIDGET_TYPES.CHART;
            state.data = null;
            state.dataSource = null;
            state.lineColor = canvas.app.userSettings.get("widgetChartLineColor");
            state.fillChart = canvas.app.userSettings.get("widgetChartFillChart");
            state.showLabels = canvas.app.userSettings.get("widgetChartShowLabels");
            state.plotType = canvas.app.userSettings.get("widgetChartPlotType")
        }
        getDataFromDataSource(state)
        {
            this.errorText = null;
            if (!state.dataSource || state.dataSource === "api") {
                return state.data || []
            }
            if (state.dataSource === "cloudwatch") {
                const plugin = this.canvas.plugin.registry.getById("monitoring-aws-cloudwatch");
                if (!plugin || !plugin.instance) {
                    this.errorText = "Cloudwatch Plugin not found";
                    return []
                }
                if (!state["monitoring-aws-cloudwatch"] || !state["monitoring-aws-cloudwatch"].metrics) {
                    return []
                }
                const metricId = Object.keys(state["monitoring-aws-cloudwatch"].metrics)[0];
                const metricSettings = state["monitoring-aws-cloudwatch"].metrics[metricId];
                const dataSource = plugin.instance.getDataSource(metricId, metricSettings, this.id);
                if (!dataSource) {
                    this.errorText = "data not loaded";
                    return []
                }
                if (this.dataSource !== dataSource) {
                    if (this.dataSource) {
                        this.dataSource.removeListener("data", this.renderFn)
                    }
                    this.dataSource = dataSource;
                    this.dataSource.on("data", this.renderFn)
                }
                if (!dataSource.data) {
                    this.errorText = "loading data";
                    return []
                }
                return dataSource.data
            }
        }
        render(state)
        {
            const margin = state.showLabels ? .25 : 0;
            const data = this.getDataFromDataSource(state);
            const bb = this.boundingBox;
            const plane = this.canvas.pixelPlane.plane;
            if (data.length === 0) {
                const srcImage = this.canvas.imageCache.getImage("./no-data-loaded.png");
                this.canvas.pixelPlane.plane.drawImage(srcImage, bb.x1, bb.y1, bb.width, bb.height, 0);
                return
            }
            this.extremes = this.getExtremes(data);
            if (state.yAxisSpace === "auto" && this.extremesChangeCallback) {
                this.extremesChangeCallback()
            } else if (state.yAxisSpace === "custom") {
                this.extremes.minY = state.minY;
                this.extremes.maxY = state.maxY;
                this.extremes.spanY = state.maxY - state.minY
            }
            if (state.plotType === "bar") {
                const barSpace = (bb.width - margin) / data.length;
                var i,
                    point,
                    rect;
                plane.setFillStyle(state.lineColor);
                for (i = 0; i < data.length; i++) {
                    point = this.getPointForGraph(data, i, margin);
                    rect = new Rectangle(bb.x1 + margin + barSpace * i - barSpace * .3, point.y, bb.x1 + margin + barSpace * i + barSpace * .3, bb.y2 - margin);
                    plane.fillRect(rect)
                }
            }
            if (state.plotType === "line") {
                plane.beginPath();
                plane.moveTo(this.getPointForGraph(data, 0, margin));
                for (var i = 1; i < data.length; i++) {
                    plane.lineTo(this.getPointForGraph(data, i, margin))
                }
                plane.setLineWidth(.05);
                plane.setStrokeStyle(state.lineColor);
                plane.stroke();
                if (state.fillChart) {
                    plane.lineTo({
                        x: this.boundingBox.x2,
                        y: this.boundingBox.y2 - margin
                    });
                    plane.lineTo({
                        x: this.boundingBox.x1 + margin,
                        y: this.boundingBox.y2 - margin
                    });
                    plane.closePath();
                    plane.setFillStyle(state.lineColor + "99");
                    plane.fill()
                }
            }
            plane.beginPath();
            plane.moveTo({
                x: bb.x1 + margin,
                y: bb.y1
            });
            plane.lineTo({
                x: bb.x1 + margin,
                y: bb.y2 - margin
            });
            plane.lineTo({
                x: bb.x2,
                y: bb.y2 - margin
            });
            plane.setStrokeStyle("#999");
            plane.stroke();
            if (state.showLabels) {
                plane.setFont(.5, '"Open Sans", sans-serif', {
                    bold: true
                });
                plane.setTextAlign("right");
                plane.setFillStyle("#999");
                plane.fillText(this.formatLabel(this.extremes.maxY), {
                    x: bb.x1 + margin - .1,
                    y: bb.y1
                });
                plane.fillText(this.formatLabel(this.extremes.minY), {
                    x: bb.x1 + margin - .1,
                    y: bb.y2 - margin
                })
            }
        }
        formatLabel(value)
        {
            if (Math.floor(value) === value) {
                return value
            }
            if (value < 1) {
                return value.toFixed(2)
            }
            if (value < 10) {
                return value.toFixed(1)
            }
            return Math.round(value)
        }
        getPointForGraph(data, i, margin)
        {
            var x = this.boundingBox.x1 + margin + (data[i][0] - this.extremes.minX) / this.extremes.spanX * (this.boundingBox.width - margin);
            var y = this.boundingBox.y2 - margin - (data[i][1] - this.extremes.minY) / this.extremes.spanY * (this.boundingBox.height - margin);
            y = Math.min(y, this.boundingBox.y2 - margin);
            y = Math.max(y, this.boundingBox.y1);
            return {
                x: x,
                y: y
            }
        }
        getExtremes(data)
        {
            const extremes = {
                minX: Infinity,
                maxX: -Infinity,
                minY: Infinity,
                maxY: -Infinity
            };
            for (var i = 0; i < data.length; i++) {
                if (extremes.minX > data[i][0]) {
                    extremes.minX = data[i][0]
                }
                if (extremes.maxX < data[i][0]) {
                    extremes.maxX = data[i][0]
                }
                if (extremes.minY > data[i][1]) {
                    extremes.minY = data[i][1]
                }
                if (extremes.maxY < data[i][1]) {
                    extremes.maxY = data[i][1]
                }
            }
            extremes.spanX = extremes.maxX - extremes.minX;
            extremes.spanY = extremes.maxY - extremes.minY;
            return extremes
        }
        computeBoundingBox()
        {
            const state = this.canvas.app.state.getStateForId(this.id);
            this.boundingBox.set(state.position.x, state.position.y, state.position.x + state.dimensions.width, state.position.y + state.dimensions.height);
            return this.boundingBox
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const Rectangle = __webpack_require__(3);
    const PixelObject = __webpack_require__(10);
    const colorTools = __webpack_require__(15);
    const styles = __webpack_require__(5);
    const margin = .1;
    const dentDepth = .3;
    const dentWidth = .1;
    const arrowHeight = .7;
    const minWidth = .5;
    module.exports = class WidgetScaleGroup extends PixelObject {
        constructor(canvas, id)
        {
            super(canvas, id);
            this.type = C.TYPES.WIDGET;
            this.canvas = canvas;
            this.id = id;
            this.moveHalfCell = true;
            this.isBoxSelectionType = true;
            this.leftArrowBB = new Rectangle(0, 0, 0, 0);
            this.rightArrowBB = new Rectangle(0, 0, 0, 0);
            this.leftArrowHovered = false;
            this.rightArrowHovered = false;
            this.leftArrowDragged = false;
            this.rightArrowHovered = false;
            this.dragStartState = null;
            this.dragStartX = null;
            this.newWidth = null;
            this.newX = null;
            this.eventHandlerBound = false;
            this.canvas.interactionPlane.plane.on("render", this.renderInteractions, this)
        }
        static createState(state, canvas)
        {
            state.widgetType = C.WIDGET_TYPES.SCALE_GROUP;
            state.rotation = 0;
            state.dimensions.width = 3;
            state.dimensions.height = 1;
            state.instanceCount = 1;
            state.linkedComponentId = null;
            state.generatedComponentIds = [];
            state.lineColor = canvas.app.userSettings.get("widgetScaleGroupLineColor");
            state.lineWidth = canvas.app.userSettings.get("widgetScaleGroupLineWidth");
            state.fillColor = canvas.app.userSettings.get("widgetScaleGroupFillColor");
            state.shadowLevel = canvas.app.userSettings.get("widgetScaleGroupShadowLevel")
        }
        render(state, id)
        {
            const plane = this.canvas.pixelPlane.plane;
            const x1 = state.position.x - margin;
            const y1 = state.position.y - margin;
            const x2 = state.position.x + state.dimensions.width + margin;
            const y2 = state.position.y + state.dimensions.height + margin;
            plane.beginPath();
            plane.moveTo({
                x: x1,
                y: y1
            });
            plane.lineTo({
                x: x2,
                y: y1
            });
            plane.lineTo({
                x: x2,
                y: y1 + dentDepth
            });
            plane.lineTo({
                x: x2 + dentWidth,
                y: y1 + dentDepth
            });
            plane.lineTo({
                x: x2 + dentWidth,
                y: y1
            });
            plane.lineTo({
                x: x2 + arrowHeight,
                y: state.position.y + state.dimensions.height / 2
            });
            plane.lineTo({
                x: x2 + dentWidth,
                y: y2
            });
            plane.lineTo({
                x: x2 + dentWidth,
                y: y2 - dentDepth
            });
            plane.lineTo({
                x: x2,
                y: y2 - dentDepth
            });
            plane.lineTo({
                x: x2,
                y: y2
            });
            plane.lineTo({
                x: x1,
                y: y2
            });
            plane.lineTo({
                x: x1,
                y: y2 - dentDepth
            });
            plane.lineTo({
                x: x1 - dentWidth,
                y: y2 - dentDepth
            });
            plane.lineTo({
                x: x1 - dentWidth,
                y: y2
            });
            plane.lineTo({
                x: x1 - arrowHeight,
                y: state.position.y + state.dimensions.height / 2
            });
            plane.lineTo({
                x: x1 - dentWidth,
                y: y1
            });
            plane.lineTo({
                x: x1 - dentWidth,
                y: y1 + dentDepth
            });
            plane.lineTo({
                x: x1,
                y: y1 + dentDepth
            });
            plane.closePath();
            plane.setLineWidth(state.lineWidth);
            plane.setShadowLevel(state.shadowLevel);
            plane.setFillStyle(state.fillColor);
            plane.fill();
            plane.setShadowLevel(0);
            plane.setStrokeStyle(state.lineColor);
            plane.stroke();
            const hoverColor = styles.themeColor;
            if (this.leftArrowHovered) {
                plane.beginPath();
                plane.moveTo({
                    x: x1,
                    y: y2 - dentDepth
                });
                plane.lineTo({
                    x: x1 - dentWidth,
                    y: y2 - dentDepth
                });
                plane.lineTo({
                    x: x1 - dentWidth,
                    y: y2
                });
                plane.lineTo({
                    x: x1 - arrowHeight,
                    y: state.position.y + state.dimensions.height / 2
                });
                plane.lineTo({
                    x: x1 - dentWidth,
                    y: y1
                });
                plane.lineTo({
                    x: x1 - dentWidth,
                    y: y1 + dentDepth
                });
                plane.lineTo({
                    x: x1,
                    y: y1 + dentDepth
                });
                plane.setStrokeStyle(hoverColor);
                plane.stroke()
            }
            if (this.rightArrowHovered) {
                plane.beginPath();
                plane.moveTo({
                    x: x2,
                    y: y1 + dentDepth
                });
                plane.lineTo({
                    x: x2 + dentWidth,
                    y: y1 + dentDepth
                });
                plane.lineTo({
                    x: x2 + dentWidth,
                    y: y1
                });
                plane.lineTo({
                    x: x2 + arrowHeight,
                    y: state.position.y + state.dimensions.height / 2
                });
                plane.lineTo({
                    x: x2 + dentWidth,
                    y: y2
                });
                plane.lineTo({
                    x: x2 + dentWidth,
                    y: y2 - dentDepth
                });
                plane.lineTo({
                    x: x2,
                    y: y2 - dentDepth
                });
                plane.setStrokeStyle(hoverColor);
                plane.stroke()
            }
        }
        renderInteractions()
        {
            if (this.isSelected) {
                const plane = this.canvas.interactionPlane.plane;
                const state = this.canvas.app.state.getStateForId(this.id);
                plane.setStrokeStyle(colorTools.adjustLightness(state.fillColor, .3));
                plane.setLineDash([.3, .1]);
                plane.setLineWidth(.04);
                plane.strokeRect(Rectangle.fromPointAndSize(state.position, {
                    width: 1,
                    height: 1
                }));
                plane.setLineDash([])
            }
        }
        destroy()
        {
            this.endDrag();
            this.canvas.interactionPlane.plane.off("render", this.renderInteractions, this);
            super.destroy()
        }
        showHover()
        {
            super.showHover();
            if (this.eventHandlerBound) {
                return
            }
            this.canvas.mouseProjector.on(C.EVENTS.RAW_POSITION_CHANGED, this.onMouseMove, this, 0);
            this.canvas.mouseControls.on("mousedown", this.onMouseDown, this, 0);
            this.canvas.mouseControls.on("mouseup", this.onMouseUp, this, 0);
            this.eventHandlerBound = true
        }
        hideHover()
        {
            super.hideHover();
            if (!this.leftArrowDragged && !this.rightArrowDragged) {
                this.endDrag()
            }
        }
        endDrag()
        {
            this.canvas.mouseProjector.off(C.EVENTS.RAW_POSITION_CHANGED, this.onMouseMove, this, 0);
            this.canvas.mouseControls.off("mousedown", this.onMouseDown, this, 0);
            this.canvas.mouseControls.off("mouseup", this.onMouseUp, this, 0);
            this.eventHandlerBound = false;
            this.leftArrowHovered = false;
            this.rightArrowHovered = false;
            this.leftArrowDragged = false;
            this.rightArrowDragged = false;
            this.dragStartState = null;
            this.dragStartX = null;
            this.newWidth = null;
            this.newX = null
        }
        saveWidth(isTransient)
        {
            this.canvas.app.state.processTransaction({
                id: this.id,
                action: C.ACTIONS.UPDATE,
                data: {
                    position: {
                        x: this.newX,
                        y: this.dragStartState.position.y
                    },
                    dimensions: {
                        width: this.newWidth,
                        height: this.dragStartState.dimensions.height
                    }
                }
            }, isTransient)
        }
        onMouseMove(point)
        {
            if (this.leftArrowDragged || this.rightArrowDragged) {
                point = this.canvas.mouseProjector.getPlaneCoordinatesForMouseEvent(this.canvas.mouseProjector.lastEvent, C.EVENTS.HALF_CELL_CHANGED);
                const delta = point.x - this.dragStartX;
                if (this.leftArrowDragged) {
                    if (this.dragStartState.dimensions.width - delta < minWidth) {
                        return
                    }
                    this.newX = this.dragStartState.position.x + delta;
                    this.newWidth = this.dragStartState.dimensions.width - delta
                } else {
                    this.newX = this.dragStartState.position.x;
                    this.newWidth = Math.max(minWidth, this.dragStartState.dimensions.width + delta)
                }
                this.saveWidth(true);
                return false
            } else {
                const leftArrowHovered = this.leftArrowBB.containsPoint(point);
                const rightArrowHovered = this.rightArrowBB.containsPoint(point);
                if (this.leftArrowHovered !== leftArrowHovered || this.rightArrowHovered !== rightArrowHovered) {
                    this.canvas.pixelPlane.plane.scheduleRender()
                }
                this.leftArrowHovered = leftArrowHovered;
                this.rightArrowHovered = rightArrowHovered
            }
        }
        onMouseDown()
        {
            this.leftArrowDragged = this.leftArrowHovered;
            this.rightArrowDragged = this.rightArrowHovered;
            this.dragStartX = this.canvas.mouseProjector.getPlaneCoordinatesForMouseEvent(this.canvas.mouseProjector.lastEvent, C.EVENTS.HALF_CELL_CHANGED).x;
            this.dragStartState = this.canvas.app.state.getStateForId(this.id, true);
            this.newX = null;
            this.newWidth = null;
            if (this.leftArrowDragged || this.rightArrowDragged) {
                return false
            }
        }
        onMouseUp()
        {
            if (this.newWidth !== null && this.newX !== null) {
                this.saveWidth(false)
            }
            this.endDrag()
        }
        computeBoundingBox()
        {
            const state = this.canvas.app.state.getStateForId(this.id);
            const totalArrowSize = margin + dentWidth + arrowHeight;
            this.boundingBox.set(state.position.x - totalArrowSize, state.position.y - margin, state.position.x + state.dimensions.width + totalArrowSize, state.position.y + state.dimensions.height + margin);
            this.leftArrowBB.set(state.position.x - totalArrowSize, state.position.y - margin, state.position.x, state.position.y + state.dimensions.height + margin);
            this.rightArrowBB.set(state.position.x + state.dimensions.width, state.position.y - margin, state.position.x + state.dimensions.width + totalArrowSize, state.position.y + state.dimensions.height + margin);
            return this.boundingBox
        }
    }
}, function(module, exports) {
    exports.loadScript = function(url) {
        const scriptElement = document.createElement("script");
        scriptElement.type = "text/javascript";
        scriptElement.src = url;
        document.body.appendChild(scriptElement)
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const Rectangle = __webpack_require__(3);
    const TEXTURE_CANVAS_SIZE = 512;
    module.exports = class ImageRenderer {
        constructor(canvas)
        {
            this.canvas = canvas;
            this.renderer = new THREE.WebGLRenderer({
                antialias: true,
                alpha: true
            });
            this.squaresToRender = [];
            this.squareIndex = 0;
            this.targetCanvas = document.createElement("canvas");
            this.targetContext = null
        }
        getBlob(s, callback)
        {
            this.canvas.stopRender = true;
            const originalTextureCanvasWidth = config.textureCanvasWidth;
            const originalTextureCanvasHeight = config.textureCanvasHeight;
            this.overrideDimensions(TEXTURE_CANVAS_SIZE * 2, TEXTURE_CANVAS_SIZE * 2);
            this.squaresToRender = this.getSquares(s);
            this.setProgressMessage();
            this.squareIndex = 0;
            this.targetCanvas.width = s.destWidth;
            this.targetCanvas.height = s.destHeight;
            this.targetContext = this.targetCanvas.getContext("2d");
            this.targetContext.clearRect(0, 0, s.destWidth, s.destHeight);
            this.renderNextSquare(s, () => {
                this.canvas.app.$refs.sidebar.$refs.overlay.$data.msg = "Preparing image for download";
                this.targetCanvas.toBlob(callback, s.mimeType, s.quality);
                this.overrideDimensions(originalTextureCanvasWidth, originalTextureCanvasHeight);
                this.canvas.camera.camera.clearViewOffset();
                this.canvas.camera.resize(window.innerWidth / window.innerHeight);
                this.canvas.camera.emit("change");
                this.canvas.stopRender = false
            })
        }
        setProgressMessage()
        {
            const percent = Math.floor(100 * (this.squareIndex / this.squaresToRender.length));
            this.canvas.app.$refs.sidebar.$refs.overlay.$data.msg = `Creating Image (${percent}%)`
        }
        getSquares(s)
        {
            const width = parseInt(s.srcRectangle.width, 10);
            const height = parseInt(s.srcRectangle.height, 10);
            if (s.destWidth < TEXTURE_CANVAS_SIZE || s.destHeight < TEXTURE_CANVAS_SIZE) {
                return [{
                    srcRect: s.srcRectangle,
                    dstRect: Rectangle.fromPointAndSize({
                        x: 0,
                        y: 0
                    }, {
                        width: s.destWidth,
                        height: s.destHeight
                    })
                }]
            }
            const dstSquareSize = Math.floor(Math.max(s.destWidth, s.destHeight) / TEXTURE_CANVAS_SIZE);
            const dstSquareWidth = Math.floor(s.destWidth / Math.floor(s.destWidth / TEXTURE_CANVAS_SIZE));
            const dstSquareHeight = Math.floor(s.destHeight / Math.floor(s.destHeight / TEXTURE_CANVAS_SIZE));
            const srcSquareSize = Math.floor(Math.max(width, height) / dstSquareSize);
            const squares = [];
            var srcSquareWidth,
                srcSquareHeight,
                w,
                h,
                x = 0,
                y = 0;
            for (h = 0; h < height; h += srcSquareSize) {
                x = 0;
                for (w = 0; w < width; w += srcSquareSize) {
                    srcSquareWidth = srcSquareSize;
                    srcSquareHeight = srcSquareSize;
                    squares.push({
                        srcRect: Rectangle.fromPointAndSize({
                            x: s.srcRectangle.x1 + w,
                            y: s.srcRectangle.y1 + h
                        }, {
                            width: srcSquareWidth,
                            height: srcSquareHeight
                        }),
                        dstRect: Rectangle.fromPointAndSize({
                            x: x * dstSquareWidth,
                            y: y * dstSquareHeight
                        }, {
                            width: dstSquareWidth,
                            height: dstSquareHeight
                        })
                    });
                    x++
                }
                y++
            }
            return squares
        }
        renderNextSquare(s, callback)
        {
            const settings = {
                srcRectangle: this.squaresToRender[this.squareIndex].srcRect,
                dstRectangle: this.squaresToRender[this.squareIndex].dstRect,
                transparentBackground: s.transparentBackground,
                destWidth: this.squaresToRender[this.squareIndex].srcRect.width,
                destHeight: this.squaresToRender[this.squareIndex].srcRect.height,
                mimeType: s.mimeType,
                quality: s.quality
            };
            this.renderSquare(settings, () => {
                this.squareIndex++;
                this.setProgressMessage();
                if (this.squareIndex < this.squaresToRender.length) {
                    requestAnimationFrame(() => {
                        this.renderNextSquare(s, callback)
                    })
                } else {
                    callback()
                }
            })
        }
        renderSquare(s, callback)
        {
            this.canvas.camera.setToRectangle(s.srcRectangle);
            this.canvas.camera.resize(window.innerWidth / window.innerHeight);
            this.canvas.camera.emit("change");
            this.canvas.pixelPlane.plane.render();
            this.renderer.setClearColor(16777215, s.transparentBackground ? 0 : 1);
            this.renderer.setSize(s.dstRectangle.width, s.dstRectangle.height);
            this.renderer.render(this.canvas.scene, this.canvas.camera.getThreeObject());
            this.targetContext.drawImage(this.renderer.domElement, s.dstRectangle.x1, s.dstRectangle.y1);
            callback()
        }
        overrideDimensions(width, height)
        {
            config.textureCanvasWidth = width;
            config.textureCanvasHeight = height;
            this.canvas.setCanvasElementDimensions(this.canvas.pixelPlane.plane, width, height)
        }
    }
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(2);
    const C = __webpack_require__(0);
    const config = __webpack_require__(1);
    const StateHistory = __webpack_require__(91);
    const HttpPersistence = __webpack_require__(92);
    const PubSub = __webpack_require__(93);
    const tools = __webpack_require__(4);
    const Meta = __webpack_require__(94);
    const OBJECT = "object";
    const NUMBER = "number";
    module.exports = class State extends EventEmitter {
        constructor(app)
        {
            super();
            this.app = app;
            this.data = {};
            this.hasActiveTransactionBlock = false;
            this.transactionBlockIndex = 0;
            this.history = new StateHistory(this);
            this.persistence = new HttpPersistence(this);
            this.pubSub = new PubSub(this.app);
            this.meta = new Meta(this);
            this.isTransientPhase = false
        }
        startTransientPhase()
        {
            this.isTransientPhase = true
        }
        endTransientPhase()
        {
            this.isTransientPhase = false
        }
        createFromData(data)
        {
            for (var id in data) {
                this.processTransaction({
                    id: id,
                    type: data[id].type,
                    action: C.ACTIONS.CREATE,
                    data: data[id].data
                })
            }
        }
        generateId()
        {
            return Date.now().toString(32) + "-" + Math.floor(Math.random() * 1e14).toString(32)
        }
        getStateForId(id, copy)
        {
            if (!this.data[id]) {
                return null
            } else if (copy) {
                return tools.deepClone(this.data[id].data)
            } else {
                return this.data[id].data
            }
        }
        getTypeForId(id)
        {
            if (!this.data[id]) {
                return null
            } else {
                return this.data[id].type
            }
        }
        setState(state)
        {
            this.destroyCurrentState();
            this.data = state;
            var i,
                id;
            outer:
            for (id in this.data) {
                if (!this.data[id].data) {
                    console.warn("received state without data", this.data[id], id);
                    delete this.data[id];
                    continue
                }
                if (this.data[id].data.lines) {
                    for (i = 0; i < this.data[id].data.lines.length; i++) {
                        if (typeof this.data[id].data.lines[i][0] !== NUMBER || typeof this.data[id].data.lines[i][1] !== NUMBER) {
                            console.warn("found corrupted line group", this.data[id], id);
                            delete this.data[id];
                            continue outer
                        }
                    }
                }
                this.data[id].stableData = tools.deepClone(this.data[id].data);
                try {
                    this.broadcastTransaction({
                        action: C.ACTIONS.CREATE,
                        id: id,
                        type: this.data[id].type,
                        data: this.data[id].data
                    })
                } catch (e) {
                    console.warn("error while creating object with id " + id, e);
                    this.processTransaction({
                        action: C.ACTIONS.DELETE,
                        id: id
                    })
                }
            }
            this.emit("change");
            this.emit("state-loaded")
        }
        countItems()
        {
            return Object.keys(this.data).length
        }
        destroyCurrentState()
        {
            this.history.clear();
            for (var id in this.data) {
                this.broadcastTransaction({
                    action: C.ACTIONS.DELETE,
                    type: this.data[id].type,
                    id: id
                })
            }
            this.data = {};
            this.emit("change")
        }
        broadcastTransaction(transaction, _type)
        {
            const type = _type || transaction.type || this.data[transaction.id].type;
            const action = transaction.action === C.ACTIONS.SET ? C.ACTIONS.UPDATE : transaction.action;
            this.emit(transaction.id + "-" + action, transaction);
            this.emit(action + "-" + type, transaction)
        }
        checkForChanges(transaction)
        {
            var key,
                subkey;
            for (key in transaction.data) {
                if (typeof transaction.data[key] === OBJECT) {
                    for (subkey in transaction.data[key]) {
                        if (this.data[transaction.id].data[key] && transaction.data[key][subkey] !== this.data[transaction.id].data[key][subkey]) {
                            return true
                        }
                    }
                } else {
                    if (transaction.data[key] !== this.data[transaction.id].data[key]) {
                        return true
                    }
                }
            }
            return false
        }
        processTransaction(transaction, skipHistory, isExternal)
        {
            if (this.app.accountData.isFreePlan()) {
                const itemsCount = this.countItems();
                if (itemsCount > 20) {
                    this.app.trackEvent("items", "more than 20", "count", itemsCount)
                }
                if (transaction.action === C.ACTIONS.CREATE && this.countItems() >= config.itemsInFreePlan) {
                    this.app.trackEvent("items", "free items exceeded", "count", itemsCount);
                    this.emit("free-items-exceeded");
                    return
                }
            }
            if (transaction.action !== C.ACTIONS.CREATE && !this.data[transaction.id]) {
                console.warn("received transaction for unknown id");
                return
            }
            const type = transaction.type || this.data[transaction.id].type;
            const transactionBlockIndex = this.hasActiveTransactionBlock ? this.transactionBlockIndex : null;
            if (this.isTransientPhase) {
                transaction.isTransient = true
            }
            if (skipHistory !== true && !transaction.isTransient) {
                this.history.addBwdTransaction(transaction, transactionBlockIndex)
            }
            if (transaction.action === C.ACTIONS.CREATE) {
                this.data[transaction.id] = {
                    type: transaction.type,
                    data: transaction.data
                }
            } else if (transaction.action === C.ACTIONS.UPDATE) {
                for (var key in transaction.data) {
                    this.data[transaction.id].data[key] = transaction.data[key]
                }
            } else if (transaction.action === C.ACTIONS.SET) {
                this.data[transaction.id].data = transaction.data
            } else if (transaction.action === C.ACTIONS.DELETE) {
                delete this.data[transaction.id]
            }
            if (transaction.action !== C.ACTIONS.DELETE && (!transaction.isTransient || isExternal)) {
                this.data[transaction.id].stableData = tools.deepClone(this.data[transaction.id].data)
            }
            if (skipHistory !== true && !transaction.isTransient) {
                this.history.addFwdTransaction(transaction, transactionBlockIndex)
            }
            if (!transaction.isTransient) {
                this.persistence.processTransaction(transaction)
            }
            this.broadcastTransaction(transaction, type);
            this.emit("change")
        }
        getAllOfType(type)
        {
            const result = {};
            for (var id in this.data) {
                if (this.data[id].type === type) {
                    result[id] = this.data[id]
                }
            }
            return result
        }
        startTransactionBlock(label)
        {
            this.hasActiveTransactionBlock = true;
            this.transactionBlockIndex++
        }
        endTransactionBlock()
        {
            this.hasActiveTransactionBlock = false
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const tools = __webpack_require__(4);
    const config = __webpack_require__(1);
    module.exports = class StateHistory {
        constructor(state)
        {
            this.state = state;
            this.bwdTransactions = [];
            this.fwdTransactions = [];
            this.index = -1
        }
        clear()
        {
            this.bwdTransactions = [];
            this.fwdTransactions = [];
            this.index = -1
        }
        undo()
        {
            if (this.index < 0) {
                return
            }
            this.state.processTransaction(this.bwdTransactions[this.index], true);
            this.index--;
            if (this.index >= 0 && this.bwdTransactions[this.index + 1].transactionBlockIndex !== null && this.bwdTransactions[this.index + 1].transactionBlockIndex === this.bwdTransactions[this.index].transactionBlockIndex) {
                this.undo()
            }
        }
        redo()
        {
            if (this.index >= this.fwdTransactions.length - 1) {
                return
            }
            this.index++;
            this.state.processTransaction(this.fwdTransactions[this.index], true);
            if (this.fwdTransactions[this.index + 1] && this.fwdTransactions[this.index].transactionBlockIndex !== null && this.fwdTransactions[this.index].transactionBlockIndex === this.fwdTransactions[this.index + 1].transactionBlockIndex) {
                this.redo()
            }
        }
        getStableDataCopy(id)
        {
            return tools.deepClone(this.state.data[id].stableData)
        }
        addBwdTransaction(transaction, transactionBlockIndex)
        {
            this.fwdTransactions.splice(this.index + 1);
            this.bwdTransactions.splice(this.index + 1);
            const bwdTransaction = {
                id: transaction.id,
                transactionBlockIndex: transactionBlockIndex
            };
            if (transaction.action === C.ACTIONS.UPDATE) {
                bwdTransaction.action = C.ACTIONS.SET;
                bwdTransaction.data = this.getStableDataCopy(transaction.id)
            } else if (transaction.action === C.ACTIONS.CREATE) {
                bwdTransaction.action = C.ACTIONS.DELETE
            } else if (transaction.action === C.ACTIONS.DELETE) {
                bwdTransaction.action = C.ACTIONS.CREATE;
                bwdTransaction.type = this.state.data[transaction.id].type;
                bwdTransaction.data = this.getStableDataCopy(transaction.id)
            }
            this.bwdTransactions.push(bwdTransaction);
            this.index++
        }
        addFwdTransaction(transaction, transactionBlockIndex)
        {
            const fwdTransaction = tools.deepClone(transaction);
            fwdTransaction.transactionBlockIndex = transactionBlockIndex;
            this.fwdTransactions.push(fwdTransaction)
        }
    }
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    module.exports = class HttpPersistence {
        constructor(state)
        {
            this.state = state;
            this.activeDocId = null;
            this.activeDocVersion = null;
            this.isInitialLoad = true;
            this.pendingTransactions = {}
        }
        setActiveDocId(docId)
        {
            if (this.activeDocId === docId) {
                return
            }
            this.activeDocId = docId;
            Vue.http.get("docs/get/" + docId).then(res => {
                this.setContents(res.body.version, res.body.content || {});
                this.state.meta.setDocMeta({
                    id: res.body.id,
                    created: new Date(res.body.created),
                    updated: new Date(res.body.updated),
                    liveEmbedEnabled: res.body.live_embed_enabled,
                    liveEmbedKey: res.body.live_embed_key,
                    guestUserCount: res.body.guest_user_count
                })
            }).catch(err => {
                if (err.status === 404) {
                    canvas.app.$refs.sidebar.$refs.filePanel.setFallbackDoc()
                } else {
                    throw err
                }
            })
        }
        setContents(version, contents)
        {
            this.activeDocVersion = version;
            this.state.setState(contents || {});
            if (this.isInitialLoad) {
                this.onLoaded();
                this.isInitialLoad = false
            }
        }
        processTransaction(transaction)
        {
            if (!this.pendingTransactions[this.activeDocId]) {
                this.pendingTransactions[this.activeDocId] = {
                    docId: this.activeDocId,
                    transactions: [],
                    senderId: this.state.pubSub.getSenderId()
                };
                setTimeout(this.savePendingTransactions.bind(this), config.transactionSaveBufferTime)
            }
            this.state.pubSub.processTransaction(transaction);
            this.pendingTransactions[this.activeDocId].transactions.push(transaction)
        }
        savePendingTransactions()
        {
            for (var docId in this.pendingTransactions) {
                Vue.http.post("docs/process-transaction", this.pendingTransactions[docId])
            }
            this.pendingTransactions = {}
        }
        onLoaded()
        {
            var loadingScreen = document.getElementById("loading-overlay");
            loadingScreen.addEventListener("transitionend", () => {
                loadingScreen.remove()
            }, false);
            loadingScreen.classList.add("fade-out")
        }
    }
}, function(module, exports, __webpack_require__) {
    const TRANSACTION_EVENT = "transactions";
    const TRANSACTION_EVENT_CLIENT = "client-transactions";
    const config = __webpack_require__(1);
    const tools = __webpack_require__(4);
    module.exports = class PubSub {
        constructor(app)
        {
            this.app = app;
            this.channel = null;
            this.pusherClient = null;
            this.onTransactionsFn = this.onTransactions.bind(this);
            this.publishBuffer = [];
            this.publishTimeout = null;
            this.lastPublishTime = 0;
            this.publishBufferedTransactionsFn = this.publishBufferedTransactions.bind(this);

            if (window.Pusher) {
                this.app.$on("init", this.createPusherClient.bind(this))
            }
        }
        createPusherClient()
        {
            var connectionParams = {
                cluster: "eu",
                encrypted: false
            };
            if (this.app.isLiveEmbed) {
                connectionParams.authEndpoint = config.httpRoot + "account/pusher-channel-auth-live-embed",
                connectionParams.auth = {
                    params: {
                        live_embed_key: tools.getQueryParam("key")
                    }
                }
            } else {
                connectionParams.authEndpoint = config.httpRoot + "account/pusher-channel-auth"
            }
            this.pusherClient = new Pusher("2e6309ab71f90aa9606d", connectionParams); //new Pusher("197fb21b3575cb3d1ae9", connectionParams);
            this.bindToDocChannel();
            this.bindToUserChannel();
            this.app.userSettings.on("lastActiveDocIdchanged", this.bindToDocChannel, this)
            
        }
        bindToUserChannel()
        {
            const userId = this.app.accountData.get("userId");
            const userChannel = this.pusherClient.subscribe("private-user-" + userId);
            userChannel.bind("notification", data => {
                
                this.app.eventHub.emit(data.type, data)
                
            });
            userChannel.bind("pusher:subscription_succeeded", (a, b, c) => {});
            userChannel.bind("pusher:subscription_error", (a, b, c) => {})
            
        }
        bindToDocChannel()
        {
            const docId = this.app.userSettings.get("lastActiveDocId");
            if (!docId) {
                return
            }
            if (this.channel) {
                this.channel.unbind(TRANSACTION_EVENT, this.onTransactionsFn);
                this.channel.unbind(TRANSACTION_EVENT_CLIENT, this.onTransactionsFn);
                this.channel.unsubscribe();
                this.channel = null
            }
            this.channel = this.pusherClient.subscribe("private-" + docId);
            this.channel.bind(TRANSACTION_EVENT, this.onTransactionsFn);
            this.channel.bind(TRANSACTION_EVENT_CLIENT, this.onTransactionsFn);
            this.channel.bind("pusher:subscription_succeeded", (a, b, c) => {});
            /*this.channel.bind("pusher:subscription_error", (a, b, c) => {

                const msg = `\n                You are not authorized to access the document with id ${docId} - \n                if you feel that this is an error, please email info@example.com.\n                Clicking OK will take you to a fallback`;
                window.canvas.app.$refs.fullscreenOverlay.showError("Access to document not authorized", msg, () => {

                    canvas.app.$refs.sidebar.$refs.filePanel.setFallbackDoc()

                })
            })*/
            canvas.app.$refs.sidebar.$refs.filePanel.setFallbackDoc()
        }
        onTransactions(transactions)
        {
            for (var i = 0; i < transactions.length; i++) {
                transactions[i].isTransient = true;
                this.app.state.processTransaction(transactions[i], true, true)
            }
        }
        processTransaction(transaction)
        {
            const hasListeners = this.app.state.meta.docMeta.liveEmbedEnabled || this.app.state.meta.docMeta.guestUserCount;
            if (!hasListeners) {
                return
            }
            this.publishBuffer.push(transaction);
            if (this.publishTimeout) {
                return
            }
            
            const timeout = Date.now() - this.lastPublishTime > 100 ? 0 : 104;
            this.publishTimeout = setTimeout(this.publishBufferedTransactionsFn, timeout)
        }
        publishBufferedTransactions()
        {

            //this.channel.trigger(TRANSACTION_EVENT_CLIENT, this.publishBuffer);

            this.publishBuffer = [];
            this.publishTimeout = null;
            this.lastPublishTime = Date.now()
            
        }
        getSenderId()
        {
            return this.pusherClient.connection.socket_id
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const EventEmitter = __webpack_require__(2);
    module.exports = class Meta extends EventEmitter {
        constructor(state)
        {
            super();
            this.state = state;
            this.docMeta = {}
        }
        setDocMeta(docMeta)
        {
            this.docMeta = docMeta;
            this.emit("doc-meta-changed")
        }
        save(key, value)
        {
            const metaKey = this.createMetaKey(key);
            if (!this.state.getStateForId(metaKey)) {
                this.state.processTransaction({
                    action: C.ACTIONS.CREATE,
                    id: metaKey,
                    type: C.META,
                    data: {
                        value: value
                    }
                })
            } else {
                this.state.processTransaction({
                    action: C.ACTIONS.UPDATE,
                    id: metaKey,
                    data: {
                        value: value
                    }
                })
            }
        }
        load(key)
        {
            const metaKey = this.createMetaKey(key);
            const data = this.state.getStateForId(metaKey);
            if (data && data.value) {
                return data.value
            } else {
                return null
            }
        }
        createMetaKey(key)
        {
            return C.META + "-" + key
        }
    }
}, function(module, exports, __webpack_require__) {
    const BaseObject = __webpack_require__(96);
    const objectData = __webpack_require__(13);
    const C = __webpack_require__(0);
    const config = __webpack_require__(1);
    module.exports = class ObjectCreator {
        constructor(app)
        {
            this.app = app;
            this.app.state.on("create-component", this.createComponent, this);
            this.app.state.on("delete-component", this.deleteComponent, this)
        }
        getComponentCreateTransition(componentId)
        {
            const data = {
                componentId: componentId,
                position: {
                    x: null,
                    y: null
                },
                rotation: this.app.userSettings.get("componentRotation"),
                opacity: 1
            };
            if (componentId.split(".")[0] === C.GENERIC) {
                data.primaryColor = this.app.userSettings.get("genericPrimaryColor");
                data.backgroundColor = this.app.userSettings.get("genericBackgroundColor");
                data.imagePath = config.blankImagePath;
                data.iconColor = this.app.userSettings.get("genericIconColor")
            }
            return {
                action: C.ACTIONS.CREATE,
                type: C.TYPES.COMPONENT,
                id: this.app.state.generateId(),
                data: data
            }
        }
        createComponent(transaction)
        {
            const config = objectData.getComponentConfig(transaction.data.componentId);
            if (!config) {
                return null
            }
            const component = new BaseObject(config, this.app.canvas, transaction, true);
            this.app.canvas.scene.add(component.getThreeObject());
            this.app.objects.add(component)
        }
        deleteComponent(transaction)
        {
            const component = this.app.objects.getById(transaction.id);
            this.app.objects.remove(component);
            this.app.canvas.pixelPlane.plane.scheduleRender()
        }
    }
}, function(module, exports, __webpack_require__) {
    const objectData = __webpack_require__(13);
    const loader = new THREE.JSONLoader;
    const ImagePlane = __webpack_require__(99);
    const MetricsPlane = __webpack_require__(100);
    const CONF = __webpack_require__(1);
    const Rectangle = __webpack_require__(3);
    const ObjectAnchorPoints = __webpack_require__(101);
    const C = __webpack_require__(0);
    const appConfig = __webpack_require__(1);
    module.exports = class BaseObject {
        constructor(config, canvas, state)
        {
            this.config = config;
            this.canvas = canvas;
            this.id = state.id;
            this.isGeneric = this.config.id.split(".")[0] === C.GENERIC;
            this.type = C.TYPES.COMPONENT;
            this.isSelected = false;
            this.isSelectable = true;
            this.isHoverable = true;
            this.isHovered = false;
            this.metricsPlane = null;
            this.boundingBox = new Rectangle;
            this.model = objectData.getModel(config.model);
            this.geometry = loader.parse(this.model).geometry;
            this.backgroundMaterial = new THREE.MeshPhongMaterial({
                color: parseInt(config.backgroundColor, 16)
            });
            this.primaryColorMaterial = new THREE.MeshBasicMaterial({
                color: parseInt(config.primaryColor, 16)
            });
            if (this.model.doubleSided) {
                this.backgroundMaterial.side = THREE.DoubleSide;
                this.primaryColorMaterial.side = THREE.DoubleSide
            }
            const materials = [this.backgroundMaterial, this.primaryColorMaterial];
            if (config.secondaryColor) {
                this.secondaryColorMaterial = new THREE.MeshPhongMaterial({
                    color: parseInt(config.secondaryColor, 16)
                });
                materials.push(this.secondaryColorMaterial)
            }
            this.paintFaces();
            this.mesh = new THREE.Mesh(this.geometry, materials);
            this.mesh.material.polygonOffset = true;
            this.mesh.material.polygonOffsetFactor = 1;
            this.mesh.material.polygonOffsetUnits = 1;
            this.edges = new THREE.EdgesGeometry(this.geometry);
            this.edgeLines = new THREE.LineSegments(this.edges, new THREE.LineBasicMaterial({
                color: 6710886,
                linewidth: 1
            }));
            this.scaleToGrid(this.mesh);
            this.scaleToGrid(this.edgeLines);
            this.group = new THREE.Group;
            this.group.add(this.mesh);
            this.group.add(this.edgeLines);
            if (!this.model.disableImagePlane) {
                this.createLogoPlane(state.data)
            }
            this.mesh.arcObject = this;
            this.group.arcObject = this;
            this.anchorPoints = new ObjectAnchorPoints(this.canvas, this);
            if (state.data && state.data.position) {
                this.applyState()
            } else {
                this.setPositionOnGrid({
                    x: 2e4,
                    y: 2e4
                })
            }
            this.canvas.app.state.on(this.id + "-update", this.applyState, this);
            this.canvas.layerManager.on("change", this.applyLayerSettings, this);
            this.applyLayerSettings()
        }
        delete()
        {
            this.canvas.linePlane.deleteAnchorPointsForObjectId(this.id);
            this.canvas.app.state.processTransaction({
                action: C.ACTIONS.DELETE,
                type: C.TYPES.COMPONENT,
                id: this.id
            })
        }
        getThreeObject()
        {
            return this.group
        }
        applyLayerSettings()
        {
            const layer = this.canvas.layerManager.getLayerForObject(this.id);
            this.setVisible(layer.visible)
        }
        setVisible(isVisible)
        {
            this.mesh.visible = isVisible;
            this.edgeLines.visible = isVisible;
            if (this.logoPlane) {
                this.logoPlane.mesh.visible = isVisible
            }
        }
        createLogoPlane(data)
        {
            var logoPath;
            if (this.isGeneric) {
                logoPath = appConfig.logoFolder + "blank.png"
            } else {
                logoPath = appConfig.logoFolder + this.config.logoTexture
            }
            this.logoPlane = new ImagePlane(logoPath, this.canvas, this.model);
            this.logoPlane.setPosition(this.model.imagePlanePosition, this.config.logoTexturePositionOffset || {});
            this.logoPlane.setRotation(this.model.imagePlaneRotation || {});
            this.logoPlane.setScale(this.model.imagePlaneScale);
            this.group.add(this.logoPlane.getThreeObject())
        }
        setOpacity(opacity)
        {
            this.mesh.material.forEach(material => {
                if (material.opacity === opacity) {
                    return
                }
                material.opacity = opacity;
                material.transparent = opacity !== 1;
                material.needsUpdate = true
            });
            if (this.logoPlane && this.logoPlane.mesh.material.opacity !== opacity) {
                this.logoPlane.mesh.material.opacity = opacity;
                this.logoPlane.mesh.material.needsUpdate = true
            }
            if (this.edgeLines.material.opacity !== opacity) {
                this.edgeLines.material.opacity = opacity;
                this.edgeLines.material.transparent = opacity !== 1;
                this.edgeLines.material.needsUpdate = true
            }
        }
        paintFaces()
        {
            var i;
            for (i = 0; i < this.geometry.faces.length; i++) {
                this.geometry.faces[i].materialIndex = 0
            }
            for (i = 0; i < this.model.primaryColorFaces.length; i++) {
                this.geometry.faces[this.model.primaryColorFaces[i]].materialIndex = 1
            }
            if (this.model.secondaryColorFaces && this.secondaryColorMaterial) {
                for (i = 0; i < this.model.secondaryColorFaces.length; i++) {
                    this.geometry.faces[this.model.secondaryColorFaces[i]].materialIndex = 2
                }
            }
        }
        computeBoundingBox()
        {
            const state = this.canvas.app.state.getStateForId(this.id);
            const pos = state.position;
            const size = this.model.sizeOnGrid;
            const rotation = Math.round(state.rotation);
            var x1,
                y1,
                x2,
                y2;
            if (rotation === 0) {
                x1 = pos.x;
                y1 = pos.y;
                x2 = pos.x + size.width;
                y2 = pos.y + size.height
            } else if (rotation === 2) {
                x1 = pos.x;
                y1 = pos.y;
                x2 = pos.x + size.height;
                y2 = pos.y + size.width
            } else if (rotation === 3) {
                x1 = pos.x + 1;
                y1 = pos.y + 1;
                x2 = pos.x - size.width + 1;
                y2 = pos.y - size.height + 1
            } else if (rotation === 5) {
                x1 = pos.x + 1;
                y1 = pos.y + 1;
                x2 = pos.x - size.height + 1;
                y2 = pos.y - size.width + 1
            }
            this.boundingBox.set(x1, y1, x2, y2);
            return this.boundingBox
        }
        applyState()
        {
            const state = this.canvas.app.state.getStateForId(this.id);
            this.setPositionOnGrid(state.position);
            this.group.rotation.y = state.rotation;
            this.anchorPoints.refresh();
            if (state.backgroundColor && this.backgroundMaterial.color.getHexString() !== state.backgroundColor) {
                this.backgroundMaterial.color.set(state.backgroundColor);
                this.backgroundMaterial.needsUpdate = true
            }
            if (state.primaryColor && this.primaryColorMaterial.color.getHexString() !== state.primaryColor) {
                this.primaryColorMaterial.color.set(state.primaryColor);
                this.primaryColorMaterial.needsUpdate = true
            }
            if (state.imagePath && this.logoPlane) {
                this.logoPlane.setImagePath(state.imagePath)
            } else if (state.icon && this.logoPlane) {
                this.logoPlane.setIcon(state.icon, state.iconColor)
            }
            if (state.showMetrics) {
                if (!this.metricsPlane) {
                    this.metricsPlane = new MetricsPlane(this.canvas, state.metricValue)
                }
                this.group.add(this.metricsPlane.getThreeObject())
            } else if (this.metricsPlane) {
                this.group.remove(this.metricsPlane.getThreeObject())
            }
            if (state.showMetrics) {
                this.metricsPlane.setValue(state.metricValue)
            }
            if (state.showMetaData) {
                this.canvas.pixelPlane.plane.scheduleRender()
            }
            if (!isNaN(state.opacity)) {
                this.setOpacity(state.opacity)
            }
            this.canvas.pixelPlane.plane.scheduleRender();
            this.canvas.interactionPlane.plane.scheduleRender()
        }
        showContextOverlay()
        {
            this.canvas.app.$refs.contextOverlay.showComponentInfo(this.mesh, this.id)
        }
        showSelected()
        {
            this.isSelected = true;
            this.isHoverable = false;
            this.isHovered = false;
            if (this.canvas.app.$refs.viewControls.isDashboardMode) {
                this.showContextOverlay()
            }
        }
        hideSelected()
        {
            this.isHoverable = !this.isLocked;
            this.isSelected = false;
            this.canvas.app.$refs.contextOverlay.hide()
        }
        showHover()
        {
            this.isHovered = true
        }
        hideHover()
        {
            this.isHovered = false
        }
        setPositionOnGrid(point)
        {
            const f = CONF.gridCellSize / 2;
            this.group.position.set(point.x * CONF.gridCellSize + f, .1, point.y * CONF.gridCellSize + f)
        }
        scaleToGrid(mesh)
        {
            this.geometry.computeBoundingBox();
            const currentWidth = this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x;
            const currentDepth = this.geometry.boundingBox.max.z - this.geometry.boundingBox.min.z;
            const currentSize = Math.max(currentWidth, currentDepth);
            const scaleFactor = CONF.gridCellSize / currentSize * Math.max(this.model.sizeOnGrid.width, this.model.sizeOnGrid.height);
            mesh.scale.set(scaleFactor, scaleFactor, scaleFactor);
            if (this.model.meshOffset) {
                mesh.position.set(this.model.meshOffset.x, this.model.meshOffset.y, this.model.meshOffset.z)
            }
        }
        destroy()
        {
            this.canvas.scene.remove(this.group);
            this.geometry.dispose();
            this.backgroundMaterial.dispose();
            this.primaryColorMaterial.dispose();
            if (this.logoPlane) {
                this.logoPlane.destroy();
                this.logoPlane = null
            }
            this.canvas.app.state.off(this.id + "-update", this.applyState, this);
            this.canvas.layerManager.off("change", this.applyLayerSettings, this);
            this.config = null;
            this.canvas = null;
            this.geometry = null;
            this.backgroundMaterial = null;
            this.model = null;
            this.mesh = null;
            this.group = null
        }
    }
}, function(module, exports) {
    module.exports = {
        "api-gateway": {
            id: "api-gateway",
            primaryColorFaces: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .55,
            metadata: {
                version: 3,
                normals: 99,
                type: "Geometry",
                uvs: 0,
                faces: 134,
                generator: "io_three",
                vertices: 89
            },
            uvs: [],
            vertices: [1.7, -1.19209e-7, .3, 1.7, .6, .3, 1.7, -8.9407e-8, -.3, 1.7, .6, -.3, 2, -1.19209e-7, .3, 2, .6, .3, 2, -1.49012e-7, -.3, 2, .6, -.3, -2, -2.98023e-8, .3, -2, .6, .3, -2, -2.98023e-8, -.3, -2, .6, -.3, -2, -8.9407e-8, -1.7, -2, .6, -1.7, -2, -8.9407e-8, -2, -2, .6, -2, -1.4, -8.9407e-8, -1.7, -1.4, .6, -1.7, -1.4, -8.9407e-8, -2, -1.4, .6, -2, -2, 2.98023e-8, 2, -2, .6, 2, -2, 0, 1.7, -2, .6, 1.7, -1.4, 2.98023e-8, 2, -1.4, .6, 2, -1.4, 0, 1.7, -1.4, .6, 1.7, 1.15024, .6, -.299999, 1.15323, .6, .3, 1.15323, -5.96046e-8, .3, 1.15024, -8.9407e-8, -.3, 1.72195, -.00462401, -1.87922, 1.72195, -.00462395, -.547108, 1.21149, .00766262, -.56789, 1.15024, .00913703, -.3, 1.02616, .0121236, -.368116, 1.02616, .0121236, -.3, 1.02616, .0121236, .3, 1.02616, .0121236, .369677, 1.21149, .00766262, .567891, 1.72195, -.00462389, .567891, 1.72195, -.00462386, 1.9, -1.85124, .0813814, 1.9, -1.85124, .0813813, -1.9, 1.7, -.00409552, -.3, 1.72195, -.00462395, -.3, 1.72195, -.00462392, .3, 1.7, -.00409552, .3, 1.15323, .00906506, .3, 1.72196, .864439, -1.9, 1.72195, .864439, 1.88639, 1.72195, .699764, .567891, 1.72195, .699764, -.56789, 1.72195, .595376, -.3, 1.72195, .595376, .3, 1.02616, .595376, .3, 1.02616, .595376, -.299999, 1.02616, .595376, -.368115, 1.02616, .595376, -.56789, 1.02616, .574915, -.56789, 1.02616, .574915, .567891, 1.02616, .595376, .567891, 1.02616, .595376, .369677, 1.15323, .595376, .3, 1.7, .595376, -.3, 1.21149, .595376, -.56789, 1.15024, .595376, -.299999, 1.21149, .595376, .567891, 1.7, .595376, .3, 2, -.00462395, -.574858, 1.49022, .00766259, -.574858, 1.42896, .00913703, -.306967, 1.30488, .0121236, -.306967, 1.30488, .0121236, .293033, 1.30488, .0121236, .362709, 1.49022, .00766262, .560923, 2, -.00462389, .560923, 2, .699764, .560923, 2, .699764, -.574858, 2, -8.9407e-8, -.73467, 1.46934, -.0248473, .374496, 2, -8.9407e-8, .716861, 2, .853959, .716861, 2, .853959, -.73467, 1.72195, -.00462395, -.73467, 1.72195, .864439, .71686, 1.72195, .864439, -.73467, 1.72195, -.00462389, .71686],
            faces: [33, 3, 7, 6, 2, 0, 0, 0, 0, 33, 7, 5, 4, 6, 1, 1, 1, 1, 33, 0, 4, 5, 1, 2, 2, 2, 2, 33, 9, 11, 10, 8, 3, 3, 3, 3, 33, 0, 1, 25, 24, 4, 4, 4, 4, 33, 13, 15, 14, 12, 3, 3, 3, 3, 33, 15, 19, 18, 14, 0, 0, 0, 0, 33, 26, 27, 29, 30, 5, 5, 5, 5, 33, 17, 13, 12, 16, 6, 6, 6, 6, 33, 21, 23, 22, 20, 3, 3, 3, 3, 33, 23, 27, 26, 22, 0, 0, 0, 0, 33, 25, 21, 20, 24, 6, 6, 6, 6, 33, 16, 31, 28, 17, 7, 7, 7, 7, 33, 2, 18, 19, 3, 8, 8, 8, 8, 33, 10, 11, 28, 31, 9, 9, 9, 9, 33, 8, 30, 29, 9, 2, 2, 2, 2, 32, 5, 7, 3, 10, 10, 10, 32, 3, 19, 15, 11, 11, 11, 32, 15, 13, 17, 11, 11, 11, 32, 28, 11, 9, 12, 12, 12, 32, 3, 15, 17, 13, 13, 13, 32, 28, 9, 29, 14, 14, 14, 32, 3, 17, 28, 13, 13, 13, 32, 1, 5, 3, 15, 15, 15, 32, 21, 25, 1, 16, 16, 16, 32, 27, 23, 21, 13, 13, 13, 32, 3, 28, 29, 17, 17, 17, 32, 27, 21, 1, 18, 18, 18, 32, 1, 3, 29, 19, 19, 19, 32, 29, 27, 1, 20, 20, 20, 32, 2, 6, 4, 21, 21, 21, 32, 0, 24, 20, 22, 22, 22, 32, 2, 4, 0, 23, 23, 23, 32, 14, 18, 2, 24, 24, 24, 32, 16, 12, 14, 25, 25, 25, 32, 8, 10, 31, 26, 26, 26, 32, 16, 14, 2, 24, 24, 24, 32, 30, 8, 31, 27, 27, 27, 32, 31, 16, 2, 24, 24, 24, 32, 20, 22, 26, 28, 28, 28, 32, 31, 2, 0, 29, 29, 29, 32, 0, 20, 26, 30, 30, 30, 32, 30, 31, 0, 31, 31, 31, 32, 0, 26, 30, 32, 32, 32, 32, 44, 32, 85, 33, 33, 33, 32, 85, 33, 34, 34, 34, 34, 32, 34, 35, 36, 35, 35, 35, 32, 36, 37, 38, 36, 36, 36, 32, 40, 41, 88, 37, 37, 37, 32, 36, 38, 39, 38, 38, 38, 32, 40, 88, 42, 39, 39, 39, 32, 44, 85, 34, 40, 40, 40, 32, 39, 40, 42, 41, 41, 41, 32, 44, 34, 36, 42, 42, 42, 32, 39, 42, 43, 43, 43, 43, 32, 44, 36, 39, 44, 44, 44, 32, 39, 43, 44, 45, 45, 45, 32, 38, 37, 35, 46, 46, 46, 32, 35, 34, 45, 47, 47, 47, 32, 45, 46, 47, 48, 48, 48, 32, 48, 40, 39, 49, 49, 49, 32, 45, 47, 48, 50, 50, 50, 32, 38, 35, 45, 51, 51, 51, 32, 48, 39, 49, 52, 52, 52, 32, 49, 38, 45, 53, 53, 53, 32, 45, 48, 49, 54, 54, 54, 33, 47, 46, 54, 55, 38, 38, 38, 38, 32, 87, 50, 44, 55, 55, 55, 32, 44, 43, 51, 56, 56, 56, 32, 86, 87, 44, 57, 57, 57, 32, 44, 51, 86, 58, 58, 58, 32, 42, 51, 43, 59, 59, 59, 32, 63, 39, 38, 38, 38, 38, 32, 56, 57, 58, 60, 60, 60, 32, 63, 38, 56, 61, 61, 61, 32, 56, 58, 59, 60, 60, 60, 32, 62, 63, 56, 38, 38, 38, 32, 62, 56, 59, 38, 38, 38, 32, 59, 60, 61, 36, 36, 36, 32, 59, 61, 62, 62, 62, 62, 33, 49, 39, 63, 64, 63, 63, 63, 63, 32, 69, 55, 54, 64, 64, 64, 32, 65, 66, 59, 10, 10, 10, 32, 69, 54, 65, 64, 64, 64, 32, 62, 68, 69, 65, 65, 65, 32, 64, 63, 62, 66, 66, 66, 32, 57, 56, 64, 11, 11, 11, 32, 59, 58, 67, 11, 11, 11, 32, 67, 57, 64, 13, 13, 13, 32, 64, 62, 69, 65, 65, 65, 32, 69, 65, 59, 11, 11, 11, 32, 67, 64, 69, 10, 10, 10, 32, 59, 67, 69, 11, 11, 11, 32, 52, 41, 40, 0, 0, 0, 32, 52, 40, 68, 0, 0, 0, 32, 61, 52, 68, 67, 67, 67, 32, 68, 62, 61, 2, 2, 2, 33, 53, 52, 61, 60, 68, 68, 68, 68, 32, 66, 34, 33, 69, 69, 69, 32, 66, 33, 53, 70, 70, 70, 32, 59, 66, 53, 71, 71, 71, 32, 60, 59, 53, 72, 72, 72, 33, 37, 36, 58, 57, 38, 38, 38, 38, 33, 38, 49, 64, 56, 2, 2, 2, 2, 33, 48, 47, 55, 69, 2, 2, 2, 2, 33, 40, 48, 69, 68, 73, 73, 73, 73, 33, 35, 37, 57, 67, 74, 74, 74, 74, 33, 36, 35, 67, 58, 75, 75, 75, 75, 33, 45, 34, 66, 65, 76, 76, 76, 76, 33, 65, 54, 46, 45, 0, 0, 0, 0, 33, 41, 52, 78, 77, 77, 77, 77, 77, 33, 39, 40, 76, 75, 78, 78, 78, 78, 33, 40, 41, 77, 76, 79, 79, 79, 79, 33, 53, 33, 70, 79, 80, 80, 80, 80, 33, 34, 35, 72, 71, 81, 81, 81, 81, 33, 37, 35, 72, 73, 82, 82, 82, 82, 33, 33, 34, 71, 70, 83, 83, 83, 83, 33, 37, 38, 74, 73, 84, 84, 84, 84, 33, 52, 53, 79, 78, 85, 85, 85, 85, 33, 38, 39, 75, 74, 11, 11, 11, 11, 32, 79, 70, 80, 86, 86, 86, 32, 83, 82, 77, 87, 87, 87, 32, 79, 80, 84, 88, 88, 88, 32, 83, 77, 78, 89, 89, 89, 32, 79, 84, 83, 90, 90, 90, 32, 83, 78, 79, 91, 91, 91, 33, 83, 84, 87, 86, 92, 92, 92, 92, 33, 33, 85, 80, 70, 93, 93, 93, 93, 33, 80, 85, 87, 84, 72, 72, 72, 72, 33, 32, 50, 87, 85, 94, 94, 94, 94, 33, 82, 88, 41, 77, 95, 95, 95, 95, 33, 82, 83, 86, 88, 96, 96, 96, 96, 33, 86, 51, 42, 88, 97, 97, 97, 97, 32, 50, 32, 44, 98, 98, 98],
            normals: [0, 0, -1, 1, 0, 0, 0, 0, 1, -1, 0, 0, .480833, 0, .876812, -.480791, 4.09391e-7, -.876835, 0, 0, 1, -.481225, -6.1464e-7, .876597, .480833, 0, -.876812, 1.32445e-7, 6.95388e-7, -1, 0, 1, 0, 0, 1, 0, 1.89207e-8, 1, -9.93411e-8, 0, 1, 0, 1.89027e-8, 1, -9.94355e-8, 0, 1, 0, 0, 1, -7.01231e-8, -1.50786e-13, 1, -9.93412e-8, 3.97364e-7, 1, 7.94728e-7, 1.09012e-7, 1, 0, 1.09012e-7, 1, 1.56234e-7, -1.98682e-7, -1, 4.96705e-8, 0, -1, 8.76539e-8, 0, -1, -4.96705e-8, 0, -1, 0, 0, -1, 0, -1.89207e-8, -1, 0, -9.45137e-9, -1, 4.97177e-8, 0, -1, 9.93411e-8, 0, -1, -4.96705e-8, 6.62274e-8, -1, 2.31796e-7, -1.09012e-7, -1, 5.0214e-8, -1.09012e-7, -1, -1.56234e-7, -.0240626, -.99971, 5.2062e-8, -.0240626, -.99971, 0, -.0240626, -.99971, -8.24356e-8, -1, 0, 0, -.0240625, -.99971, 0, 1, 0, 0, -.0240625, -.99971, 2.51819e-8, -.0240626, -.99971, 5.00402e-8, -.0240628, -.999711, 1.08627e-7, -.0240626, -.999711, -5.74627e-8, -.0240626, -.99971, 3.47348e-8, -.0240626, -.99971, 4.03822e-8, -.0240626, -.999711, 1.52178e-8, -.0240626, -.99971, 4.96562e-8, -.0240626, -.999711, -7.90226e-8, -.0240629, -.999711, 4.96562e-8, -.0240626, -.999711, -1.58906e-9, -.0240615, -.999711, 0, -.0240626, -.99971, 6.24498e-8, -.0240626, -.999711, 1.03865e-7, -.0240627, -.99971, -5.18998e-8, -.0240626, -.99971, 0, -.214068, .976819, -2.31316e-7, -.214068, .976819, -9.68531e-8, -.214068, .976819, -1.75807e-7, -.214068, .976819, -8.72788e-8, 376654e-9, .0156541, .999877, 0, 0, 0, 1, 0, 0, -1, 0, 0, -.480793, 7.47283e-7, -.876834, 0, 1, 0, 0, 1, -2.22496e-7, -1.64888e-7, 1, -3.0071e-7, 0, 0, -1, .176613, -.98428, 2.31991e-8, -.0406786, 0, .999172, -.00603072, .0294902, .999547, 0, 0, 1, 0, 0, -1, .480833, 0, .876812, 1.71744e-8, 142706e-11, -1, -.481225, -125461e-11, .876597, .480833, 0, -.876812, -.0250511, -8.31904e-9, -.999686, 54963e-8, .999758, .0219866, .0173522, .720441, .693299, .0623032, .0147215, .997949, -138322e-9, .999985, -.00553538, .0173361, .720249, .693499, -.0174285, -.959987, -.279502, -1.24166e-9, 1, -4.96706e-8, -1.06527e-7, -1, 2.62395e-8, 1, 0, -298374e-11, 1, 0, 305787e-11, 1, -5.58384e-7, -5.38758e-7, 1, 6.76952e-7, -6.69386e-7, 1, 3.40473e-7, 3.28507e-7, 1, -4.24578e-7, 4.19832e-7, .0376646, .99929, 2.16182e-8, .00764979, -.999882, -.0133094, 1, -9.56487e-7, 3.09651e-7, .00850352, -.999849, .0151623, -171496e-11, -7.11908e-13, 1, 1, 109895e-11, 2.02679e-7, .00523922, -.023905, -.9997]
        },
        "aws-s3": {
            id: "aws-s3",
            primaryColorFaces: [2, 28, 29, 3, 30, 31, 32, 33],
            imagePlanePosition: {
                x: 0,
                y: 5,
                z: 5
            },
            imagePlaneRotation: {
                x: 0,
                y: 0,
                z: 0
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .55,
            uvs: [],
            normals: [-3.04128e-15, -1, 2.75739e-8, 2.01997e-7, .470627, -.882332, 1, 3.22451e-8, 2.98023e-7, -2.98023e-7, -9.67355e-8, 1, -1, -1.45103e-7, -2.23517e-7, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1.11022e-14, 1, -7.45058e-8, -2.42144e-7, -8.31612e-8, 1, -1, -4.98967e-8, -2.42144e-7, 2.6077e-7, 4.95679e-14, -1, 1, 1.16426e-7, 2.42144e-7, -.882332, .470627, -2.21545e-7, -7.55858e-8, .470627, .882332, .882332, .470627, -6.51602e-9, 2.23517e-7, 1.77348e-7, -1],
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 16, 0, 3, 19, 1, 1, 1, 1, 33, 16, 4, 6, 17, 2, 2, 2, 2, 33, 17, 6, 7, 18, 3, 3, 3, 3, 33, 18, 7, 5, 19, 4, 4, 4, 4, 32, 10, 4, 5, 5, 5, 5, 32, 5, 7, 8, 6, 6, 6, 32, 9, 10, 5, 7, 7, 7, 32, 5, 8, 9, 6, 6, 6, 32, 6, 4, 10, 8, 8, 8, 32, 11, 8, 7, 9, 9, 9, 32, 6, 10, 11, 9, 9, 9, 32, 11, 7, 6, 6, 6, 6, 33, 12, 13, 14, 15, 10, 10, 10, 10, 33, 10, 9, 13, 12, 11, 11, 11, 11, 33, 11, 10, 12, 15, 12, 12, 12, 12, 33, 8, 11, 15, 14, 13, 13, 13, 13, 33, 9, 8, 14, 13, 14, 14, 14, 14, 33, 2, 18, 19, 3, 15, 15, 15, 15, 33, 1, 17, 18, 2, 16, 16, 16, 16, 33, 0, 16, 17, 1, 17, 17, 17, 17, 33, 4, 16, 19, 5, 18, 18, 18, 18],
            vertices: [1.08082, 0, -1.08082, 1.08082, 5.96046e-8, 1.08082, -1.08082, 5.96046e-8, 1.08082, -1.08082, 0, -1.08082, 1, 2, -1, -1, 2, -1, .999999, 2, 1, -1, 2, 1, -.8, 2, .8, -.8, 2, -.8, .8, 2, -.8, .8, 2, .8, .8, .20816, -.8, -.8, .20816, -.8, -.8, .20816, .8, .8, .20816, .8, 1, .151515, -1, 1, .151515, 1, -1, .151515, 1, -1, .151515, -1],
            metadata: {
                vertices: 20,
                faces: 22,
                uvs: 0,
                normals: 19,
                generator: "io_three",
                type: "Geometry",
                version: 3
            }
        },
        api: {
            id: "api",
            primaryColorFaces: [46, 47, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlanePosition: {
                x: .7,
                y: 1.95
            },
            imagePlaneRotation: {
                x: -1.57079632,
                z: 1.5707963
            },
            imagePlaneScale: .5,
            vertices: [.740804, 2.98023e-8, -2.28499, .740804, .73, -2.28499, 1.2408, 2.98023e-8, -2.15102, 1.2408, .73, -2.15102, 1.60683, 2.98023e-8, -1.78499, 1.60683, .73, -1.78499, 1.7408, 5.96046e-8, -1.28499, 1.7408, .73, -1.28499, -.191546, 5.96046e-8, -1.54095, -.191546, .73, -1.54095, -.125222, 2.98023e-8, -1.78499, -.125222, .73, -1.78499, .240803, 2.98023e-8, -2.15102, .240803, .73, -2.15102, 1.7408, 1.78814e-7, 1.63094, 1.7408, .73, 1.63094, 1.60683, 2.08616e-7, 2.13094, 1.60683, .73, 2.13094, 1.2408, 2.38419e-7, 2.49697, 1.2408, .73, 2.49697, .740804, 2.38419e-7, 2.63094, .740804, .73, 2.63094, .240804, 2.38419e-7, 2.49697, .240804, .73, 2.49697, -.125222, 2.08616e-7, 2.13094, -.125222, .73, 2.13094, -.259196, 1.78814e-7, 1.63094, -.259196, .73, 1.63094, -1.30084, 1.49012e-7, .627576, -1.30084, .73, .627576, -1.16687, 1.19209e-7, .127576, -1.16687, .73, .127576, -.800841, 1.78814e-7, 1.4936, -.800841, .73, 1.4936, -1.16687, 1.78814e-7, 1.12758, -1.16687, .73, 1.12758, -1.40843, 5.96046e-8, -1.25386, -1.40843, .73, -1.25386, -1.01189, 5.96046e-8, -1.58659, -1.01189, .73, -1.58659, -.502117, 5.96046e-8, -1.67648, -.502117, .73, -1.67648, -1.49558, 1.19209e-7, -.257662, -1.49558, .73, -.257662, -1.58547, 8.9407e-8, -.767436, -1.58547, .73, -.767436, 1.16403, .941068, -2.01793, .694967, .941068, -2.14361, 1.50741, .941068, -1.67455, 1.63309, .941068, -1.20548, -.117474, .941068, -1.67455, -.179695, .941068, -1.4456, .225903, .941068, -2.01793, 1.50741, .941068, 1.99909, 1.63309, .941068, 1.53003, 1.16403, .941068, 2.34247, .694967, .941068, 2.46816, .225904, .941068, 2.34247, -.117474, .941068, 1.99909, -.243159, .941068, 1.53003, -1.09467, .941068, .119682, -1.22035, .941068, .588745, -1.40304, .941068, -.24172, -.751289, .941068, 1.40119, -1.09467, .941068, 1.05781, -.949282, .941068, -1.48842, -1.32128, .941068, -1.17628, -.471049, .941068, -1.57275, -1.48737, .941068, -.719952],
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 2, 3, 5, 4, 1, 1, 1, 1, 33, 4, 5, 7, 6, 2, 2, 2, 2, 33, 8, 9, 11, 10, 3, 3, 3, 3, 33, 1, 0, 12, 13, 4, 4, 4, 4, 33, 10, 11, 13, 12, 5, 5, 5, 5, 33, 14, 15, 17, 16, 6, 6, 6, 6, 33, 16, 17, 19, 18, 7, 7, 7, 7, 33, 18, 19, 21, 20, 8, 8, 8, 8, 33, 20, 21, 23, 22, 9, 9, 9, 9, 33, 22, 23, 25, 24, 10, 10, 10, 10, 33, 24, 25, 27, 26, 11, 11, 11, 11, 33, 6, 7, 15, 14, 12, 12, 12, 12, 33, 28, 29, 31, 30, 13, 13, 13, 13, 33, 26, 27, 33, 32, 14, 14, 14, 14, 33, 34, 35, 29, 28, 15, 15, 15, 15, 33, 32, 33, 35, 34, 16, 16, 16, 16, 33, 36, 37, 39, 38, 17, 17, 17, 17, 33, 38, 39, 41, 40, 18, 18, 18, 18, 33, 40, 41, 9, 8, 19, 19, 19, 19, 33, 30, 31, 43, 42, 20, 20, 20, 20, 33, 44, 45, 37, 36, 21, 21, 21, 21, 33, 42, 43, 45, 44, 22, 22, 22, 22, 33, 19, 17, 53, 55, 23, 23, 23, 23, 32, 12, 0, 2, 24, 24, 24, 32, 2, 4, 6, 25, 25, 25, 32, 6, 14, 16, 26, 26, 26, 32, 16, 18, 20, 27, 27, 27, 32, 20, 22, 24, 28, 28, 28, 32, 26, 32, 34, 29, 29, 29, 32, 20, 24, 26, 30, 30, 30, 32, 6, 16, 20, 31, 31, 31, 32, 12, 2, 6, 32, 32, 32, 32, 8, 10, 12, 33, 33, 33, 32, 38, 40, 8, 24, 24, 24, 32, 44, 36, 38, 34, 34, 34, 32, 30, 42, 44, 35, 35, 35, 32, 34, 28, 30, 36, 36, 36, 32, 6, 20, 26, 37, 37, 37, 32, 26, 34, 30, 38, 38, 38, 32, 30, 44, 38, 39, 39, 39, 32, 8, 12, 6, 40, 40, 40, 32, 30, 38, 8, 41, 41, 41, 32, 6, 26, 30, 42, 42, 42, 32, 6, 30, 8, 43, 43, 43, 32, 48, 46, 47, 44, 44, 44, 32, 47, 52, 50, 45, 45, 45, 32, 51, 67, 65, 46, 46, 46, 32, 47, 50, 51, 47, 47, 47, 32, 49, 48, 47, 48, 48, 48, 32, 53, 54, 49, 49, 49, 49, 32, 56, 55, 53, 50, 50, 50, 32, 58, 57, 56, 51, 51, 51, 32, 64, 63, 59, 52, 52, 52, 32, 59, 58, 56, 53, 53, 53, 32, 56, 53, 49, 54, 54, 54, 32, 49, 47, 51, 55, 55, 55, 32, 51, 65, 66, 56, 56, 56, 32, 66, 68, 62, 57, 57, 57, 32, 60, 61, 64, 58, 58, 58, 32, 66, 62, 60, 59, 59, 59, 32, 49, 51, 66, 56, 56, 56, 32, 59, 56, 49, 60, 60, 60, 32, 60, 64, 59, 61, 61, 61, 32, 49, 66, 60, 62, 62, 62, 32, 60, 59, 49, 63, 63, 63, 33, 35, 33, 63, 64, 64, 64, 64, 64, 33, 31, 29, 61, 60, 65, 65, 65, 65, 33, 1, 13, 52, 47, 66, 66, 66, 66, 33, 25, 23, 57, 58, 67, 67, 67, 67, 33, 45, 43, 62, 68, 68, 68, 68, 68, 33, 41, 39, 65, 67, 69, 69, 69, 69, 33, 11, 9, 51, 50, 70, 70, 70, 70, 33, 21, 19, 55, 56, 71, 71, 71, 71, 33, 5, 3, 46, 48, 72, 72, 72, 72, 33, 29, 35, 64, 61, 73, 73, 73, 73, 33, 43, 31, 60, 62, 74, 74, 74, 74, 33, 15, 7, 49, 54, 75, 75, 75, 75, 33, 17, 15, 54, 53, 76, 76, 76, 76, 33, 27, 25, 58, 59, 77, 77, 77, 77, 33, 37, 45, 68, 66, 78, 78, 78, 78, 33, 33, 27, 59, 63, 79, 79, 79, 79, 33, 39, 37, 66, 65, 80, 80, 80, 80, 33, 13, 11, 50, 52, 81, 81, 81, 81, 33, 9, 41, 67, 51, 82, 82, 82, 82, 33, 23, 21, 56, 57, 83, 83, 83, 83, 33, 7, 5, 48, 49, 84, 84, 84, 84, 33, 3, 1, 47, 46, 85, 85, 85, 85],
            normals: [.258819, 0, -.965926, .707107, 0, -.707107, .965926, 0, -.258819, -.964998, 0, -.262256, -.25882, 0, -.965926, -.707107, 0, -.707106, .965926, 0, .258819, .707106, 0, .707107, .258819, 0, .965926, -.258818, 0, .965926, -.707107, 0, .707107, -.965926, 0, .25882, 1, 0, 0, -.965926, 0, -.258818, -.245786, 0, .969324, -.965926, 0, .258819, -.707106, 0, .707107, -.642788, 0, -.766045, -.173648, 0, -.984808, .399964, 0, -.916531, -.760708, 4.03075e-8, .649094, -.939693, 0, -.34202, -.984808, 4.92925e-9, .173649, .558964, .612469, .558965, 0, -1, 0, -8.14215e-8, -1, 8.14215e-8, -6.98738e-8, -1, 4.0882e-8, 2.98024e-8, -1, 1.11224e-7, -2.98022e-8, -1, 1.11224e-7, 0, -1, 0, 9.7062e-15, -1, 5.96047e-8, -9.44111e-9, -1, 4.32522e-8, 1.64093e-14, -1, 3.44127e-8, 1.67691e-7, -1, 1.67691e-7, 7.40151e-8, -1, 8.82078e-8, -8.63609e-8, -1, 7.36897e-8, -7.95535e-14, -1, 5.96046e-8, 1.11055e-8, -1, 4.84991e-8, -3.3055e-8, -1, 5.96046e-8, -2.64031e-9, -1, 3.45331e-8, -5.91532e-9, -1, 4.46584e-8, -1.92498e-9, -1, 3.45978e-8, -9.57304e-10, -1, 4.02254e-8, -4.39173e-9, -1, 3.31559e-8, -1.73583e-7, 1, 1.73583e-7, 1.73583e-7, 1, 1.73583e-7, 0, 1, 0, 8.70186e-8, 1, 2.36489e-8, -8.67916e-8, 1, 2.32557e-8, -1.62637e-7, 1, -4.35784e-8, -6.3536e-8, 1, -2.3712e-7, 6.35355e-8, 1, -2.37119e-7, 0, 1, 0, -8.67916e-8, 1, 2.32558e-8, 5.30898e-8, 1, -3.51175e-8, 9.70069e-9, 1, -7.32366e-8, 0, 1, 0, -2.30679e-7, 1, -8.39603e-8, -2.37119e-7, 1, -6.35358e-8, 6.77944e-8, 1, -5.78473e-8, -1.1838e-8, 1, -5.16979e-8, 3.52351e-8, 1, -6.35358e-8, -4.53924e-10, 1, -4.59133e-8, 1.02044e-9, 1, -4.28785e-8, -.638563, .429505, .638564, -.919776, .305406, -.246453, -.222834, .508666, -.831627, -.640521, .423634, .640521, -.908412, .386173, .160178, -.15472, .454007, -.877462, -.950929, .170137, -.258433, .201987, .625257, .753826, .578446, .575152, -.578446, -.891847, .38406, .238969, -.731676, .273629, .624321, .890723, .454547, -1.80815e-8, .822168, .524889, .220299, -.947686, .193415, .253932, -.835859, .456931, -.304228, -.221399, .43428, .873146, -.563942, .479872, -.67208, -.657444, .368152, -.657443, .372431, .364607, -.853438, -.213151, .567239, .795492, .831769, .508417, -.222872, .211712, .575231, -.790119],
            metadata: {
                type: "Geometry",
                faces: 88,
                normals: 86,
                uvs: 0,
                generator: "io_three",
                vertices: 69,
                version: 3
            },
            uvs: []
        },
        "aws-snowball": {
            id: "aws-snowball",
            primaryColorFaces: [6, 7, 18, 19, 20, 21, 68, 69, 70, 71, 72, 73, 92, 93, 94, 95, 98, 99, 116, 117, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 172, 173, 174, 175, 176, 177],
            imagePlanePosition: {
                x: -.6,
                y: 3.4,
                z: 1.96
            },
            imagePlaneRotation: {
                x: 0
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .4,
            normals: [0, -1, 0, 5.63828e-8, 6.95388e-7, -1, 1, 3.03439e-7, 7.94728e-7, -8.9832e-8, 1.14517e-7, 1, -1, -1.34862e-7, -7.94729e-7, 0, -1, 0, 160523e-11, 1.45904e-7, -1, 163785e-11, -8.76166e-8, -1, 0, 1, 0, -3.97365e-7, -2.94731e-7, 1, -7.88427e-8, 1.54676e-7, 1, -.0233799, .999727, 0, -.999603, .0281759, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 3.43769e-7, 141399e-11, -1, 3.69298e-7, -8.97168e-7, -1, 4.32134e-7, 7.20216e-7, -1, 2.28861e-7, -199977e-11, -1, -1, 0, 0, -8.05317e-8, -3.04547e-7, 1, -4.29517e-7, -1.61979e-7, 1, -4.29517e-7, 2.73774e-7, 1, -5.84563e-7, 2.63799e-7, 1, -4.71624e-7, 1.58142e-7, 1, -3.79136e-7, 1.03583e-7, 1, -.202607, .97926, 0, .286041, 3.99727e-8, .958217, -.286041, -4.56831e-8, -.958217, .202607, -.97926, 0, -5.30906e-8, 1.28978e-7, -1, -1.48019e-9, 5.1984e-7, -1, 2.5276e-7, -37218e-10, -1, 0, 5.39455e-7, -1, -3.68157e-7, -2.2789e-7, 1, -4.29517e-7, -2.30835e-7, 1, -6.43428e-7, 9.38702e-7, 1, -5.2329e-7, -6.28243e-7, 1, -4.76837e-7, -3.69239e-7, 1, -4.57722e-7, -1.13453e-7, 1, .734379, -.67874, 0, -.734382, -.678737, 0, -.7707, .637198, 0, .7707, .637198, 0, -656353e-9, -330653e-9, 1, -2.52758e-7, 1.88322e-12, 1, 654694e-9, -330836e-9, 1, 0, -4.42651e-8, -1, 0, -1, 0, 0, 4.42651e-8, 1, 0, 1, 0, 4.83281e-8, 119209e-11, 1, 1, 3.03439e-7, -7.94728e-7, -1.0348e-7, -1.14517e-7, -1, -1, -1.34862e-7, 7.94729e-7, 12682e-10, 2.13992e-7, 1, 176043e-11, -2.09897e-8, 1, 0, 1, 0, -9.93406e-8, -3.96045e-7, -1, -1.93859e-7, 3.63942e-8, -1, 3.00928e-7, 143396e-11, 1, 3.82032e-7, -7.97187e-7, 1, 4.17233e-7, 5.20824e-7, 1, 2.28861e-7, -199977e-11, 1, -3.68157e-7, -145102e-11, -1, -4.90876e-7, 9.35094e-8, -1, -4.96151e-7, -9.87875e-8, -1, -5.00879e-7, 1.35899e-7, -1, -4.76837e-7, 5.28494e-8, -1, -4.57722e-7, -2.02936e-7, -1, -1, 0, 0, -1.13219e-7, -4.06062e-7, -1, -4.90876e-7, 5.93031e-8, -1, -4.90876e-7, -3.2885e-7, -1, -5.27758e-7, 7.11851e-8, -1, -7.06277e-7, 2.6267e-7, -1, -2.52757e-7, -9.10386e-8, -1, 0, -1, 0, .734382, .678737, 0, -.7707, .637198, 0, 6.1396e-8, 8.13599e-7, 1, -1.19066e-7, 4.20175e-7, 1, 0, 0, 1, 2.5276e-7, -426126e-11, 1, .7707, .637199, 0, 654834e-9, -331052e-9, -1, -65634e-8, -330936e-9, -1, -2.52758e-7, 1.88322e-12, -1, 0, 1, 0],
            metadata: {
                normals: 92,
                vertices: 92,
                faces: 117,
                type: "Geometry",
                uvs: 0,
                version: 3,
                generator: "io_three"
            },
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 4, 0, 3, 5, 1, 1, 1, 1, 33, 0, 6, 7, 1, 2, 2, 2, 2, 33, 2, 1, 8, 9, 3, 3, 3, 3, 33, 2, 10, 11, 3, 4, 4, 4, 4, 33, 5, 12, 13, 4, 5, 5, 5, 5, 33, 6, 0, 4, 14, 6, 6, 6, 6, 33, 3, 11, 15, 5, 7, 7, 7, 7, 33, 6, 11, 10, 7, 8, 8, 8, 8, 33, 1, 7, 16, 8, 9, 9, 9, 9, 33, 10, 2, 9, 17, 10, 10, 10, 10, 33, 9, 8, 18, 19, 11, 11, 11, 11, 33, 15, 20, 12, 5, 12, 12, 12, 12, 32, 21, 22, 4, 13, 13, 13, 32, 23, 24, 25, 14, 14, 14, 32, 26, 21, 4, 14, 14, 14, 32, 13, 23, 25, 14, 14, 14, 32, 26, 4, 13, 15, 15, 15, 32, 13, 25, 26, 14, 14, 14, 32, 28, 26, 25, 16, 16, 16, 32, 22, 21, 27, 17, 17, 17, 32, 27, 28, 25, 17, 17, 17, 32, 27, 25, 22, 14, 14, 14, 32, 29, 24, 23, 17, 17, 17, 32, 4, 22, 29, 14, 14, 14, 32, 29, 23, 14, 14, 14, 14, 32, 29, 14, 4, 14, 14, 14, 32, 6, 14, 30, 18, 18, 18, 32, 31, 15, 11, 19, 19, 19, 32, 11, 6, 30, 20, 20, 20, 32, 11, 30, 31, 21, 21, 21, 33, 8, 16, 34, 18, 22, 22, 22, 22, 33, 17, 9, 19, 35, 17, 17, 17, 17, 32, 19, 18, 34, 23, 23, 23, 32, 34, 36, 37, 24, 24, 24, 32, 38, 39, 35, 25, 25, 25, 32, 19, 34, 37, 26, 26, 26, 32, 38, 35, 19, 27, 27, 27, 32, 37, 38, 19, 28, 28, 28, 33, 23, 20, 15, 14, 8, 8, 8, 8, 33, 22, 25, 40, 41, 29, 29, 29, 29, 33, 25, 24, 42, 40, 30, 30, 30, 30, 33, 29, 22, 41, 43, 31, 31, 31, 31, 33, 24, 29, 43, 42, 32, 32, 32, 32, 32, 15, 31, 45, 33, 33, 33, 32, 44, 30, 14, 34, 34, 34, 32, 15, 45, 44, 35, 35, 35, 32, 44, 14, 15, 36, 36, 36, 32, 46, 16, 7, 37, 37, 37, 32, 10, 17, 47, 38, 38, 38, 32, 33, 46, 7, 39, 39, 39, 32, 10, 47, 32, 40, 40, 40, 32, 33, 7, 10, 41, 41, 41, 32, 10, 32, 33, 42, 42, 42, 33, 16, 46, 36, 34, 0, 0, 0, 0, 33, 47, 17, 35, 39, 0, 0, 0, 0, 33, 37, 36, 46, 48, 43, 43, 43, 43, 33, 49, 38, 37, 48, 5, 5, 5, 5, 33, 39, 38, 49, 47, 44, 44, 44, 44, 33, 43, 41, 40, 42, 17, 17, 17, 17, 33, 33, 32, 31, 30, 0, 0, 0, 0, 33, 30, 44, 50, 33, 45, 45, 45, 45, 33, 45, 31, 32, 51, 46, 46, 46, 46, 33, 33, 50, 48, 46, 47, 47, 47, 47, 33, 50, 51, 49, 48, 48, 48, 48, 48, 33, 45, 51, 50, 44, 8, 8, 8, 8, 33, 51, 32, 47, 49, 49, 49, 49, 49, 33, 88, 89, 90, 91, 17, 17, 17, 17, 33, 27, 21, 89, 88, 50, 50, 50, 50, 33, 28, 27, 88, 91, 51, 51, 51, 51, 33, 26, 28, 91, 90, 52, 52, 52, 52, 33, 21, 26, 90, 89, 53, 53, 53, 53, 33, 52, 55, 54, 53, 0, 0, 0, 0, 33, 56, 57, 55, 52, 54, 54, 54, 54, 33, 52, 53, 59, 58, 55, 55, 55, 55, 33, 54, 61, 60, 53, 56, 56, 56, 56, 33, 54, 55, 63, 62, 57, 57, 57, 57, 33, 56, 52, 58, 64, 58, 58, 58, 58, 33, 55, 57, 65, 63, 59, 59, 59, 59, 33, 58, 59, 62, 63, 60, 60, 60, 60, 33, 53, 60, 66, 59, 61, 61, 61, 61, 33, 62, 67, 61, 54, 62, 62, 62, 62, 33, 61, 69, 68, 60, 11, 11, 11, 11, 32, 70, 64, 58, 63, 63, 63, 32, 63, 65, 71, 64, 64, 64, 32, 70, 58, 63, 65, 65, 65, 32, 63, 71, 70, 66, 66, 66, 32, 72, 83, 67, 67, 67, 67, 32, 59, 66, 82, 68, 68, 68, 32, 72, 67, 62, 69, 69, 69, 32, 59, 82, 73, 70, 70, 70, 32, 72, 62, 59, 71, 71, 71, 32, 59, 73, 72, 72, 72, 72, 33, 60, 68, 74, 66, 73, 73, 73, 73, 33, 67, 75, 69, 61, 15, 15, 15, 15, 32, 74, 68, 69, 74, 74, 74, 32, 69, 75, 79, 75, 75, 75, 32, 77, 76, 74, 76, 76, 76, 32, 69, 79, 78, 77, 77, 77, 32, 77, 74, 69, 78, 78, 78, 32, 69, 78, 77, 79, 79, 79, 33, 66, 82, 76, 74, 8, 8, 8, 8, 33, 83, 67, 75, 79, 8, 8, 8, 8, 33, 77, 84, 82, 76, 43, 43, 43, 43, 33, 85, 84, 77, 78, 80, 80, 80, 80, 33, 79, 78, 85, 83, 81, 81, 81, 81, 33, 73, 70, 71, 72, 51, 51, 51, 51, 33, 70, 73, 86, 80, 82, 82, 82, 82, 32, 64, 70, 80, 83, 83, 83, 32, 81, 71, 65, 84, 84, 84, 32, 65, 64, 80, 85, 85, 85, 32, 80, 81, 65, 86, 86, 86, 33, 81, 87, 72, 71, 87, 87, 87, 87, 33, 83, 72, 87, 85, 88, 88, 88, 88, 33, 84, 86, 73, 82, 89, 89, 89, 89, 33, 86, 84, 85, 87, 90, 90, 90, 90, 33, 81, 80, 86, 87, 91, 91, 91, 91],
            uvs: [],
            vertices: [1, 0, .302395, 1, 0, .452395, -1, 0, .452395, -1, 0, .302395, .85, .15, .302395, -.85, .15, .302395, 1, 1.76787, .302395, .999999, 1.76787, .452396, .85, .15, .452395, -.85, .110243, .452395, -1, 1.76787, .452395, -1, 1.76787, .302395, -.85, .15, -.302395, .85, .15, -.302395, .85, 1.44603, .302395, -.813469, 1.44603, .302395, .85, 1.61787, .452395, -.85, 1.61787, .452395, .85, .15, .391697, -.85, .110243, .391696, -.813469, 1.44603, -.302395, .85, .648576, .057461, .85, .794834, .153705, .85, 1.44603, -.302395, .85, 1.13832, -.153705, .85, .794834, -.153705, .85, .648576, -.057461, .85, .732735, .057461, .85, .732735, -.057461, .85, 1.13832, .153705, .260441, 1.67367, .302395, -.260441, 1.67367, .302395, -.260441, 1.67367, .452395, .260441, 1.67367, .452395, .85, 1.61787, .391697, -.85, 1.61787, .391696, .3643, 1.61787, .391697, .117908, 1.35128, .391697, -.11791, 1.35128, .391697, -.3643, 1.61787, .391696, .622511, .747767, -.0857967, .622511, .747767, .221614, .622511, 1.09125, -.0857968, .622511, 1.09125, .221614, .117908, 1.50128, .302395, -.117908, 1.50128, .302395, .3643, 1.61787, .452395, -.3643, 1.61787, .452395, .117908, 1.35128, .452195, -.11791, 1.35128, .452195, .117908, 1.50128, .452195, -.117908, 1.50128, .452195, 1, 0, -.302395, 1, 0, -.452395, -1, 0, -.452395, -1, 0, -.302395, .85, .15, -.302395, -.85, .15, -.302395, 1, 1.76787, -.302395, .999999, 1.76787, -.452396, .85, .15, -.452395, -.85, .110243, -.452395, -1, 1.76787, -.452395, -1, 1.76787, -.302395, .85, 1.44603, -.302395, -.813469, 1.44603, -.302395, .85, 1.61787, -.452396, -.85, 1.61787, -.452395, .85, .15, -.391697, -.85, .110243, -.391696, .260441, 1.67367, -.302395, -.260441, 1.67367, -.302395, -.260441, 1.67367, -.452395, .260441, 1.67367, -.452395, .85, 1.61787, -.391697, -.85, 1.61787, -.391696, .3643, 1.61787, -.391697, .117908, 1.35128, -.391697, -.11791, 1.35128, -.391697, -.3643, 1.61787, -.391696, .117908, 1.50128, -.302395, -.117908, 1.50128, -.302395, .3643, 1.61787, -.452395, -.3643, 1.61787, -.452395, .117908, 1.35128, -.452195, -.11791, 1.35128, -.452195, .117908, 1.50128, -.452195, -.117908, 1.50128, -.452195, .790266, .732735, .057461, .790266, .648576, .057461, .790266, .648576, -.057461, .790266, .732735, -.057461]
        },
        "batch-processor": {
            id: "batch-processor",
            primaryColorFaces: [14, 15, 25, 26, 27, 28, 30, 31, 32, 33, 64, 65, 72, 73],
            imagePlanePosition: {
                y: 4.5
            },
            imagePlaneRotation: {
                x: -1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .5,
            faces: [33, 1, 0, 3, 2, 0, 0, 0, 0, 33, 5, 6, 7, 4, 1, 1, 1, 1, 33, 3, 0, 4, 7, 2, 2, 2, 2, 33, 1, 2, 6, 5, 3, 3, 3, 3, 33, 2, 3, 7, 6, 4, 4, 4, 4, 33, 0, 1, 5, 4, 5, 5, 5, 5, 33, 37, 39, 10, 14, 6, 6, 6, 6, 33, 14, 12, 16, 18, 7, 7, 7, 7, 33, 9, 11, 15, 13, 8, 8, 8, 8, 33, 10, 8, 12, 14, 9, 9, 9, 9, 33, 36, 15, 11, 38, 10, 10, 10, 10, 33, 19, 18, 20, 23, 11, 11, 11, 11, 32, 15, 36, 37, 12, 12, 12, 32, 37, 14, 18, 13, 13, 13, 32, 18, 19, 15, 14, 14, 14, 32, 37, 18, 15, 15, 15, 15, 32, 16, 12, 25, 16, 16, 16, 32, 25, 24, 13, 17, 17, 17, 32, 13, 17, 16, 18, 18, 18, 32, 25, 13, 16, 19, 19, 19, 33, 13, 15, 19, 17, 20, 20, 20, 20, 33, 16, 17, 22, 21, 21, 21, 21, 21, 33, 17, 19, 23, 22, 22, 22, 22, 22, 33, 18, 16, 21, 20, 23, 23, 23, 23, 33, 9, 13, 24, 26, 24, 24, 24, 24, 33, 8, 27, 25, 12, 24, 24, 24, 24, 33, 26, 24, 28, 30, 25, 25, 25, 25, 33, 25, 27, 31, 29, 26, 26, 26, 26, 32, 8, 10, 39, 27, 27, 27, 32, 39, 43, 42, 28, 28, 28, 32, 38, 11, 9, 29, 29, 29, 32, 39, 42, 38, 28, 28, 28, 32, 27, 8, 39, 30, 30, 30, 32, 34, 35, 31, 31, 31, 31, 32, 31, 27, 39, 32, 32, 32, 32, 39, 38, 9, 33, 33, 33, 32, 26, 30, 34, 34, 34, 34, 32, 39, 9, 26, 30, 30, 30, 32, 34, 31, 39, 35, 35, 35, 32, 39, 26, 34, 36, 36, 36, 33, 24, 25, 29, 28, 37, 37, 37, 37, 33, 29, 31, 35, 33, 38, 38, 38, 38, 33, 28, 29, 33, 32, 39, 39, 39, 39, 33, 30, 28, 32, 34, 40, 40, 40, 40, 33, 32, 33, 35, 34, 41, 41, 41, 41, 33, 37, 41, 43, 39, 42, 42, 42, 42, 33, 36, 40, 41, 37, 43, 43, 43, 43, 33, 38, 42, 40, 36, 44, 44, 44, 44, 33, 40, 42, 43, 41, 45, 45, 45, 45, 33, 20, 21, 22, 23, 37, 37, 37, 37, 33, 45, 44, 47, 46, 46, 46, 46, 46, 33, 49, 50, 51, 48, 1, 1, 1, 1, 33, 47, 44, 48, 51, 2, 2, 2, 2, 33, 45, 46, 50, 49, 3, 3, 3, 3, 33, 46, 47, 51, 50, 4, 4, 4, 4, 33, 44, 45, 49, 48, 5, 5, 5, 5, 33, 53, 52, 55, 54, 46, 46, 46, 46, 33, 57, 58, 59, 56, 47, 47, 47, 47, 33, 55, 52, 56, 59, 2, 2, 2, 2, 33, 53, 54, 58, 57, 3, 3, 3, 3, 33, 54, 55, 59, 58, 4, 4, 4, 4, 33, 52, 53, 57, 56, 5, 5, 5, 5, 33, 61, 60, 63, 62, 0, 0, 0, 0, 33, 65, 66, 67, 64, 48, 48, 48, 48, 33, 63, 60, 64, 67, 2, 2, 2, 2, 33, 61, 62, 66, 65, 3, 3, 3, 3, 33, 62, 63, 67, 66, 4, 4, 4, 4, 33, 60, 61, 65, 64, 5, 5, 5, 5],
            vertices: [-.578029, .406997, -.578029, -.578029, .406997, .578029, .578029, .406997, .578029, .578029, .406997, -.578029, -.578029, .525997, -.578029, -.578029, .525997, .578029, .578029, .525997, .578029, .578029, .525997, -.578029, -1, 0, 1, 1, 0, 1, -1, -1.19209e-7, -1, 1, -1.19209e-7, -1, -.808189, .264086, .808189, .808189, .264086, .808189, -.808189, .264086, -.808189, .808189, .264086, -.808189, -.670791, .26409, .670791, .670791, .26409, .670791, -.670791, .26409, -.670791, .670791, .26409, -.670791, -.670791, .104697, -.670791, -.670791, .104697, .670791, .670791, .104697, .670791, .670791, .104697, -.670791, .202047, .264086, .808189, -.202047, .264086, .808189, .297953, 0, 1, -.297953, 0, 1, .202047, .264086, .808191, -.202047, .264086, .808191, .297953, 0, 1, -.297953, 0, 1, .198865, .262188, 1.11376, -.20523, .262188, 1.11376, .29477, -.00189751, 1.11376, -.301135, -.00189751, 1.11376, .203638, .264082, -.808192, -.200456, .264082, -.808192, .299544, -423193e-11, -1, -.296362, -423193e-11, -1, .200456, .262184, -1.11376, -.203638, .262184, -1.11376, .296362, -.00190187, -1.11376, -.299544, -.00190187, -1.11376, -.578029, .16898, -.578029, -.578029, .16898, .578029, .578029, .16898, .578029, .578029, .16898, -.578029, -.578029, .287956, -.578029, -.578029, .287956, .578029, .578029, .287956, .578029, .578029, .287956, -.578029, -.578029, .882997, -.57803, -.578029, .882997, .578029, .578029, .882997, .578029, .578029, .882997, -.57803, -.578029, 1.002, -.57803, -.578029, 1.002, .578029, .578029, 1.002, .578029, .578029, 1.002, -.57803, -.578029, .644997, -.578029, -.578029, .644997, .578029, .578029, .644997, .578029, .578029, .644997, -.578029, -.578029, .763997, -.578029, -.578029, .763997, .578029, .578029, .763997, .578029, .578029, .763997, -.578029],
            metadata: {
                faces: 68,
                generator: "io_three",
                type: "Geometry",
                normals: 49,
                uvs: 0,
                version: 3,
                vertices: 68
            },
            normals: [0, -1, 5.15585e-8, 0, 1, 0, 0, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 0, 4.09062e-7, .587668, -.809103, -29933e-9, 1, -4.03011e-8, .809102, .587668, -3.78727e-8, -.809102, .587668, -3.78727e-8, -4.11057e-7, .587668, -.809102, 0, 3.73949e-7, 1, 0, .537666, -.843158, 676716e-11, 1, -371339e-10, 0, 1, -303668e-10, -407728e-11, 1, -742556e-10, 0, 1, 294992e-10, 0, 0, 0, 0, 1, 294992e-10, 0, 1, 294992e-10, 29933e-9, 1, -4.03011e-8, 0, -3.73949e-7, -1, -1, 0, 0, 1, 0, 0, 0, .587668, .809102, .939635, .342179, 0, -.939635, .342179, 0, -584493e-11, -1, 5.96047e-8, 0, -.999861, .0166786, 587149e-11, -1, 5.96047e-8, 0, -1, 211596e-11, 0, -.999861, -.0166775, -.00265952, -.999996, 0, 0, -1, 211596e-11, .512126, -.858911, 0, -.00320125, -.999995, -4.31016e-7, .0512341, -.998571, -.0152224, 0, 1, 0, -.941179, .337721, -.0112291, 0, .999981, .00620961, .937754, .346864, .0173728, 0, 270842e-11, 1, -.941179, .337721, .0112291, 0, .999981, -.00621, .937754, .346865, -.0173731, 0, 270842e-11, -1, 0, -1, 0, 0, 1, -1.03117e-7, 0, 1, -5.15585e-8],
            uvs: []
        },
        beacon: {
            id: "beacon",
            primaryColorFaces: [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 146, 148, 150, 152, 154, 156, 158, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193],
            imagePlanePosition: {
                y: .02
            },
            imagePlaneRotation: {
                x: -1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .9,
            metadata: {
                uvs: 0,
                vertices: 108,
                version: 3,
                faces: 97,
                type: "Geometry",
                normals: 68,
                generator: "io_three"
            },
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 4, 15, 16, 5, 1, 1, 2, 3, 33, 15, 26, 27, 16, 1, 4, 5, 2, 33, 26, 37, 38, 27, 4, 1, 6, 5, 33, 37, 48, 49, 38, 1, 1, 7, 6, 33, 48, 59, 60, 49, 1, 1, 8, 7, 33, 59, 70, 71, 60, 1, 1, 9, 8, 33, 70, 81, 82, 71, 1, 1, 10, 9, 33, 81, 4, 5, 82, 1, 1, 3, 10, 33, 100, 101, 17, 6, 11, 12, 13, 14, 33, 101, 102, 28, 17, 12, 15, 16, 13, 33, 102, 103, 39, 28, 15, 17, 18, 16, 33, 103, 104, 50, 39, 17, 19, 20, 18, 33, 104, 105, 61, 50, 19, 21, 22, 20, 33, 105, 106, 72, 61, 21, 23, 24, 22, 33, 106, 107, 83, 72, 23, 25, 26, 24, 33, 107, 100, 6, 83, 25, 11, 14, 26, 33, 6, 7, 18, 17, 14, 27, 28, 13, 33, 17, 18, 29, 28, 13, 28, 29, 16, 33, 28, 29, 40, 39, 16, 29, 30, 18, 33, 39, 40, 51, 50, 18, 30, 31, 20, 33, 50, 51, 62, 61, 20, 31, 32, 22, 33, 61, 62, 73, 72, 22, 32, 33, 24, 33, 72, 73, 84, 83, 24, 33, 34, 26, 33, 83, 84, 7, 6, 26, 34, 27, 14, 33, 7, 18, 19, 8, 27, 28, 28, 27, 33, 18, 29, 30, 19, 28, 29, 35, 28, 33, 29, 40, 41, 30, 29, 30, 30, 35, 33, 40, 51, 52, 41, 30, 31, 31, 30, 33, 51, 62, 63, 52, 31, 32, 32, 31, 33, 62, 73, 74, 63, 32, 33, 33, 32, 33, 73, 84, 85, 74, 33, 34, 34, 33, 33, 84, 7, 8, 85, 34, 27, 27, 34, 33, 8, 19, 20, 9, 27, 28, 36, 37, 33, 19, 30, 31, 20, 28, 35, 38, 36, 33, 30, 41, 42, 31, 35, 30, 39, 38, 33, 41, 52, 53, 42, 30, 31, 40, 39, 33, 52, 63, 64, 53, 31, 32, 41, 40, 33, 63, 74, 75, 64, 32, 33, 42, 41, 33, 74, 85, 86, 75, 33, 34, 43, 42, 33, 85, 8, 9, 86, 34, 27, 37, 43, 33, 9, 20, 21, 10, 37, 36, 32, 31, 33, 20, 31, 32, 21, 36, 38, 33, 32, 33, 31, 42, 43, 32, 38, 39, 34, 33, 33, 42, 53, 54, 43, 39, 40, 27, 34, 33, 53, 64, 65, 54, 40, 41, 28, 27, 33, 64, 75, 76, 65, 41, 42, 29, 28, 33, 75, 86, 87, 76, 42, 43, 30, 29, 33, 86, 9, 10, 87, 43, 37, 31, 30, 33, 10, 21, 22, 11, 31, 32, 41, 40, 33, 21, 32, 33, 22, 32, 33, 42, 41, 33, 32, 43, 44, 33, 33, 34, 43, 42, 33, 43, 54, 55, 44, 34, 27, 37, 43, 33, 54, 65, 66, 55, 27, 28, 36, 37, 33, 65, 76, 77, 66, 28, 29, 38, 36, 33, 76, 87, 88, 77, 29, 30, 39, 38, 33, 87, 10, 11, 88, 30, 31, 40, 39, 33, 11, 22, 23, 12, 40, 41, 41, 40, 33, 22, 33, 34, 23, 41, 42, 42, 41, 33, 33, 44, 45, 34, 42, 43, 43, 42, 33, 44, 55, 56, 45, 43, 37, 37, 43, 33, 55, 66, 67, 56, 37, 36, 36, 37, 33, 66, 77, 78, 67, 36, 38, 38, 36, 33, 77, 88, 89, 78, 38, 39, 39, 38, 33, 88, 11, 12, 89, 39, 40, 40, 39, 33, 12, 13, 24, 23, 40, 44, 45, 41, 33, 23, 24, 35, 34, 41, 45, 46, 42, 33, 34, 35, 46, 45, 42, 46, 47, 43, 33, 45, 46, 57, 56, 43, 47, 48, 37, 33, 56, 57, 68, 67, 37, 48, 49, 36, 33, 67, 68, 79, 78, 36, 49, 50, 38, 33, 78, 79, 90, 89, 38, 50, 51, 39, 33, 89, 90, 13, 12, 39, 51, 44, 40, 33, 13, 24, 25, 14, 44, 45, 52, 53, 33, 24, 35, 36, 25, 45, 46, 54, 52, 33, 35, 46, 47, 36, 46, 47, 55, 54, 33, 46, 57, 58, 47, 47, 48, 56, 55, 33, 57, 68, 69, 58, 48, 49, 57, 56, 33, 68, 79, 80, 69, 49, 50, 58, 57, 33, 79, 90, 91, 80, 50, 51, 59, 58, 33, 90, 13, 14, 91, 51, 44, 53, 59, 33, 82, 5, 92, 99, 10, 3, 60, 61, 33, 71, 82, 99, 98, 9, 10, 61, 62, 33, 60, 71, 98, 97, 8, 9, 62, 63, 33, 49, 60, 97, 96, 7, 8, 63, 64, 33, 38, 49, 96, 95, 6, 7, 64, 65, 33, 27, 38, 95, 94, 5, 6, 65, 66, 33, 16, 27, 94, 93, 2, 5, 66, 67, 33, 5, 16, 93, 92, 3, 2, 67, 60, 33, 99, 92, 100, 107, 61, 60, 11, 25, 33, 98, 99, 107, 106, 62, 61, 25, 23, 33, 97, 98, 106, 105, 63, 62, 23, 21, 33, 96, 97, 105, 104, 64, 63, 21, 19, 33, 95, 96, 104, 103, 65, 64, 19, 17, 33, 94, 95, 103, 102, 66, 65, 17, 15, 33, 93, 94, 102, 101, 67, 66, 15, 12, 33, 92, 93, 101, 100, 60, 67, 12, 11],
            normals: [0, -1, 0, 0, -1, 0, .572131, -.587664, -.572069, .809076, -.587664, 0, 0, -.999969, 0, 0, -.587634, -.809107, -.572131, -.587664, -.572069, -.809076, -.587664, 0, -.572131, -.587664, .572069, 0, -.587634, .809107, .572131, -.587664, .572069, .993744, .111545, 0, .702719, .111545, -.702628, .404004, .820704, -.403943, .571337, .820704, 0, 0, .111545, -.993744, 0, .820734, -.571306, -.702719, .111545, -.702628, -.404004, .820704, -.403943, -.993744, .111545, 0, -.571337, .820704, 0, -.702719, .111545, .702628, -.404004, .820704, .403943, 0, .111545, .993744, 0, .820734, .571306, .702719, .111545, .702628, .404004, .820704, .403943, .77636, .630268, 0, .548997, .630238, -.548936, 0, .630238, -.77636, -.548997, .630238, -.548936, -.77636, .630268, 0, -.548997, .630238, .548936, 0, .630238, .77636, .548997, .630238, .548936, 0, .630238, -.776391, -.420301, .804163, .42024, -.594378, .804163, 0, 0, .804193, .594348, .420301, .804163, .42024, .594378, .804163, 0, .420301, .804163, -.42024, 0, .804193, -.594348, -.420301, .804163, -.42024, .427656, .903928, 0, .302377, .903928, -.302347, 0, .903958, -.427595, -.302377, .903928, -.302347, -.427656, .903928, 0, -.302377, .903928, .302347, 0, .903958, .427595, .302377, .903928, .302347, .533219, .656728, -.533219, .754112, .656697, 0, 0, .656758, -.754082, -.53325, .656728, -.533189, -.754112, .656697, 0, -.533219, .656728, .533219, 0, .656758, .754082, .53325, .656728, .533189, .993713, .111789, 0, .702689, .111789, .702628, 0, .11182, .993713, -.702689, .111789, .702628, -.993713, .111789, 0, -.702689, .111789, -.702628, 0, .11182, -.993713, .702689, .111789, -.702628],
            vertices: [-1, .00549567, -1, 1, .00549567, -1, -1, .00549567, 1, 1, .00549567, 1, .0416292, .00549543, -2.10762e-7, .357856, .00549543, -1.57685e-7, .192952, 1.47207, -1.04718e-7, .3582, 1.47207, -1.57795e-7, .3582, 1.62979, -1.57795e-7, .330986, 1.62979, -1.04718e-7, .330986, 1.50145, -1.57795e-7, .192952, 1.50145, -1.04718e-7, .192952, 1.74398, -1.04718e-7, .251153, 1.74398, -1.04718e-7, .0416292, 1.98459, -1.57795e-7, .0417606, .00549543, 317202e-9, .265367, .00549543, -.223328, .148762, 1.47207, -.106703, .26561, 1.47207, -.223571, .26561, 1.62979, -.223571, .246367, 1.62979, -.204325, .246367, 1.50145, -.204325, .148762, 1.50145, -.106703, .148762, 1.74398, -.106703, .189917, 1.74398, -.147865, .0417606, 1.98459, 317239e-9, .0420779, .00549543, 448741e-9, .0420779, .00549543, -.315833, .042078, 1.47207, -.150901, .0420779, 1.47207, -.316177, .0420779, 1.62979, -.316177, .042078, 1.62979, -.288958, .0420779, 1.50145, -.288958, .042078, 1.50145, -.1509, .042078, 1.74398, -.1509, .042078, 1.74398, -.209112, .042078, 1.98459, 448741e-9, .0423953, .00549543, 317352e-9, -.181211, .00549543, -.223328, -.0646062, 1.47207, -.106703, -.181454, 1.47207, -.223571, -.181454, 1.62979, -.223571, -.162211, 1.62979, -.204325, -.162211, 1.50145, -.204324, -.0646057, 1.50145, -.106703, -.0646057, 1.74398, -.106703, -.105761, 1.74398, -.147865, .0423953, 1.98459, 317314e-9, .0425268, .00549543, 1.50645e-9, -.2737, .00549543, -2.39203e-8, -.108796, 1.47207, -9.15258e-8, -.274044, 1.47207, -2.39999e-8, -.274044, 1.62979, -2.39999e-8, -.24683, 1.62979, -7.94564e-8, -.24683, 1.50145, -2.63794e-8, -.108796, 1.50145, -9.15259e-8, -.108796, 1.74398, -9.15259e-8, -.166997, 1.74398, -8.64368e-8, .0425268, 1.98459, -5.16802e-8, .0423954, .00549543, -317411e-9, -.181211, .00549543, .223328, -.0646062, 1.47207, .106703, -.181454, 1.47207, .223571, -.181454, 1.62979, .223571, -.162211, 1.62979, .204324, -.16221, 1.50145, .204324, -.0646057, 1.50145, .106702, -.0646057, 1.74398, .106702, -.105761, 1.74398, .147865, .0423954, 1.98459, -317449e-9, .0420781, .00549543, -44895e-8, .0420781, .00549543, .315833, .042078, 1.47207, .150901, .0420781, 1.47207, .316177, .0420781, 1.62979, .316177, .042078, 1.62979, .288958, .0420781, 1.50145, .288958, .042078, 1.50145, .1509, .042078, 1.74398, .1509, .042078, 1.74398, .209112, .0420781, 1.98459, -44895e-8, .0417608, .00549543, -317561e-9, .265367, .00549543, .223328, .148762, 1.47207, .106703, .26561, 1.47207, .223571, .26561, 1.62979, .223571, .246367, 1.62979, .204324, .246367, 1.50145, .204324, .148762, 1.50145, .106702, .148762, 1.74398, .106702, .189917, 1.74398, .147864, .0417607, 1.98459, -317524e-9, .296116, .55301, -1.37923e-7, .22171, .55301, -.179663, .042078, .55301, -.254083, -.137554, .55301, -.179663, -.21196, .55301, -4.93004e-8, -.137554, .55301, .179663, .042078, .55301, .254082, .22171, .55301, .179663, .242529, 1.0304, -1.20675e-7, .183818, 1.0304, -.141765, .042078, 1.0304, -.200486, -.0996622, 1.0304, -.141765, -.158373, 1.0304, -7.12338e-8, -.0996622, 1.0304, .141765, .042078, 1.0304, .200486, .183818, 1.0304, .141765],
            uvs: []
        },
        billboard: {
            id: "billboard",
            primaryColorFaces: [],
            imagePlanePosition: {
                x: .6,
                y: 7.5
            },
            imagePlaneRotation: {
                x: -1.5707963,
                y: 1.5707963,
                z: 1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .9,
            uvs: [],
            normals: [-.34366, -.939094, 0, .67366, .18258, -.716133, .451332, .122323, .883933, -.939094, .343659, 0, -.409923, .91212, 0, -1, -8.12791e-8, 5.87225e-15, 0, 0, -1, 1, 2.7093e-8, -1.46806e-15, 0, 5.4186e-8, 1, 0, -1, 0, 0, 1, -1.08372e-7, 1, 0, 6.51012e-7, -.447214, 1.09642e-8, .894427, -.447214, -2.10147e-8, -.894427, -130203e-11, 1, 260404e-11, 0, -1, 0, 1, 1.55872e-14, 6.51012e-7, -.447214, 3.19788e-8, .894427, -.447214, -2.10147e-8, -.894427, 0, 1, 0, 1, -6.30774e-7, 3.32239e-7, -.420263, -.818652, .391393, -.420263, .818652, -.391393, 6.46418e-7, .112547, .993646, 3.96705e-7, -.112548, -.993646, 1, -3.18683e-7, -1.37026e-7, -.420263, -.818652, -.391393, -.420263, .818652, .391393, -129284e-11, -.112548, .993646, 6.4819e-7, .112547, -.993646, -.34366, -.939094, 0, .67366, .18258, -.716133, .451332, .122323, .883932, -.939094, .34366, 0, -.409923, .91212, 0],
            faces: [32, 3, 2, 1, 0, 0, 0, 32, 0, 3, 1, 1, 1, 1, 32, 0, 2, 3, 2, 2, 2, 32, 1, 2, 0, 3, 3, 3, 33, 4, 5, 7, 6, 4, 4, 4, 4, 33, 9, 11, 10, 8, 5, 5, 5, 5, 33, 11, 15, 14, 10, 6, 6, 6, 6, 33, 15, 13, 12, 14, 7, 7, 7, 7, 33, 13, 9, 8, 12, 8, 8, 8, 8, 33, 8, 10, 14, 12, 9, 9, 9, 9, 33, 13, 15, 11, 9, 10, 10, 10, 10, 33, 16, 19, 20, 17, 11, 11, 11, 11, 33, 17, 20, 21, 18, 12, 12, 12, 12, 33, 19, 16, 18, 21, 13, 13, 13, 13, 32, 19, 21, 20, 14, 14, 14, 32, 16, 17, 18, 15, 15, 15, 33, 22, 25, 26, 23, 16, 16, 16, 16, 33, 23, 26, 27, 24, 17, 17, 17, 17, 33, 25, 22, 24, 27, 18, 18, 18, 18, 32, 25, 27, 26, 19, 19, 19, 32, 22, 23, 24, 15, 15, 15, 33, 28, 31, 32, 29, 20, 20, 20, 20, 33, 29, 32, 33, 30, 21, 21, 21, 21, 33, 31, 28, 30, 33, 22, 22, 22, 22, 32, 31, 33, 32, 23, 23, 23, 32, 28, 29, 30, 24, 24, 24, 33, 34, 37, 38, 35, 25, 25, 25, 25, 33, 35, 38, 39, 36, 26, 26, 26, 26, 33, 37, 34, 36, 39, 27, 27, 27, 27, 32, 37, 39, 38, 28, 28, 28, 32, 34, 35, 36, 29, 29, 29, 32, 43, 42, 41, 30, 30, 30, 32, 40, 43, 41, 31, 31, 31, 32, 40, 42, 43, 32, 32, 32, 32, 41, 42, 40, 33, 33, 33, 33, 44, 45, 47, 46, 34, 34, 34, 34],
            metadata: {
                version: 3,
                generator: "io_three",
                uvs: 0,
                faces: 36,
                type: "Geometry",
                normals: 35,
                vertices: 48
            },
            vertices: [1.22807, 3.19856, -.887903, 1.14533, 2.97246, -1.02338, 1.14533, 2.97246, -.814368, 1.3052, 2.91396, -.887903, .0976767, 2.68555, -.86153, 1.23782, 3.19795, -.86153, .0976767, 2.68555, -.931693, 1.23782, 3.19795, -.931693, .0570371, .525956, 1.1, .0570369, 2.72596, 1.1, .0570371, .525956, -1.1, .0570369, 2.72596, -1.1, .124286, .525956, 1.1, .124286, 2.72596, 1.1, .124286, .525956, -1.1, .124286, 2.72596, -1.1, .0457786, 4.76837e-7, -1.04578, .0457786, 4.76837e-7, -.954222, -.0457782, 4.76837e-7, -1, .0457787, 2.48943, -1.04578, .0457786, 2.48943, -.954222, -.0457783, 2.48943, -1, .0457786, 4.76837e-7, .954221, .0457786, 4.76837e-7, 1.04578, -.0457782, 4.76837e-7, 1, .0457787, 2.48943, .954221, .0457786, 2.48943, 1.04578, -.0457783, 2.48943, 1, .0457786, 1.48581, -.977744, .0457787, 1.39663, -.967644, -.0457784, 1.44122, -.972694, .0457787, 2.41496, .965709, .0457785, 2.32579, .975809, -.0457784, 2.37037, .970759, .0457786, 2.41588, -.967644, .0457786, 2.32671, -.977744, -.0457783, 2.3713, -.972694, .0457786, 1.48673, .975809, .0457786, 1.39756, .965709, -.0457783, 1.44214, .970759, 1.22807, 3.19856, .912096, 1.14533, 2.97246, .77662, 1.14533, 2.97246, .985631, 1.3052, 2.91396, .912096, .0976769, 2.68555, .93847, 1.23782, 3.19795, .93847, .0976769, 2.68555, .868307, 1.23782, 3.19795, .868307]
        },
        "billboard-wide": {
            id: "billboard-wide",
            primaryColorFaces: [],
            imagePlanePosition: {
                x: .6,
                y: 7.8
            },
            imagePlaneRotation: {
                x: -1.5707963,
                y: 1.5707963,
                z: 1.5707963
            },
            imagePlaneWidth: 1.8,
            sizeOnGrid: {
                width: 2,
                height: 1
            },
            imagePlaneScale: [.9, 1.2, .9],
            uvs: [],
            normals: [-.34366, -.939094, 0, .67366, .18258, -.716133, .451332, .122323, .883933, -.939094, .343659, 0, -.409923, .91212, 0, -1, 5.52972e-8, -3.13902e-15, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, -1, 5.67663e-8, 0, 1, -5.67663e-8, 1, 9.57724e-8, 6.5101e-7, -.447213, -4.2943e-8, .894427, -.447216, -3.19788e-8, -.894426, 0, 1, 0, 0, -1, 0, 1, 9.57724e-8, 6.51012e-7, -.447214, -6.39576e-8, .894427, -.447214, 1.09642e-8, -.894427, -.447214, -.87115, .202723, -.447213, .871151, -.202723, -126724e-11, .226654, .973975, -234006e-11, -.226649, -.973976, 1, -6.34069e-7, -1.47552e-7, -.447215, -.87115, -.202723, -.447213, .871151, .202723, -156235e-11, -.226653, .973975, -161096e-11, .226649, -.973976, -.343659, -.939094, 0, .67366, .18258, -.716133, .451332, .122323, .883933, -.939094, .34366, 0, -.34366, -.939094, 0, .67366, .18258, -.716133, .451332, .122323, .883932, -.939094, .34366, 0, -.409923, .91212, 0],
            faces: [32, 3, 2, 1, 0, 0, 0, 32, 0, 3, 1, 1, 1, 1, 32, 0, 2, 3, 2, 2, 2, 32, 1, 2, 0, 3, 3, 3, 33, 4, 5, 7, 6, 4, 4, 4, 4, 33, 9, 11, 10, 8, 5, 5, 5, 5, 33, 11, 15, 14, 10, 6, 6, 6, 6, 33, 15, 13, 12, 14, 7, 7, 7, 7, 33, 13, 9, 8, 12, 8, 8, 8, 8, 33, 8, 10, 14, 12, 9, 9, 9, 9, 33, 13, 15, 11, 9, 10, 10, 10, 10, 33, 16, 19, 20, 17, 11, 11, 11, 11, 33, 17, 20, 21, 18, 12, 12, 12, 12, 33, 19, 16, 18, 21, 13, 13, 13, 13, 32, 19, 21, 20, 14, 14, 14, 32, 16, 17, 18, 15, 15, 15, 33, 22, 25, 26, 23, 16, 16, 16, 16, 33, 23, 26, 27, 24, 17, 17, 17, 17, 33, 25, 22, 24, 27, 18, 18, 18, 18, 32, 25, 27, 26, 14, 14, 14, 32, 22, 23, 24, 15, 15, 15, 33, 28, 31, 32, 29, 7, 7, 7, 7, 33, 29, 32, 33, 30, 19, 19, 19, 19, 33, 31, 28, 30, 33, 20, 20, 20, 20, 32, 31, 33, 32, 21, 21, 21, 32, 28, 29, 30, 22, 22, 22, 33, 34, 37, 38, 35, 23, 23, 23, 23, 33, 35, 38, 39, 36, 24, 24, 24, 24, 33, 37, 34, 36, 39, 25, 25, 25, 25, 32, 37, 39, 38, 26, 26, 26, 32, 34, 35, 36, 27, 27, 27, 32, 43, 42, 41, 28, 28, 28, 32, 40, 43, 41, 29, 29, 29, 32, 40, 42, 43, 30, 30, 30, 32, 41, 42, 40, 31, 31, 31, 33, 44, 45, 47, 46, 4, 4, 4, 4, 32, 51, 50, 49, 32, 32, 32, 32, 48, 51, 49, 33, 33, 33, 32, 48, 50, 51, 34, 34, 34, 32, 49, 50, 48, 35, 35, 35, 33, 52, 53, 55, 54, 36, 36, 36, 36],
            metadata: {
                version: 3,
                generator: "io_three",
                uvs: 0,
                faces: 41,
                type: "Geometry",
                normals: 37,
                vertices: 56
            },
            vertices: [1.22807, 3.19856, -1.4879, 1.14533, 2.97246, -1.62338, 1.14533, 2.97246, -1.41437, 1.3052, 2.91396, -1.4879, .0976768, 2.68555, -1.46153, 1.23782, 3.19795, -1.46153, .0976768, 2.68555, -1.53169, 1.23782, 3.19795, -1.53169, .0570368, .553018, 2.1, .0570369, 2.70881, 2.1, .0570368, .553017, -2.1, .0570369, 2.70881, -2.1, .124286, .553018, 2.1, .124286, 2.70881, 2.1, .124286, .553017, -2.1, .124286, 2.70881, -2.1, .0457787, -9.53674e-7, -2.04578, .0457787, -9.53674e-7, -1.95422, -.0457783, -9.53674e-7, -2, .0457785, 2.48943, -2.04578, .0457784, 2.48943, -1.95422, -.0457785, 2.48943, -2, .0457787, -7.15256e-7, 1.95422, .0457787, -7.15256e-7, 2.04578, -.0457783, -7.15256e-7, 2, .0457785, 2.48943, 1.95422, .0457784, 2.48943, 2.04578, -.0457785, 2.48943, 2, .0457786, 1.4858, -2.00876, .0457785, 1.39663, -1.98801, -.0457785, 1.44122, -1.99839, .0457785, 2.41496, 1.98404, .0457786, 2.32579, 2.00479, -.0457785, 2.37037, 1.99441, .0457786, 2.41588, -1.98801, .0457786, 2.32671, -2.00876, -.0457784, 2.3713, -1.99839, .0457786, 1.48673, 2.00479, .0457785, 1.39756, 1.98404, -.0457784, 1.44214, 1.99441, 1.22807, 3.19856, .0120965, 1.14533, 2.97246, -.12338, 1.14533, 2.97246, .0856315, 1.3052, 2.91396, .0120965, .0976768, 2.68555, .0384703, 1.23782, 3.19795, .0384703, .0976768, 2.68555, -.031693, 1.23782, 3.19795, -.031693, 1.22807, 3.19856, 1.5121, 1.14533, 2.97246, 1.37662, 1.14533, 2.97246, 1.58563, 1.3052, 2.91396, 1.5121, .0976767, 2.68555, 1.53847, 1.23782, 3.19795, 1.53847, .0976767, 2.68555, 1.46831, 1.23782, 3.19795, 1.46831]
        },
        cdn: {
            id: "cdn",
            primaryColorFaces: [2, 3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33],
            imagePlanePosition: {
                y: 1.58,
                z: -1.05
            },
            imagePlaneRotation: {
                x: -1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .55,
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 6, 5, 11, 13, 1, 1, 1, 1, 33, 0, 8, 9, 1, 2, 2, 2, 2, 32, 2, 1, 9, 3, 3, 3, 32, 9, 5, 6, 4, 4, 4, 32, 9, 6, 2, 5, 5, 5, 33, 2, 6, 7, 3, 6, 6, 6, 6, 32, 7, 4, 8, 7, 7, 7, 32, 8, 0, 3, 8, 8, 8, 32, 8, 3, 7, 9, 9, 9, 33, 8, 4, 5, 9, 10, 10, 10, 10, 33, 10, 12, 13, 11, 11, 11, 11, 11, 33, 5, 4, 10, 11, 12, 12, 12, 12, 33, 7, 6, 13, 12, 13, 13, 13, 13, 33, 4, 7, 12, 10, 14, 14, 14, 14, 33, 14, 15, 17, 16, 15, 15, 15, 15, 33, 18, 19, 21, 20, 16, 16, 16, 16, 33, 22, 23, 25, 24, 17, 17, 17, 17, 33, 26, 27, 29, 28, 17, 17, 17, 17, 33, 30, 31, 33, 32, 15, 15, 15, 15],
            vertices: [1, .0092116, .367601, -1, .0092116, .367601, -1, .00921154, -.99094, 1, .00921154, -.990939, 1, .269484, .44574, -1, .269484, .445739, -1, .0911756, -.96186, 1, .0911756, -.96186, 1, .137423, .344804, -1, .137423, .344803, .91579, .31309, .385249, -.915791, .31309, .385248, .91579, .31309, -.801443, -.91579, .31309, -.801443, -1, .0212976, .361893, -1, .0212976, 1.00906, -.93, .0212976, .361893, -.93, .0212976, 1.00906, .93, .0212976, .361893, .93, .0212976, 1.00906, 1, .0212976, .361893, 1, .0212976, 1.00906, -.0349999, .0212976, .361893, -.0349999, .0212976, 1.00906, .0350001, .0212976, .361893, .0350001, .0212976, 1.00906, .465, .0212976, .361893, .465, .0212976, 1.00906, .535, .0212976, .361893, .535, .0212976, 1.00906, -.535, .0212976, .361893, -.535, .0212976, 1.00906, -.465, .0212976, .361893, -.465, .0212976, 1.00906],
            metadata: {
                faces: 20,
                generator: "io_three",
                type: "Geometry",
                normals: 18,
                uvs: 0,
                version: 3,
                vertices: 34
            },
            normals: [-5.23019e-15, -1, 4.3874e-8, -.837417, .545278, -.0374781, -1.31861e-7, .175064, .984557, -1, -188297e-11, -1.31622e-7, -1, -242502e-11, -3.70329e-7, -1, 237325e-11, -5.40157e-7, 1.96101e-7, .334364, -.942444, 1, 16764e-10, 1.68745e-7, 1, 145709e-11, 3.50992e-7, 1, 433677e-11, 7.45849e-8, -3.31981e-7, -.607256, .794506, 1.798e-14, 1, -5.02276e-8, -3.27585e-7, .8112, .584769, 1.38476e-7, .585841, -.810426, .837418, .545277, -.037477, 0, 1, -2.30252e-8, 0, 1, -2.30252e-8, 0, 1, -2.30252e-8],
            uvs: []
        },
        container: {
            id: "container",
            primaryColorFaces: [2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 17],
            sizeOnGrid: {
                width: 1.1,
                height: 1.1
            },
            imagePlanePosition: {
                y: .01
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            imagePlaneScale: .8,
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 32, 1, 0, 4, 1, 1, 1, 32, 4, 17, 16, 2, 2, 2, 32, 16, 5, 1, 3, 3, 3, 32, 4, 16, 1, 4, 4, 4, 32, 2, 1, 5, 5, 5, 5, 32, 5, 21, 20, 6, 6, 6, 32, 20, 6, 2, 7, 7, 7, 32, 5, 20, 2, 8, 8, 8, 32, 3, 2, 6, 9, 9, 9, 32, 6, 26, 25, 10, 10, 10, 32, 25, 7, 3, 11, 11, 11, 32, 6, 25, 3, 12, 12, 12, 32, 15, 4, 0, 13, 13, 13, 32, 0, 3, 7, 14, 14, 14, 32, 7, 12, 15, 6, 6, 6, 32, 0, 7, 15, 15, 15, 15, 33, 12, 7, 10, 13, 16, 16, 16, 16, 33, 4, 15, 14, 8, 17, 17, 17, 17, 33, 16, 18, 9, 5, 18, 18, 18, 18, 33, 19, 17, 4, 8, 19, 19, 19, 19, 33, 20, 23, 11, 6, 20, 20, 20, 20, 33, 9, 22, 21, 5, 21, 21, 21, 21, 33, 11, 27, 26, 6, 22, 22, 22, 22, 33, 25, 24, 10, 7, 23, 23, 23, 23],
            vertices: [1, .00999999, -1, 1, .0100001, 1, -1, .0100001, 1, -1, .00999999, -1, 1, .11, -1, .999999, .11, 1, -1, .11, 1, -1, .11, -1, 1, .880704, -1, .999999, .880704, 1, -1, .880704, -1, -1, .880704, 1, -.95, .11, -1, -.95, .830704, -1, .95, .830704, -1, .95, .11, -1, 1, .11, .95, 1, .11, -.95, 1, .830708, .95, 1, .830704, -.95, -.95, .11, 1, .95, .11, 1, .95, .830708, 1, -.95, .830708, 1, -1, .830704, -.95, -1, .11, -.95, -1, .11, .95, -1, .830704, .95],
            metadata: {
                faces: 25,
                normals: 24,
                uvs: 0,
                vertices: 28,
                generator: "io_three",
                type: "Geometry",
                version: 3
            },
            normals: [-3.55271e-15, -1, 2.98023e-8, 1, -476837e-11, 1.42109e-13, -.014083, .999901, -6.71535e-8, 1, 655648e-11, 596038e-11, 1, 379024e-11, 4.27931e-7, -5.96046e-8, -536442e-11, 1, 0, 1, 0, -476834e-11, 298022e-11, 1, -3.66798e-7, 7.79446e-7, 1, -1, -238419e-11, -2.38418e-7, -.0277668, .999614, -6.62018e-8, -1, -298023e-11, -119209e-11, -1, -348458e-11, -1.83399e-7, 238416e-11, 298022e-11, -1, 2.08616e-7, 238419e-11, -1, 1.83399e-7, 187984e-11, -1, 238419e-11, 0, -1, 600037e-11, -7.99307e-8, -1, 1, -9.52834e-13, 596039e-11, 1, -7.62287e-13, 476842e-11, -604034e-11, -1.59861e-7, 1, -900076e-11, 1.19896e-7, 1, -1, 1.59861e-7, -484834e-11, -1, 4.76424e-14, -119209e-11],
            uvs: []
        },
        "container-registry": {
            id: "container-registry",
            primaryColorFaces: [32, 33, 42, 43, 52, 53, 62, 63, 72, 73, 82, 83, 92, 93, 102, 103],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlanePosition: {
                y: 4.3
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            imagePlaneScale: .5,
            normals: [.573283, .585401, .573282, 0, -1, 4.37114e-8, -2.1664e-15, -1, 4.37114e-8, -4.28851e-15, -1, 4.37114e-8, 0, -1, 4.37114e-8, 0, -1, 4.37114e-8, 0, 1, -1.36901e-7, 1.36901e-7, 1, -1.32525e-14, 2.6505e-14, 1, -1.36901e-7, 1.36901e-7, 1, 0, -2.83531e-8, 1, -6.84504e-8, -2.83531e-8, 1, -6.84505e-8, -.810744, .585401, 1.04901e-7, .573282, .585401, -.573283, -1.39868e-7, .585401, .810744, -.573283, .585401, -.573282, 0, .585401, -.810744, .810744, .585401, 0, -.573283, .585401, .573283, -.707107, -2.80564e-8, -.707107, -.707107, 4.69732e-8, .707107, 5.50675e-8, 1, -5.50675e-8, .707107, -3.35523e-8, -.707107, 5.80231e-15, -1, 4.37114e-8, -1, 0, 0, 0, 4.29469e-8, 1, 0, 1, 0, 0, -4.29469e-8, -1, -5.80231e-15, -1, 4.37114e-8, -.707107, 5.61129e-8, .707107, .707107, 2.68419e-8, .707107, -5.50675e-8, 1, -5.50675e-8, -.707107, -4.69732e-8, -.707107, -1.16046e-14, -1, 4.37114e-8, -1.55754e-7, 0, 1, 1, 0, 0, -1, -1.27992e-14, -2.98023e-7, -2.17586e-15, -1, 4.37114e-8, .707107, 2.80564e-8, .707107, .707106, -4.69732e-8, -.707107, -.707107, 3.35523e-8, .707107, 2.90115e-15, -1, 4.37114e-8, 1, 0, 0, 1.49012e-7, -4.29469e-8, -1, 0, 1, 0, -1.49012e-7, 4.29469e-8, 1, .707107, -2.80564e-8, -.707107, -.707107, -2.68418e-8, -.707107, -5.50675e-8, 1, -5.50675e-8, .707107, 4.69732e-8, .707107, 0, -1, 4.37114e-8, 0, 0, -1, -1, 0, 0, 0, 1, 0, 1, 6.39959e-15, 1.49012e-7, 2.17586e-15, -1, 4.37114e-8],
            vertices: [-.382683, -4.03841e-8, -.92388, -.382683, .693933, -.92388, .382683, -4.03841e-8, -.92388, .382683, .693933, -.92388, .92388, -1.67276e-8, -.382683, .92388, .693933, -.382683, .92388, 1.67276e-8, .382683, .92388, .693933, .382683, .382683, 4.03841e-8, .92388, .382683, .693934, .92388, -.382684, 4.03841e-8, .923879, -.382684, .693934, .923879, -.92388, 1.67276e-8, .382683, -.92388, .693933, .382683, -.92388, -1.67276e-8, -.382683, -.92388, .693933, -.382683, .307864, .944095, -.743249, -.307864, .944095, -.743249, .743249, .944095, -.307864, .743249, .944095, .307864, .307864, .944095, .743249, -.307864, .944095, .743249, -.743249, .944095, .307864, -.743249, .944095, -.307864, -1.0653, -2.29093e-8, -.524105, -1.0653, .693933, -.524105, -.524105, .693933, -1.0653, -.524105, -4.65658e-8, -1.0653, -1.12388, 1.67276e-8, .382683, -1.12388, .693933, .382683, -1.12388, .693933, -.382683, -1.12388, -1.67276e-8, -.382683, -.524105, 4.65658e-8, 1.0653, -.524105, .693934, 1.0653, -1.0653, .693933, .524105, -1.0653, 2.29093e-8, .524105, .382683, 4.91263e-8, 1.12388, .382683, .693934, 1.12388, -.382684, .693934, 1.12388, -.382684, 4.91263e-8, 1.12388, 1.0653, 2.29093e-8, .524105, 1.0653, .693933, .524105, .524105, .693934, 1.0653, .524105, 4.65658e-8, 1.0653, 1.12388, -1.67276e-8, -.382683, 1.12388, .693933, -.382683, 1.12388, .693933, .382683, 1.12388, 1.67276e-8, .382683, .524105, -4.65658e-8, -1.0653, .524105, .693933, -1.0653, 1.0653, .693933, -.524105, 1.0653, -2.29093e-8, -.524105, -.382683, -4.91263e-8, -1.12388, -.382683, .693933, -1.12388, .382683, .693933, -1.12388, .382683, -4.91263e-8, -1.12388],
            faces: [33, 9, 7, 19, 20, 0, 0, 0, 0, 32, 14, 0, 2, 1, 1, 1, 32, 2, 4, 6, 1, 1, 1, 32, 6, 8, 10, 2, 2, 2, 32, 10, 12, 14, 3, 3, 3, 32, 14, 2, 6, 4, 4, 4, 32, 6, 10, 14, 5, 5, 5, 32, 18, 16, 17, 6, 6, 6, 32, 17, 23, 22, 7, 7, 7, 32, 22, 21, 20, 8, 8, 8, 32, 20, 19, 18, 9, 9, 9, 32, 18, 17, 22, 10, 10, 10, 32, 22, 20, 18, 11, 11, 11, 33, 15, 13, 22, 23, 12, 12, 12, 12, 33, 5, 3, 16, 18, 13, 13, 13, 13, 33, 11, 9, 20, 21, 14, 14, 14, 14, 33, 1, 15, 23, 17, 15, 15, 15, 15, 33, 3, 1, 17, 16, 16, 16, 16, 16, 33, 7, 5, 18, 19, 17, 17, 17, 17, 33, 13, 11, 21, 22, 18, 18, 18, 18, 33, 24, 25, 26, 27, 19, 19, 19, 19, 33, 15, 25, 24, 14, 20, 20, 20, 20, 33, 1, 26, 25, 15, 21, 21, 21, 21, 33, 0, 27, 26, 1, 22, 22, 22, 22, 33, 27, 0, 14, 24, 23, 23, 23, 23, 33, 28, 29, 30, 31, 24, 24, 24, 24, 33, 13, 29, 28, 12, 25, 25, 25, 25, 33, 15, 30, 29, 13, 26, 26, 26, 26, 33, 14, 31, 30, 15, 27, 27, 27, 27, 33, 12, 28, 31, 14, 28, 28, 28, 28, 33, 32, 33, 34, 35, 29, 29, 29, 29, 33, 11, 33, 32, 10, 30, 30, 30, 30, 33, 13, 34, 33, 11, 31, 31, 31, 31, 33, 12, 35, 34, 13, 32, 32, 32, 32, 33, 10, 32, 35, 12, 33, 33, 33, 33, 33, 36, 37, 38, 39, 34, 34, 34, 34, 33, 9, 37, 36, 8, 35, 35, 35, 35, 33, 11, 38, 37, 9, 26, 26, 26, 26, 33, 10, 39, 38, 11, 36, 36, 36, 36, 33, 8, 36, 39, 10, 37, 37, 37, 37, 33, 40, 41, 42, 43, 38, 38, 38, 38, 33, 7, 41, 40, 6, 39, 39, 39, 39, 33, 9, 42, 41, 7, 21, 21, 21, 21, 33, 8, 43, 42, 9, 40, 40, 40, 40, 33, 6, 40, 43, 8, 41, 41, 41, 41, 33, 44, 45, 46, 47, 42, 42, 42, 42, 33, 5, 45, 44, 4, 43, 43, 43, 43, 33, 7, 46, 45, 5, 44, 44, 44, 44, 33, 6, 47, 46, 7, 45, 45, 45, 45, 33, 4, 44, 47, 6, 4, 4, 4, 4, 33, 48, 49, 50, 51, 46, 46, 46, 46, 33, 3, 49, 48, 2, 47, 47, 47, 47, 33, 5, 50, 49, 3, 48, 48, 48, 48, 33, 4, 51, 50, 5, 49, 49, 49, 49, 33, 2, 48, 51, 4, 50, 50, 50, 50, 33, 52, 53, 54, 55, 51, 51, 51, 51, 33, 52, 0, 1, 53, 52, 52, 52, 52, 33, 3, 54, 53, 1, 53, 53, 53, 53, 33, 2, 55, 54, 3, 54, 54, 54, 54, 33, 0, 52, 55, 2, 55, 55, 55, 55],
            metadata: {
                normals: 56,
                version: 3,
                generator: "io_three",
                faces: 60,
                vertices: 56,
                type: "Geometry",
                uvs: 0
            },
            uvs: []
        },
        database: {
            id: "database",
            vertices: [-.382683, -5.96046e-8, -.92388, -.382683, .4, -.92388, .382683, -5.96046e-8, -.92388, .382683, .4, -.92388, .92388, 0, -.382683, .92388, .4, -.382683, .92388, 0, .382683, .92388, .4, .382683, .382683, 5.96046e-8, .92388, .382683, .4, .92388, -.382684, 5.96046e-8, .923879, -.382684, .4, .923879, -.92388, 0, .382683, -.92388, .4, .382683, -.92388, 0, -.382683, -.92388, .4, -.382683, -.382683, .55, -.92388, -.382683, .95, -.92388, .382683, .55, -.92388, .382683, .95, -.92388, .92388, .55, -.382683, .92388, .95, -.382683, .92388, .55, .382683, .92388, .95, .382683, .382683, .55, .92388, .382683, .95, .92388, -.382684, .55, .923879, -.382684, .95, .923879, -.92388, .55, .382683, -.92388, .95, .382683, -.92388, .55, -.382683, -.92388, .95, -.382683, -.382683, 1.1, -.92388, -.382683, 1.5, -.92388, .382683, 1.5, -.92388, .382683, 1.1, -.92388, .92388, 1.1, -.382683, .92388, 1.1, .382683, .382683, 1.1, .92388, -.382683, 1.1, .923879, -.92388, 1.1, .382683, -.92388, 1.1, -.382683, -.92388, 1.5, -.382683, -.92388, 1.5, .382683, -.382683, 1.5, .923879, .382683, 1.5, .923879, .344415, 1.5, .831491, -.344415, 1.5, .831491, -.831491, 1.5, .344415, -.831492, 1.5, -.344415, -.344415, 1.5, -.831492, .344415, 1.5, -.831492, .831491, 1.5, -.344415, .831492, 1.5, .344415, .92388, 1.5, .382683, .92388, 1.5, -.382683, -.344415, 1.45543, -.831492, .344415, 1.45543, -.831492, .831491, 1.45543, -.344415, -.831492, 1.45543, -.344415, -.831491, 1.45543, .344415, -.344415, 1.45543, .831491, .344415, 1.45543, .831491, .831492, 1.45543, .344415, -.344415, .95, -.831492, -.344415, 1.1, -.831492, .344415, .95, -.831492, .344415, 1.1, -.831492, .831491, .95, -.344415, .831491, 1.1, -.344415, .831492, .95, .344415, .831492, 1.1, .344415, .344415, .95, .831491, .344415, 1.1, .831491, -.344415, .95, .831491, -.344415, 1.1, .831491, -.831491, .95, .344415, -.831491, 1.1, .344415, -.831492, .95, -.344415, -.831492, 1.1, -.344415, -.344415, .4, -.831492, -.344415, .55, -.831492, .344415, .4, -.831492, .344415, .55, -.831492, .831491, .4, -.344415, .831491, .55, -.344415, .831492, .4, .344415, .831492, .55, .344415, .344415, .4, .831491, .344415, .55, .831491, -.344415, .4, .831491, -.344415, .55, .831491, -.831491, .4, .344415, -.831491, .55, .344415, -.831492, .4, -.344415, -.831492, .55, -.344415],
            uvs: [],
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 2, 3, 5, 4, 1, 1, 1, 1, 33, 4, 5, 7, 6, 2, 2, 2, 2, 33, 6, 7, 9, 8, 3, 3, 3, 3, 33, 8, 9, 11, 10, 4, 4, 4, 4, 33, 10, 11, 13, 12, 5, 5, 5, 5, 32, 5, 3, 1, 6, 6, 6, 32, 1, 15, 13, 7, 7, 7, 32, 13, 11, 9, 8, 8, 8, 32, 9, 7, 5, 9, 9, 9, 32, 5, 1, 13, 10, 10, 10, 32, 13, 9, 5, 11, 11, 11, 33, 1, 0, 14, 15, 12, 12, 12, 12, 33, 12, 13, 15, 14, 13, 13, 13, 13, 32, 14, 0, 2, 14, 14, 14, 32, 2, 4, 6, 15, 15, 15, 32, 6, 8, 10, 16, 16, 16, 32, 10, 12, 14, 17, 17, 17, 32, 14, 2, 6, 18, 18, 18, 32, 6, 10, 14, 19, 19, 19, 33, 16, 17, 19, 18, 20, 20, 20, 20, 33, 18, 19, 21, 20, 1, 1, 1, 1, 33, 20, 21, 23, 22, 2, 2, 2, 2, 33, 22, 23, 25, 24, 21, 21, 21, 21, 33, 24, 25, 27, 26, 22, 22, 22, 22, 33, 26, 27, 29, 28, 23, 23, 23, 23, 32, 21, 19, 17, 24, 24, 24, 32, 17, 31, 29, 25, 25, 25, 32, 29, 27, 25, 6, 6, 6, 32, 25, 23, 21, 9, 9, 9, 32, 21, 17, 29, 26, 26, 26, 32, 29, 25, 21, 10, 10, 10, 33, 30, 31, 17, 16, 27, 27, 27, 27, 33, 28, 29, 31, 30, 28, 28, 28, 28, 32, 30, 16, 18, 29, 29, 29, 32, 18, 20, 22, 30, 30, 30, 32, 22, 24, 26, 16, 16, 16, 32, 26, 28, 30, 31, 31, 31, 32, 30, 18, 22, 32, 32, 32, 32, 22, 26, 30, 33, 33, 33, 33, 32, 33, 34, 35, 34, 34, 34, 34, 32, 41, 32, 35, 29, 29, 29, 32, 35, 36, 37, 35, 35, 35, 32, 37, 38, 39, 29, 29, 29, 32, 39, 40, 41, 29, 29, 29, 32, 41, 35, 37, 36, 36, 36, 32, 37, 39, 41, 29, 29, 29, 33, 41, 42, 33, 32, 37, 37, 37, 37, 32, 50, 33, 42, 38, 38, 38, 32, 44, 45, 46, 39, 39, 39, 32, 49, 50, 42, 40, 40, 40, 32, 44, 46, 47, 39, 39, 39, 32, 49, 42, 43, 38, 38, 38, 32, 43, 44, 47, 8, 8, 8, 32, 48, 49, 43, 38, 38, 38, 32, 43, 47, 48, 39, 39, 39, 32, 34, 33, 50, 38, 38, 38, 32, 53, 46, 45, 8, 8, 8, 32, 34, 50, 51, 8, 8, 8, 32, 53, 45, 54, 8, 8, 8, 32, 34, 51, 52, 8, 8, 8, 32, 52, 53, 54, 8, 8, 8, 32, 55, 34, 52, 38, 38, 38, 32, 52, 54, 55, 39, 39, 39, 33, 35, 34, 55, 36, 1, 1, 1, 1, 33, 36, 55, 54, 37, 2, 2, 2, 2, 33, 37, 54, 45, 38, 41, 41, 41, 41, 33, 38, 45, 44, 39, 42, 42, 42, 42, 33, 39, 44, 43, 40, 43, 43, 43, 43, 33, 40, 43, 42, 41, 44, 44, 44, 44, 33, 51, 50, 56, 57, 45, 45, 45, 45, 33, 52, 51, 57, 58, 46, 46, 46, 46, 32, 57, 56, 59, 47, 47, 47, 32, 59, 60, 61, 48, 48, 48, 32, 61, 62, 63, 49, 49, 49, 32, 63, 58, 57, 50, 50, 50, 32, 57, 59, 61, 51, 51, 51, 32, 61, 63, 57, 52, 52, 52, 33, 50, 49, 59, 56, 53, 53, 53, 53, 33, 53, 52, 58, 63, 54, 54, 54, 54, 33, 46, 53, 63, 62, 55, 55, 55, 55, 33, 47, 46, 62, 61, 56, 56, 56, 56, 33, 48, 47, 61, 60, 57, 57, 57, 57, 33, 49, 48, 60, 59, 58, 58, 58, 58, 33, 64, 65, 67, 66, 59, 59, 59, 59, 33, 66, 67, 69, 68, 60, 60, 60, 60, 33, 68, 69, 71, 70, 61, 61, 61, 61, 33, 70, 71, 73, 72, 62, 62, 62, 62, 33, 72, 73, 75, 74, 63, 63, 63, 63, 33, 74, 75, 77, 76, 64, 64, 64, 64, 32, 69, 67, 65, 38, 38, 38, 32, 65, 79, 77, 65, 65, 65, 32, 77, 75, 73, 8, 8, 8, 32, 73, 71, 69, 66, 66, 66, 32, 69, 65, 77, 67, 67, 67, 32, 77, 73, 69, 68, 68, 68, 33, 78, 79, 65, 64, 69, 69, 69, 69, 33, 76, 77, 79, 78, 70, 70, 70, 70, 32, 78, 64, 66, 29, 29, 29, 32, 66, 68, 70, 71, 71, 71, 32, 70, 72, 74, 29, 29, 29, 32, 74, 76, 78, 72, 72, 72, 32, 78, 66, 70, 73, 73, 73, 32, 70, 74, 78, 74, 74, 74, 33, 80, 81, 83, 82, 75, 75, 75, 75, 33, 82, 83, 85, 84, 76, 76, 76, 76, 33, 84, 85, 87, 86, 61, 61, 61, 61, 33, 86, 87, 89, 88, 77, 77, 77, 77, 33, 88, 89, 91, 90, 63, 63, 63, 63, 33, 90, 91, 93, 92, 78, 78, 78, 78, 32, 85, 83, 81, 38, 38, 38, 32, 81, 95, 93, 79, 79, 79, 32, 93, 91, 89, 6, 6, 6, 32, 89, 87, 85, 80, 80, 80, 32, 85, 81, 93, 81, 81, 81, 32, 93, 89, 85, 82, 82, 82, 33, 94, 95, 81, 80, 83, 83, 83, 83, 33, 92, 93, 95, 94, 70, 70, 70, 70, 32, 94, 80, 82, 29, 29, 29, 32, 82, 84, 86, 71, 71, 71, 32, 86, 88, 90, 29, 29, 29, 32, 90, 92, 94, 84, 84, 84, 32, 94, 82, 86, 85, 85, 85, 32, 86, 90, 94, 86, 86, 86],
            normals: [0, -1.49012e-7, -1, .707107, 0, -.707107, 1, 0, 0, .707107, 4.86733e-8, .707107, -1.55754e-7, 1.49012e-7, 1, -.707107, 9.73466e-8, .707107, 0, 1, 0, -7.78772e-8, 1, -7.78772e-8, 0, 1, 0, -7.78772e-8, 1, -7.78772e-8, 1.61289e-8, 1, -3.89386e-8, 1.61289e-8, 1, -3.89386e-8, -.707107, -4.86733e-8, -.707107, -1, 0, 1.55754e-7, 0, -1, 1.10135e-7, 1.10135e-7, -1, 0, -1.7154e-14, -1, 1.10135e-7, 1.10135e-7, -1, -1.7154e-14, -2.28097e-8, -1, 5.50675e-8, -2.28097e-8, -1, 5.50675e-8, 0, 0, -1, .707107, 0, .707107, -1.55754e-7, 0, 1, -.707107, 0, .707107, 0, 1, -1.10135e-7, 3.22578e-8, 1, -7.78772e-8, -6.68081e-9, 1, -9.40061e-8, -.707107, 0, -.707107, -1, 0, 1.55754e-7, 0, -1, 0, -7.78772e-8, -1, 7.78772e-8, 3.22578e-8, -1, 7.78772e-8, 1.61289e-8, -1, 3.89386e-8, -6.68081e-9, -1, 9.40061e-8, 0, -1.49012e-7, -1, 0, -1, 0, 0, -1, 0, -.707107, -9.73465e-8, -.707107, 0, 1, 0, 0, 1, 0, 0, 1, 0, .707107, 4.86733e-8, .707107, -2.33632e-7, 1.49012e-7, 1, -.707107, 4.86733e-8, .707107, -1, 0, 2.33632e-7, 8.65303e-8, 0, 1, -.707107, 0, .707107, -2.11778e-14, 1, -2.44744e-7, -2.44745e-7, 1, 4.23556e-14, 4.23556e-14, 1, -2.44744e-7, -2.44745e-7, 1, 2.11778e-14, 5.06882e-8, 1, -1.22372e-7, 5.06883e-8, 1, -1.22372e-7, .707107, 0, .707107, -1, 0, 8.65303e-8, -.707107, 0, -.707107, 1.7306e-7, 0, -1, .707107, 0, -.707107, 1, 0, -1.73061e-7, -8.65303e-8, 0, -1, .707107, -7.21085e-8, -.707107, 1, -1.7192e-14, -8.65303e-8, .707107, 7.21085e-8, .707107, -8.65302e-8, 0, 1, -.707107, 7.21085e-8, .707107, -1.73061e-7, 1, -1.7306e-7, -1.73061e-7, 1, -1.73061e-7, 3.5842e-8, 1, -8.65302e-8, 3.5842e-8, 1, -8.65303e-8, -.707107, -7.21085e-8, -.707107, -1, 3.4384e-14, 1.73061e-7, -8.65303e-8, -1, 8.65303e-8, -8.65303e-8, -1, 8.65303e-8, 1.7921e-8, -1, 4.32651e-8, 1.7921e-8, -1, 4.32651e-8, -8.65302e-8, 0, -1, .707107, -7.21085e-8, -.707107, .707107, 7.21085e-8, .707107, -.707107, 7.21086e-8, .707107, -8.65303e-8, 1, -8.65302e-8, -8.65302e-8, 1, -8.65303e-8, 1.7921e-8, 1, -4.32651e-8, 1.7921e-8, 1, -4.32651e-8, -.707107, -7.21085e-8, -.707107, -8.65303e-8, -1, 8.65303e-8, 1.7921e-8, -1, 4.32651e-8, 1.7921e-8, -1, 4.32651e-8],
            primaryColorFaces: [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 134, 135, 136, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 164, 165],
            imagePlanePosition: {
                y: 7.88
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .55,
            metadata: {
                vertices: 96,
                faces: 124,
                generator: "io_three",
                type: "Geometry",
                uvs: 0,
                normals: 87,
                version: 3
            }
        },
        "data-funnel": {
            id: "data-funnel",
            primaryColorFaces: [30, 29, 26, 25, 33, 31, 34, 35],
            imagePlanePosition: {
                x: 1.35,
                y: 2.6,
                z: 0
            },
            imagePlaneRotation: {
                x: -1.5707963,
                y: .2
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .3,
            meshOffset: {
                x: 3.1,
                y: 0,
                z: 0
            },
            metadata: {
                normals: 35,
                type: "Geometry",
                version: 3,
                uvs: 0,
                vertices: 42,
                generator: "io_three",
                faces: 48
            },
            normals: [.573462, 0, -.819232, 0, 0, -1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 2.98023e-8, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 3.97364e-8, .505673, .677125, -.5346, .573462, 0, .819232, .505673, .677125, .5346, 0, .784867, .619664, 0, .784867, .619664, 0, .784867, -.619664, .190578, .981672, -5.11981e-8, 0, 1, -8.51495e-8, .447214, 0, -.894427, .447214, 8.42781e-8, .894427, .235329, -.971916, 8.04085e-8, .193171, .981165, -1.62347e-7, -1, 0, 0, .447214, 0, -.894427, .447214, 0, .894427, .235329, -.971916, 8.04085e-8, .193171, .981165, 0, .447214, 0, -.894427, .447214, 0, .894427, .235329, -.971916, 4.02042e-8, .447214, 0, -.894427, .447214, 4.21391e-8, .894427, .235329, -.971916, 0, .193171, .981165, -8.11737e-8],
            vertices: [-.171426, .1, 1, -.171426, .9, 1, -.171426, .1, -1, -.171426, .9, -1, 1, .1, 1, 1, .9, 1, 1, .1, -1, 1, .9, -1, -1.6, .1, 2, -1.6, 1.17734, 2, -1.6, 1.17734, -2, -1.6, .0999999, -2, -.171426, .9, 1, -.171426, .9, 1, -1.6, 1.17734, 2, -1.6, 1.17734, 2, -.171426, 1.13685, .7, -1.6, 1.41419, 1.7, 1, 1.13685, .7, -.171426, 1.13685, -.7, -1.6, 1.41419, -1.7, 1, 1.13685, -.7, -2.75143, .795312, -.367512, -2.75143, 1.1116, -.367513, -2.75143, .795312, -1.08797, -2.75143, 1.1116, -1.08797, -2.03097, .969755, -.72774, -3.1732, .30086, .565617, -3.1732, .617146, .565617, -3.1732, .30086, -.154838, -3.1732, .617146, -.154838, -2.45274, .475303, .205389, -2.53983, .237738, 1.10976, -2.53983, .554024, 1.10976, -2.53983, .237738, .389306, -2.53983, .554024, .389306, -1.81937, .412181, .749533, -3.95062, .605947, -.0192727, -3.95062, .922234, -.0192727, -3.95062, .605947, -.739728, -3.95062, .922234, -.739728, -3.23017, .780391, -.3795],
            faces: [33, 3, 2, 11, 10, 0, 0, 0, 0, 33, 3, 7, 6, 2, 1, 1, 1, 1, 32, 6, 7, 21, 2, 2, 2, 32, 21, 18, 5, 2, 2, 2, 32, 5, 4, 6, 2, 2, 2, 32, 21, 5, 6, 3, 3, 3, 32, 5, 1, 12, 4, 4, 4, 32, 0, 4, 5, 5, 5, 5, 32, 5, 12, 0, 5, 5, 5, 33, 0, 2, 6, 4, 6, 6, 6, 6, 32, 14, 9, 15, 4, 4, 4, 32, 17, 20, 10, 7, 7, 7, 32, 14, 15, 17, 4, 4, 4, 32, 11, 8, 14, 8, 8, 8, 32, 17, 10, 11, 7, 7, 7, 32, 17, 11, 14, 9, 9, 9, 33, 12, 1, 9, 14, 4, 4, 4, 4, 33, 2, 0, 8, 11, 10, 10, 10, 10, 33, 1, 13, 15, 9, 4, 4, 4, 4, 33, 19, 3, 10, 20, 11, 11, 11, 11, 33, 0, 12, 14, 8, 12, 12, 12, 12, 33, 13, 16, 17, 15, 13, 13, 13, 13, 32, 5, 18, 16, 14, 14, 14, 32, 13, 1, 5, 4, 4, 4, 32, 5, 16, 13, 15, 15, 15, 33, 21, 7, 3, 19, 16, 16, 16, 16, 33, 16, 19, 20, 17, 17, 17, 17, 17, 33, 18, 21, 19, 16, 18, 18, 18, 18, 33, 23, 25, 24, 22, 7, 7, 7, 7, 32, 25, 26, 24, 19, 19, 19, 32, 26, 23, 22, 20, 20, 20, 32, 22, 24, 26, 21, 21, 21, 32, 26, 25, 23, 22, 22, 22, 33, 28, 30, 29, 27, 23, 23, 23, 23, 32, 30, 31, 29, 24, 24, 24, 32, 31, 28, 27, 25, 25, 25, 32, 27, 29, 31, 26, 26, 26, 32, 31, 30, 28, 27, 27, 27, 33, 33, 35, 34, 32, 7, 7, 7, 7, 32, 35, 36, 34, 28, 28, 28, 32, 36, 33, 32, 29, 29, 29, 32, 32, 34, 36, 30, 30, 30, 32, 36, 35, 33, 27, 27, 27, 33, 38, 40, 39, 37, 23, 23, 23, 23, 32, 40, 41, 39, 31, 31, 31, 32, 41, 38, 37, 32, 32, 32, 32, 37, 39, 41, 33, 33, 33, 32, 41, 40, 38, 34, 34, 34],
            uvs: []
        },
        databricks: {
            id: "databricks",
            primaryColorFaces: [],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 4, 7, 6, 5, 1, 1, 1, 1, 33, 0, 4, 5, 1, 2, 2, 2, 2, 33, 1, 5, 6, 2, 3, 3, 3, 3, 33, 2, 6, 7, 3, 4, 4, 4, 4, 33, 4, 0, 3, 7, 5, 5, 5, 5, 33, 8, 9, 10, 11, 0, 0, 0, 0, 33, 12, 15, 14, 13, 6, 6, 6, 6, 33, 8, 12, 13, 9, 2, 2, 2, 2, 33, 9, 13, 14, 10, 7, 7, 7, 7, 33, 10, 14, 15, 11, 8, 8, 8, 8, 33, 12, 8, 11, 15, 9, 9, 9, 9],
            vertices: [1.5, 2, -1.5, 1.5, 2, 1.5, -1.5, 2, 1.5, -1.5, 2, -1.5, 1.5, 3, -1.5, 1.5, 3, 1.5, -1.5, 3, 1.5, -1.5, 3, -1.5, 1.5, 0, -1.5, 1.5, 0, 1.5, -1.5, 0, 1.5, -1.5, 0, -1.5, 1.5, 1, -1.5, 1.5, 1, 1.5, -1.5, 1, 1.5, -1.5, 1, -1.5],
            metadata: {
                faces: 12,
                generator: "io_three",
                type: "Geometry",
                normals: 10,
                uvs: 0,
                version: 3,
                vertices: 16
            },
            normals: [0, -1, 0, 0, 1, 0, 1, 1.19209e-7, 2.78155e-7, -2.58287e-7, -2.98023e-7, 1, -1, -3.57628e-7, -1.98682e-7, 2.38419e-7, 5.96046e-7, -1, 3.15797e-14, 1, -7.94729e-8, -2.58287e-7, -2.98023e-7, 1, -1, -3.57628e-7, -1.98682e-7, 2.38419e-7, 5.96046e-7, -1],
            uvs: []
        },
        email: {
            id: "email",
            primaryColorFaces: [82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            faces: [33, 0, 5, 7, 6, 0, 0, 0, 0, 33, 1, 0, 6, 11, 1, 1, 1, 1, 33, 4, 13, 22, 16, 2, 2, 2, 2, 33, 3, 15, 18, 12, 3, 3, 3, 3, 33, 37, 38, 28, 39, 4, 4, 4, 4, 33, 35, 36, 27, 26, 5, 5, 5, 5, 32, 29, 30, 26, 6, 6, 6, 32, 26, 27, 28, 7, 7, 7, 32, 26, 28, 29, 8, 8, 8, 33, 31, 34, 41, 40, 9, 9, 9, 9, 33, 34, 33, 42, 41, 10, 10, 10, 10, 33, 45, 32, 44, 47, 11, 11, 11, 11, 32, 27, 28, 39, 12, 12, 12, 33, 49, 39, 27, 44, 13, 13, 13, 13, 32, 40, 43, 49, 14, 14, 14, 32, 49, 44, 32, 15, 15, 15, 32, 32, 31, 40, 16, 16, 16, 32, 49, 32, 40, 17, 17, 17, 33, 25, 17, 15, 23, 18, 18, 18, 18, 33, 20, 19, 23, 9, 19, 19, 19, 19, 32, 3, 2, 10, 20, 20, 20, 32, 10, 9, 23, 21, 21, 21, 32, 23, 15, 3, 22, 22, 22, 32, 10, 23, 3, 23, 23, 23, 33, 10, 2, 30, 29, 24, 24, 24, 24, 33, 49, 43, 46, 48, 25, 25, 25, 25, 33, 24, 48, 46, 21, 26, 26, 26, 26, 33, 20, 38, 37, 19, 27, 27, 27, 27, 33, 46, 38, 20, 21, 28, 28, 28, 28, 33, 28, 38, 46, 43, 29, 29, 29, 29, 33, 28, 43, 40, 29, 28, 28, 28, 28, 33, 8, 21, 20, 9, 28, 28, 28, 28, 33, 7, 8, 9, 10, 29, 29, 29, 29, 33, 39, 49, 48, 37, 30, 30, 30, 30, 33, 48, 24, 19, 37, 31, 31, 31, 31, 33, 19, 24, 25, 23, 30, 30, 30, 30, 32, 4, 25, 17, 32, 32, 32, 32, 7, 5, 4, 33, 33, 33, 32, 17, 8, 7, 34, 34, 34, 32, 4, 17, 7, 35, 35, 35, 33, 22, 13, 45, 47, 36, 36, 36, 36, 33, 18, 36, 35, 12, 37, 37, 37, 37, 33, 15, 17, 22, 18, 28, 28, 28, 28, 33, 47, 36, 18, 22, 28, 28, 28, 28, 33, 36, 47, 44, 27, 28, 28, 28, 28, 33, 45, 13, 12, 35, 31, 31, 31, 31, 33, 3, 12, 13, 4, 30, 30, 30, 30, 33, 35, 26, 32, 45, 38, 38, 38, 38, 33, 50, 52, 53, 51, 39, 39, 39, 39, 33, 51, 55, 54, 50, 40, 40, 40, 40, 32, 56, 53, 52, 41, 41, 41, 32, 53, 55, 51, 42, 42, 42, 32, 50, 54, 52, 43, 43, 43, 33, 57, 59, 60, 58, 44, 44, 44, 44, 33, 58, 62, 61, 57, 45, 45, 45, 45, 32, 63, 60, 59, 46, 46, 46, 32, 60, 62, 58, 47, 47, 47, 32, 57, 61, 59, 48, 48, 48, 33, 64, 66, 67, 65, 49, 49, 49, 49, 33, 65, 69, 68, 64, 50, 50, 50, 50, 32, 70, 67, 66, 51, 51, 51, 32, 67, 69, 65, 52, 52, 52, 32, 64, 68, 66, 53, 53, 53, 33, 71, 73, 74, 72, 54, 54, 54, 54, 33, 72, 76, 75, 71, 55, 55, 55, 55, 32, 77, 74, 73, 56, 56, 56, 32, 74, 76, 72, 57, 57, 57, 32, 71, 75, 73, 58, 58, 58, 33, 1, 11, 42, 33, 59, 59, 59, 59, 32, 2, 3, 4, 31, 31, 31, 32, 32, 26, 30, 30, 30, 30, 32, 2, 4, 5, 31, 31, 31, 32, 31, 32, 30, 30, 30, 30, 32, 30, 2, 5, 60, 60, 60, 32, 0, 1, 33, 61, 61, 61, 32, 30, 5, 0, 31, 31, 31, 32, 34, 31, 30, 30, 30, 30, 32, 0, 33, 34, 30, 30, 30, 32, 0, 34, 30, 30, 30, 30, 32, 6, 7, 10, 28, 28, 28, 32, 10, 29, 40, 28, 28, 28, 32, 41, 42, 11, 28, 28, 28, 32, 10, 40, 41, 28, 28, 28, 32, 41, 11, 6, 28, 28, 28, 32, 10, 41, 6, 28, 28, 28, 33, 78, 80, 81, 79, 62, 62, 62, 62, 33, 79, 83, 82, 78, 63, 63, 63, 63, 32, 84, 81, 80, 64, 64, 64, 32, 81, 83, 79, 65, 65, 65, 32, 78, 82, 80, 66, 66, 66, 33, 85, 87, 88, 86, 67, 67, 67, 67, 33, 86, 90, 89, 85, 68, 68, 68, 68, 32, 91, 88, 87, 69, 69, 69, 32, 88, 90, 86, 70, 70, 70, 32, 85, 89, 87, 71, 71, 71],
            uvs: [],
            normals: [4.76358e-8, 1, 812866e-11, 2.85489e-8, .500014, .866017, 0, -.500015, -.866017, 0, .500015, .866017, 0, .499994, -.866029, -1.04783e-7, .499994, -.866029, 7.05991e-8, -.499994, -.866029, 0, .707107, -.707107, -6.50715e-8, -.499994, -.866029, 2.38179e-8, 1, 0, 1.9033e-8, .499994, -.866029, 0, -.499994, .866029, 0, -.707107, .707107, 0, 1, 0, 2.42153e-7, .499994, .866029, 0, 0, 0, 0, .499994, .866029, 0, .499994, .866029, -1.48251e-8, 1, 741714e-11, 1.04781e-7, .500014, .866017, -3.19143e-9, -.500007, .866021, -1.2108e-7, -.500007, .866021, 0, -.894427, .447214, 3.25455e-8, -.500007, .866021, -3.57267e-8, -1, -185476e-11, -9.67542e-8, -.499994, .866029, 0, -1, -8.86451e-7, 0, 1, 115248e-11, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1.74647e-8, .294509, -.955649, 3.19143e-9, .500007, -.866021, -1.32082e-8, .500007, -.866021, 1.53528e-7, .500008, -.866021, 0, -1, -8.86451e-7, -2.42156e-7, 1, 104443e-11, -1, 0, 0, 0, -.914254, -.405142, 0, .887585, .460644, 0, .995024, .0996338, .0602805, .912591, .404405, -.0602805, .912591, .404405, -1.91041e-8, -.970717, -.240228, 3.51546e-8, .954091, .299518, 0, .997209, -.074664, .0602805, .968951, .239791, -.0602805, .968951, .239791, -4.05961e-8, -.997684, -.0680152, 3.51546e-8, .991607, .129291, 3.85083e-8, .969094, -.246693, .0602804, .99587, .0678915, -.0602803, .99587, .0678915, 0, -.866026, -.5, 0, .83361, .552354, 0, .978803, .204805, .0602807, .864451, .499091, -.0602807, .864451, .499091, 5.95443e-8, 1, -272927e-10, -1, 0, 0, -1, 0, 0, 0, -.939693, -.34202, 0, .916861, .399208, 0, .999497, .031726, .0602806, .937984, .341398, -.0602806, .937984, .341398, 0, -.984808, -.173648, 0, .972253, .233932, 0, .989821, -.142316, .0602804, .983017, .173332, -.0602804, .983017, .173332],
            vertices: [-4.94446, .419664, 1.11027, -4.94446, 2.04529, .17168, -4.94446, .0438483, 3.20441, -4.94446, 2.04526, 4.35995, -4.94446, 2.04526, 3.926, -4.94446, .419649, 2.98743, 5.06561, .419664, 1.11027, 5.06561, .419648, 2.98743, 5.06561, 2.04526, 3.926, 5.06561, 2.04526, 4.35995, 5.06561, .0438478, 3.20441, 5.06561, 2.04529, .17168, -4.94446, 4.04669, 3.20438, -4.94446, 3.67089, 2.98741, -3.9599, 2.04526, 4.35995, -3.9599, 2.04526, 4.35995, -3.9599, 2.04526, 3.926, -3.9599, 2.04526, 3.926, -3.9599, 4.04669, 3.20438, 4.08105, 4.04669, 3.20438, 5.06561, 4.04669, 3.20438, 5.06561, 3.67089, 2.98741, -3.9599, 3.67089, 2.98741, 4.08105, 2.04526, 4.35995, 4.08105, 3.67089, 2.98741, 4.08105, 2.04526, 3.926, -4.94446, 2.04528, -4.5711, -3.9599, 2.04528, -4.5711, 5.06561, 2.04528, -4.57111, 5.06561, .0438602, -3.4156, -4.94446, .0438604, -3.41561, -4.94446, .419659, -3.19864, -4.94446, 2.04528, -4.13718, -4.94446, 2.04528, -.383032, -4.94446, .419659, -1.32157, -4.94446, 4.0467, -3.41561, -3.9599, 4.0467, -3.41561, 4.08105, 4.0467, -3.41561, 5.06561, 4.0467, -3.41561, 4.08105, 2.04528, -4.5711, 5.06561, .419659, -3.19864, 5.06561, .419658, -1.32157, 5.06561, 2.04528, -.383032, 5.06561, 2.04528, -4.13718, -3.9599, 2.04528, -4.13718, -4.94446, 3.6709, -3.19864, 5.06561, 3.6709, -3.19864, -3.9599, 3.6709, -3.19864, 4.08105, 3.6709, -3.19864, 4.08105, 2.04528, -4.13718, -4.83115, 1.50401, 3.088, -1.83115, 1.50401, 3.088, -4.83115, 2.3467, 1.18635, -1.83115, 2.3467, 1.18635, -3.63115, 2.04638, 2.04293, -3.03115, 2.04638, 2.04293, -3.33115, 2.21113, 2.5403, -1.38066, 1.67281, 3.17402, 1.61934, 1.67281, 3.17402, -1.38066, 2.17248, 1.15493, 1.61934, 2.17248, 1.15493, -.180661, 2.02547, 2.05064, .419339, 2.02547, 2.05064, .119339, 2.27408, 2.51184, 2.06983, 1.85015, 3.21615, 5.06983, 1.85015, 3.21615, 2.06983, 1.99162, 1.14096, 5.06983, 1.99162, 1.14096, 3.26983, 2.00238, 2.0486, 3.86983, 2.00238, 2.0486, 3.56983, 2.3273, 2.45962, -4.83115, 1.40904, -1.47722, -1.83115, 1.40904, -1.47722, -4.83115, 2.44904, -3.27855, -1.83115, 2.44904, -3.27855, -3.63115, 2.0594, -2.45873, -3.03115, 2.0594, -2.45873, -3.33115, 2.17036, -1.94668, -1.38066, 1.56774, -1.37375, 1.61934, 1.56774, -1.37375, -1.38066, 2.27914, -3.32831, 1.61934, 2.27914, -3.32831, -.180662, 2.03778, -2.45329, .419338, 2.03778, -2.45329, .119338, 2.23597, -1.96828, 2.06983, 1.7396, -1.31302, 5.06983, 1.7396, -1.31302, 2.06983, 2.10079, -3.36142, 5.06983, 2.10079, -3.36142, 3.26983, 2.01504, -2.45778, 3.86983, 2.01504, -2.45778, 3.56983, 2.29444, -2.01455],
            metadata: {
                version: 3,
                type: "Geometry",
                vertices: 92,
                faces: 95,
                generator: "io_three",
                uvs: 0,
                normals: 72
            }
        },
        gateway: {
            id: "gateway",
            primaryColorFaces: [58, 59, 183, 182, 121, 120, 93, 92, 155, 154, 31, 30],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            vertices: [-2.15268, -.00263643, 1.79199, -2.15268, -.00263643, 1.00631, -1.33816, -.00263643, 1.00631, -1.33816, -.00263643, 1.79199, -1.65185, 4.03079, 1.79199, -1.65185, 4.03079, 1.00631, -1.33816, 4.03079, 1.00631, -1.33816, 4.03079, 1.79199, -2.15268, 2.96835, 1.79199, -2.15268, 2.96835, 1.00631, -1.33816, 2.96835, 1.00631, -1.33816, 2.96835, 1.79199, 2.89943e-7, 2.96835, 1.00716, 4.34915e-7, 4.03079, 1.00716, 2.89943e-7, 2.96835, 1.79284, 1.44972e-7, 4.03079, 1.79284, -2.15268, 3.27166, 1.79199, -2.15268, 3.27166, 1.00631, 2.15268, -.00263619, 1.00801, 2.15268, -.00263619, 1.79368, 1.33816, -.00263619, 1.79368, 1.33816, -.00263619, 1.00801, 1.65186, 4.03079, 1.00801, 1.65185, 4.03079, 1.79368, 1.33816, 4.03079, 1.79368, 1.33816, 4.03079, 1.00801, 2.15268, 2.96835, 1.00801, 2.15268, 2.96835, 1.79369, 1.33816, 2.96835, 1.79368, 1.33816, 2.96835, 1.00801, 2.15268, 3.27166, 1.00801, 2.15268, 3.27166, 1.79369, -2.15268, -.00263643, -1.00801, -2.15268, -.00263643, -1.79369, -1.33816, -.00263643, -1.79369, -1.33816, -.00263643, -1.00801, -1.65185, 4.03079, -1.00801, -1.65185, 4.03079, -1.79369, -1.33816, 4.03079, -1.79369, -1.33816, 4.03079, -1.00801, -2.15268, 2.96835, -1.00801, -2.15268, 2.96835, -1.79369, -1.33816, 2.96835, -1.79369, -1.33816, 2.96835, -1.00801, 2.89943e-7, 2.96835, -1.79284, 4.34915e-7, 4.03079, -1.79284, 2.89943e-7, 2.96835, -1.00716, 1.44972e-7, 4.03079, -1.00716, -2.15268, 3.27166, -1.00801, -2.15268, 3.27166, -1.79369, 2.15268, -.00263619, -1.79199, 2.15268, -.00263619, -1.00632, 1.33816, -.00263619, -1.00632, 1.33816, -.00263619, -1.79199, 1.65186, 4.03079, -1.79199, 1.65185, 4.03079, -1.00631, 1.33816, 4.03079, -1.00632, 1.33816, 4.03079, -1.79199, 2.15268, 2.96835, -1.79199, 2.15268, 2.96835, -1.00632, 1.33816, 2.96835, -1.00632, 1.33816, 2.96835, -1.79199, 2.15268, 3.27166, -1.79199, 2.15268, 3.27166, -1.00631, -2.15268, -.00263643, .391989, -2.15268, -.00263643, -.393686, -1.33816, -.00263643, -.393686, -1.33816, -.00263643, .391989, -1.65185, 4.03079, .391989, -1.65185, 4.03079, -.393686, -1.33816, 4.03079, -.393686, -1.33816, 4.03079, .391989, -2.15268, 2.96835, .391989, -2.15268, 2.96835, -.393686, -1.33816, 2.96835, -.393686, -1.33816, 2.96835, .391989, 2.89943e-7, 2.96835, -.392838, 4.34915e-7, 4.03079, -.392838, 2.89943e-7, 2.96835, .392837, 1.44972e-7, 4.03079, .392837, -2.15268, 3.27166, .391989, -2.15268, 3.27166, -.393686, 2.15268, -.00263619, -.39199, 2.15268, -.00263619, .393685, 1.33816, -.00263619, .393685, 1.33816, -.00263619, -.39199, 1.65186, 4.03079, -.39199, 1.65185, 4.03079, .393685, 1.33816, 4.03079, .393685, 1.33816, 4.03079, -.39199, 2.15268, 2.96835, -.39199, 2.15268, 2.96835, .393685, 1.33816, 2.96835, .393685, 1.33816, 2.96835, -.39199, 2.15268, 3.27166, -.39199, 2.15268, 3.27166, .393685],
            normals: [0, -1, 0, 0, 1, 0, -1, 3.93026e-7, -7.58642e-7, 4.39067e-7, -6.90259e-13, -1, 152008e-11, -131693e-11, -1, 3.97285e-7, -1.12204e-7, -1, 633434e-9, -5.62133e-8, -1, -2.19534e-7, 1.00311e-7, 1, -7.60037e-7, 6.58462e-7, 1, -2.92711e-7, -2.30086e-13, 1, -2.50929e-7, 1.12204e-7, 1, 1, -6.01867e-8, 2.27593e-7, 2.19534e-7, -6.01867e-8, -1, -1, -4.01245e-8, -1.51728e-7, 1, -4.25613e-15, 1.84518e-7, 8.89882e-8, -1, 1.51728e-7, 0, 1, 0, -633479e-9, 1.12181e-7, 1, -.834709, .550691, -9.59306e-7, 0, -1, 0, 1, 0, 6.06914e-7, -5.85423e-7, 0, 1, -19001e-10, -109654e-11, 1, -6.68988e-7, 2.24408e-7, 1, 0, 1, 0, 3.65889e-7, 2.00622e-8, -1, 114006e-11, 5.95106e-7, -1, 4.39067e-7, 0, -1, 4.8085e-7, -1.12204e-7, -1, -1, -6.08803e-15, -3.03457e-7, -4.39067e-7, -1.17449e-14, 1, 1, -1.2176e-14, 3.03457e-7, -1.92247e-10, -1, 3.03457e-7, -633434e-9, 1.68271e-7, 1, .834709, .550691, 5.21362e-7, 633523e-9, -5.61314e-8, -1, -1, 3.93026e-7, -7.58642e-7, 2.92711e-7, -4.60173e-13, -1, 19001e-10, -188171e-11, -1, 2.50929e-7, -1.12204e-7, -1, 633568e-9, -1.12345e-7, -1, -3.80019e-7, 4.07749e-7, 1, -2.92711e-7, 3.93026e-7, 1, -3.13719e-7, 3.36611e-7, 1, 1.46356e-7, -8.02489e-8, -1, -1, -4.01245e-8, -1.51728e-7, 1, 8.51225e-15, 1.84518e-7, 8.89882e-8, -1, 1.51728e-7, -633479e-9, 2.24362e-7, 1, -.834709, .550691, -9.59305e-7, 1, -4.77066e-13, 6.06914e-7, -2.92711e-7, -7.86053e-7, 1, -19001e-10, -125357e-11, 1, -6.27205e-7, 1.12204e-7, 1, 2.19534e-7, 2.00622e-8, -1, 7.60038e-7, 3.44392e-7, -1, 0, 7.86053e-7, -1, 3.34494e-7, -1.12204e-7, -1, -1, 6.08803e-15, -3.03457e-7, -2.19534e-7, 2.00622e-8, 1, 1, 6.08803e-15, 3.03457e-7, -633568e-9, 1.1214e-7, 1, .834709, .550691, 5.21362e-7, 633568e-9, -1.12222e-7, -1, 0, 1, 0, -1, 3.93026e-7, -7.58642e-7, 3.65889e-7, -5.75216e-13, -1, 142507e-11, -117573e-11, -1, 3.55444e-7, -2.8051e-8, -1, 63349e-8, 4.19246e-8, -1, -2.19534e-7, 1.10342e-7, 1, -6.65033e-7, 4.78007e-7, 1, -2.56122e-7, 1.96513e-7, 1, -2.97963e-7, 8.41528e-8, 1, 1, -6.01867e-8, 2.27593e-7, 1.82945e-7, -1.00311e-7, -1, 1, -1.70245e-14, 1.84518e-7, -633479e-9, 5.60495e-8, 1, -.834709, .550691, -9.59306e-7, 1, -1.19267e-13, 6.06914e-7, -4.39067e-7, -2.9477e-7, 1, -180509e-11, -123015e-11, 1, -5.80171e-7, 8.41528e-8, 1, 3.47595e-7, -5.01557e-9, -1, 142507e-11, 109721e-11, -1, 3.65889e-7, 0, -1, 3.76335e-7, -2.80509e-8, -1, -1, -1.2176e-14, -3.03457e-7, -3.11006e-7, 1.50467e-8, 1, 1, -3.04401e-15, 3.03457e-7, -633523e-9, 5.60495e-8, 1, .834709, .550691, 5.21362e-7, 63349e-8, 4.20474e-8, -1],
            uvs: [],
            metadata: {
                vertices: 96,
                type: "Geometry",
                faces: 111,
                uvs: 0,
                normals: 93,
                generator: "io_three",
                version: 3
            },
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 4, 7, 6, 5, 1, 1, 1, 1, 33, 8, 16, 17, 9, 2, 2, 2, 2, 32, 10, 9, 17, 3, 3, 3, 32, 17, 5, 6, 4, 4, 4, 32, 17, 6, 10, 5, 5, 5, 33, 10, 6, 13, 12, 6, 6, 6, 6, 33, 8, 0, 3, 11, 7, 7, 7, 7, 32, 7, 4, 16, 8, 8, 8, 32, 16, 8, 11, 9, 9, 9, 32, 16, 11, 7, 10, 10, 10, 33, 2, 10, 11, 3, 11, 11, 11, 11, 33, 1, 9, 10, 2, 12, 12, 12, 12, 33, 0, 8, 9, 1, 13, 13, 13, 13, 33, 12, 13, 15, 14, 14, 14, 14, 14, 33, 11, 10, 12, 14, 15, 15, 15, 15, 33, 6, 7, 15, 13, 16, 16, 16, 16, 33, 7, 11, 14, 15, 17, 17, 17, 17, 33, 16, 4, 5, 17, 18, 18, 18, 18, 33, 18, 19, 20, 21, 19, 19, 19, 19, 33, 22, 25, 24, 23, 16, 16, 16, 16, 33, 26, 30, 31, 27, 20, 20, 20, 20, 32, 28, 27, 31, 21, 21, 21, 32, 31, 23, 24, 22, 22, 22, 32, 31, 24, 28, 23, 23, 23, 33, 24, 25, 13, 15, 24, 24, 24, 24, 33, 26, 18, 21, 29, 25, 25, 25, 25, 32, 25, 22, 30, 26, 26, 26, 32, 30, 26, 29, 27, 27, 27, 32, 30, 29, 25, 28, 28, 28, 33, 20, 28, 29, 21, 29, 29, 29, 29, 33, 19, 27, 28, 20, 30, 30, 30, 30, 33, 18, 26, 27, 19, 31, 31, 31, 31, 33, 29, 28, 14, 12, 32, 32, 32, 32, 33, 28, 24, 15, 14, 33, 33, 33, 33, 33, 30, 22, 23, 31, 34, 34, 34, 34, 33, 25, 29, 12, 13, 35, 35, 35, 35, 33, 32, 33, 34, 35, 0, 0, 0, 0, 33, 36, 39, 38, 37, 1, 1, 1, 1, 33, 40, 48, 49, 41, 36, 36, 36, 36, 32, 42, 41, 49, 37, 37, 37, 32, 49, 37, 38, 38, 38, 38, 32, 49, 38, 42, 39, 39, 39, 33, 42, 38, 45, 44, 40, 40, 40, 40, 33, 40, 32, 35, 43, 7, 7, 7, 7, 32, 39, 36, 48, 41, 41, 41, 32, 48, 40, 43, 42, 42, 42, 32, 48, 43, 39, 43, 43, 43, 33, 34, 42, 43, 35, 11, 11, 11, 11, 33, 33, 41, 42, 34, 44, 44, 44, 44, 33, 32, 40, 41, 33, 45, 45, 45, 45, 33, 44, 45, 47, 46, 46, 46, 46, 46, 33, 43, 42, 44, 46, 47, 47, 47, 47, 33, 38, 39, 47, 45, 16, 16, 16, 16, 33, 39, 43, 46, 47, 48, 48, 48, 48, 33, 48, 36, 37, 49, 49, 49, 49, 49, 33, 50, 51, 52, 53, 19, 19, 19, 19, 33, 54, 57, 56, 55, 16, 16, 16, 16, 33, 58, 62, 63, 59, 50, 50, 50, 50, 32, 60, 59, 63, 51, 51, 51, 32, 63, 55, 56, 52, 52, 52, 32, 63, 56, 60, 53, 53, 53, 33, 56, 57, 45, 47, 24, 24, 24, 24, 33, 58, 50, 53, 61, 54, 54, 54, 54, 32, 57, 54, 62, 55, 55, 55, 32, 62, 58, 61, 56, 56, 56, 32, 62, 61, 57, 57, 57, 57, 33, 52, 60, 61, 53, 58, 58, 58, 58, 33, 51, 59, 60, 52, 59, 59, 59, 59, 33, 50, 58, 59, 51, 60, 60, 60, 60, 33, 61, 60, 46, 44, 19, 19, 19, 19, 33, 60, 56, 47, 46, 61, 61, 61, 61, 33, 62, 54, 55, 63, 62, 62, 62, 62, 33, 57, 61, 44, 45, 63, 63, 63, 63, 33, 64, 65, 66, 67, 0, 0, 0, 0, 33, 68, 71, 70, 69, 64, 64, 64, 64, 33, 72, 80, 81, 73, 65, 65, 65, 65, 32, 74, 73, 81, 66, 66, 66, 32, 81, 69, 70, 67, 67, 67, 32, 81, 70, 74, 68, 68, 68, 33, 74, 70, 77, 76, 69, 69, 69, 69, 33, 72, 64, 67, 75, 70, 70, 70, 70, 32, 71, 68, 80, 71, 71, 71, 32, 80, 72, 75, 72, 72, 72, 32, 80, 75, 71, 73, 73, 73, 33, 66, 74, 75, 67, 74, 74, 74, 74, 33, 65, 73, 74, 66, 75, 75, 75, 75, 33, 64, 72, 73, 65, 13, 13, 13, 13, 33, 76, 77, 79, 78, 76, 76, 76, 76, 33, 75, 74, 76, 78, 0, 0, 0, 0, 33, 70, 71, 79, 77, 16, 16, 16, 16, 33, 71, 75, 78, 79, 77, 77, 77, 77, 33, 80, 68, 69, 81, 78, 78, 78, 78, 33, 82, 83, 84, 85, 19, 19, 19, 19, 33, 86, 89, 88, 87, 16, 16, 16, 16, 33, 90, 94, 95, 91, 79, 79, 79, 79, 32, 92, 91, 95, 80, 80, 80, 32, 95, 87, 88, 81, 81, 81, 32, 95, 88, 92, 82, 82, 82, 33, 88, 89, 77, 79, 24, 24, 24, 24, 33, 90, 82, 85, 93, 83, 83, 83, 83, 32, 89, 86, 94, 84, 84, 84, 32, 94, 90, 93, 85, 85, 85, 32, 94, 93, 89, 86, 86, 86, 33, 84, 92, 93, 85, 87, 87, 87, 87, 33, 83, 91, 92, 84, 88, 88, 88, 88, 33, 82, 90, 91, 83, 89, 89, 89, 89, 33, 93, 92, 78, 76, 19, 19, 19, 19, 33, 92, 88, 79, 78, 90, 90, 90, 90, 33, 94, 86, 87, 95, 91, 91, 91, 91, 33, 89, 93, 76, 77, 92, 92, 92, 92]
        },
        firewall: {
            id: "firewall",
            primaryColorFaces: [4, 5, 6, 7, 8, 9, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 36, 37, 48, 49, 50, 51, 52, 53],
            imagePlanePosition: {
                x: 1.25,
                y: 1.4,
                z: 2.9
            },
            imagePlaneRotation: {
                x: -1.570796,
                y: 1.570796,
                z: 1.570796
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .25,
            faces: [33, 3, 11, 9, 1, 0, 0, 0, 0, 33, 4, 5, 6, 7, 1, 1, 1, 1, 33, 4, 0, 2, 5, 2, 2, 2, 2, 33, 3, 6, 5, 2, 3, 3, 3, 3, 33, 1, 7, 6, 3, 4, 4, 4, 4, 33, 0, 4, 7, 1, 5, 5, 5, 5, 33, 8, 0, 1, 9, 6, 6, 6, 6, 33, 11, 3, 2, 10, 7, 7, 7, 7, 33, 2, 0, 8, 10, 8, 8, 8, 8, 33, 12, 15, 14, 13, 9, 9, 9, 9, 33, 10, 8, 12, 13, 10, 10, 10, 10, 33, 11, 10, 13, 14, 11, 11, 11, 11, 33, 9, 11, 14, 15, 12, 12, 12, 12, 33, 8, 9, 15, 12, 13, 13, 13, 13, 33, 19, 27, 25, 17, 14, 14, 14, 14, 33, 20, 21, 22, 23, 15, 15, 15, 15, 33, 18, 21, 20, 16, 16, 16, 16, 16, 33, 19, 22, 21, 18, 17, 17, 17, 17, 33, 17, 23, 22, 19, 18, 18, 18, 18, 33, 16, 20, 23, 17, 19, 19, 19, 19, 33, 17, 25, 24, 16, 6, 6, 6, 6, 33, 27, 19, 18, 26, 20, 20, 20, 20, 33, 18, 16, 24, 26, 21, 21, 21, 21, 33, 28, 31, 30, 29, 22, 22, 22, 22, 33, 26, 24, 28, 29, 23, 23, 23, 23, 33, 27, 26, 29, 30, 24, 24, 24, 24, 33, 25, 27, 30, 31, 25, 25, 25, 25, 33, 24, 25, 31, 28, 26, 26, 26, 26],
            vertices: [.35, -1.19209e-7, -2.48303, .35, 0, -.48303, .35, 1.39591, -2.48303, .35, 2, -.48303, .6, -1.19209e-7, -2.28303, .6, 1.19591, -2.28303, .6, 1.65114, -.750911, .6, 0, -.750912, -.35, -1.19209e-7, -2.48303, -.35, 0, -.48303, -.35, 1.39591, -2.48303, -.35, 2, -.48303, -.6, -1.19209e-7, -2.28303, -.6, 1.19591, -2.28303, -.6, 1.65114, -.750911, -.6, 0, -.750912, -.35, 1.19209e-7, 2.48303, -.35, 0, .48303, -.35, 1.39591, 2.48303, -.35, 2, .48303, -.6, 1.19209e-7, 2.28303, -.6, 1.19591, 2.28303, -.6, 1.65114, .750911, -.6, 5.96046e-8, .750912, .35, 1.19209e-7, 2.48303, .35, 0, .48303, .35, 1.39591, 2.48303, .349999, 2, .48303, .6, 1.19209e-7, 2.28303, .6, 1.19591, 2.28303, .6, 1.65114, .750911, .6, 5.96046e-8, .750912],
            metadata: {
                faces: 28,
                normals: 27,
                uvs: 0,
                vertices: 32,
                generator: "io_three",
                type: "Geometry",
                version: 3
            },
            normals: [0, -2.98023e-7, 1, 1, 2.09356e-8, 9.41484e-8, .624695, 1.43663e-7, -.780869, .711469, .673098, -.20187, .731086, -1.00244e-7, .682285, 9.16397e-9, -1, 6.75002e-8, 0, -1, 5.96047e-8, 0, .957285, -.289145, 0, 3.41597e-7, -1, -1, 2.09356e-8, 9.41484e-8, -.624695, 1.43663e-7, -.780869, -.711469, .673098, -.20187, -.731086, -9.46753e-8, .682285, -9.16397e-9, -1, 6.75002e-8, 0, -2.98023e-7, -1, -1, 0, 0, -.624695, 1.43663e-7, .780869, -.711469, .673098, .20187, -.731086, -1.33659e-7, -.682285, -1.12336e-7, -1, 5.06252e-8, 0, .957285, .289145, 0, 3.41597e-7, 1, 1, 2.09356e-8, -1.71955e-7, .624695, 2.24473e-7, .780868, .711469, .673098, .20187, .731086, -1.16952e-7, -.682286, 1.12336e-7, -1, 5.06251e-8],
            uvs: []
        },
        "generic-block": {
            id: "generic-block",
            primaryColorFaces: [],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlanePosition: {
                y: 5.1
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            imagePlaneScale: .9,
            vertices: [1, -5.96046e-8, -1, 1, 2.98023e-8, 1, -1, 2.98023e-8, 1, -1, -5.96046e-8, -1, 1, 1, -.999999, .999999, 1, 1, -1, 1, 1, -1, 1, -1],
            normals: [-8.88178e-15, -1, 4.47035e-8, 0, 1, 0, 1, 8.94068e-8, 2.83122e-7, -2.83122e-7, -2.08616e-7, 1, -1, -2.68221e-7, -2.23517e-7, 2.38419e-7, 4.17233e-7, -1],
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 4, 7, 6, 5, 1, 1, 1, 1, 33, 0, 4, 5, 1, 2, 2, 2, 2, 33, 1, 5, 6, 2, 3, 3, 3, 3, 33, 2, 6, 7, 3, 4, 4, 4, 4, 33, 4, 0, 3, 7, 5, 5, 5, 5],
            metadata: {
                vertices: 8,
                faces: 6,
                generator: "io_three",
                normals: 6,
                type: "Geometry",
                uvs: 0,
                version: 3
            },
            uvs: []
        },
        "generic-cube": {
            id: "generic-cube",
            primaryColorFaces: [],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlanePosition: {
                y: 10.1
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            imagePlaneScale: .9,
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 4, 7, 6, 5, 1, 1, 1, 1, 33, 0, 4, 5, 1, 2, 2, 2, 2, 33, 1, 5, 6, 2, 3, 3, 3, 3, 33, 2, 6, 7, 3, 4, 4, 4, 4, 33, 4, 0, 3, 7, 5, 5, 5, 5],
            vertices: [1, 0, -1, 1, 5.96046e-8, 1, -1, 5.96046e-8, 1, -1, 0, -1, 1, 2, -1, .999999, 2, 1, -1, 2, 1, -1, 2, -1],
            metadata: {
                faces: 6,
                version: 3,
                normals: 6,
                uvs: 0,
                generator: "io_three",
                type: "Geometry",
                vertices: 8
            },
            normals: [-3.55271e-15, -1, 2.98023e-8, 0, 1, 0, 1, 4.47034e-8, 2.83122e-7, -2.98023e-7, -8.9407e-8, 1, -1, -1.3411e-7, -2.23517e-7, 2.08616e-7, 1.78814e-7, -1],
            uvs: []
        },
        "loadbalancer-alt": {
            id: "loadbalancer-alt",
            primaryColorFaces: [6, 8, 9, 11, 16, 17, 18, 19],
            imagePlanePosition: {
                y: 1.5,
                z: 3.5
            },
            imagePlaneRotation: {
                x: -1.570796326,
                z: 1.570796326
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .4,
            uvs: [],
            metadata: {
                faces: 45,
                version: 3,
                generator: "io_three",
                uvs: 0,
                normals: 44,
                type: "Geometry",
                vertices: 39
            },
            faces: [33, 3, 7, 6, 2, 0, 0, 0, 0, 33, 7, 5, 4, 6, 1, 1, 1, 1, 33, 0, 4, 5, 1, 2, 2, 2, 2, 32, 9, 3, 29, 3, 3, 3, 32, 20, 21, 36, 4, 4, 4, 32, 9, 29, 20, 5, 5, 5, 32, 1, 8, 9, 6, 6, 6, 32, 20, 36, 1, 7, 7, 7, 32, 20, 1, 9, 8, 8, 8, 33, 20, 29, 28, 19, 9, 9, 9, 9, 33, 11, 10, 9, 8, 10, 10, 10, 10, 33, 1, 5, 11, 8, 11, 11, 11, 11, 33, 7, 3, 9, 10, 12, 12, 12, 12, 33, 5, 7, 10, 11, 13, 13, 13, 13, 33, 12, 13, 14, 15, 14, 14, 14, 14, 33, 17, 13, 18, 21, 15, 15, 15, 15, 33, 12, 16, 20, 19, 16, 16, 16, 16, 33, 16, 15, 14, 17, 17, 17, 17, 17, 32, 16, 12, 15, 18, 18, 18, 33, 16, 17, 21, 20, 19, 19, 19, 19, 33, 13, 12, 19, 18, 20, 20, 20, 20, 32, 13, 17, 14, 21, 21, 21, 33, 22, 23, 24, 25, 22, 22, 22, 22, 33, 27, 23, 28, 29, 23, 23, 23, 23, 33, 22, 26, 3, 2, 24, 24, 24, 24, 33, 26, 25, 24, 27, 25, 25, 25, 25, 32, 26, 22, 25, 26, 26, 26, 33, 23, 22, 2, 28, 27, 27, 27, 27, 33, 21, 18, 37, 36, 28, 28, 28, 28, 32, 23, 27, 24, 29, 29, 29, 33, 26, 27, 29, 3, 30, 30, 30, 30, 33, 30, 31, 32, 33, 31, 31, 31, 31, 33, 0, 1, 35, 31, 32, 32, 32, 32, 32, 4, 0, 37, 33, 33, 33, 32, 18, 38, 28, 4, 4, 4, 32, 4, 37, 18, 34, 34, 34, 32, 2, 6, 4, 35, 35, 35, 32, 4, 18, 28, 36, 36, 36, 32, 28, 2, 4, 37, 37, 37, 33, 34, 33, 32, 35, 38, 38, 38, 38, 32, 34, 30, 33, 39, 39, 39, 33, 37, 0, 31, 30, 40, 40, 40, 40, 32, 31, 35, 32, 41, 41, 41, 33, 34, 35, 1, 36, 42, 42, 42, 42, 33, 30, 34, 36, 37, 43, 43, 43, 43],
            vertices: [-1.00513, .00165753, .0650985, -1.00513, .201658, .0650985, .994872, .00165753, .0650986, .994872, .201658, .0650985, -1.00513, .00165756, 1.20182, -1.00513, .201658, 1.20182, .994872, .00165756, 1.20182, .994872, .201658, 1.20182, -.904172, .301658, .122478, .893916, .301658, .122478, .893916, .301658, 1.27861, -.904172, .301658, 1.27861, .194872, .00165752, -.33635, -.205128, .00165752, -.33635, -.105128, .00165752, -.736349, .094872, .00165752, -.736349, .194872, .201658, -.336349, -.205128, .201658, -.33635, -.205128, .00165753, .0650985, .194872, .00165753, .0636505, .194872, .201658, .0650985, -.205128, .201658, .0650985, .994872, .00165752, -.33635, .794872, .00165752, -.33635, .894872, .00165751, -.736349, .994872, .0016575, -.736349, .994872, .201658, -.336349, .794872, .201658, -.33635, .794872, .00165753, .0650986, .794872, .201658, .0650985, -.805128, .00165752, -.33635, -1.00513, .00165752, -.33635, -1.00513, .0016575, -.736349, -.905128, .00165751, -.736349, -.805128, .201658, -.336349, -1.00513, .201658, -.33635, -.805128, .201658, .0650984, -.805128, .00165753, .0650985, .194872, .00165753, .0650985],
            normals: [1, 0, 5.24354e-8, 0, 0, 1, -1, 0, 0, 3.23116e-8, .497687, -.867357, 0, -1, 0, 4.30821e-8, .497687, -.867357, 3.59399e-8, .497687, -.867357, 0, 1, 0, 3.76968e-8, .497687, -.867357, .00120669, .00361986, -.999993, 8.54501e-16, 1, -2.57776e-8, -.703735, .710463, -3.716e-8, .703734, .710464, 1.71508e-8, 0, -.609027, .79315, 3.70075e-15, -1, -1.86265e-8, -1, -3.72528e-8, 2.04152e-7, 1, -7.43039e-7, -5.57784e-7, 2.499e-7, .894427, -.447214, .970142, 5.42109e-7, -.242535, 2.21244e-14, 1, -7.42371e-8, 6.73048e-11, -1, 3.71856e-8, -.970142, -6.50531e-7, -.242536, -2.48353e-8, -1, 2.48353e-8, -1, 4.47035e-7, 2.22711e-7, 1, 4.47035e-7, 2.22711e-7, 3.332e-7, .894427, -.447214, 1, 8.9407e-7, 1.49012e-7, 0, -1, 3.71185e-8, 8.69234e-8, -7.45058e-8, -1, -.970142, -1.44563e-7, -.242536, 4.42488e-14, 1, -7.42371e-8, 2.48353e-8, -1, 2.48353e-8, -1, -2.98023e-7, 1.48474e-7, 1.95337e-15, -1, 2.62177e-8, -2.27893e-15, -1, 2.62177e-8, 0, -1, 2.62177e-8, -1.17202e-15, -1, 2.62177e-8, -9.76687e-16, -1, 2.62177e-8, 3.332e-7, .894427, -.447214, .970142, 6.86672e-7, -.242536, 0, -1, 3.71185e-8, -1, -5.96046e-7, 2.22045e-14, 3.31866e-14, 1, -7.42371e-8, 1, 2.98023e-7, -1.48474e-7]
        },
        loadbalancer: {
            id: "loadbalancer",
            primaryColorFaces: [12, 13, 14, 15],
            imagePlanePosition: {
                y: 2.5
            },
            imagePlaneRotation: {
                x: -1.4
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .55,
            vertices: [1, 49144e-8, .880309, 1, .307099, .994115, -1, 49144e-8, .88031, -1, .307099, 1, 1, 491381e-9, -1, 1, .596725, -1, -1, 491381e-9, -1, -1, .596725, -1, -1, .183386, .940155, -1, .310825, .858726, 1, .310825, .852841, 1, .183386, .940155],
            uvs: [],
            faces: [32, 8, 3, 9, 0, 0, 0, 32, 9, 7, 6, 1, 1, 1, 32, 6, 2, 8, 2, 2, 2, 32, 9, 6, 8, 3, 3, 3, 33, 7, 5, 4, 6, 4, 4, 4, 4, 32, 4, 5, 10, 5, 5, 5, 32, 10, 1, 11, 6, 6, 6, 32, 11, 0, 4, 7, 7, 7, 32, 10, 11, 4, 8, 8, 8, 33, 0, 2, 6, 4, 9, 9, 9, 9, 33, 3, 8, 11, 1, 10, 10, 10, 10, 33, 10, 9, 3, 1, 11, 11, 11, 11, 33, 5, 7, 9, 10, 12, 12, 12, 12, 33, 2, 0, 11, 8, 13, 13, 13, 13],
            normals: [-1, 0, 0, -1, 3.20574e-15, 3.20675e-8, -1, -1.03724e-8, 3.16994e-8, -1, 1.85148e-8, 2.89762e-8, -1.49012e-8, -4.99843e-8, -1, 1, 0, -3.21693e-8, 1, 0, 0, 1, 1.03724e-8, -3.16994e-8, 1, -1.97718e-8, -2.88577e-8, 1.88943e-15, -1, 3.16994e-8, .0013367, -.417875, .908504, 775891e-10, .999652, .0263672, 224032e-9, .98834, .152263, 5.68656e-8, -.310986, .950414],
            metadata: {
                vertices: 12,
                faces: 14,
                generator: "io_three",
                type: "Geometry",
                uvs: 0,
                normals: 14,
                version: 3
            }
        },
        logging: {
            id: "logging",
            primaryColorFaces: [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19],
            imagePlanePosition: {
                y: .32,
                z: .3
            },
            imagePlaneRotation: {
                x: -1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .5,
            vertices: [-1, 5.96046e-8, 1, 1, 5.96046e-8, 1, -1, -4.47035e-8, -1, 1, -4.47035e-8, -1, -.933306, .0620788, -.93331, -.933306, .0620789, .933306, .933306, .0620789, .933306, .933306, .0620788, -.93331, -.93331, .227657, -.83084, -.93331, .227657, -.93331, -.933306, .0620788, -.83084, .93331, .227657, -.83084, .933306, .0620788, -.83084, .93331, .227657, -.93331, -.859304, .181605, -.882075, .859304, .181605, -.882075, .421037, .298525, -.88207, -.729987, .298525, -.88207, .421037, .201475, -.88207, -.729987, .201475, -.88207, .619385, .898525, -.88207, -.729987, .898525, -.88207, .619385, .801475, -.88207, -.729987, .801475, -.88207, .560382, .598525, -.88207, -.729987, .598525, -.88207, .560382, .501475, -.88207, -.729987, .501475, -.88207, .385027, .748525, -.88207, -.729987, .748525, -.88207, .385027, .651475, -.88207, -.729987, .651475, -.88207, .667491, 1.05235, -.88207, -.729987, 1.05235, -.88207, .667491, .955298, -.88207, -.729987, .955298, -.88207, .514487, 1.49852, -.88207, -.729987, 1.49852, -.88207, .514487, 1.40148, -.88207, -.729987, 1.40148, -.88207, .423947, 1.20235, -.88207, -.729987, 1.20235, -.88207, .423947, 1.1053, -.88207, -.729987, 1.1053, -.88207, .365695, 1.35235, -.88207, -.729987, 1.35235, -.88207, .365695, 1.2553, -.88207, -.729987, 1.2553, -.88207, .477343, .448525, -.88207, -.729987, .448525, -.88207, .477343, .351475, -.88207, -.729987, .351475, -.88207],
            faces: [33, 0, 2, 3, 1, 0, 0, 0, 0, 33, 3, 2, 4, 7, 1, 1, 1, 1, 33, 0, 1, 6, 5, 2, 2, 2, 2, 32, 6, 1, 3, 3, 3, 3, 32, 3, 7, 12, 4, 4, 4, 32, 3, 12, 6, 5, 5, 5, 32, 4, 2, 0, 6, 6, 6, 32, 0, 5, 10, 7, 7, 7, 32, 0, 10, 4, 8, 8, 8, 33, 8, 10, 12, 11, 9, 9, 9, 9, 33, 12, 7, 13, 11, 10, 10, 10, 10, 33, 7, 4, 9, 13, 11, 11, 11, 11, 33, 8, 9, 4, 10, 12, 12, 12, 12, 33, 10, 5, 6, 12, 13, 13, 13, 13, 33, 13, 9, 14, 15, 14, 14, 14, 14, 32, 9, 8, 14, 15, 15, 15, 33, 8, 11, 15, 14, 16, 16, 16, 16, 32, 11, 13, 15, 17, 17, 17, 33, 16, 17, 19, 18, 18, 18, 18, 18, 33, 20, 21, 23, 22, 18, 18, 18, 18, 33, 24, 25, 27, 26, 18, 18, 18, 18, 33, 28, 29, 31, 30, 18, 18, 18, 18, 33, 32, 33, 35, 34, 18, 18, 18, 18, 33, 36, 37, 39, 38, 18, 18, 18, 18, 33, 40, 41, 43, 42, 18, 18, 18, 18, 33, 44, 45, 47, 46, 18, 18, 18, 18, 33, 48, 49, 51, 50, 18, 18, 18, 18],
            normals: [0, -1, 5.21541e-8, 0, .731959, -.681349, 0, .731979, .681327, .681327, .731979, -3.81757e-8, .681327, .731979, 0, .681327, .731979, -4.32795e-8, -.681327, .731979, -3.81757e-8, -.681327, .731979, -4.32795e-8, -.681327, .731979, 0, 0, 0, 1, 1, -237587e-10, 1.67514e-12, 0, 0, -1, -1, -237587e-10, 1.67514e-12, 0, 1, -5.91267e-8, 0, .743725, .668486, .52833, .849039, -1.23467e-7, 0, .743725, -.668486, -.52833, .849039, -1.23467e-7, 0, 0, 1],
            metadata: {
                type: "Geometry",
                faces: 27,
                normals: 19,
                uvs: 0,
                generator: "io_three",
                vertices: 52,
                version: 3
            },
            uvs: []
        },
        "media-player": {
            id: "media-player",
            primaryColorFaces: [2, 3, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96],
            imagePlanePosition: {
                x: 1.9,
                y: 2.5
            },
            imagePlaneRotation: {
                x: -1.57079632,
                y: .3
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .55,
            metadata: {
                generator: "io_three",
                faces: 57,
                uvs: 0,
                vertices: 70,
                normals: 50,
                version: 3,
                type: "Geometry"
            },
            vertices: [1, .00754398, -1, 1, .0075441, 1, -1, .0075441, 1, -1, .00754398, -1, 1, .158927, -1, .999999, .158927, 1, -1, .569933, 1, -1, .569933, -1, -.303545, .569933, 1, -.303545, .569933, -1, .948435, .310892, -.925515, .948434, .310892, .925516, -.258016, .666673, -.925515, -.902596, .666673, -.925515, -.258016, .666674, .925515, -.902596, .666674, .925515, -.767689, .668745, -.27598, -.767689, .703453, -.27598, -.602414, .668745, -.511288, -.602414, .703453, -.511288, -.437139, .668745, -.27598, -.437139, .703453, -.27598, -.767712, .668745, -.167719, -.767712, .703453, -.167719, -.437116, .668745, -.167719, -.437116, .703453, -.167719, -.767689, .668745, .162877, -.767689, .703453, .162877, -.437139, .668745, .162877, -.437139, .703453, .162877, -.767712, .668745, .41253, -.767712, .703453, .41253, -.437116, .668745, .41253, -.437116, .703453, .41253, -.767689, .668745, .515398, -.767689, .703453, .515398, -.437139, .668745, .515398, -.437139, .703453, .515398, -.767712, .668745, .264304, -.767712, .703453, .264304, -.437116, .668745, .264304, -.437116, .703453, .264304, -.767689, .668745, .367173, -.767689, .703453, .367173, -.437139, .668745, .367173, -.437139, .703453, .367173, -.437139, .668745, .629107, -.437139, .703453, .629107, -.602414, .668745, .770751, -.602414, .703453, .770751, -.767689, .668745, .629107, -.767689, .703453, .629107, -.437139, .668745, .772467, -.437139, .703453, .772467, -.602414, .668745, .914111, -.602414, .703453, .914111, -.767689, .668745, .772467, -.767689, .703453, .772467, -.767689, .668745, -.611933, -.767689, .703453, -.611933, -.602414, .668745, -.753576, -.602414, .703453, -.753576, -.437139, .668745, -.611933, -.437139, .703453, -.611933, -.767689, .668745, -.755292, -.767689, .703453, -.755292, -.602414, .668745, -.896936, -.602414, .703453, -.896936, -.437139, .668745, -.755292, -.437139, .703453, -.755292],
            normals: [-7.10543e-15, -1, 5.96046e-8, 3.86793e-7, .610067, -.79235, 1, 5.90601e-7, 2.83122e-7, -5.96046e-8, -433108e-11, 1, -111258e-11, -294856e-11, 1, -4.19519e-7, 4.23939e-7, 1, -1, -4.76931e-7, -2.23517e-7, 100618e-11, 275614e-11, -1, 2.08616e-7, 6.35908e-7, -1, 4.27915e-7, 141579e-11, -1, -.704684, .709521, -1.744e-7, .282857, .959162, 3.20007e-8, 4.7642e-14, 1, -6.44016e-8, .155909, .510353, .845714, -8.44686e-7, .610068, .792349, .946967, .321331, 5.27452e-7, .15591, .510352, -.845714, -.818317, 0, -.574767, .818317, 0, -.574768, 0, 0, 1, 1.8032e-7, 1, -1.26652e-7, 0, -1, 0, -9.01471e-8, 0, -1, 9.01598e-8, 0, 1, 1, 0, 699544e-10, -1, 0, 70315e-9, 9.01535e-8, 1, 9.01475e-8, 0, 0, -1, -1.8032e-7, 0, 1, 1, 0, 224238e-9, -1, 0, 225397e-9, -5.22372e-14, 1, 5.79426e-7, 1, 0, 224527e-9, -1, 0, 225976e-9, 0, 1, 5.79426e-7, .650737, 0, .759304, -.650737, 0, .759304, 0, 1, 0, 0, -1, 0, .650737, 0, .759303, -.650737, 0, .759303, 0, 0, -1, -.650737, 0, -.759304, .650737, 0, -.759303, 1.8032e-7, 1, -2.10403e-7, -1.8032e-7, -1, -2.10403e-7, -.650737, 0, -.759303, .650737, 0, -.759303, 0, 1, 0, -1.8032e-7, -1, -2.10403e-7],
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 9, 7, 13, 12, 1, 1, 1, 1, 33, 0, 4, 5, 1, 2, 2, 2, 2, 32, 2, 1, 5, 3, 3, 3, 32, 5, 8, 6, 4, 4, 4, 32, 5, 6, 2, 5, 5, 5, 33, 2, 6, 7, 3, 6, 6, 6, 6, 32, 9, 4, 0, 7, 7, 7, 32, 0, 3, 7, 8, 8, 8, 32, 0, 7, 9, 9, 9, 9, 33, 7, 6, 15, 13, 10, 10, 10, 10, 33, 10, 12, 14, 11, 11, 11, 11, 11, 33, 12, 13, 15, 14, 12, 12, 12, 12, 33, 8, 5, 11, 14, 13, 13, 13, 13, 33, 6, 8, 14, 15, 14, 14, 14, 14, 33, 5, 4, 10, 11, 15, 15, 15, 15, 33, 4, 9, 12, 10, 16, 16, 16, 16, 33, 17, 19, 18, 16, 17, 17, 17, 17, 33, 19, 21, 20, 18, 18, 18, 18, 18, 33, 21, 17, 16, 20, 19, 19, 19, 19, 32, 21, 19, 17, 20, 20, 20, 32, 16, 18, 20, 21, 21, 21, 33, 25, 24, 22, 23, 22, 22, 22, 22, 33, 29, 27, 26, 28, 23, 23, 23, 23, 33, 24, 25, 29, 28, 24, 24, 24, 24, 33, 23, 22, 26, 27, 25, 25, 25, 25, 33, 23, 27, 29, 25, 26, 26, 26, 26, 33, 33, 32, 30, 31, 27, 27, 27, 27, 33, 37, 35, 34, 36, 28, 28, 28, 28, 33, 32, 33, 37, 36, 29, 29, 29, 29, 33, 31, 30, 34, 35, 30, 30, 30, 30, 33, 31, 35, 37, 33, 31, 31, 31, 31, 33, 41, 40, 38, 39, 27, 27, 27, 27, 33, 45, 43, 42, 44, 19, 19, 19, 19, 33, 40, 41, 45, 44, 32, 32, 32, 32, 33, 39, 38, 42, 43, 33, 33, 33, 33, 33, 39, 43, 45, 41, 34, 34, 34, 34, 33, 47, 49, 48, 46, 35, 35, 35, 35, 33, 49, 51, 50, 48, 36, 36, 36, 36, 33, 51, 47, 46, 50, 27, 27, 27, 27, 32, 51, 49, 47, 37, 37, 37, 32, 46, 48, 50, 38, 38, 38, 33, 53, 55, 54, 52, 39, 39, 39, 39, 33, 55, 57, 56, 54, 40, 40, 40, 40, 33, 57, 53, 52, 56, 41, 41, 41, 41, 32, 57, 55, 53, 37, 37, 37, 32, 52, 54, 56, 38, 38, 38, 33, 59, 61, 60, 58, 42, 42, 42, 42, 33, 61, 63, 62, 60, 43, 43, 43, 43, 33, 63, 59, 58, 62, 19, 19, 19, 19, 32, 63, 61, 59, 44, 44, 44, 32, 58, 60, 62, 45, 45, 45, 33, 65, 67, 66, 64, 46, 46, 46, 46, 33, 67, 69, 68, 66, 47, 47, 47, 47, 33, 69, 65, 64, 68, 19, 19, 19, 19, 32, 69, 67, 65, 48, 48, 48, 32, 64, 66, 68, 49, 49, 49],
            uvs: []
        },
        "message-broker": {
            id: "message-broker",
            primaryColorFaces: [4, 5, 10, 11, 12, 14, 17, 18, 33, 34, 35, 56, 57, 58, 59, 60],
            imagePlanePosition: {
                y: 1.44,
                x: -.55
            },
            imagePlaneRotation: {
                x: -1.57079632,
                z: 1.57079632679
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .45,
            faces: [33, 8, 9, 11, 10, 0, 0, 0, 0, 33, 10, 11, 13, 12, 1, 1, 1, 1, 33, 14, 35, 27, 6, 2, 2, 2, 2, 33, 15, 16, 18, 17, 3, 3, 3, 3, 33, 19, 20, 22, 21, 4, 4, 4, 4, 33, 21, 22, 24, 23, 5, 5, 5, 5, 32, 25, 26, 16, 6, 6, 6, 32, 15, 37, 25, 7, 7, 7, 32, 25, 16, 15, 8, 8, 8, 33, 29, 30, 32, 31, 9, 9, 9, 9, 33, 42, 37, 15, 39, 10, 10, 10, 10, 33, 7, 6, 27, 28, 11, 11, 11, 11, 33, 31, 32, 34, 38, 12, 12, 12, 12, 33, 15, 17, 40, 39, 13, 13, 13, 13, 33, 31, 43, 46, 29, 14, 14, 14, 14, 33, 0, 1, 46, 43, 15, 15, 15, 15, 33, 38, 44, 43, 31, 16, 16, 16, 16, 33, 5, 0, 43, 44, 17, 17, 17, 17, 32, 42, 39, 45, 18, 18, 18, 33, 4, 45, 39, 3, 19, 19, 19, 19, 33, 3, 39, 40, 2, 20, 20, 20, 20, 32, 46, 1, 2, 21, 21, 21, 32, 17, 18, 20, 22, 22, 22, 32, 46, 2, 40, 23, 23, 23, 32, 40, 17, 20, 24, 24, 24, 32, 33, 50, 49, 25, 25, 25, 32, 40, 20, 19, 26, 26, 26, 32, 19, 33, 49, 27, 27, 27, 32, 9, 8, 7, 28, 28, 28, 32, 19, 49, 54, 29, 29, 29, 32, 9, 7, 28, 30, 30, 30, 32, 19, 54, 9, 31, 31, 31, 32, 46, 40, 19, 32, 32, 32, 32, 28, 30, 29, 33, 33, 33, 32, 29, 46, 19, 34, 34, 34, 32, 19, 9, 28, 35, 35, 35, 32, 19, 28, 29, 36, 36, 36, 33, 21, 41, 33, 19, 37, 37, 37, 37, 33, 21, 23, 36, 41, 38, 38, 38, 38, 32, 55, 41, 36, 39, 39, 39, 33, 52, 51, 41, 55, 40, 40, 40, 40, 33, 33, 41, 51, 50, 41, 41, 41, 41, 33, 49, 54, 47, 48, 42, 42, 42, 42, 32, 4, 5, 44, 43, 43, 43, 32, 38, 34, 35, 44, 44, 44, 32, 45, 4, 44, 45, 45, 45, 32, 38, 35, 14, 46, 46, 46, 32, 45, 44, 38, 4, 4, 4, 32, 25, 42, 45, 47, 47, 47, 32, 24, 26, 25, 48, 48, 48, 32, 55, 36, 23, 49, 49, 49, 32, 23, 24, 25, 50, 50, 50, 32, 25, 45, 38, 51, 51, 51, 32, 14, 12, 13, 52, 52, 52, 32, 23, 25, 38, 53, 53, 53, 32, 38, 14, 13, 54, 54, 54, 32, 56, 53, 52, 55, 55, 55, 32, 38, 13, 56, 56, 56, 56, 32, 55, 23, 38, 57, 57, 57, 32, 56, 52, 55, 58, 58, 58, 32, 38, 56, 55, 59, 59, 59, 33, 53, 56, 47, 48, 60, 60, 60, 60, 33, 9, 54, 47, 11, 61, 61, 61, 61, 33, 13, 11, 47, 56, 62, 62, 62, 62, 32, 62, 57, 58, 63, 63, 63, 32, 58, 59, 60, 64, 64, 64, 32, 60, 61, 62, 65, 65, 65, 32, 58, 60, 62, 66, 66, 66, 33, 16, 58, 57, 18, 67, 67, 67, 67, 33, 26, 59, 58, 16, 68, 68, 68, 68, 33, 24, 60, 59, 26, 69, 69, 69, 69, 33, 22, 61, 60, 24, 70, 70, 70, 70, 33, 20, 62, 61, 22, 71, 71, 71, 71, 33, 18, 57, 62, 20, 72, 72, 72, 72, 32, 68, 63, 64, 3, 3, 3, 32, 64, 65, 66, 73, 73, 73, 32, 66, 67, 68, 74, 74, 74, 32, 64, 66, 68, 73, 73, 73, 33, 0, 64, 63, 1, 75, 75, 75, 75, 33, 64, 0, 5, 65, 76, 76, 76, 76, 33, 4, 66, 65, 5, 77, 77, 77, 77, 33, 3, 67, 66, 4, 78, 78, 78, 78, 33, 2, 68, 67, 3, 79, 79, 79, 79, 33, 1, 63, 68, 2, 80, 80, 80, 80, 32, 74, 69, 70, 3, 3, 3, 32, 70, 71, 72, 73, 73, 73, 32, 72, 73, 74, 3, 3, 3, 32, 70, 72, 74, 73, 73, 73, 33, 27, 70, 69, 28, 81, 81, 81, 81, 33, 35, 71, 70, 27, 82, 82, 82, 82, 33, 34, 72, 71, 35, 83, 83, 83, 83, 33, 32, 73, 72, 34, 84, 84, 84, 84, 33, 30, 74, 73, 32, 85, 85, 85, 85, 33, 28, 69, 74, 30, 86, 86, 86, 86, 32, 80, 75, 76, 87, 87, 87, 32, 76, 77, 78, 4, 4, 4, 32, 78, 79, 80, 4, 4, 4, 32, 76, 78, 80, 87, 87, 87, 33, 7, 76, 75, 6, 88, 88, 88, 88, 33, 8, 77, 76, 7, 89, 89, 89, 89, 33, 10, 78, 77, 8, 90, 90, 90, 90, 33, 12, 79, 78, 10, 91, 91, 91, 91, 33, 14, 80, 79, 12, 92, 92, 92, 92, 33, 6, 75, 80, 14, 93, 93, 93, 93, 32, 86, 81, 82, 94, 94, 94, 32, 82, 83, 84, 87, 87, 87, 32, 84, 85, 86, 95, 95, 95, 32, 82, 84, 86, 95, 95, 95, 33, 50, 82, 81, 49, 96, 96, 96, 96, 33, 51, 83, 82, 50, 97, 97, 97, 97, 33, 52, 84, 83, 51, 98, 98, 98, 98, 33, 53, 85, 84, 52, 99, 99, 99, 99, 33, 48, 86, 85, 53, 100, 100, 100, 100, 33, 49, 81, 86, 48, 101, 101, 101, 101],
            vertices: [-.313261, .264331, -1.31107, -.313261, .00270166, -1.31107, .286739, .00270166, -1.31107, .286739, .264329, -1.31107, .111003, .372702, -1.31107, -.137525, .372702, -1.31107, -.935911, .264331, 1.31393, -.935911, .00270182, 1.31393, -.335911, .00270182, 1.31393, -.335911, .0027018, 1.01393, -.335911, .264331, 1.31393, -.335911, .264331, 1.01393, -.511647, .372702, 1.31393, -.511647, .372702, .838188, -.760175, .372702, 1.31393, .764089, .264329, -.298572, 1.06409, .264329, -.298572, .764089, .00270171, -.298572, 1.06409, .0027017, -.298572, .764089, .00270177, .301428, 1.06409, .00270174, .301428, .764089, .264331, .301428, 1.06409, .264331, .301428, .764089, .372702, .125692, 1.06409, .372702, .125692, .764089, .372702, -.122836, 1.06409, .372702, -.122836, -.935911, .264331, -1.31107, -.935911, .00270166, -1.31107, -.335911, .00270168, -1.01107, -.335911, .00270166, -1.31107, -.335911, .264329, -1.01107, -.335911, .264329, -1.31107, .286739, .0027018, 1.01393, -.511647, .372702, -1.31107, -.760175, .372702, -1.31107, .294271, .372702, .838188, .764089, .372702, -.122836, -.511647, .372702, -.835332, .286739, .264329, -1.01107, .286739, .00270171, -1.01107, .286739, .264331, 1.01393, .294269, .372702, -.835332, -.313261, .264329, -1.01107, -.137521, .372702, -.835332, .110999, .372702, -.835332, -.313261, .00270173, -1.01107, -.313261, .264331, 1.01393, -.313261, .264331, 1.31393, -.313261, .00270179, 1.31393, .286739, .00270179, 1.31393, .286739, .264329, 1.31393, .111003, .372702, 1.31393, -.137525, .372702, 1.31393, -.313261, .00270182, 1.01393, .110999, .372702, .838188, -.137521, .372702, .838188, .964088, .0448103, -.238572, .964089, .254112, -.238572, .964089, .34081, -.0979829, .964089, .34081, .10084, .964088, .254114, .241428, .964088, .0448103, .241428, -.253261, .0448102, -1.21107, -.253261, .254114, -1.21107, -.112673, .34081, -1.21107, .0861498, .34081, -1.21107, .226739, .254112, -1.21107, .226739, .0448102, -1.21107, -.875911, .0448102, -1.21107, -.875911, .254114, -1.21107, -.735323, .34081, -1.21107, -.5365, .34081, -1.21107, -.395911, .254112, -1.21107, -.395911, .0448102, -1.21107, -.875911, .254114, 1.21393, -.875911, .0448105, 1.21393, -.395911, .0448105, 1.21393, -.395911, .254114, 1.21393, -.5365, .34081, 1.21393, -.735323, .34081, 1.21393, -.253261, .0448103, 1.21393, .226739, .0448103, 1.21393, .226739, .254112, 1.21393, .0861498, .34081, 1.21393, -.112673, .34081, 1.21393, -.253261, .254114, 1.21393],
            metadata: {
                faces: 114,
                version: 3,
                normals: 102,
                uvs: 0,
                generator: "io_three",
                type: "Geometry",
                vertices: 87
            },
            normals: [1, 1.1391e-7, -9.93411e-8, .524889, .851171, -1.62816e-7, -.524889, .851171, -7.04548e-8, 0, 0, -1, 0, 0, 1, 2.25541e-7, .851171, .524888, 0, .851165, -.524897, 1, 0, -6.78343e-7, 0, .851166, -.524897, 1, 1.13911e-7, -9.93411e-8, .628711, .655811, -.417893, -1, 0, -4.54131e-8, .524897, .851165, -1.86075e-7, .830784, 0, -.556596, 0, -4.55646e-7, -1, -1, 4.52641e-14, 1.98682e-7, -6.82107e-8, .851171, -.524888, -.524891, .85117, 543103e-11, 1.47674e-7, .851171, -.524889, .524894, .851168, 257014e-11, 1, 1.13912e-7, -9.93411e-8, 0, -1, 2.48353e-7, -4.96705e-8, -1, 7.45058e-8, -2.48353e-8, -1, 1.98682e-7, -2.9224e-7, -1, 1.95791e-7, 0, -1, -4.96706e-8, -9.93411e-8, -1, 8.15429e-8, 6.87939e-8, -1, 8.79173e-8, 0, -1, 4.96705e-8, -1.07193e-7, -1, -9.93411e-8, 6.3862e-9, -1, 6.2443e-8, 6.57894e-7, -1, 105752e-11, -2.48353e-8, -1, 5.44455e-8, 0, -1, 9.93411e-8, 197367e-11, -1, -158601e-11, 1.23552e-8, -1, 6.09026e-8, 2.68709e-8, -1, 4.55992e-8, .830784, -1.99231e-7, .556596, .628707, .655817, .41789, -1.47673e-7, .851177, .524879, .524888, .851171, -3.48889e-8, 1, -1.13911e-7, 9.93406e-8, 1, 0, 9.93411e-8, 1.19915e-7, 1, -1.25289e-7, 1.19915e-7, 1, -6.26441e-8, 0, 1, -1.87932e-7, 1.30397e-7, 1, -6.81196e-8, 1.62614e-7, 1, -1.90883e-7, 0, 1, 1.19915e-7, -1.62612e-7, 1, -1.07226e-7, 5.95625e-14, 1, 1.19915e-7, -9.5728e-8, 1, 4.59184e-8, 1.19915e-7, 1, -1.87932e-7, -1.37055e-7, 1, 1.19915e-7, 4.11484e-7, 1, -3.56163e-8, 1.19915e-7, 1, -2.50576e-7, 7.96585e-8, 1, -3.56163e-8, -4.6277e-8, 1, -5.90471e-10, 0, 1, -1.87932e-7, 0, 1, -1.78082e-8, -.524885, .851173, -289579e-11, 52631e-10, 5.99522e-13, 1, 2.2737e-7, .851177, .52488, 1, -113912e-11, 1.06088e-13, 1, 0, 0, 1, 1.20735e-13, 169586e-11, 1, -7.18319e-7, 1.83486e-7, .514495, -5.00261e-7, .857494, .37291, -.789769, .487035, .303837, -.952724, -6.44617e-8, .372909, -.789775, -.487027, .514495, -3.39157e-8, -.857493, .388082, .921625, -7.55011e-8, 0, 0, -1, 0, 0, -1, .857494, 0, -.514494, .487027, -.789774, -.372909, -1.23965e-7, -.952724, -.303836, -.487036, -.789769, -.372909, -.857494, -1.86538e-7, -.514494, 0, .921625, -.388082, .857494, 0, -.514494, .487027, -.789774, -.372909, -1.28923e-7, -.952724, -.303836, -.487035, -.789769, -.372909, -.857494, -2.20454e-7, -.514494, 0, .921625, -.388081, 0, 0, 1, .857493, 0, .514496, 0, .921624, .388083, -.857493, 0, .514496, -.487027, -.789774, .37291, -1.28924e-7, -.952724, .303837, .487027, -.789774, .37291, 0, 0, 1, 0, 0, 1, 0, .921625, .388082, -.857493, -2.20454e-7, .514495, -.487035, -.789769, .37291, -1.23965e-7, -.952724, .303837, .487027, -.789774, .37291, .857493, 0, .514495],
            uvs: []
        },
        "message-bus": {
            id: "message-bus",
            primaryColorFaces: [4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            disableImagePlane: true,
            doubleSided: true,
            metadata: {
                version: 3,
                generator: "io_three",
                vertices: 72,
                uvs: 0,
                normals: 48,
                faces: 50,
                type: "Geometry"
            },
            uvs: [],
            vertices: [-.0530632, .296564, -.925659, -.779923, .296564, -.925659, -.053063, .296564, 1.07357, -.779923, .296564, 1.07357, -.779923, .321564, -.925659, -.779923, .321564, 1.07841, -.779923, .296564, .883072, -.779923, .321564, .883072, -.779923, .296564, .56534, -.779923, .321564, .56534, -.930276, .296564, .883072, -.930276, .296564, .56534, -.779923, .00656421, .271055, -.930276, .00656421, .271055, -.779923, .0065642, .0310545, -.930276, .0065642, .0310545, -1.00306, .00656421, .191055, -1.00306, .00656421, .111055, -.930276, .321564, .883071, -.930276, .321564, .56534, -.930276, .0225642, .271055, -.930273, .0225642, .0310545, -.779923, .0225642, .0310545, -.779923, .0225642, .271055, -.404249, .300984, .543564, -.265922, .300989, .820218, -.404249, .419293, .820218, -.542576, .300989, .820218, -.404249, .300984, -.0564364, -.265922, .300989, .220218, -.404249, .419293, .220218, -.542576, .300989, .220218, -.404249, .300984, -.656437, -.265922, .300988, -.379782, -.404249, .419293, -.379782, -.542576, .300988, -.379782, .0531399, .296564, 1.07671, .78, .296564, 1.07671, .0531399, .296564, -.922518, .78, .296564, -.922518, .78, .321564, 1.07671, .78, .321564, -.927354, .78, .296564, -.732017, .78, .321564, -.732017, .78, .296564, -.414285, .78, .321564, -.414285, .930353, .296564, -.732017, .930353, .296564, -.414285, .78, .0065642, -.12, .930353, .0065642, -.12, .78, .00656421, .12, .930353, .00656421, .12, 1.00314, .0065642, -.04, 1.00314, .0065642, .04, .930353, .321564, -.732017, .930353, .321564, -.414285, .930353, .0225642, -.12, .93035, .0225642, .12, .78, .0225642, .12, .78, .0225642, -.12, .404326, .300984, -.392509, .265999, .300988, -.669164, .404326, .419293, -.669164, .542653, .300988, -.669164, .404326, .300984, .207491, .265999, .300989, -.0691636, .404326, .419293, -.0691636, .542653, .300989, -.0691636, .404326, .300984, .807491, .265999, .300989, .530836, .404326, .419293, .530836, .542653, .300989, .530836],
            faces: [32, 1, 8, 6, 0, 0, 0, 32, 6, 3, 2, 1, 1, 1, 32, 2, 0, 1, 2, 2, 2, 32, 6, 2, 1, 3, 3, 3, 33, 8, 1, 4, 9, 4, 4, 4, 4, 33, 3, 6, 7, 5, 5, 5, 5, 5, 33, 6, 8, 11, 10, 6, 6, 6, 6, 33, 11, 8, 12, 13, 7, 7, 7, 7, 33, 13, 12, 14, 15, 8, 8, 8, 8, 33, 13, 15, 17, 16, 9, 9, 9, 9, 33, 7, 6, 10, 18, 10, 10, 10, 10, 33, 19, 18, 10, 11, 11, 11, 11, 11, 33, 20, 19, 11, 13, 12, 12, 12, 12, 33, 9, 23, 12, 8, 13, 13, 13, 13, 33, 22, 14, 12, 23, 14, 14, 14, 14, 33, 21, 15, 14, 22, 15, 15, 15, 15, 32, 26, 24, 27, 16, 16, 16, 32, 26, 27, 25, 17, 17, 17, 32, 24, 26, 25, 18, 18, 18, 32, 30, 28, 31, 19, 19, 19, 32, 30, 31, 29, 20, 20, 20, 32, 28, 30, 29, 21, 21, 21, 32, 34, 32, 35, 22, 22, 22, 32, 34, 35, 33, 23, 23, 23, 32, 32, 34, 33, 24, 24, 24, 32, 37, 44, 42, 25, 25, 25, 32, 42, 39, 38, 26, 26, 26, 32, 38, 36, 37, 27, 27, 27, 32, 42, 38, 37, 28, 28, 28, 33, 44, 37, 40, 45, 29, 29, 29, 29, 33, 39, 42, 43, 41, 30, 30, 30, 30, 33, 42, 44, 47, 46, 31, 31, 31, 31, 33, 47, 44, 48, 49, 32, 32, 32, 32, 33, 49, 48, 50, 51, 33, 33, 33, 33, 33, 49, 51, 53, 52, 34, 34, 34, 34, 33, 43, 42, 46, 54, 35, 35, 35, 35, 33, 55, 54, 46, 47, 36, 36, 36, 36, 33, 56, 55, 47, 49, 37, 37, 37, 37, 33, 45, 59, 48, 44, 38, 38, 38, 38, 33, 58, 50, 48, 59, 39, 39, 39, 39, 33, 57, 51, 50, 58, 40, 40, 40, 40, 32, 62, 60, 63, 41, 41, 41, 32, 62, 63, 61, 40, 40, 40, 32, 60, 62, 61, 42, 42, 42, 32, 66, 64, 67, 43, 43, 43, 32, 66, 67, 65, 44, 44, 44, 32, 64, 66, 65, 45, 45, 45, 32, 70, 68, 71, 46, 46, 46, 32, 70, 71, 69, 40, 40, 40, 32, 68, 70, 69, 47, 47, 47],
            normals: [.348151, .937439, -6.53109e-8, -2.56574e-14, 1, -1.56442e-7, 0, 1, -4.47207e-8, -3.23647e-8, 1, -3.29539e-8, 1, 0, -7.99527e-8, 1, 0, 0, 0, 1, 0, -1.79907e-7, .712274, -.701902, -9.23014e-15, 1, -6.20882e-8, 1.02359e-7, 1, -4.65661e-8, 237858e-11, -143051e-10, -1, 1, 119209e-11, 9.3797e-8, 1, 0, 0, -1, 0, 0, -1, 0, 0, 9.91088e-8, -9.41483e-12, 1, -.618137, .722755, -.309081, 2.15448e-7, -2.51912e-7, 1, .618137, .722755, -.309081, -.618137, .722755, -.309081, 1.07724e-7, 0, 1, .618137, .722755, -.309081, -.618137, .722755, -.309081, 4.30896e-7, -5.03824e-7, 1, .618137, .722755, -.309081, .157822, .987468, -5.9213e-8, 0, 1, 0, 0, 1, -4.47207e-8, 1.29552e-8, 1, -4.94308e-8, -1, 0, 0, -1, -5.97727e-8, -6.17925e-7, 0, 1, 0, -5.9969e-8, .712274, .701902, -6.15343e-15, 1, -6.20882e-8, 1.02359e-7, 1, -4.65661e-8, -237859e-11, -143051e-10, 1, -1, 476837e-11, -2.23629e-13, -1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, .618137, .722755, .309081, -.618137, .722755, .309081, .618137, .722755, .309081, 0, 2.51912e-7, -1, -.618137, .722755, .309081, .618137, .722755, .309081, -.618137, .722756, .309081]
        },
        pc: {
            id: "pc",
            primaryColorFaces: [134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 158, 159],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlanePosition: {
                y: 6.5,
                z: -2.52
            },
            imagePlaneRotation: {
                x: -.13
            },
            imagePlaneScale: .5,
            normals: [-.883062, -1.43375e-7, .469257, 1, 0, 0, .927582, -9.4127e-8, .37362, 0, -6.35316e-7, 1, 0, -1, 0, 0, .956794, .290766, 0, 0, 1, 0, .956794, .290766, .830858, -4.23587e-8, -.556485, 0, -1, 1.05078e-7, .175403, .983941, .0330864, -1, 0, 0, 0, -7.71109e-8, -1, 0, -7.71109e-8, -1, -.910276, -2.32038e-8, -.414003, 0, -1, -1.89046e-7, -.167133, .937553, -.305059, .165227, .926858, -.337097, 0, 0, 0, 0, .909219, -.416317, -.164601, -.923345, -.346901, -.163369, .916436, .365315, -.175403, .983941, .0330864, -1, -2.71786e-8, 2.34899e-7, 4.78291e-8, .114937, -.993373, 1, 2.03839e-8, -1.76174e-7, -7.81094e-8, -.114937, .993373, 8.78103e-9, -.993373, -.114937, 9.7567e-10, .993373, .114937, 5.00811e-8, .114937, -.993373, .460785, .102008, -.88163, .781703, .0716806, -.619518, .949497, .0360644, -.311696, 1, 0, 0, .998351, -.00659773, .0570224, .781703, -.0716807, .619518, .311647, -.109213, .943901, 0, -.114937, .993373, -.311647, -.109213, .943901, -.781702, -.0716807, .619519, -.998351, -.0065977, .0570222, -1, 0, 0, -.949498, .0360643, -.311695, -.460784, .102008, -.881631, -.781702, .0716807, -.619519, -5.79104e-9, .993373, .114937, -2.15016e-7, .993373, .114937, 8.19112e-7, .993373, .114937, 5.57803e-7, .993373, .114937, 0, .993373, .114936, 7.27048e-7, .993373, .114938, -163822e-11, .993373, .114937, 3.48123e-7, .993373, .114937, -5.56568e-9, .993373, .114937, -3.13513e-7, .993373, .114937, -1.15973e-8, .993373, .114937, 3.51043e-7, .993373, .114937, -2.76803e-9, .993373, .114937, -1.23024e-8, .993373, .114937, 5.79105e-9, -.993373, -.114937, 2.66211e-7, -.993373, -.114938, -6.14331e-7, -.993373, -.114937, 7.19749e-8, -.993373, -.114937, 0, -.993373, -.114937, 5.52394e-7, -.993373, -.114938, 491467e-11, -.993373, -.114937, -2.25254e-7, -.993373, -.114937, 4.83335e-9, -.993373, -.114937, -2.85012e-8, -.993373, -.114937, 5.92564e-10, -.993373, -.114937, -1.33731e-7, -.993373, -.114937, -9.22678e-10, -.993373, -.114937, -1.23024e-9, -.993373, -.114937, 4.4847e-8, .114937, -.993373, 1, 0, 0, -6.25105e-8, -.114937, .993373, 6.32326e-9, -.993373, -.114937, -6.32326e-9, .993373, .114937, -.99827, -.00823882, .0582157, -.00568645, .184462, -.982823, .99827, .00823887, -.0582159, .00575953, -.0949263, .995468, -9.99015e-9, -1, 2.16701e-7, 0, 1, 0, -2.5272e-8, -.991445, .130526, 2.9484e-8, .991445, -.130526, 1, 4.21051e-7, 342653e-11, -6.06121e-8, .130526, .991445, -1, -4.77683e-7, -225842e-11, 1.47843e-7, -.130526, -.991445, 1, 1.90092e-7, -2.5027e-8, -3.13408e-7, .130527, .991445, -6.81221e-7, .130526, .991445, 7.56911e-8, .130526, .991445, -2.06805e-7, .130526, .991445, 8.22147e-9, .991445, -.130527, -4.27774e-8, -.991445, .130527, -1, -3.80184e-7, 5.00511e-8],
            uvs: [],
            metadata: {
                vertices: 91,
                type: "Geometry",
                faces: 100,
                normals: 98,
                uvs: 0,
                version: 3,
                generator: "io_three"
            },
            vertices: [1.09183, .00705558, .634866, 1.09183, .100875, .634866, 1.03626, .00705558, .530295, 1.03626, .132653, .530295, 1.37189, .00705558, .634866, 1.37189, .100875, .634866, 1.41401, .00705558, .530295, 1.41401, .132653, .530295, 1.03626, .14219, .246675, 1.03626, .00705555, .246675, 1.41401, .14219, .246675, 1.41401, .00705555, .246675, 1.10796, .103677, .0890289, 1.10796, .00705558, .0890289, 1.30843, .103677, .0890289, 1.30843, .00705558, .0890289, 1.22513, .166324, .530295, 1.22513, .175861, .246675, 1.20819, .103677, .0890289, -1.41374, .0496216, .704769, -1.41374, .0829022, .70862, -1.41374, .107565, .203982, -1.41374, .140845, .207833, .479722, .0496216, .704769, .479722, .0829022, .70862, .479722, .107565, .203982, .479722, .140845, .207833, -1.36726, .121373, -.105793, -1.36726, .152685, -.10217, .40723, .121373, -.105793, .40723, .152685, -.10217, .47835, .117129, -.0691127, .47835, .148441, -.0654897, .532783, .109287, -.00133657, .532783, .140599, .00228638, .562243, .0990406, .0872171, .562243, .130353, .09084, .562243, .0879504, .183067, .562243, .119263, .18669, .532783, .029062, .692025, .532783, .0603743, .695648, .47835, .0212201, .759801, .47835, .0525323, .763424, .40723, .018539, .782972, .40723, .0498513, .786595, -1.36726, .018539, .782972, -1.36726, .0498513, .786595, -1.43839, .0212201, .759801, -1.43839, .0525323, .763424, -1.49282, .029062, .692025, -1.49282, .0603743, .695648, -1.52228, .0879504, .183067, -1.52228, .119263, .18669, -1.52228, .0990407, .087217, -1.52228, .130353, .0908399, -1.49282, .109287, -.00133674, -1.49282, .140599, .00228621, -1.43839, .117129, -.0691128, -1.43839, .148441, -.0654899, -1.41374, .117374, .119206, -1.41374, .150654, .123057, -1.41374, .131902, -.006359, -1.41374, .165182, -.00250831, .479722, .117374, .119206, .479722, .150654, .123057, .479722, .131902, -.00635891, .479722, .165182, -.00250823, -.674925, .00745654, -1.01837, -.674925, 1.63556, -.86312, -.682593, .00745648, -1.22502, -.682593, 1.63556, -.919446, .650336, .00745651, -1.02604, .650336, 1.63556, -.870788, .642669, .00745648, -1.23269, .642668, 1.63556, -.927114, 1.49573, .927368, -.742402, 1.49573, .947651, -.588339, -1.52798, .947651, -.588339, -1.52798, .927368, -.742402, 1.49573, 2.91026, -1.00345, 1.49573, 2.93054, -.849391, -1.52798, 2.93054, -.849392, -1.52798, 2.91026, -1.00345, 1.39386, 1.01445, -.597133, -1.42612, 1.01445, -.597133, 1.39386, 2.86374, -.840596, -1.42612, 2.86374, -.840597, 1.39386, 1.00921, -.63696, -1.42612, 1.00921, -.63696, 1.39386, 2.8585, -.880423, -1.42612, 2.8585, -.880424],
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 7, 6, 11, 10, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 4, 5, 1, 3, 3, 3, 3, 33, 0, 2, 6, 4, 4, 4, 4, 4, 32, 1, 5, 7, 5, 5, 5, 32, 7, 16, 3, 6, 6, 6, 32, 7, 3, 1, 7, 7, 7, 33, 10, 11, 15, 14, 8, 8, 8, 8, 33, 6, 2, 9, 11, 9, 9, 9, 9, 33, 7, 10, 17, 16, 10, 10, 10, 10, 33, 2, 3, 8, 9, 11, 11, 11, 11, 32, 13, 12, 18, 12, 12, 12, 32, 18, 14, 15, 12, 12, 12, 32, 18, 15, 13, 13, 13, 13, 33, 9, 8, 12, 13, 14, 14, 14, 14, 33, 11, 9, 13, 15, 15, 15, 15, 15, 32, 12, 8, 17, 16, 16, 16, 32, 17, 10, 14, 17, 17, 17, 32, 14, 18, 12, 18, 18, 18, 32, 17, 14, 12, 19, 19, 19, 32, 7, 5, 16, 20, 20, 20, 32, 3, 1, 16, 21, 21, 21, 33, 16, 17, 8, 3, 22, 22, 22, 22, 33, 20, 22, 21, 19, 23, 23, 23, 23, 33, 22, 26, 25, 21, 24, 24, 24, 24, 33, 26, 24, 23, 25, 25, 25, 25, 25, 33, 24, 20, 19, 23, 26, 26, 26, 26, 33, 19, 21, 25, 23, 27, 27, 27, 27, 33, 24, 26, 22, 20, 28, 28, 28, 28, 33, 27, 28, 30, 29, 29, 29, 29, 29, 33, 29, 30, 32, 31, 30, 30, 30, 30, 33, 31, 32, 34, 33, 31, 31, 31, 31, 33, 33, 34, 36, 35, 32, 32, 32, 32, 33, 35, 36, 38, 37, 33, 33, 33, 33, 33, 37, 38, 40, 39, 34, 34, 34, 34, 33, 39, 40, 42, 41, 35, 35, 35, 35, 33, 41, 42, 44, 43, 36, 36, 36, 36, 33, 43, 44, 46, 45, 37, 37, 37, 37, 33, 45, 46, 48, 47, 38, 38, 38, 38, 33, 47, 48, 50, 49, 39, 39, 39, 39, 33, 49, 50, 52, 51, 40, 40, 40, 40, 33, 51, 52, 54, 53, 41, 41, 41, 41, 33, 53, 54, 56, 55, 42, 42, 42, 42, 33, 57, 58, 28, 27, 43, 43, 43, 43, 33, 55, 56, 58, 57, 44, 44, 44, 44, 32, 32, 30, 28, 45, 45, 45, 32, 28, 58, 56, 46, 46, 46, 32, 56, 54, 52, 47, 47, 47, 32, 52, 50, 48, 48, 48, 48, 32, 48, 46, 44, 49, 49, 49, 32, 44, 42, 40, 50, 50, 50, 32, 40, 38, 36, 51, 51, 51, 32, 36, 34, 32, 52, 52, 52, 32, 32, 28, 56, 53, 53, 53, 32, 56, 52, 48, 54, 54, 54, 32, 48, 44, 40, 55, 55, 55, 32, 40, 36, 32, 56, 56, 56, 32, 32, 56, 48, 57, 57, 57, 32, 48, 40, 32, 58, 58, 58, 32, 57, 27, 29, 59, 59, 59, 32, 29, 31, 33, 60, 60, 60, 32, 33, 35, 37, 61, 61, 61, 32, 37, 39, 41, 62, 62, 62, 32, 41, 43, 45, 63, 63, 63, 32, 45, 47, 49, 64, 64, 64, 32, 49, 51, 53, 65, 65, 65, 32, 53, 55, 57, 66, 66, 66, 32, 57, 29, 33, 67, 67, 67, 32, 33, 37, 41, 68, 68, 68, 32, 41, 45, 49, 69, 69, 69, 32, 49, 53, 57, 70, 70, 70, 32, 57, 33, 41, 71, 71, 71, 32, 41, 49, 57, 72, 72, 72, 33, 60, 62, 61, 59, 11, 11, 11, 11, 33, 62, 66, 65, 61, 73, 73, 73, 73, 33, 66, 64, 63, 65, 74, 74, 74, 74, 33, 64, 60, 59, 63, 75, 75, 75, 75, 33, 59, 61, 65, 63, 76, 76, 76, 76, 33, 64, 66, 62, 60, 77, 77, 77, 77, 33, 68, 70, 69, 67, 78, 78, 78, 78, 33, 70, 74, 73, 69, 79, 79, 79, 79, 33, 74, 72, 71, 73, 80, 80, 80, 80, 33, 72, 68, 67, 71, 81, 81, 81, 81, 33, 67, 69, 73, 71, 82, 82, 82, 82, 33, 72, 74, 70, 68, 83, 83, 83, 83, 33, 75, 76, 77, 78, 84, 84, 84, 84, 33, 79, 82, 81, 80, 85, 85, 85, 85, 33, 75, 79, 80, 76, 86, 86, 86, 86, 33, 77, 76, 83, 84, 87, 87, 87, 87, 33, 77, 81, 82, 78, 88, 88, 88, 88, 33, 79, 75, 78, 82, 89, 89, 89, 89, 33, 86, 84, 88, 90, 90, 90, 90, 90, 33, 80, 81, 86, 85, 91, 91, 91, 91, 33, 81, 77, 84, 86, 92, 92, 92, 92, 33, 76, 80, 85, 83, 93, 93, 93, 93, 33, 87, 89, 90, 88, 94, 94, 94, 94, 33, 84, 83, 87, 88, 95, 95, 95, 95, 33, 85, 86, 90, 89, 96, 96, 96, 96, 33, 83, 85, 89, 87, 97, 97, 97, 97]
        },
        piechart: {
            id: "piechart",
            primaryColorFaces: [5, 4, 3, 2, 8, 9, 1, 0, 10, 11],
            imagePlanePosition: {
                x: -2,
                y: 3.45,
                z: 0
            },
            imagePlaneRotation: {
                x: -1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .35,
            vertices: [.867699, -3.341e-8, -.764332, .867699, .744289, -.764333, 1.08447, -1.9229e-8, -.439909, 1.08447, .744289, -.439909, 1.16059, -2.50141e-9, -.0572256, 1.16059, .744289, -.0572257, .160593, .744289, -.0572257, .160593, -2.50141e-9, -.0572256, 0, -4.37114e-8, -1, 0, .744289, -1, .382683, -4.03841e-8, -.92388, .382683, .744289, -.92388, .707107, -3.09086e-8, -.707107, .707107, .744289, -.707107, 1, 1.91069e-15, 4.37114e-8, 1, .744289, 1.11775e-8, .92388, 1.67276e-8, .382684, .92388, .744289, .382683, .707107, 3.09086e-8, .707107, .707107, .744289, .707107, .382683, 4.03841e-8, .92388, .382683, .744289, .923879, 1.50996e-7, 4.37114e-8, 1, 1.50996e-7, .744289, 1, -.382683, 4.03841e-8, .92388, -.382683, .744289, .92388, -.707107, 3.09086e-8, .707107, -.707107, .744289, .707107, -.92388, 1.67276e-8, .382684, -.92388, .744289, .382684, -1, -5.21253e-16, -1.19249e-8, -1, .744289, -4.44588e-8, -.923879, -1.67276e-8, -.382684, -.923879, .744289, -.382684, -.707107, -3.09086e-8, -.707107, -.707107, .744289, -.707107, -.382683, -4.03841e-8, -.92388, -.382683, .744289, -.92388, 0, .744289, 1.11775e-8, 0, 1.91069e-15, 4.37114e-8],
            normals: [.83147, -3.84835e-8, -.55557, .980785, -6.41391e-9, -.19509, -2.98023e-8, 1, -7.19492e-8, -1.16046e-15, -1, 4.37114e-8, 0, 4.50465e-8, 1, -.707107, -4.00413e-8, -.707107, .19509, -3.84835e-8, -.980785, .55557, -6.41391e-8, -.83147, .980785, 6.41391e-9, .19509, .83147, 2.56557e-8, .55557, .55557, 6.41391e-8, .83147, .19509, 7.6967e-8, .980785, -.19509, 8.01739e-8, .980785, -.55557, 6.41391e-8, .83147, -.831469, 2.56556e-8, .55557, -.980785, 6.41391e-9, .19509, -.980785, -6.41391e-9, -.19509, -.831469, -2.56556e-8, -.55557, -.19509, -3.84835e-8, -.980785, -.55557, -6.41391e-8, -.83147, .707107, 6.0062e-8, .707107, 0, -4.37114e-8, -1, 0, 1, 0, 3.91515e-7, 1, 7.78772e-8, -3.91515e-7, 1, 7.78771e-8, 3.91515e-7, 1, 7.78772e-8, 2.4689e-8, 1, -5.96046e-8, 0, 1, -8.42937e-8, 0, 1, -8.42937e-8, -2.4689e-8, 1, -5.96046e-8, -1.42109e-14, 1, -8.42937e-8, 7.10543e-15, 1, -8.42937e-8, 4.76409e-16, -1, 4.37114e-8, -3.48138e-15, -1, 4.37114e-8, 0, -1, 4.37114e-8, 1.52451e-14, -1, 4.37114e-8, -2.38204e-15, -1, 4.37114e-8, -3.81126e-15, -1, 4.37114e-8, 7.62252e-15, -1, 4.37114e-8, 1.90563e-14, -1, 4.37114e-8, 3.09046e-16, -1, 4.37114e-8, -1.25607e-15, -1, 4.37114e-8, -2.47545e-15, -1, 4.37114e-8, 0, -1, 4.37114e-8, -1.77636e-15, -1, 4.37114e-8],
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 2, 3, 5, 4, 1, 1, 1, 1, 33, 1, 6, 5, 3, 2, 2, 2, 2, 33, 0, 2, 4, 7, 3, 3, 3, 3, 33, 4, 5, 6, 7, 4, 4, 4, 4, 33, 0, 7, 6, 1, 5, 5, 5, 5, 33, 8, 9, 11, 10, 6, 6, 6, 6, 33, 10, 11, 13, 12, 7, 7, 7, 7, 33, 14, 15, 17, 16, 8, 8, 8, 8, 33, 16, 17, 19, 18, 9, 9, 9, 9, 33, 18, 19, 21, 20, 10, 10, 10, 10, 33, 20, 21, 23, 22, 11, 11, 11, 11, 33, 22, 23, 25, 24, 12, 12, 12, 12, 33, 24, 25, 27, 26, 13, 13, 13, 13, 33, 26, 27, 29, 28, 14, 14, 14, 14, 33, 28, 29, 31, 30, 15, 15, 15, 15, 33, 30, 31, 33, 32, 16, 16, 16, 16, 33, 32, 33, 35, 34, 17, 17, 17, 17, 33, 36, 37, 9, 8, 18, 18, 18, 18, 33, 34, 35, 37, 36, 19, 19, 19, 19, 33, 12, 13, 38, 39, 20, 20, 20, 20, 33, 14, 39, 38, 15, 21, 21, 21, 21, 32, 13, 11, 9, 22, 22, 22, 32, 9, 37, 35, 22, 22, 22, 32, 35, 33, 31, 23, 23, 23, 32, 31, 29, 27, 24, 24, 24, 32, 27, 25, 23, 22, 22, 22, 32, 23, 21, 19, 22, 22, 22, 32, 19, 17, 15, 25, 25, 25, 32, 38, 13, 9, 26, 26, 26, 32, 19, 15, 38, 27, 27, 27, 32, 27, 23, 19, 22, 22, 22, 32, 35, 31, 27, 28, 28, 28, 32, 38, 9, 35, 29, 29, 29, 32, 27, 19, 38, 30, 30, 30, 32, 35, 27, 38, 31, 31, 31, 32, 36, 8, 10, 32, 32, 32, 32, 10, 12, 39, 33, 33, 33, 32, 39, 14, 16, 34, 34, 34, 32, 16, 18, 20, 35, 35, 35, 32, 20, 22, 24, 36, 36, 36, 32, 24, 26, 28, 37, 37, 37, 32, 28, 30, 32, 38, 38, 38, 32, 32, 34, 36, 39, 39, 39, 32, 36, 10, 39, 40, 40, 40, 32, 39, 16, 20, 41, 41, 41, 32, 20, 24, 28, 42, 42, 42, 32, 28, 32, 36, 43, 43, 43, 32, 39, 20, 28, 43, 43, 43, 32, 39, 28, 36, 44, 44, 44],
            metadata: {
                vertices: 40,
                faces: 50,
                generator: "io_three",
                normals: 45,
                type: "Geometry",
                uvs: 0,
                version: 3
            },
            uvs: []
        },
        processor: {
            id: "processor",
            primaryColorFaces: [2, 3, 6, 7, 8, 9, 10, 11, 22, 23, 26, 27, 28, 29, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 73, 74, 77, 78, 79, 80, 92, 93],
            imagePlanePosition: {
                x: 0,
                y: .76,
                z: 0
            },
            imagePlaneRotation: {
                x: -1.5707963267948966,
                z: 3.14159265
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .34,
            vertices: [-1.5, 5.96046e-8, 1.5, -1.5, -5.96046e-8, -1.5, -1.40348, .452152, 1.40347, -1.40348, .452152, -1.40348, -1.5, .281217, 1.5, -1.5, .281216, -1.5, -1.5, .452152, .15, -1.5, .281216, .3, -1.5, .452152, -.15, -1.5, .281216, -.3, -1.40348, .452152, .15, -1.40348, .452152, -.15, -1.5, 0, .3, -1.5, 0, -.3, -1.64617, .452152, .15, -1.64617, .281216, .3, -1.64617, .452152, -.15, -1.64617, .281216, -.3, -1.64617, -1.19209e-7, .3, -1.64617, -1.19209e-7, -.3, -1.64617, .393671, .107765, -1.64617, .270866, .21553, -1.64617, .393671, -.107765, -1.64617, .270866, -.21553, -1.64617, 0, .21553, -1.64617, 0, -.21553, -3, -5.36442e-7, .10776, -3, -5.36442e-7, .215529, -3, -5.36442e-7, -.107765, -3, -5.36442e-7, -.21553, 1.5, -5.96046e-8, -1.5, 1.5, 5.96046e-8, 1.5, 1.40348, .452152, -1.40348, 1.40348, .452152, 1.40348, 1.5, .281216, -1.5, 1.5, .281217, 1.5, 1.5, .452152, -.15, 1.5, .281216, -.3, 1.5, .452152, .15, 1.5, .281216, .3, 1.40348, .452152, -.15, 1.40348, .452152, .15, 1.5, 0, -.3, 1.5, 0, .3, 1.64617, .452152, -.15, 1.64617, .281216, -.3, 1.64617, .452152, .15, 1.64617, .281216, .3, 1.64617, -1.19209e-7, -.3, 1.64617, -1.19209e-7, .3, 1.64617, .393671, -.107765, 1.64617, .270866, -.21553, 1.64617, .393671, .107765, 1.64617, .270866, .21553, 1.64617, 0, -.21553, 1.64617, 0, .21553, 3, -5.36442e-7, -.107765, 3, -5.36442e-7, .10776, 3, -5.36442e-7, -.21553, 3, -5.36442e-7, .21553],
            faces: [33, 32, 3, 2, 33, 0, 0, 0, 0, 33, 3, 32, 34, 5, 1, 1, 1, 1, 33, 31, 0, 1, 30, 2, 2, 2, 2, 32, 7, 10, 6, 3, 3, 3, 33, 4, 2, 10, 7, 4, 4, 4, 4, 33, 9, 11, 3, 5, 5, 5, 5, 5, 32, 9, 8, 11, 6, 6, 6, 33, 1, 13, 9, 5, 7, 7, 7, 7, 33, 0, 4, 7, 12, 8, 8, 8, 8, 33, 12, 7, 15, 18, 9, 9, 9, 9, 33, 18, 15, 21, 24, 10, 10, 10, 10, 33, 13, 12, 18, 19, 11, 11, 11, 11, 33, 6, 8, 16, 14, 12, 12, 12, 12, 33, 9, 13, 19, 17, 13, 13, 13, 13, 33, 8, 9, 17, 16, 14, 14, 14, 14, 33, 7, 6, 14, 15, 15, 15, 15, 15, 33, 16, 17, 23, 22, 16, 16, 16, 16, 33, 15, 14, 20, 21, 17, 17, 17, 17, 33, 17, 19, 25, 23, 18, 18, 18, 18, 33, 19, 18, 24, 25, 19, 19, 19, 19, 33, 14, 16, 22, 20, 20, 20, 20, 20, 33, 25, 24, 27, 29, 21, 21, 21, 21, 32, 24, 21, 27, 22, 22, 22, 33, 20, 22, 28, 26, 23, 23, 23, 23, 33, 22, 23, 29, 28, 24, 24, 24, 24, 33, 21, 20, 26, 27, 25, 25, 25, 25, 33, 5, 34, 30, 1, 26, 26, 26, 26, 33, 2, 4, 35, 33, 27, 27, 27, 27, 33, 40, 41, 38, 36, 28, 28, 28, 28, 33, 4, 0, 31, 35, 29, 29, 29, 29, 32, 37, 40, 36, 30, 30, 30, 33, 34, 32, 40, 37, 31, 31, 31, 31, 33, 39, 41, 33, 35, 32, 32, 32, 32, 32, 39, 38, 41, 33, 33, 33, 33, 31, 43, 39, 35, 34, 34, 34, 34, 33, 30, 34, 37, 42, 35, 35, 35, 35, 33, 42, 37, 45, 48, 36, 36, 36, 36, 33, 48, 45, 51, 54, 37, 37, 37, 37, 33, 43, 42, 48, 49, 38, 38, 38, 38, 33, 36, 38, 46, 44, 39, 39, 39, 39, 33, 39, 43, 49, 47, 40, 40, 40, 40, 33, 38, 39, 47, 46, 41, 41, 41, 41, 33, 37, 36, 44, 45, 42, 42, 42, 42, 33, 46, 47, 53, 52, 43, 43, 43, 43, 33, 45, 44, 50, 51, 44, 44, 44, 44, 33, 47, 49, 55, 53, 45, 45, 45, 45, 33, 49, 48, 54, 55, 46, 46, 46, 46, 33, 44, 46, 52, 50, 47, 47, 47, 47, 32, 23, 25, 29, 48, 48, 48, 33, 10, 11, 8, 6, 49, 49, 49, 49, 32, 53, 55, 59, 50, 50, 50, 32, 54, 51, 58, 51, 51, 51, 33, 54, 58, 59, 55, 52, 52, 52, 52, 33, 51, 50, 56, 58, 53, 53, 53, 53, 33, 50, 52, 57, 56, 54, 54, 54, 54, 33, 52, 53, 59, 57, 55, 55, 55, 55],
            metadata: {
                type: "Geometry",
                generator: "io_three",
                uvs: 0,
                normals: 56,
                vertices: 60,
                version: 3,
                faces: 56
            },
            uvs: [],
            normals: [7.21457e-15, 1, -4.24693e-8, 1.61765e-7, .491703, -.870763, -3.15797e-15, -1, 3.97364e-8, 0, .659578, .751636, -.870764, .491702, -2.28175e-7, -.870764, .491702, -1.50828e-7, 0, .659578, -.751636, -1, -8.47812e-7, -9.93411e-8, -1, -6.35859e-7, -2.48353e-7, 2.03884e-7, 1.05977e-7, 1, -1, -4.31852e-7, 211953e-10, 8.15535e-7, -1, 3.24065e-13, -6.11651e-7, 1, 0, -2.03884e-7, -1.05977e-7, -1, -5.60322e-7, .659578, -.751636, -2.80161e-7, .659578, .751636, -1, 16223e-9, -194122e-10, -1, 167727e-10, 191136e-10, -1, -4.31855e-7, -226066e-10, -.0623783, -.998053, -1.44241e-8, -1, 305767e-10, -1.64977e-12, 3.96242e-7, -1, 0, -2.42148e-7, -1.0657e-13, 1, -.27922, .960227, -9.80752e-8, -.208555, .849752, -.484176, -.208557, .849756, .484168, 1.19209e-7, -4.23906e-7, -1, -1.43791e-7, .491703, .870763, 0, 1, 0, -9.93411e-8, -2.11953e-7, 1, -1.16036e-7, .659578, -.751636, .870764, .491701, 1.04419e-7, .870764, .491702, 2.32043e-8, 1.16036e-7, .659578, .751636, 1, -105976e-11, 4.96706e-8, 1, -4.23906e-7, 9.93412e-8, -2.03884e-7, -1.05976e-7, -1, 1, -4.31854e-7, -211953e-10, -8.15535e-7, -1, -3.24065e-13, 6.11651e-7, 1, 0, 7.56241e-14, 1.05976e-7, 1, 4.76274e-7, .659578, .751636, 2.52145e-7, .659578, -.751636, 1, 16223e-9, 194122e-10, 1, 167727e-10, -191136e-10, 1, -4.31852e-7, 226066e-10, .0623783, -.998053, 1.44241e-8, 1, 305767e-10, -1.64977e-12, 2.53154e-7, 0, -1, 0, 1, 0, -1.54094e-7, 0, 1, 1.43087e-7, -6.29734e-14, -1, -3.96242e-7, -1, 0, .208555, .849752, -.484176, .27922, .960227, -9.80753e-8, .208557, .849756, .484167]
        },
        router: {
            id: "router",
            primaryColorFaces: [0, 1, 11, 12, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53],
            imagePlanePosition: {
                x: -1.9,
                y: 1.3,
                z: 0
            },
            imagePlaneRotation: {
                x: -1.5707963267948966,
                y: .31
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .25,
            metadata: {
                generator: "io_three",
                faces: 34,
                uvs: 0,
                vertices: 44,
                normals: 30,
                version: 3,
                type: "Geometry"
            },
            vertices: [-2, 0, .11, -1.32182, 0, .11, -2, 0, -.11, -1.32182, 0, -.11, .679909, .00863215, -.0755036, -1.74179, .00863209, -1.36773, -1.74179, .5, -1.36773, .679909, .00863215, .0755035, -1.74179, .00863221, 1.36773, -1.53529, .0086322, 1.06778, -1.38471, .00863218, .577879, -1.33184, .00863215, 5.96046e-8, -1.38471, .00863212, -.577879, -1.53529, .0086321, -1.06778, -1.53529, .650569, -1.06778, -1.38471, .566132, -.577879, -1.33184, .566132, 3.72529e-8, -1.38471, .566132, .577879, -1.53529, .650569, 1.06778, -1.74179, .5, 1.36773, 1.792, 0, .05, 2, 0, .05, 1.792, 0, -.05, 2, 0, -.05, 1.792, 4.47035e-8, 1.05, 1.792, 4.47035e-8, .95, 1.792, 8.9407e-8, 2, 2, 8.9407e-8, 2, 1.792, 7.45058e-8, 1.9, 2, 7.45058e-8, 1.9, 1.792, -8.9407e-8, -1.9, 2, -8.9407e-8, -1.9, 1.792, -8.9407e-8, -2, 2, -8.9407e-8, -2, 1.792, -4.47035e-8, -.95, 2, -4.47035e-8, -.95, 1.792, -4.47035e-8, -1.05, 2, -4.47035e-8, -1.05, 1.792, 4.47035e-8, 1.05, 2, 4.47035e-8, 1.05, 1.792, 4.47035e-8, .95, 2, 4.47035e-8, .95, -1.27693, .67923, .95682, -1.27693, .679234, -.956817],
            normals: [0, 1, 0, 1.71484e-9, -1, 4.93393e-8, 1.30905e-8, -1, 1.58276e-8, 3.25145e-9, -1, 5.19177e-8, -2.97917e-10, -1, 4.57164e-8, 4.40841e-12, -1, 4.56263e-8, -1.76192e-9, -1, 5.17331e-8, -2.25963e-9, -1, 3.84722e-8, -.823681, 0, .567053, .470706, .478549, -.741233, -.823681, 0, -.567054, -.955868, 0, -.293798, -.99584, 0, -.0911192, -.99584, 0, .0911192, -.955868, 0, .293798, .470774, 0, -.882254, 0, 1, -1.49012e-7, .00776186, .99997, -2.66901e-8, .00776189, .99997, -3.00264e-8, .00776187, .99997, -3.00264e-8, .00776194, .99997, -9.00792e-8, .00776184, .99997, -3.00264e-8, .470774, 0, .882254, .470706, .478546, .741235, .324187, .945993, 122815e-11, -.202987, .952606, -.226578, -.203007, .952601, .226583, -.620782, .781923, -.0568016, -.620804, .781906, .0568035, -.899598, .436719, 225797e-11],
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 32, 4, 7, 8, 1, 1, 1, 32, 13, 5, 4, 2, 2, 2, 32, 4, 8, 9, 3, 3, 3, 32, 12, 13, 4, 4, 4, 4, 32, 4, 9, 10, 5, 5, 5, 32, 11, 12, 4, 6, 6, 6, 32, 10, 11, 4, 7, 7, 7, 33, 14, 6, 5, 13, 8, 8, 8, 8, 33, 6, 14, 43, 4, 9, 9, 9, 9, 33, 9, 8, 19, 18, 10, 10, 10, 10, 33, 10, 9, 18, 17, 11, 11, 11, 11, 33, 11, 10, 17, 16, 12, 12, 12, 12, 33, 12, 11, 16, 15, 13, 13, 13, 13, 33, 13, 12, 15, 14, 14, 14, 14, 14, 32, 4, 5, 6, 15, 15, 15, 33, 20, 21, 23, 22, 0, 0, 0, 0, 33, 26, 27, 29, 28, 16, 16, 16, 16, 33, 30, 31, 33, 32, 0, 0, 0, 0, 33, 34, 35, 37, 36, 0, 0, 0, 0, 33, 4, 7, 20, 22, 17, 17, 17, 17, 33, 32, 4, 7, 30, 18, 18, 18, 18, 33, 36, 4, 7, 34, 19, 19, 19, 19, 33, 26, 28, 4, 7, 20, 20, 20, 20, 33, 38, 39, 41, 40, 0, 0, 0, 0, 33, 7, 24, 25, 4, 21, 21, 21, 21, 32, 7, 19, 8, 22, 22, 22, 33, 18, 19, 7, 42, 23, 23, 23, 23, 33, 4, 43, 42, 7, 24, 24, 24, 24, 32, 17, 18, 42, 25, 25, 25, 32, 43, 14, 15, 26, 26, 26, 32, 16, 17, 42, 27, 27, 27, 32, 43, 15, 16, 28, 28, 28, 32, 16, 42, 43, 29, 29, 29],
            uvs: []
        },
        server: {
            id: "server",
            primaryColorFaces: [54, 55, 52, 53, 26, 27, 0, 1],
            imagePlanePosition: {
                y: 6.84
            },
            imagePlaneRotation: {
                x: -1.57079632679
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .55,
            uvs: [],
            metadata: {
                normals: 18,
                faces: 28,
                vertices: 48,
                version: 3,
                generator: "io_three",
                type: "Geometry",
                uvs: 0
            },
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 4, 5, 6, 7, 1, 1, 1, 1, 33, 8, 11, 10, 9, 2, 2, 2, 2, 33, 4, 8, 9, 5, 3, 3, 3, 3, 33, 5, 9, 10, 6, 4, 4, 4, 4, 33, 6, 10, 11, 7, 5, 5, 5, 5, 33, 8, 4, 7, 11, 6, 6, 6, 6, 33, 12, 13, 14, 15, 7, 7, 7, 7, 33, 16, 19, 18, 17, 8, 8, 8, 8, 33, 12, 16, 17, 13, 3, 3, 3, 3, 33, 13, 17, 18, 14, 9, 9, 9, 9, 33, 14, 18, 19, 15, 5, 5, 5, 5, 33, 16, 12, 15, 19, 10, 10, 10, 10, 33, 20, 21, 23, 22, 0, 0, 0, 0, 33, 24, 25, 26, 27, 1, 1, 1, 1, 33, 28, 31, 30, 29, 11, 11, 11, 11, 33, 24, 28, 29, 25, 3, 3, 3, 3, 33, 25, 29, 30, 26, 12, 12, 12, 12, 33, 26, 30, 31, 27, 13, 13, 13, 13, 33, 28, 24, 27, 31, 14, 14, 14, 14, 33, 32, 33, 34, 35, 15, 15, 15, 15, 33, 36, 39, 38, 37, 8, 8, 8, 8, 33, 32, 36, 37, 33, 3, 3, 3, 3, 33, 33, 37, 38, 34, 16, 16, 16, 16, 33, 34, 38, 39, 35, 13, 13, 13, 13, 33, 36, 32, 35, 39, 17, 17, 17, 17, 33, 40, 41, 43, 42, 0, 0, 0, 0, 33, 44, 45, 47, 46, 0, 0, 0, 0],
            normals: [0, 0, 1, -7.10543e-15, -1, 5.96046e-8, 1.06581e-14, 1, -2.98023e-8, 1, 2.98023e-7, 2.83122e-7, -2.83122e-7, -6.95388e-7, 1, -1, -8.94069e-7, -2.23517e-7, 2.23517e-7, 129143e-11, -1, -3.55271e-15, -1, 2.98023e-8, 2.13163e-14, 1, -5.96047e-8, -2.98023e-7, -7.94729e-7, 1, 2.08616e-7, 139078e-11, -1, 0, 1, 0, -2.98023e-7, -7.94729e-7, 1, -1, -8.94069e-7, -2.23517e-7, 2.08616e-7, 139077e-11, -1, 0, -1, 0, -2.98023e-7, -7.94729e-7, 1, 2.08616e-7, 139078e-11, -1],
            vertices: [.305642, .0921702, 1.01, .965195, .0921702, 1.01, .305642, .231723, 1.01, .965195, .231723, 1.01, 1, .00233442, -1, 1, .00233454, 1, -1, .00233454, 1, -1, .00233442, -1, 1, .302334, -1, .999999, .302335, 1, -1, .302335, 1, -1, .302334, -1, 1, .359428, -1, 1, .359428, 1, -1, .359428, 1, -1, .359428, -1, 1, .659428, -1, .999999, .659428, 1, -1, .659428, 1, -1, .659428, -1, .305642, .449264, 1.01, .965195, .449264, 1.01, .305642, .588817, 1.01, .965195, .588817, 1.01, 1, .716477, -1, 1, .716477, 1, -1, .716477, 1, -1, .716477, -1, 1, 1.01648, -1, .999999, 1.01648, 1, -1, 1.01648, 1, -1, 1.01648, -1, 1, 1.07357, -1, 1, 1.07357, 1, -1, 1.07357, 1, -1, 1.07357, -1, 1, 1.37357, -1, .999999, 1.37357, 1, -1, 1.37357, 1, -1, 1.37357, -1, .305642, .806313, 1.01, .965195, .806313, 1.01, .305642, .945866, 1.01, .965195, .945866, 1.01, .305642, 1.16341, 1.01, .965195, 1.16341, 1.01, .305642, 1.30296, 1.01, .965195, 1.30296, 1.01]
        },
        speech: {
            id: "speech",
            primaryColorFaces: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            disableImagePlane: true,
            vertices: [0, 0, 1.41421, 0, .22609, 1.41421, -1.41421, 0, 0, -1.41421, .22609, 0, 1.41421, 0, 0, 1.41421, .22609, 0, 0, 0, -1.41421, 0, .22609, -1.41421, 0, .34569, 1.27346, -1.27346, .34569, 0, 0, .34569, -1.27346, 1.27346, .34569, 0, 77e-5, .38614, .22083, -.10945, .34569, .30752, -.34881, .34569, .3182, 77e-5, .34569, -.29657, -.22977, .34569, -.40381, -1.03107, .34569, -.08625, -.69845, .34569, -.05237, -.00101, .34569, -.08428, -.69845, .34569, -.02178, 77e-5, .34569, .02274, -.2368, .42955, -.22569, 77e-5, .42955, -.2046, -.71939, .43511, .06283, -.35911, .44831, .15146, -.07803, .46821, .13833, -.63394, .38762, -.16294, .10922, .34569, .30752, .34857, .34569, .3182, .22954, .34569, -.40381, 1.03084, .34569, -.08625, .69821, .34569, -.05237, .69821, .34569, -.02178, .23656, .42955, -.22569, .71916, .43511, .06283, .35888, .44831, .15146, .0778, .46406, .13833, .6337, .38762, -.16294, 5e-4, .33955, .29088],
            uvs: [],
            metadata: {
                uvs: 0,
                version: 3,
                type: "Geometry",
                vertices: 40,
                normals: 56,
                faces: 60,
                generator: "io_three"
            },
            normals: [-.70711, 0, .70711, -.70711, 0, -.70711, .70711, 0, -.70711, .70711, 0, .70711, 0, -1, 0, -.54352, .63966, .54352, .54352, .63966, .54352, -.54352, .63966, -.54352, .54352, .63966, -.54352, -.15969, .83627, .52454, .02333, .85205, .52294, -.4823, .32472, .8136, -.0303, .81223, .58256, .1849, .77934, .59871, .14692, .69778, -.70108, -.16126, .89044, -.42557, -.03431, .94095, .3368, -.04742, .94284, .32987, -.05064, .81971, .57053, .03767, .90468, -.42442, .29908, .7051, -.64295, -.13635, -.69754, .70345, .15969, .83627, .52454, -.02333, .85205, .52294, .4823, .32473, .8136, .01934, .8209, .57074, -.08149, .65576, -.75056, .77587, .61814, -.12621, .16126, .89044, -.42557, .03431, .94095, .3368, -.03796, .90467, -.42441, .05111, .81899, .57153, -.3012, .70461, -.6425, -.13635, .69754, -.70345, -.76963, .62558, -.12773, -.17319, .79159, .58599, -.14692, .69778, -.70108, .04742, .94284, .32987, .07209, .67246, -.73661, .12931, .82541, .54952, -.13066, .82574, .54871, 0, 1, 0, -.70711, 0, .70711, .70711, 0, -.70711, .70711, 0, .70711, -.54352, .63966, .54352, .54352, .63966, .54352, -.54352, .63966, -.54352, .54352, .63966, -.54352, .13635, .69754, -.70345, .03566, .82767, -.56008, -.17973, .87294, -.45352, .02207, .87564, .48245, .17973, .87294, -.45352, -.03576, .82757, -.56022, -.02201, .87572, .48232],
            faces: [32, 3, 2, 0, 0, 0, 0, 32, 7, 6, 2, 1, 1, 1, 32, 5, 4, 6, 2, 2, 2, 32, 1, 0, 4, 3, 3, 3, 32, 0, 2, 6, 4, 4, 4, 32, 1, 8, 9, 5, 5, 5, 32, 1, 5, 11, 6, 6, 6, 32, 7, 3, 9, 7, 7, 7, 32, 7, 10, 11, 8, 8, 8, 32, 24, 14, 25, 9, 9, 9, 32, 13, 25, 14, 10, 10, 10, 32, 14, 24, 17, 11, 11, 11, 32, 25, 13, 26, 12, 12, 12, 32, 12, 26, 13, 13, 13, 13, 32, 20, 24, 25, 14, 14, 14, 32, 16, 27, 22, 15, 15, 15, 32, 18, 27, 17, 16, 16, 16, 32, 18, 22, 27, 17, 17, 17, 32, 23, 22, 19, 18, 18, 18, 32, 23, 16, 22, 19, 19, 19, 32, 16, 23, 15, 20, 20, 20, 32, 20, 24, 17, 21, 21, 21, 32, 35, 36, 29, 22, 22, 22, 32, 28, 29, 36, 23, 23, 23, 32, 29, 31, 35, 24, 24, 24, 32, 36, 37, 28, 25, 25, 25, 32, 26, 21, 25, 26, 26, 26, 32, 26, 12, 21, 27, 27, 27, 32, 30, 34, 38, 28, 28, 28, 32, 32, 31, 38, 29, 29, 29, 32, 23, 34, 30, 30, 30, 30, 32, 23, 19, 34, 31, 31, 31, 32, 30, 15, 23, 32, 32, 32, 32, 33, 35, 31, 33, 33, 33, 32, 37, 21, 12, 34, 34, 34, 32, 12, 28, 37, 35, 35, 35, 32, 33, 36, 35, 36, 36, 36, 32, 32, 38, 34, 37, 37, 37, 32, 37, 36, 21, 38, 38, 38, 32, 12, 13, 39, 39, 39, 39, 32, 12, 39, 28, 40, 40, 40, 32, 8, 11, 10, 41, 41, 41, 32, 1, 3, 0, 42, 42, 42, 32, 3, 7, 2, 1, 1, 1, 32, 7, 5, 6, 43, 43, 43, 32, 5, 1, 4, 44, 44, 44, 32, 4, 0, 6, 4, 4, 4, 32, 3, 1, 9, 45, 45, 45, 32, 8, 1, 11, 46, 46, 46, 32, 10, 7, 9, 47, 47, 47, 32, 5, 7, 11, 48, 48, 48, 32, 20, 17, 24, 49, 49, 49, 32, 25, 21, 20, 50, 50, 50, 32, 17, 27, 16, 51, 51, 51, 32, 19, 22, 18, 52, 52, 52, 32, 31, 30, 38, 53, 53, 53, 32, 33, 35, 31, 33, 33, 33, 32, 36, 33, 21, 54, 54, 54, 32, 19, 32, 34, 55, 55, 55, 32, 9, 8, 10, 41, 41, 41]
        },
        "stream-processor": {
            id: "stream-processor",
            primaryColorFaces: [0, 1, 2, 4, 9, 34, 35, 58, 61, 62, 63, 65, 66, 67, 68, 70, 71, 82, 125, 126, 161, 164, 165],
            imagePlanePosition: {
                x: 0,
                y: 4.81,
                z: 0
            },
            imagePlaneRotation: {
                x: -1.5707963267948966,
                z: 1.5707963267948966
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .4,
            faces: [32, 3, 2, 0, 0, 0, 0, 32, 3, 4, 2, 1, 1, 1, 32, 4, 1, 0, 2, 2, 2, 32, 0, 2, 4, 3, 3, 3, 32, 4, 3, 1, 4, 4, 4, 32, 11, 7, 8, 5, 5, 5, 32, 14, 12, 10, 6, 6, 6, 32, 12, 41, 48, 7, 7, 7, 32, 6, 43, 7, 8, 8, 8, 32, 15, 12, 16, 9, 9, 9, 32, 19, 36, 18, 10, 10, 10, 32, 24, 20, 21, 0, 0, 0, 32, 29, 27, 28, 11, 11, 11, 32, 7, 24, 40, 12, 12, 12, 32, 21, 19, 32, 13, 13, 13, 32, 35, 32, 31, 14, 14, 14, 32, 37, 25, 8, 15, 15, 15, 32, 8, 24, 7, 16, 16, 16, 32, 36, 9, 18, 16, 16, 16, 32, 33, 34, 39, 17, 17, 17, 32, 29, 35, 34, 18, 18, 18, 32, 39, 34, 35, 19, 19, 19, 32, 30, 34, 33, 20, 20, 20, 32, 17, 33, 36, 21, 21, 21, 32, 38, 26, 37, 22, 22, 22, 32, 39, 27, 38, 23, 23, 23, 32, 40, 28, 39, 24, 24, 24, 32, 38, 37, 36, 19, 19, 19, 32, 50, 6, 14, 25, 25, 25, 32, 6, 35, 31, 26, 26, 26, 32, 49, 9, 45, 27, 27, 27, 32, 43, 47, 44, 28, 28, 28, 32, 46, 50, 49, 17, 17, 17, 32, 7, 44, 8, 20, 20, 20, 32, 52, 12, 48, 29, 29, 29, 32, 48, 51, 52, 30, 30, 30, 32, 72, 56, 55, 31, 31, 31, 32, 57, 61, 60, 19, 19, 19, 32, 64, 66, 65, 19, 19, 19, 32, 59, 60, 76, 12, 12, 12, 32, 55, 57, 68, 13, 13, 13, 32, 68, 57, 71, 32, 32, 32, 32, 44, 73, 45, 33, 33, 33, 32, 60, 44, 43, 34, 34, 34, 32, 72, 45, 73, 16, 16, 16, 32, 69, 75, 70, 0, 0, 0, 32, 71, 65, 70, 35, 35, 35, 32, 75, 71, 70, 36, 36, 36, 32, 70, 66, 69, 37, 37, 37, 32, 69, 53, 72, 38, 38, 38, 32, 62, 74, 73, 22, 22, 22, 32, 63, 75, 74, 23, 23, 23, 32, 64, 76, 75, 39, 39, 39, 32, 74, 72, 73, 11, 11, 11, 32, 50, 13, 49, 40, 40, 40, 32, 42, 71, 76, 20, 20, 20, 32, 8, 45, 9, 41, 41, 41, 32, 15, 52, 51, 20, 20, 20, 32, 10, 51, 46, 42, 42, 42, 32, 47, 10, 46, 43, 43, 43, 32, 41, 11, 47, 44, 44, 44, 32, 80, 79, 77, 0, 0, 0, 32, 80, 81, 79, 1, 1, 1, 32, 81, 78, 77, 2, 2, 2, 32, 77, 79, 81, 3, 3, 3, 32, 81, 80, 78, 4, 4, 4, 32, 85, 82, 84, 17, 17, 17, 32, 85, 86, 84, 1, 1, 1, 32, 86, 83, 82, 2, 2, 2, 32, 82, 84, 86, 3, 3, 3, 32, 86, 85, 83, 4, 4, 4, 32, 1, 3, 0, 11, 11, 11, 32, 11, 9, 10, 5, 5, 5, 32, 7, 5, 6, 45, 45, 45, 32, 11, 8, 9, 5, 5, 5, 32, 7, 11, 5, 0, 0, 0, 32, 12, 6, 5, 11, 11, 11, 32, 13, 10, 9, 46, 46, 46, 32, 12, 14, 6, 11, 11, 11, 32, 14, 10, 13, 11, 11, 11, 32, 5, 41, 12, 7, 7, 7, 32, 42, 43, 6, 8, 8, 8, 32, 10, 12, 15, 47, 47, 47, 32, 36, 20, 17, 31, 31, 31, 32, 20, 36, 19, 31, 31, 31, 32, 20, 26, 17, 11, 11, 11, 32, 24, 21, 23, 0, 0, 0, 32, 20, 25, 26, 5, 5, 5, 32, 23, 21, 22, 48, 48, 48, 32, 20, 24, 25, 5, 5, 5, 32, 26, 27, 17, 5, 5, 5, 32, 29, 28, 22, 11, 11, 11, 32, 27, 30, 17, 11, 11, 11, 32, 22, 28, 23, 11, 11, 11, 32, 27, 29, 30, 5, 5, 5, 32, 23, 40, 24, 49, 49, 49, 32, 7, 40, 6, 50, 50, 50, 32, 20, 19, 21, 13, 13, 13, 32, 32, 35, 21, 32, 32, 32, 32, 22, 21, 35, 51, 51, 51, 32, 25, 37, 26, 52, 52, 52, 32, 37, 8, 9, 15, 15, 15, 32, 25, 24, 8, 16, 16, 16, 32, 37, 9, 36, 20, 20, 20, 32, 38, 33, 39, 19, 19, 19, 32, 22, 35, 29, 18, 18, 18, 32, 40, 39, 35, 19, 19, 19, 32, 29, 34, 30, 20, 20, 20, 32, 30, 33, 17, 21, 21, 21, 32, 27, 26, 38, 22, 22, 22, 32, 28, 27, 39, 53, 53, 53, 32, 23, 28, 40, 54, 54, 54, 32, 33, 38, 36, 17, 17, 17, 32, 42, 6, 50, 25, 25, 25, 32, 40, 35, 6, 16, 16, 16, 32, 13, 9, 49, 27, 27, 27, 32, 41, 43, 42, 19, 19, 19, 32, 45, 47, 46, 28, 28, 28, 32, 47, 43, 41, 19, 19, 19, 32, 44, 47, 45, 28, 28, 28, 32, 42, 48, 41, 17, 17, 17, 32, 46, 49, 45, 55, 55, 55, 32, 50, 48, 42, 55, 55, 55, 32, 48, 50, 46, 56, 56, 56, 32, 43, 44, 7, 34, 34, 34, 32, 16, 12, 52, 57, 57, 57, 32, 46, 51, 48, 58, 58, 58, 32, 56, 72, 53, 59, 59, 59, 32, 72, 55, 54, 60, 60, 60, 32, 62, 56, 53, 61, 61, 61, 32, 57, 59, 58, 62, 62, 62, 32, 61, 56, 62, 28, 28, 28, 32, 57, 60, 59, 19, 19, 19, 32, 61, 57, 56, 17, 17, 17, 32, 66, 63, 53, 17, 17, 17, 32, 64, 58, 59, 17, 17, 17, 32, 53, 63, 62, 17, 17, 17, 32, 64, 65, 58, 19, 19, 19, 32, 66, 64, 63, 17, 17, 17, 32, 43, 76, 60, 50, 50, 50, 32, 76, 43, 42, 50, 50, 50, 32, 56, 57, 55, 13, 13, 13, 32, 58, 71, 57, 63, 63, 63, 32, 68, 71, 67, 64, 64, 64, 32, 73, 61, 62, 65, 65, 65, 32, 61, 73, 44, 66, 66, 66, 32, 61, 44, 60, 34, 34, 34, 32, 54, 45, 72, 16, 16, 16, 32, 74, 75, 69, 45, 45, 45, 32, 58, 65, 71, 67, 67, 67, 32, 76, 71, 75, 45, 45, 45, 32, 65, 66, 70, 68, 68, 68, 32, 66, 53, 69, 38, 38, 38, 32, 63, 74, 62, 22, 22, 22, 32, 64, 75, 63, 23, 23, 23, 32, 59, 76, 64, 39, 39, 39, 32, 69, 72, 74, 48, 48, 48, 32, 14, 13, 50, 69, 69, 69, 32, 67, 71, 42, 70, 70, 70, 32, 44, 45, 8, 66, 66, 66, 32, 16, 52, 15, 20, 20, 20, 32, 15, 51, 10, 71, 71, 71, 32, 11, 10, 47, 43, 43, 43, 32, 5, 11, 41, 44, 44, 44, 32, 78, 80, 77, 11, 11, 11, 32, 83, 85, 82, 11, 11, 11],
            normals: [-1, 0, 0, .447214, -4.65248e-8, -.894427, .447214, 3.5216e-8, .894427, .447214, -.894427, 7.0432e-8, .447214, .894427, -1.40864e-7, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, .5, -.866025, -.840128, .542389, 0, 0, -.512329, -.858789, -1, 0, 0, 0, .5, -.866026, 0, -1, 5.96046e-8, -3.81715e-8, -.512329, .858789, 0, .5, .866025, 0, 1, 0, 1, 0, 0, 0, .499999, .866026, 1, 0, 0, 0, 1, 0, 0, .499999, -.866026, 0, -.5, .866025, 0, -1, 0, 0, -.5, -.866025, 0, -.5, -.866025, 7.45058e-8, 1, 3.31125e-7, 0, -.5, .866025, 1, 0, 0, 0, .695667, .718364, .840128, .542389, 0, 0, -.512329, -.858789, 0, -.512329, .858789, 0, .5, .866025, 0, 1, 0, 0, .499999, .866026, -1, 0, 0, 0, 1, 0, 0, .499999, -.866026, 0, -.5, -.866025, 0, -1, 0, 0, .5, .866025, 0, .695667, -.718364, 0, 0, -1, 0, -1, 3.97364e-8, -1, 0, 0, -1, 0, 0, -.840128, .542389, 0, -1, 0, 0, 0, .5, -.866025, 0, .5, -.866025, 0, -.512329, .858789, 0, .5, .866025, 0, -1, 0, 0, -.5, -.866025, 1, 0, 0, 1, 0, 0, 0, .695667, .718364, .840128, .542389, 0, 0, -.512329, -.858789, 0, -.512329, -.858789, 1, 0, 0, 1, 0, 0, 0, -.512329, .858789, 3.81715e-8, -.512329, .858789, 0, .5, .866025, 0, .5, .866025, 0, .499999, .866026, 0, 1, 0, 0, -1, 0, -7.45058e-8, 1, 3.31125e-7, 0, .695667, -.718364],
            metadata: {
                normals: 72,
                vertices: 87,
                uvs: 0,
                type: "Geometry",
                version: 3,
                generator: "io_three",
                faces: 166
            },
            uvs: [],
            vertices: [-1.80358, .443795, .378464, -1.80358, 1.20072, .378464, -1.80358, .443795, -.378464, -1.80358, 1.20072, -.378465, -1.04666, .822259, -3.59421e-8, -1, 5.96046e-8, 1.5, -1, .838123, .819993, -1, .127988, .409997, -1, .127988, -.409997, -1, .838123, -.819993, -1, 1.70415, -1.5, -1, -5.96046e-8, -1.5, -1, 1.70415, 1.5, -1, 1.54826, -.409997, -1, 1.54826, .409997, -.858596, 1.92318, -1.28789, -.858596, 1.92318, 1.28789, -2, .838123, -1, -1, .838123, -1, -1, 0, -.5, -2, 0, -.5, -2, 5.96046e-8, .5, -2, .838123, 1, -2, .838123, .819993, -2, .127988, .409997, -2, .127988, -.409997, -2, .838123, -.819993, -2, 1.54826, -.409997, -2, 1.54826, .409997, -2, 1.70415, .5, -2, 1.70415, -.5, -1, .838123, 1, -1, 5.96046e-8, .5, -1.8, 1.70415, -.5, -1.8, 1.70415, .5, -1.8, .838123, 1, -1.8, .838123, -1, -1.8, .838123, -.819993, -1.8, 1.54826, -.409997, -1.8, 1.54826, .409997, -1.8, .838123, .819993, 1, 5.96046e-8, 1.5, 1, .838123, .819993, 1, .127988, .409997, 1, .127988, -.409997, 1, .838123, -.819993, 1, 1.70415, -1.5, 1, -5.96046e-8, -1.5, 1, 1.70415, 1.5, 1, 1.54826, -.409997, 1, 1.54826, .409997, .858596, 1.92318, -1.28789, .858596, 1.92318, 1.28789, 2, .838123, -1, 1, .838123, -1, 1, 0, -.5, 2, 0, -.5, 2, 5.96046e-8, .5, 2, .838123, 1, 2, .838123, .819993, 2, .127988, .409997, 2, .127988, -.409997, 2, .838123, -.819993, 2, 1.54826, -.409997, 2, 1.54826, .409997, 2, 1.70415, .5, 2, 1.70415, -.5, 1, .838123, 1, 1, 5.96046e-8, .5, 1.8, 1.70415, -.5, 1.8, 1.70415, .5, 1.8, .838123, 1, 1.8, .838123, -1, 1.8, .838123, -.819993, 1.8, 1.54826, -.409997, 1.8, 1.54826, .409997, 1.8, .838123, .819993, -.361889, .443795, .378464, -.361889, 1.20072, .378464, -.361889, .443795, -.378464, -.361889, 1.20072, -.378465, .39504, .822259, -3.59421e-8, 1.15755, .443795, .378464, 1.15755, 1.20072, .378464, 1.15755, .443795, -.378464, 1.15755, 1.20072, -.378465, 1.91447, .822259, -3.59421e-8]
        },
        timeseriesdb: {
            id: "timeseriesdb",
            primaryColorFaces: [10, 14, 15, 17, 18, 30, 31, 32, 33, 34, 46, 50, 51, 53, 54, 78, 79, 80, 81, 82],
            imagePlanePosition: {
                y: 2.5,
                x: 5,
                z: -.2
            },
            imagePlaneRotation: {
                x: -1.57079632,
                y: 1.57079632,
                z: 1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .35,
            faces: [32, 1, 3, 2, 0, 0, 0, 32, 5, 7, 6, 1, 1, 1, 32, 7, 9, 8, 2, 2, 2, 32, 10, 11, 1, 3, 3, 3, 32, 9, 11, 10, 4, 4, 4, 32, 13, 15, 14, 5, 5, 5, 32, 17, 19, 18, 6, 6, 6, 32, 19, 21, 20, 7, 7, 7, 32, 22, 23, 13, 8, 8, 8, 32, 21, 23, 22, 9, 9, 9, 32, 25, 27, 26, 10, 10, 10, 32, 39, 41, 40, 11, 11, 11, 32, 3, 5, 4, 12, 12, 12, 32, 40, 50, 49, 13, 13, 13, 32, 29, 31, 30, 14, 14, 14, 32, 31, 33, 32, 15, 15, 15, 32, 15, 17, 16, 12, 12, 12, 32, 35, 25, 24, 16, 16, 16, 32, 33, 35, 34, 17, 17, 17, 32, 37, 39, 38, 18, 18, 18, 32, 2, 6, 10, 19, 19, 19, 32, 1, 9, 5, 20, 20, 20, 32, 13, 21, 17, 21, 21, 21, 32, 41, 43, 42, 22, 22, 22, 32, 43, 45, 44, 23, 23, 23, 32, 14, 18, 22, 24, 24, 24, 32, 47, 37, 36, 25, 25, 25, 32, 45, 47, 46, 26, 26, 26, 32, 37, 45, 41, 27, 27, 27, 32, 49, 51, 48, 28, 28, 28, 32, 44, 52, 51, 29, 29, 29, 32, 46, 53, 52, 30, 30, 30, 32, 36, 38, 49, 31, 31, 31, 32, 42, 51, 50, 32, 32, 32, 32, 46, 36, 48, 33, 33, 33, 32, 27, 29, 28, 34, 34, 34, 32, 0, 1, 2, 35, 35, 35, 32, 4, 5, 6, 1, 1, 1, 32, 6, 7, 8, 36, 36, 36, 32, 0, 10, 1, 25, 25, 25, 32, 8, 9, 10, 37, 37, 37, 32, 12, 13, 14, 38, 38, 38, 32, 16, 17, 18, 39, 39, 39, 32, 18, 19, 20, 23, 23, 23, 32, 12, 22, 13, 40, 40, 40, 32, 20, 21, 22, 41, 41, 41, 32, 24, 25, 26, 42, 42, 42, 32, 38, 39, 40, 11, 11, 11, 32, 2, 3, 4, 43, 43, 43, 32, 38, 40, 49, 44, 44, 44, 32, 28, 29, 30, 14, 14, 14, 32, 30, 31, 32, 15, 15, 15, 32, 14, 15, 16, 45, 45, 45, 32, 34, 35, 24, 16, 16, 16, 32, 32, 33, 34, 46, 46, 46, 32, 36, 37, 38, 18, 18, 18, 32, 10, 0, 2, 47, 47, 47, 32, 2, 4, 6, 48, 48, 48, 32, 6, 8, 10, 49, 49, 49, 32, 5, 3, 1, 50, 50, 50, 32, 1, 11, 9, 51, 51, 51, 32, 9, 7, 5, 52, 52, 52, 32, 17, 15, 13, 53, 53, 53, 32, 13, 23, 21, 54, 54, 54, 32, 21, 19, 17, 55, 55, 55, 32, 40, 41, 42, 22, 22, 22, 32, 42, 43, 44, 56, 56, 56, 32, 22, 12, 14, 57, 57, 57, 32, 14, 16, 18, 58, 58, 58, 32, 18, 20, 22, 59, 59, 59, 32, 46, 47, 36, 60, 60, 60, 32, 44, 45, 46, 61, 61, 61, 32, 41, 39, 37, 62, 62, 62, 32, 37, 47, 45, 63, 63, 63, 32, 45, 43, 41, 64, 64, 64, 32, 53, 48, 51, 65, 65, 65, 32, 49, 50, 51, 66, 66, 66, 32, 51, 52, 53, 67, 67, 67, 32, 42, 44, 51, 68, 68, 68, 32, 44, 46, 52, 69, 69, 69, 32, 48, 36, 49, 70, 70, 70, 32, 40, 42, 50, 71, 71, 71, 32, 53, 46, 48, 72, 72, 72, 32, 26, 27, 28, 73, 73, 73],
            vertices: [.165024, .682771, .924, -.434976, .682771, .924, .165024, -.0201724, .924, -.434976, -.0201724, .924, .165024, -.0201725, -.924, -.434976, -.0201725, -.924, .165024, .682771, -.924, -.434976, .682771, -.924, .165024, 1.17983, -.382733, -.434976, 1.17983, -.382733, .165024, 1.17983, .382733, -.434976, 1.17983, .382733, -.634976, .682771, .924, -1.23498, .682771, .924, -.634976, -.0201724, .924, -1.23498, -.0201724, .924, -.634976, -.0201725, -.924, -1.23498, -.0201725, -.924, -.634976, .682771, -.924, -1.23498, .682771, -.924, -.634976, 1.17983, -.382733, -1.23498, 1.17983, -.382733, -.634976, 1.17983, .382733, -1.23498, 1.17983, .382733, .877405, .612477, .739104, -1.18188, .612477, .739104, .877405, 0, .739104, -1.18188, 0, .739104, .877405, -5.96046e-8, -.739104, -1.18188, -5.96046e-8, -.739103, .877405, .612477, -.739104, -1.18188, .612477, -.739103, .877405, 1.01012, -.306147, -1.18188, 1.01012, -.306147, .877405, 1.01012, .306147, -1.18188, 1.01012, .306147, .965024, .682771, .924, .365024, .682771, .924, .965024, -.0201724, .924, .365024, -.0201724, .924, .965024, -.0201725, -.924, .365024, -.0201725, -.924, .965024, .682771, -.924, .365024, .682771, -.924, .965024, 1.17983, -.382733, .365024, 1.17983, -.382733, .965024, 1.17983, .382733, .365024, 1.17983, .382733, 1.11433, .672946, .79172, 1.11433, 5.96046e-8, .79172, 1.11433, -5.96046e-8, -.79172, 1.11433, .672946, -.79172, 1.11433, 1.09884, -.327941, 1.11433, 1.09884, .327941],
            uvs: [],
            normals: [9.93411e-8, 4.21171e-15, 1, -9.93411e-8, 1.69586e-7, -1, -3.35965e-8, .736547, -.676386, 3.35965e-8, .736547, .676386, -1.54708e-14, 1, -3.11468e-7, 9.93411e-8, 0, 1, -9.93411e-8, 1.69586e-7, -1, -6.7193e-8, .736547, -.676386, 6.7193e-8, .736547, .676386, -3.09416e-14, 1, -3.11468e-7, 8.68332e-8, 0, 1, 0, -1, 6.45072e-8, 6.40821e-15, -1, 6.45072e-8, .133894, -.990996, 5.44468e-8, -8.68332e-8, 9.73174e-8, -1, -5.87369e-8, .736503, -.676434, 5.87369e-8, .736503, .676434, -3.38116e-14, 1, -3.89386e-7, 0, 0, 1, 1, 7.60123e-8, -5.17204e-8, -1, -1.39241e-8, 8.59305e-8, -1, 4.96706e-8, 1.10121e-7, 0, 1.69586e-7, -1, -6.71929e-8, .736547, -.676386, 1, 1.09628e-7, -8.73139e-8, 0, .736547, .676386, -3.09416e-14, 1, -3.11468e-7, -1, 7.27409e-9, 9.39939e-8, 1, 0, -1.5057e-7, .543651, .618192, -.567699, .476789, .879018, 0, .663148, 0, .748489, .663148, 1.32591e-7, -.748489, .543651, .618192, .567699, 3.50131e-15, -1, 4.03223e-8, 9.93411e-8, 0, 1, -6.71929e-8, .736547, -.676386, -1.54708e-14, 1, -3.11468e-7, 9.93411e-8, 1.68468e-14, 1, -9.93411e-8, 1.69586e-7, -1, 0, .736547, .676386, -3.09416e-14, 1, -3.11468e-7, 8.68332e-8, 0, 1, 6.40821e-15, -1, 6.45072e-8, .133894, -.990996, 5.52893e-8, 6.40821e-15, -1, 6.45072e-8, -3.38116e-14, 1, -3.89386e-7, 1, 0, -2.20241e-7, 1, 1.36744e-14, -8.0634e-8, 1, 1.44751e-7, -7.78671e-8, -1, -4.23965e-8, 9.67608e-8, -1, -3.51223e-8, 7.78671e-8, -1, -4.23965e-8, 1.49054e-7, -1, 0, 1.29014e-7, -1, -2.3983e-7, 7.46996e-14, -1, -3.73498e-14, 2.20241e-7, 0, .736547, -.676386, 1, 1.69586e-7, 4.56135e-8, 1, 1.69586e-7, -6.45072e-8, 1, 2.89501e-7, -1.55734e-7, 6.71929e-8, .736547, .676386, -3.09416e-14, 1, -3.11468e-7, -1, 0, 9.67608e-8, -1, -3.51223e-8, 7.78671e-8, -1, -1.86749e-14, 1.10121e-7, 1, 1.15939e-7, -1.5057e-7, 1, 2.66728e-14, -1.5057e-7, 1, -2.79901e-7, 0, .543651, .618192, -.567699, .476788, .879018, -3.48039e-7, .663148, 0, .748489, .663148, 1.26933e-7, -.748489, .543652, .618192, .567698, 3.50131e-15, -1, 4.03223e-8],
            metadata: {
                faces: 84,
                generator: "io_three",
                type: "Geometry",
                version: 3,
                vertices: 54,
                uvs: 0,
                normals: 74
            }
        },
        "generic-triangle": {
            id: "generic-triangle",
            primaryColorFaces: [],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlanePosition: {
                x: -2.5,
                y: 4.01
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            imagePlaneScale: .5,
            normals: [.447213, -6.664e-8, .894427, -5.32907e-15, -1, 2.98023e-8, -1, -3.35276e-7, -2.23517e-7, .447214, 5.9976e-7, -.894427, 1.95399e-14, 1, -5.96047e-8],
            vertices: [1, 0, 2.98023e-8, -1, 2.98023e-8, 1, -1, -2.98023e-8, -1, 1, .8, 5.31275e-7, -1, .8, 1, -1, .8, -1],
            faces: [33, 0, 3, 4, 1, 0, 0, 0, 0, 32, 0, 1, 2, 1, 1, 1, 33, 1, 4, 5, 2, 2, 2, 2, 2, 33, 3, 0, 2, 5, 3, 3, 3, 3, 32, 3, 5, 4, 4, 4, 4],
            metadata: {
                normals: 5,
                version: 3,
                generator: "io_three",
                faces: 5,
                vertices: 6,
                type: "Geometry",
                uvs: 0
            },
            uvs: []
        },
        "analytics-surface-magnifying-glass": {
            id: "analytics-surface-magnifying-glass",
            primaryColorFaces: [5, 4, 3, 2, 0, 1, 6, 7, 18, 19, 20, 21, 11, 10, 17, 16],
            secondaryColorFaces: [118, 117, 116, 115, 113, 114, 112, 111],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            metadata: {
                normals: 95,
                type: "Geometry",
                version: 3,
                uvs: 0,
                vertices: 259,
                generator: "io_three",
                faces: 239
            },
            normals: [.270598, .92388, .270598, .653281, .382684, .653281, .653281, -.382684, .653281, .270598, -.923879, .270598, -.270598, -.92388, -.270598, -.653282, -.382683, -.653282, -.707107, 0, .707107, -.707106, -4.30082e-7, .707107, -.707106, 4.30082e-7, .707107, -.707106, -142465e-11, .707108, -.707107, 2.89488e-7, .707107, -.707107, -2.89488e-7, .707107, -.270598, .92388, -.270598, -.653282, .382683, -.653282, .707107, -3.76323e-7, -.707107, .707107, 3.02402e-7, -.707107, .707107, -4.83844e-7, -.707107, .707107, -5.37604e-8, -.707107, .707107, 3.02696e-7, -.707107, .707107, -5.15227e-8, -.707107, .92388, 0, -.382683, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, .382683, 0, -.92388, 0, 1, 0, -2.47309e-7, 1, -2.47309e-7, -1.53252e-13, 1, -4.21383e-7, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, .92388, 0, .382683, 0, -1, 0, 0, -1, 0, -.92388, 0, -.382683, -.92388, 0, .382683, -.382684, 0, .92388, .382684, 0, .923879, -.382684, 0, -.923879, 0, 1, 0, 4.59757e-13, 1, -4.21383e-7, 2.47309e-7, 1, -2.47309e-7, -.382683, 7.67696e-8, .92388, .382683, 0, .92388, -.382683, 0, -.92388, .382683, 3.75056e-7, -.92388, -.92388, 0, .382683, -.923879, 0, -.382684, .923879, 0, .382683, .92388, 3.75056e-7, -.382683, -.707107, 0, .707107, -.707107, 6.49665e-8, .707107, -.60404, -.38181, -.699541, -.238426, -.97107, -.0132646, .0132648, -.97107, .238426, .699541, -.381809, .60404, .690209, .158141, .706118, .243186, .923195, .297609, -.178566, .967589, .178566, -.297609, .923195, -.243186, -.706118, .158142, -.690209, -1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, -1, 4.96705e-8, 0, 1, -4.96705e-8, -1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, -1, 7.45058e-8, 0, 1, -1.49012e-7, 0, -1, 7.45058e-8, 0, 1, -1.49012e-7, 0, -4.02606e-8, -1, 0, 4.02606e-8, 1, 0, -6.55973e-8, -1, 0, 6.55973e-8, 1, 0, 1, -1.49012e-7, 0, -5.05483e-8, -1, 0, 5.05483e-8, 1, 0, -4.74392e-8, -1, 0, 4.74392e-8, 1, 0, -4.2792e-8, -1, 0, 4.2792e-8, 1, 0, -1, 7.45058e-8, 0, -4.79688e-8, -1, 0, 1, -1.49012e-7, 0, -4.51601e-8, -1, 0, -4.04259e-8, -1, 0, -3.72529e-8, -1, 0, 1, 0],
            vertices: [-.00732851, 1.24047, -.0276266, -.689016, 1.24047, .654061, .0288234, 1.21929, .00852534, -.652864, 1.21929, .690213, .0437981, 1.16817, .0235, -.63789, 1.16817, .705188, .0288234, 1.11704, .00852532, -.652864, 1.11704, .690213, -.00732851, 1.09586, -.0276266, -.689016, 1.09586, .654061, -.0434805, 1.11704, -.0637786, -.725168, 1.11704, .617909, -.0584551, 1.16817, -.0787532, -.740143, 1.16817, .602935, -.0434805, 1.21929, -.0637786, -.725168, 1.21929, .617909, .74153, 1.12762, -.776486, .74153, 1.20871, -.776486, .882713, 1.20871, -.435642, .882713, 1.12762, -.435642, .683587, 1.12762, -.152741, .800768, 1.12762, -.435642, .683587, 1.12762, -.718542, .400687, 1.12762, -.835723, .117786, 1.12762, -.718542, .0598428, 1.12762, -.776486, .400687, 1.12762, -.917668, .74153, 1.12762, -.094798, .400687, 1.20871, -.917668, .124266, 1.20871, -.068113, .400687, 1.20871, .0463842, .74153, 1.20871, -.094798, .683587, 1.20871, -.718542, .800768, 1.20871, -.435642, .683587, 1.20871, -.152741, .400687, 1.20871, -.0355603, .117786, 1.20871, -.152741, .0787119, 1.20871, -.113667, .0331579, 1.12762, -.159221, -.0813393, 1.12762, -.435642, 60513e-8, 1.12762, -.435642, .117786, 1.12762, -.152741, .400687, 1.12762, -.0355603, .400687, 1.12762, .0463842, .124266, 1.12762, -.068113, .400687, 1.20871, -.835723, .117786, 1.20871, -.718542, .0598428, 1.20871, -.776486, 60513e-8, 1.20871, -.435642, -.0813393, 1.20871, -.435642, .0331579, 1.20871, -.159221, -1.2, .00272977, 1.2, -1.2, .236098, 1.2, -1.2, .00272965, -1.2, -1.2, .236098, -1.2, 1.2, .00272977, 1.2, 1.2, .236098, 1.2, 1.2, .00272965, -1.2, 1.2, .236098, -1.2, -1.2, .328789, -.797843, -1.2, .548789, -.797843, -1.2, .328789, -1.19784, -1.2, .548789, -1.19784, -.8, .328789, -.797843, -.8, .548789, -.797843, -.8, .328789, -1.19784, -.8, .548789, -1.19784, -.7, .328789, -.797843, -.7, .630626, -.797843, -.7, .328789, -1.19784, -.7, .630626, -1.19784, -.3, .328789, -.797843, -.3, .630626, -.797843, -.3, .328789, -1.19784, -.3, .630626, -1.19784, -.2, .328789, -.797843, -.2, .698907, -.797843, -.2, .328789, -1.19784, -.2, .698907, -1.19784, .2, .328789, -.797843, .2, .698907, -.797843, .2, .328789, -1.19784, .2, .698907, -1.19784, .3, .328789, -.797843, .3, .757586, -.797843, .3, .328789, -1.19784, .3, .757586, -1.19784, .7, .328789, -.797843, .7, .757586, -.797843, .7, .328789, -1.19784, .7, .757586, -1.19784, .8, .328789, -.797843, .8, .866399, -.797843, .8, .328789, -1.19784, .8, .866399, -1.19784, 1.2, .328789, -.797843, 1.2, .866399, -.797843, 1.2, .328789, -1.19784, 1.2, .866399, -1.19784, -1.2, .328789, -.297843, -1.2, .588789, -.297843, -1.2, .328789, -.697843, -1.2, .588789, -.697843, -.8, .328789, -.297843, -.8, .588789, -.297843, -.8, .328789, -.697843, -.8, .588789, -.697843, -.7, .328789, -.297843, -.7, .698907, -.297843, -.7, .328789, -.697843, -.7, .698907, -.697843, -.3, .328789, -.297843, -.3, .698907, -.297843, -.3, .328789, -.697843, -.3, .698907, -.697843, -.2, .328789, -.297843, -.2, .757586, -.297843, -.2, .328789, -.697843, -.2, .757586, -.697843, .2, .328789, -.297843, .2, .757586, -.297843, .2, .328789, -.697843, .2, .757586, -.697843, .3, .328789, -.297843, .3, .822143, -.297843, .3, .328789, -.697843, .3, .822143, -.697843, .7, .328789, -.297843, .7, .822143, -.297843, .7, .328789, -.697843, .7, .822143, -.697843, .8, .328789, -.297843, .8, .896711, -.297843, .8, .328789, -.697843, .8, .896711, -.697843, 1.2, .328789, -.297843, 1.2, .896711, -.297843, 1.2, .328789, -.697843, 1.2, .896711, -.697843, -1.2, .328789, .191373, -1.2, .698907, .191373, -1.2, .328789, -.208627, -1.2, .698907, -.208627, -.8, .328789, .191373, -.8, .698907, .191373, -.8, .328789, -.208627, -.8, .698907, -.208627, -.7, .328789, .191373, -.7, .783111, .191373, -.7, .328789, -.208627, -.7, .783111, -.208627, -.3, .328789, .191373, -.3, .783111, .191373, -.3, .328789, -.208627, -.3, .783111, -.208627, -.2, .328789, .191373, -.2, .91837, .191373, -.2, .328789, -.208627, -.2, .91837, -.208627, .2, .328789, .191373, .2, .91837, .191373, .2, .328789, -.208627, .2, .91837, -.208627, .3, .328789, .191373, .3, .957011, .191373, .3, .328789, -.208627, .3, .957011, -.208627, .7, .328789, .191373, .7, .957011, .191373, .7, .328789, -.208627, .7, .957011, -.208627, .8, .328789, .191373, .8, 1.02523, .191373, .8, .328789, -.208627, .8, 1.02523, -.208627, 1.2, .328789, .191373, 1.2, 1.02523, .191373, 1.2, .328789, -.208627, 1.2, 1.02523, -.208627, -1.2, .328789, .702157, -1.2, .887282, .702157, -1.2, .328789, .302157, -1.2, .887282, .302157, -.8, .328789, .702157, -.8, .887282, .702157, -.8, .328789, .302157, -.8, .887282, .302157, -.7, .328789, .702157, -.7, .950074, .702157, -.7, .328789, .302157, -.7, .950074, .302157, -.3, .328789, .702157, -.3, .950074, .702157, -.3, .328789, .302157, -.3, .950074, .302157, -.2, .328789, .702157, -.2, .988715, .702157, -.2, .328789, .302157, -.2, .988715, .302157, .2, .328789, .702157, .2, .988715, .702157, .2, .328789, .302157, .2, .988715, .302157, .3, .328789, .702157, .3, 1.066, .702157, .3, .328789, .302157, .3, 1.066, .302157, .7, .328789, .702157, .7, 1.066, .702157, .7, .328789, .302157, .7, 1.066, .302157, .8, .328789, .702157, .8, 1.12879, .702157, .8, .328789, .302157, .8, 1.12879, .302157, 1.2, .328789, .702157, 1.2, 1.12879, .702157, 1.2, .328789, .302157, 1.2, 1.12879, .302157, -1.2, .328789, 1.20216, -1.2, .950074, 1.20216, -1.2, .328789, .802157, -1.2, .950074, .802157, -.8, .328789, 1.20216, -.8, .950074, 1.20216, -.8, .328789, .802157, -.8, .950074, .802157, -.7, .328789, 1.20216, -.7, .988715, 1.20216, -.7, .328789, .802157, -.7, .988715, .802157, -.3, .328789, 1.20216, -.3, .988715, 1.20216, -.3, .328789, .802157, -.3, .988715, .802157, -.2, .328789, 1.20216, -.2, 1.066, 1.20216, -.2, .328789, .802157, -.2, 1.066, .802157, .2, .328789, 1.20216, .2, 1.066, 1.20216, .2, .328789, .802157, .2, 1.066, .802157, .3, .328789, 1.20216, .3, 1.12879, 1.20216, .3, .328789, .802157, .3, 1.12879, .802157, .7, .328789, 1.20216, .7, 1.12879, 1.20216, .7, .328789, .802157, .7, 1.12879, .802157, .8, .328789, 1.20216, .8, 1.12879, 1.20216, .8, .328789, .802157, .8, 1.12879, .802157, 1.2, .328789, 1.20216, 1.2, 1.12879, 1.20216, 1.2, .328789, .802157, 1.2, 1.12879, .802157],
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 2, 3, 5, 4, 1, 1, 1, 1, 33, 4, 5, 7, 6, 2, 2, 2, 2, 33, 6, 7, 9, 8, 3, 3, 3, 3, 33, 8, 9, 11, 10, 4, 4, 4, 4, 33, 10, 11, 13, 12, 5, 5, 5, 5, 32, 5, 3, 1, 6, 6, 6, 32, 1, 15, 13, 7, 7, 7, 32, 13, 11, 9, 8, 8, 8, 32, 9, 7, 5, 9, 9, 9, 32, 5, 1, 13, 10, 10, 10, 32, 13, 9, 5, 11, 11, 11, 33, 1, 0, 14, 15, 12, 12, 12, 12, 33, 12, 13, 15, 14, 13, 13, 13, 13, 32, 14, 0, 2, 14, 14, 14, 32, 2, 4, 6, 15, 15, 15, 32, 6, 8, 10, 16, 16, 16, 32, 10, 12, 14, 17, 17, 17, 32, 14, 2, 6, 18, 18, 18, 32, 6, 10, 14, 19, 19, 19, 33, 16, 17, 18, 19, 20, 20, 20, 20, 32, 27, 20, 21, 21, 21, 21, 32, 23, 24, 25, 22, 22, 22, 32, 19, 27, 21, 21, 21, 21, 32, 23, 25, 26, 22, 22, 22, 32, 19, 21, 22, 22, 22, 22, 32, 22, 23, 26, 22, 22, 22, 32, 16, 19, 22, 23, 23, 23, 32, 22, 26, 16, 24, 24, 24, 33, 26, 28, 17, 16, 25, 25, 25, 25, 32, 37, 29, 30, 26, 26, 26, 32, 18, 17, 32, 27, 27, 27, 32, 36, 37, 30, 26, 26, 26, 32, 18, 32, 33, 28, 28, 28, 32, 35, 36, 30, 29, 29, 29, 32, 31, 18, 33, 30, 30, 30, 32, 35, 30, 31, 31, 31, 31, 32, 31, 33, 34, 32, 32, 32, 32, 31, 34, 35, 29, 29, 29, 33, 19, 18, 31, 27, 33, 33, 33, 33, 32, 44, 38, 39, 22, 22, 22, 32, 39, 25, 24, 24, 24, 24, 32, 42, 20, 27, 24, 24, 24, 32, 39, 24, 40, 34, 34, 34, 32, 42, 27, 43, 35, 35, 35, 32, 39, 40, 41, 22, 22, 22, 32, 41, 42, 43, 23, 23, 23, 32, 44, 39, 41, 24, 24, 24, 32, 41, 43, 44, 23, 23, 23, 33, 21, 20, 34, 33, 36, 36, 36, 36, 33, 22, 21, 33, 32, 37, 37, 37, 37, 33, 23, 22, 32, 45, 38, 38, 38, 38, 33, 24, 23, 45, 46, 39, 39, 39, 39, 33, 25, 47, 28, 26, 40, 40, 40, 40, 32, 50, 37, 36, 26, 26, 26, 32, 45, 32, 17, 26, 26, 26, 32, 50, 36, 48, 41, 41, 41, 32, 45, 17, 28, 41, 41, 41, 32, 49, 50, 48, 41, 41, 41, 32, 46, 45, 28, 41, 41, 41, 32, 49, 48, 46, 42, 42, 42, 32, 46, 28, 47, 30, 30, 30, 32, 46, 47, 49, 43, 43, 43, 33, 44, 43, 30, 29, 44, 44, 44, 44, 33, 27, 31, 30, 43, 45, 45, 45, 45, 33, 20, 42, 35, 34, 46, 46, 46, 46, 33, 42, 41, 36, 35, 47, 47, 47, 47, 33, 50, 49, 39, 38, 48, 48, 48, 48, 33, 39, 49, 47, 25, 49, 49, 49, 49, 33, 40, 24, 46, 48, 50, 50, 50, 50, 33, 41, 40, 48, 36, 51, 51, 51, 51, 32, 29, 37, 50, 22, 22, 22, 32, 50, 38, 44, 52, 52, 52, 32, 50, 44, 29, 53, 53, 53, 32, 2, 29, 4, 54, 54, 54, 33, 0, 37, 29, 2, 55, 55, 55, 55, 33, 37, 0, 14, 50, 56, 56, 56, 56, 32, 12, 50, 14, 57, 57, 57, 33, 10, 38, 50, 12, 58, 58, 58, 58, 32, 8, 38, 10, 59, 59, 59, 32, 38, 8, 44, 60, 60, 60, 32, 6, 44, 8, 61, 61, 61, 33, 4, 29, 44, 6, 62, 62, 62, 62, 33, 52, 54, 53, 51, 63, 63, 63, 63, 33, 54, 58, 57, 53, 64, 64, 64, 64, 33, 58, 56, 55, 57, 65, 65, 65, 65, 33, 56, 52, 51, 55, 66, 66, 66, 66, 33, 51, 53, 57, 55, 67, 67, 67, 67, 33, 56, 58, 54, 52, 68, 68, 68, 68, 33, 60, 62, 61, 59, 69, 69, 69, 69, 33, 62, 66, 65, 61, 70, 70, 70, 70, 33, 66, 64, 63, 65, 71, 71, 71, 71, 33, 64, 60, 59, 63, 72, 72, 72, 72, 33, 59, 61, 65, 63, 73, 73, 73, 73, 33, 64, 66, 62, 60, 74, 74, 74, 74, 33, 68, 70, 69, 67, 63, 63, 63, 63, 33, 70, 74, 73, 69, 64, 64, 64, 64, 33, 74, 72, 71, 73, 65, 65, 65, 65, 33, 72, 68, 67, 71, 66, 66, 66, 66, 33, 67, 69, 73, 71, 75, 75, 75, 75, 33, 72, 74, 70, 68, 76, 76, 76, 76, 33, 76, 78, 77, 75, 69, 69, 69, 69, 33, 78, 82, 81, 77, 64, 64, 64, 64, 33, 82, 80, 79, 81, 71, 71, 71, 71, 33, 80, 76, 75, 79, 66, 66, 66, 66, 33, 75, 77, 81, 79, 73, 73, 73, 73, 33, 80, 82, 78, 76, 29, 29, 29, 29, 33, 84, 86, 85, 83, 63, 63, 63, 63, 33, 86, 90, 89, 85, 64, 64, 64, 64, 33, 90, 88, 87, 89, 65, 65, 65, 65, 33, 88, 84, 83, 87, 66, 66, 66, 66, 33, 83, 85, 89, 87, 75, 75, 75, 75, 33, 88, 90, 86, 84, 29, 29, 29, 29, 33, 92, 94, 93, 91, 69, 69, 69, 69, 33, 94, 98, 97, 93, 70, 70, 70, 70, 33, 98, 96, 95, 97, 71, 71, 71, 71, 33, 96, 92, 91, 95, 66, 66, 66, 66, 33, 91, 93, 97, 95, 73, 73, 73, 73, 33, 96, 98, 94, 92, 29, 29, 29, 29, 33, 100, 102, 101, 99, 63, 63, 63, 63, 33, 102, 106, 105, 101, 64, 64, 64, 64, 33, 106, 104, 103, 105, 65, 65, 65, 65, 33, 104, 100, 99, 103, 72, 72, 72, 72, 33, 99, 101, 105, 103, 73, 73, 73, 73, 33, 104, 106, 102, 100, 29, 29, 29, 29, 33, 108, 110, 109, 107, 69, 69, 69, 69, 33, 110, 114, 113, 109, 70, 70, 70, 70, 33, 114, 112, 111, 113, 71, 71, 71, 71, 33, 112, 108, 107, 111, 66, 66, 66, 66, 33, 107, 109, 113, 111, 75, 75, 75, 75, 33, 112, 114, 110, 108, 29, 29, 29, 29, 33, 116, 118, 117, 115, 63, 63, 63, 63, 33, 118, 122, 121, 117, 64, 64, 64, 64, 33, 122, 120, 119, 121, 65, 65, 65, 65, 33, 120, 116, 115, 119, 66, 66, 66, 66, 33, 115, 117, 121, 119, 73, 73, 73, 73, 33, 120, 122, 118, 116, 29, 29, 29, 29, 33, 124, 126, 125, 123, 63, 63, 63, 63, 33, 126, 130, 129, 125, 64, 64, 64, 64, 33, 130, 128, 127, 129, 65, 65, 65, 65, 33, 128, 124, 123, 127, 66, 66, 66, 66, 33, 123, 125, 129, 127, 75, 75, 75, 75, 33, 128, 130, 126, 124, 76, 76, 76, 76, 33, 132, 134, 133, 131, 63, 63, 63, 63, 33, 134, 138, 137, 133, 70, 70, 70, 70, 33, 138, 136, 135, 137, 65, 65, 65, 65, 33, 136, 132, 131, 135, 72, 72, 72, 72, 33, 131, 133, 137, 135, 73, 73, 73, 73, 33, 136, 138, 134, 132, 74, 74, 74, 74, 33, 140, 142, 141, 139, 69, 69, 69, 69, 33, 142, 146, 145, 141, 77, 77, 77, 77, 33, 146, 144, 143, 145, 71, 71, 71, 71, 33, 144, 140, 139, 143, 78, 78, 78, 78, 33, 139, 141, 145, 143, 24, 24, 24, 24, 33, 144, 146, 142, 140, 74, 74, 74, 74, 33, 148, 150, 149, 147, 63, 63, 63, 63, 33, 150, 154, 153, 149, 79, 79, 79, 79, 33, 154, 152, 151, 153, 65, 65, 65, 65, 33, 152, 148, 147, 151, 80, 80, 80, 80, 33, 147, 149, 153, 151, 24, 24, 24, 24, 33, 152, 154, 150, 148, 81, 81, 81, 81, 33, 156, 158, 157, 155, 63, 63, 63, 63, 33, 158, 162, 161, 157, 82, 82, 82, 82, 33, 162, 160, 159, 161, 65, 65, 65, 65, 33, 160, 156, 155, 159, 83, 83, 83, 83, 33, 155, 157, 161, 159, 24, 24, 24, 24, 33, 160, 162, 158, 156, 29, 29, 29, 29, 33, 164, 166, 165, 163, 63, 63, 63, 63, 33, 166, 170, 169, 165, 84, 84, 84, 84, 33, 170, 168, 167, 169, 65, 65, 65, 65, 33, 168, 164, 163, 167, 85, 85, 85, 85, 33, 163, 165, 169, 167, 24, 24, 24, 24, 33, 168, 170, 166, 164, 29, 29, 29, 29, 33, 172, 174, 173, 171, 63, 63, 63, 63, 33, 174, 178, 177, 173, 86, 86, 86, 86, 33, 178, 176, 175, 177, 65, 65, 65, 65, 33, 176, 172, 171, 175, 87, 87, 87, 87, 33, 171, 173, 177, 175, 24, 24, 24, 24, 33, 176, 178, 174, 172, 29, 29, 29, 29, 33, 180, 182, 181, 179, 63, 63, 63, 63, 33, 182, 186, 185, 181, 64, 64, 64, 64, 33, 186, 184, 183, 185, 65, 65, 65, 65, 33, 184, 180, 179, 183, 66, 66, 66, 66, 33, 179, 181, 185, 183, 88, 88, 88, 88, 33, 184, 186, 182, 180, 81, 81, 81, 81, 33, 188, 190, 189, 187, 63, 63, 63, 63, 33, 190, 194, 193, 189, 89, 89, 89, 89, 33, 194, 192, 191, 193, 65, 65, 65, 65, 33, 192, 188, 187, 191, 66, 66, 66, 66, 33, 187, 189, 193, 191, 88, 88, 88, 88, 33, 192, 194, 190, 188, 90, 90, 90, 90, 33, 196, 198, 197, 195, 63, 63, 63, 63, 33, 198, 202, 201, 197, 91, 91, 91, 91, 33, 202, 200, 199, 201, 65, 65, 65, 65, 33, 200, 196, 195, 199, 66, 66, 66, 66, 33, 195, 197, 201, 199, 88, 88, 88, 88, 33, 200, 202, 198, 196, 90, 90, 90, 90, 33, 204, 206, 205, 203, 63, 63, 63, 63, 33, 206, 210, 209, 205, 92, 92, 92, 92, 33, 210, 208, 207, 209, 65, 65, 65, 65, 33, 208, 204, 203, 207, 66, 66, 66, 66, 33, 203, 205, 209, 207, 88, 88, 88, 88, 33, 208, 210, 206, 204, 29, 29, 29, 29, 33, 212, 214, 213, 211, 69, 69, 69, 69, 33, 214, 218, 217, 213, 93, 93, 93, 93, 33, 218, 216, 215, 217, 71, 71, 71, 71, 33, 216, 212, 211, 215, 66, 66, 66, 66, 33, 211, 213, 217, 215, 88, 88, 88, 88, 33, 216, 218, 214, 212, 94, 94, 94, 94, 33, 220, 222, 221, 219, 63, 63, 63, 63, 33, 222, 226, 225, 221, 64, 64, 64, 64, 33, 226, 224, 223, 225, 65, 65, 65, 65, 33, 224, 220, 219, 223, 66, 66, 66, 66, 33, 219, 221, 225, 223, 73, 73, 73, 73, 33, 224, 226, 222, 220, 29, 29, 29, 29, 33, 228, 230, 229, 227, 63, 63, 63, 63, 33, 230, 234, 233, 229, 64, 64, 64, 64, 33, 234, 232, 231, 233, 65, 65, 65, 65, 33, 232, 228, 227, 231, 66, 66, 66, 66, 33, 227, 229, 233, 231, 75, 75, 75, 75, 33, 232, 234, 230, 228, 76, 76, 76, 76, 33, 236, 238, 237, 235, 63, 63, 63, 63, 33, 238, 242, 241, 237, 64, 64, 64, 64, 33, 242, 240, 239, 241, 65, 65, 65, 65, 33, 240, 236, 235, 239, 66, 66, 66, 66, 33, 235, 237, 241, 239, 73, 73, 73, 73, 33, 240, 242, 238, 236, 29, 29, 29, 29, 33, 244, 246, 245, 243, 63, 63, 63, 63, 33, 246, 250, 249, 245, 64, 64, 64, 64, 33, 250, 248, 247, 249, 65, 65, 65, 65, 33, 248, 244, 243, 247, 66, 66, 66, 66, 33, 243, 245, 249, 247, 75, 75, 75, 75, 33, 248, 250, 246, 244, 29, 29, 29, 29, 33, 252, 254, 253, 251, 63, 63, 63, 63, 33, 254, 258, 257, 253, 64, 64, 64, 64, 33, 258, 256, 255, 257, 65, 65, 65, 65, 33, 256, 252, 251, 255, 66, 66, 66, 66, 33, 251, 253, 257, 255, 73, 73, 73, 73, 33, 256, 258, 254, 252, 29, 29, 29, 29],
            uvs: []
        },
        "analytics-surface": {
            id: "analytics-surface",
            primaryColorFaces: [5, 4, 3, 2, 0, 1, 6, 7],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            metadata: {
                normals: 35,
                type: "Geometry",
                version: 3,
                uvs: 0,
                vertices: 208,
                generator: "io_three",
                faces: 156
            },
            normals: [-1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, -1, 4.96705e-8, 0, 1, -4.96705e-8, -1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, -1, 7.45058e-8, 0, 1, 0, -1, 0, 0, 0, 0, 1, 0, -1, 7.45058e-8, 0, 1, -1.49012e-7, 0, 1, -1.49012e-7, 0, -4.02606e-8, -1, 0, 4.02606e-8, 1, 0, -1, 0, 0, -6.55973e-8, -1, 0, 6.55973e-8, 1, 0, -5.05483e-8, -1, 0, 5.05483e-8, 1, 0, -4.74392e-8, -1, 0, 4.74392e-8, 1, 0, -4.2792e-8, -1, 0, 4.2792e-8, 1, 0, -1, 7.45058e-8, 0, -4.79688e-8, -1, 0, -4.51601e-8, -1, 0, -4.04259e-8, -1, 0, -3.72529e-8, -1, 0, 1, 0, 0, 1, -2.98023e-7],
            vertices: [-1.2, -364602e-9, 1.2, -1.2, .233004, 1.2, -1.2, -364721e-9, -1.2, -1.2, .233004, -1.2, 1.2, -364602e-9, 1.2, 1.2, .233004, 1.2, 1.2, -364721e-9, -1.2, 1.2, .233004, -1.2, -1.2, .325694, -.797843, -1.2, .545694, -.797843, -1.2, .325694, -1.19784, -1.2, .545694, -1.19784, -.8, .325694, -.797843, -.8, .545694, -.797843, -.8, .325694, -1.19784, -.8, .545694, -1.19784, -.7, .325694, -.797843, -.7, .627532, -.797843, -.7, .325694, -1.19784, -.7, .627532, -1.19784, -.3, .325694, -.797843, -.3, .627532, -.797843, -.3, .325694, -1.19784, -.3, .627532, -1.19784, -.2, .325694, -.797843, -.2, .695813, -.797843, -.2, .325694, -1.19784, -.2, .695813, -1.19784, .2, .325694, -.797843, .2, .695813, -.797843, .2, .325694, -1.19784, .2, .695813, -1.19784, .3, .325694, -.797843, .3, .754491, -.797843, .3, .325694, -1.19784, .3, .754491, -1.19784, .7, .325694, -.797843, .7, .754491, -.797843, .7, .325694, -1.19784, .7, .754491, -1.19784, .8, .325694, -.797843, .8, .863304, -.797843, .8, .325694, -1.19784, .8, .863304, -1.19784, 1.2, .325694, -.797843, 1.2, .863304, -.797843, 1.2, .325694, -1.19784, 1.2, .863304, -1.19784, -1.2, .325695, -.297843, -1.2, .585694, -.297843, -1.2, .325694, -.697843, -1.2, .585694, -.697843, -.8, .325695, -.297843, -.8, .585694, -.297843, -.8, .325694, -.697843, -.8, .585694, -.697843, -.7, .325695, -.297843, -.7, .695813, -.297843, -.7, .325694, -.697843, -.7, .695813, -.697843, -.3, .325695, -.297843, -.3, .695813, -.297843, -.3, .325694, -.697843, -.3, .695813, -.697843, -.2, .325695, -.297843, -.2, .754491, -.297843, -.2, .325694, -.697843, -.2, .754491, -.697843, .2, .325695, -.297843, .2, .754491, -.297843, .2, .325694, -.697843, .2, .754491, -.697843, .3, .325695, -.297843, .3, .819049, -.297843, .3, .325694, -.697843, .3, .819049, -.697843, .7, .325695, -.297843, .7, .819049, -.297843, .7, .325694, -.697843, .7, .819049, -.697843, .8, .325695, -.297843, .8, .893617, -.297843, .8, .325694, -.697843, .8, .893617, -.697843, 1.2, .325695, -.297843, 1.2, .893617, -.297843, 1.2, .325694, -.697843, 1.2, .893617, -.697843, -1.2, .325695, .191373, -1.2, .695813, .191373, -1.2, .325695, -.208627, -1.2, .695813, -.208627, -.8, .325695, .191373, -.8, .695813, .191373, -.8, .325695, -.208627, -.8, .695813, -.208627, -.7, .325695, .191373, -.7, .780017, .191373, -.7, .325695, -.208627, -.7, .780017, -.208627, -.3, .325695, .191373, -.3, .780017, .191373, -.3, .325695, -.208627, -.3, .780017, -.208627, -.2, .325695, .191373, -.2, .915275, .191373, -.2, .325695, -.208627, -.2, .915275, -.208627, .2, .325695, .191373, .2, .915275, .191373, .2, .325695, -.208627, .2, .915275, -.208627, .3, .325695, .191373, .3, .953916, .191373, .3, .325695, -.208627, .3, .953916, -.208627, .7, .325695, .191373, .7, .953916, .191373, .7, .325695, -.208627, .7, .953916, -.208627, .8, .325695, .191373, .8, 1.02214, .191373, .8, .325695, -.208627, .8, 1.02214, -.208627, 1.2, .325695, .191373, 1.2, 1.02214, .191373, 1.2, .325695, -.208627, 1.2, 1.02214, -.208627, -1.2, .325695, .702157, -1.2, .884188, .702157, -1.2, .325695, .302157, -1.2, .884188, .302157, -.8, .325695, .702157, -.8, .884188, .702157, -.8, .325695, .302157, -.8, .884188, .302157, -.7, .325695, .702157, -.7, .94698, .702157, -.7, .325695, .302157, -.7, .94698, .302157, -.3, .325695, .702157, -.3, .94698, .702157, -.3, .325695, .302157, -.3, .94698, .302157, -.2, .325695, .702157, -.2, .985621, .702157, -.2, .325695, .302157, -.2, .985621, .302157, .2, .325695, .702157, .2, .985621, .702157, .2, .325695, .302157, .2, .985621, .302157, .3, .325695, .702157, .3, 1.0629, .702157, .3, .325695, .302157, .3, 1.0629, .302157, .7, .325695, .702157, .7, 1.0629, .702157, .7, .325695, .302157, .7, 1.0629, .302157, .8, .325695, .702157, .8, 1.12569, .702157, .8, .325695, .302157, .8, 1.12569, .302157, 1.2, .325695, .702157, 1.2, 1.12569, .702157, 1.2, .325695, .302157, 1.2, 1.12569, .302157, -1.2, .325695, 1.20216, -1.2, .94698, 1.20216, -1.2, .325695, .802157, -1.2, .94698, .802157, -.8, .325695, 1.20216, -.8, .94698, 1.20216, -.8, .325695, .802157, -.8, .94698, .802157, -.7, .325695, 1.20216, -.7, .985621, 1.20216, -.7, .325695, .802157, -.7, .985621, .802157, -.3, .325695, 1.20216, -.3, .985621, 1.20216, -.3, .325695, .802157, -.3, .985621, .802157, -.2, .325695, 1.20216, -.2, 1.0629, 1.20216, -.2, .325695, .802157, -.2, 1.0629, .802157, .2, .325695, 1.20216, .2, 1.0629, 1.20216, .2, .325695, .802157, .2, 1.0629, .802157, .3, .325695, 1.20216, .3, 1.12569, 1.20216, .3, .325695, .802157, .3, 1.12569, .802157, .7, .325695, 1.20216, .7, 1.12569, 1.20216, .7, .325695, .802157, .7, 1.12569, .802157, .8, .325695, 1.20216, .8, 1.12569, 1.20216, .8, .325695, .802157, .8, 1.12569, .802157, 1.2, .325695, 1.20216, 1.2, 1.12569, 1.20216, 1.2, .325695, .802157, 1.2, 1.12569, .802157],
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 3, 7, 6, 2, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 4, 5, 1, 3, 3, 3, 3, 33, 0, 2, 6, 4, 4, 4, 4, 4, 33, 5, 7, 3, 1, 5, 5, 5, 5, 33, 9, 11, 10, 8, 6, 6, 6, 6, 33, 11, 15, 14, 10, 7, 7, 7, 7, 33, 15, 13, 12, 14, 8, 8, 8, 8, 33, 13, 9, 8, 12, 9, 9, 9, 9, 33, 8, 10, 14, 12, 10, 10, 10, 10, 33, 13, 15, 11, 9, 11, 11, 11, 11, 33, 17, 19, 18, 16, 12, 12, 12, 12, 33, 19, 23, 22, 18, 1, 1, 1, 1, 33, 23, 21, 20, 22, 2, 2, 2, 2, 33, 21, 17, 16, 20, 13, 13, 13, 13, 33, 16, 18, 22, 20, 14, 14, 14, 14, 33, 21, 23, 19, 17, 15, 15, 15, 15, 33, 25, 27, 26, 24, 6, 6, 6, 6, 33, 27, 31, 30, 26, 1, 1, 1, 1, 33, 31, 29, 28, 30, 8, 8, 8, 8, 33, 29, 25, 24, 28, 13, 13, 13, 13, 33, 24, 26, 30, 28, 10, 10, 10, 10, 33, 29, 31, 27, 25, 11, 11, 11, 11, 33, 33, 35, 34, 32, 12, 12, 12, 12, 33, 35, 39, 38, 34, 1, 1, 1, 1, 33, 39, 37, 36, 38, 2, 2, 2, 2, 33, 37, 33, 32, 36, 13, 13, 13, 13, 33, 32, 34, 38, 36, 14, 14, 14, 14, 33, 37, 39, 35, 33, 11, 11, 11, 11, 33, 41, 43, 42, 40, 6, 6, 6, 6, 33, 43, 47, 46, 42, 1, 1, 1, 1, 33, 47, 45, 44, 46, 8, 8, 8, 8, 33, 45, 41, 40, 44, 13, 13, 13, 13, 33, 40, 42, 46, 44, 10, 10, 10, 10, 33, 45, 47, 43, 41, 16, 16, 16, 16, 33, 49, 51, 50, 48, 12, 12, 12, 12, 33, 51, 55, 54, 50, 1, 1, 1, 1, 33, 55, 53, 52, 54, 2, 2, 2, 2, 33, 53, 49, 48, 52, 9, 9, 9, 9, 33, 48, 50, 54, 52, 10, 10, 10, 10, 33, 53, 55, 51, 49, 11, 11, 11, 11, 33, 57, 59, 58, 56, 6, 6, 6, 6, 33, 59, 63, 62, 58, 7, 7, 7, 7, 33, 63, 61, 60, 62, 8, 8, 8, 8, 33, 61, 57, 56, 60, 13, 13, 13, 13, 33, 56, 58, 62, 60, 14, 14, 14, 14, 33, 61, 63, 59, 57, 11, 11, 11, 11, 33, 65, 67, 66, 64, 12, 12, 12, 12, 33, 67, 71, 70, 66, 1, 1, 1, 1, 33, 71, 69, 68, 70, 2, 2, 2, 2, 33, 69, 65, 64, 68, 13, 13, 13, 13, 33, 64, 66, 70, 68, 10, 10, 10, 10, 33, 69, 71, 67, 65, 16, 16, 16, 16, 33, 73, 75, 74, 72, 12, 12, 12, 12, 33, 75, 79, 78, 74, 1, 1, 1, 1, 33, 79, 77, 76, 78, 2, 2, 2, 2, 33, 77, 73, 72, 76, 13, 13, 13, 13, 33, 72, 74, 78, 76, 14, 14, 14, 14, 33, 77, 79, 75, 73, 11, 11, 11, 11, 33, 81, 83, 82, 80, 12, 12, 12, 12, 33, 83, 87, 86, 82, 7, 7, 7, 7, 33, 87, 85, 84, 86, 2, 2, 2, 2, 33, 85, 81, 80, 84, 13, 13, 13, 13, 33, 80, 82, 86, 84, 10, 10, 10, 10, 33, 85, 87, 83, 81, 11, 11, 11, 11, 33, 89, 91, 90, 88, 12, 12, 12, 12, 33, 91, 95, 94, 90, 17, 17, 17, 17, 33, 95, 93, 92, 94, 2, 2, 2, 2, 33, 93, 89, 88, 92, 18, 18, 18, 18, 33, 88, 90, 94, 92, 19, 19, 19, 19, 33, 93, 95, 91, 89, 11, 11, 11, 11, 33, 97, 99, 98, 96, 12, 12, 12, 12, 33, 99, 103, 102, 98, 20, 20, 20, 20, 33, 103, 101, 100, 102, 2, 2, 2, 2, 33, 101, 97, 96, 100, 21, 21, 21, 21, 33, 96, 98, 102, 100, 19, 19, 19, 19, 33, 101, 103, 99, 97, 11, 11, 11, 11, 33, 105, 107, 106, 104, 12, 12, 12, 12, 33, 107, 111, 110, 106, 22, 22, 22, 22, 33, 111, 109, 108, 110, 2, 2, 2, 2, 33, 109, 105, 104, 108, 23, 23, 23, 23, 33, 104, 106, 110, 108, 19, 19, 19, 19, 33, 109, 111, 107, 105, 11, 11, 11, 11, 33, 113, 115, 114, 112, 12, 12, 12, 12, 33, 115, 119, 118, 114, 24, 24, 24, 24, 33, 119, 117, 116, 118, 2, 2, 2, 2, 33, 117, 113, 112, 116, 25, 25, 25, 25, 33, 112, 114, 118, 116, 19, 19, 19, 19, 33, 117, 119, 115, 113, 11, 11, 11, 11, 33, 121, 123, 122, 120, 12, 12, 12, 12, 33, 123, 127, 126, 122, 26, 26, 26, 26, 33, 127, 125, 124, 126, 2, 2, 2, 2, 33, 125, 121, 120, 124, 27, 27, 27, 27, 33, 120, 122, 126, 124, 19, 19, 19, 19, 33, 125, 127, 123, 121, 11, 11, 11, 11, 33, 129, 131, 130, 128, 12, 12, 12, 12, 33, 131, 135, 134, 130, 1, 1, 1, 1, 33, 135, 133, 132, 134, 2, 2, 2, 2, 33, 133, 129, 128, 132, 13, 13, 13, 13, 33, 128, 130, 134, 132, 28, 28, 28, 28, 33, 133, 135, 131, 129, 11, 11, 11, 11, 33, 137, 139, 138, 136, 12, 12, 12, 12, 33, 139, 143, 142, 138, 29, 29, 29, 29, 33, 143, 141, 140, 142, 2, 2, 2, 2, 33, 141, 137, 136, 140, 13, 13, 13, 13, 33, 136, 138, 142, 140, 28, 28, 28, 28, 33, 141, 143, 139, 137, 11, 11, 11, 11, 33, 145, 147, 146, 144, 12, 12, 12, 12, 33, 147, 151, 150, 146, 30, 30, 30, 30, 33, 151, 149, 148, 150, 2, 2, 2, 2, 33, 149, 145, 144, 148, 13, 13, 13, 13, 33, 144, 146, 150, 148, 28, 28, 28, 28, 33, 149, 151, 147, 145, 11, 11, 11, 11, 33, 153, 155, 154, 152, 12, 12, 12, 12, 33, 155, 159, 158, 154, 31, 31, 31, 31, 33, 159, 157, 156, 158, 2, 2, 2, 2, 33, 157, 153, 152, 156, 13, 13, 13, 13, 33, 152, 154, 158, 156, 28, 28, 28, 28, 33, 157, 159, 155, 153, 11, 11, 11, 11, 33, 161, 163, 162, 160, 12, 12, 12, 12, 33, 163, 167, 166, 162, 32, 32, 32, 32, 33, 167, 165, 164, 166, 2, 2, 2, 2, 33, 165, 161, 160, 164, 13, 13, 13, 13, 33, 160, 162, 166, 164, 28, 28, 28, 28, 33, 165, 167, 163, 161, 33, 33, 33, 33, 33, 169, 171, 170, 168, 12, 12, 12, 12, 33, 171, 175, 174, 170, 1, 1, 1, 1, 33, 175, 173, 172, 174, 2, 2, 2, 2, 33, 173, 169, 168, 172, 13, 13, 13, 13, 33, 168, 170, 174, 172, 10, 10, 10, 10, 33, 173, 175, 171, 169, 16, 16, 16, 16, 33, 177, 179, 178, 176, 12, 12, 12, 12, 33, 179, 183, 182, 178, 1, 1, 1, 1, 33, 183, 181, 180, 182, 2, 2, 2, 2, 33, 181, 177, 176, 180, 13, 13, 13, 13, 33, 176, 178, 182, 180, 14, 14, 14, 14, 33, 181, 183, 179, 177, 11, 11, 11, 11, 33, 185, 187, 186, 184, 12, 12, 12, 12, 33, 187, 191, 190, 186, 1, 1, 1, 1, 33, 191, 189, 188, 190, 2, 2, 2, 2, 33, 189, 185, 184, 188, 13, 13, 13, 13, 33, 184, 186, 190, 188, 10, 10, 10, 10, 33, 189, 191, 187, 185, 34, 34, 34, 34, 33, 193, 195, 194, 192, 12, 12, 12, 12, 33, 195, 199, 198, 194, 1, 1, 1, 1, 33, 199, 197, 196, 198, 2, 2, 2, 2, 33, 197, 193, 192, 196, 13, 13, 13, 13, 33, 192, 194, 198, 196, 14, 14, 14, 14, 33, 197, 199, 195, 193, 11, 11, 11, 11, 33, 201, 203, 202, 200, 12, 12, 12, 12, 33, 203, 207, 206, 202, 1, 1, 1, 1, 33, 207, 205, 204, 206, 2, 2, 2, 2, 33, 205, 201, 200, 204, 13, 13, 13, 13, 33, 200, 202, 206, 204, 10, 10, 10, 10, 33, 205, 207, 203, 201, 11, 11, 11, 11],
            uvs: []
        },
        vision: {
            id: "vision",
            primaryColorFaces: [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlanePosition: {
                y: 2.1,
                z: -1.5
            },
            imagePlaneRotation: {
                x: -1.68
            },
            imagePlaneScale: .6,
            metadata: {
                generator: "io_three",
                faces: 58,
                uvs: 0,
                vertices: 76,
                normals: 58,
                version: 3,
                type: "Geometry"
            },
            vertices: [.42695, .498105, .729389, .42695, .586626, .719773, .42695, .460309, .381469, .42695, .54883, .371852, .776917, .498105, .729389, .776917, .586626, .719773, .776917, .460309, .381469, .776917, .54883, .371852, .0269499, .498105, .729389, .0269499, .586626, .719773, .0269499, .460309, .381469, .0269499, .54883, .371852, .376917, .498105, .729389, .376917, .586626, .719773, .376917, .460309, .381469, .376917, .54883, .371852, -.376917, .498105, .729389, -.376917, .586626, .719773, -.376917, .460309, .381469, -.376917, .54883, .371852, -.0269496, .498105, .729389, -.0269496, .586626, .719773, -.0269496, .460309, .381469, -.0269496, .54883, .371852, -.776917, .498105, .729389, -.776917, .586626, .719773, -.776917, .460309, .381469, -.776917, .54883, .371852, -.42695, .498105, .729389, -.42695, .586626, .719773, -.42695, .460309, .381469, -.42695, .54883, .371852, -.645131, .781056, -.489134, -.631616, 1.07151, -.41249, -.722342, .900197, -.927019, -.708827, 1.19065, -.850374, -.348999, .781056, -.54135, -.335484, 1.07151, -.464706, -.42621, .900197, -.979235, -.412695, 1.19065, -.90259, -.603262, .716451, -.251686, -.589748, 1.0069, -.175041, -.543758, .88465, -.500305, -.539391, .978494, -.475541, -.30713, .716451, -.303902, -.293616, 1.0069, -.227257, -.448079, .88465, -.517175, -.443712, .978494, -.492412, 1, -1.19209e-7, -1, 1, 0, 1, -1, 2.38419e-7, 1, -1, 1.78814e-7, -1, 1, .228668, -.999999, .99645, .446094, 1.04474, -1.00355, .446095, 1.04474, -1, .228669, -1, .925291, .357439, -.943789, .935941, .560165, .962705, -.939491, .357439, -.943789, -.92884, .560165, .962704, .348999, .781056, -.54135, .335484, 1.07151, -.464706, .42621, .900197, -.979235, .412695, 1.19065, -.90259, .645131, .781056, -.489134, .631616, 1.07151, -.412489, .722342, .900197, -.927019, .708827, 1.19065, -.850374, .30713, .71645, -.303902, .293616, 1.0069, -.227257, .448079, .88465, -.517175, .443713, .978494, -.492412, .603262, .71645, -.251685, .589748, 1.0069, -.175041, .543758, .88465, -.500305, .539391, .978494, -.475541],
            normals: [-1, -3.4194e-7, -4.85119e-8, 7.0981e-8, -.108, -.994151, 1, 6.83879e-7, 9.70238e-8, 4.6698e-9, .108, .994151, -1.90101e-7, -.994151, .107999, -1.14061e-8, .994151, -.107999, -1, -3.23546e-7, 1.20807e-7, 6.63112e-8, -.107999, -.994151, 1, 3.23546e-7, -1.20807e-7, 1.77452e-8, .107998, .994151, -1.78695e-7, -.994151, .107999, 1.67289e-7, .994151, -.108, -1, -3.4194e-7, -4.85118e-8, 7.47169e-8, -.107999, -.994151, 1, 0, 0, 1.86792e-8, .108, .994151, 7.60404e-9, -.994151, .107999, 2.69944e-7, .994151, -.107999, -1, 0, 0, 6.25754e-8, -.107999, -.994151, 1, 5.03712e-7, -1.18915e-8, 1.87726e-7, .107999, .994151, -2.58538e-7, -.994151, .107999, 1.14061e-7, .994151, -.108, -.984808, -1.34565e-8, .173648, -.167731, .258819, -.951251, .984808, 0, -.173648, .167731, -.258819, .951251, -.0449435, -.965926, -.254887, .0449435, .965926, .254887, -.980689, .0912731, -.172969, -.167731, .258819, -.951251, .862387, .0912732, -.497953, .167731, -.258819, .951251, -.101207, -.812596, -.573973, -.0170948, .995142, -.0969496, -1.3411e-7, -1, 4.47035e-8, -.874845, .48185, -.0496651, .999986, .00522116, 597256e-9, -3.40678e-7, -.0997866, .995009, -.999986, -.00522144, -597108e-9, 3.27826e-7, 182462e-11, -1, 2.12562e-7, .994394, -.105738, 3.52449e-7, .400063, -.916488, -4.27056e-7, .583846, .811864, .874845, .48152, -.0527738, -.984808, -1.34565e-8, -.173648, .167731, .258819, -.951251, .984808, -2.6913e-8, .173648, -.167731, -.258819, .951251, .0449434, -.965926, -.254887, -.0449435, .965926, .254887, -.862387, .0912731, -.497953, .167731, .258819, -.951251, .980689, .0912733, -.172969, -.167731, -.258819, .951251, .101207, -.812596, -.573973, .0170948, .995142, -.0969496],
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 3, 7, 6, 2, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 4, 5, 1, 3, 3, 3, 3, 33, 0, 2, 6, 4, 4, 4, 4, 4, 33, 5, 7, 3, 1, 5, 5, 5, 5, 33, 9, 11, 10, 8, 6, 6, 6, 6, 33, 11, 15, 14, 10, 7, 7, 7, 7, 33, 15, 13, 12, 14, 8, 8, 8, 8, 33, 13, 9, 8, 12, 9, 9, 9, 9, 33, 8, 10, 14, 12, 10, 10, 10, 10, 33, 13, 15, 11, 9, 11, 11, 11, 11, 33, 17, 19, 18, 16, 12, 12, 12, 12, 33, 19, 23, 22, 18, 13, 13, 13, 13, 33, 23, 21, 20, 22, 14, 14, 14, 14, 33, 21, 17, 16, 20, 15, 15, 15, 15, 33, 16, 18, 22, 20, 16, 16, 16, 16, 33, 21, 23, 19, 17, 17, 17, 17, 17, 33, 25, 27, 26, 24, 18, 18, 18, 18, 33, 27, 31, 30, 26, 19, 19, 19, 19, 33, 31, 29, 28, 30, 20, 20, 20, 20, 33, 29, 25, 24, 28, 21, 21, 21, 21, 33, 24, 26, 30, 28, 22, 22, 22, 22, 33, 29, 31, 27, 25, 23, 23, 23, 23, 33, 33, 35, 34, 32, 24, 24, 24, 24, 33, 35, 39, 38, 34, 25, 25, 25, 25, 33, 39, 37, 36, 38, 26, 26, 26, 26, 33, 37, 33, 32, 36, 27, 27, 27, 27, 33, 32, 34, 38, 36, 28, 28, 28, 28, 33, 37, 39, 35, 33, 29, 29, 29, 29, 33, 41, 43, 42, 40, 30, 30, 30, 30, 33, 43, 47, 46, 42, 31, 31, 31, 31, 33, 47, 45, 44, 46, 32, 32, 32, 32, 33, 45, 41, 40, 44, 33, 33, 33, 33, 33, 40, 42, 46, 44, 34, 34, 34, 34, 33, 45, 47, 43, 41, 35, 35, 35, 35, 33, 48, 49, 50, 51, 36, 36, 36, 36, 33, 55, 54, 59, 58, 37, 37, 37, 37, 33, 48, 52, 53, 49, 38, 38, 38, 38, 33, 49, 53, 54, 50, 39, 39, 39, 39, 33, 50, 54, 55, 51, 40, 40, 40, 40, 33, 52, 48, 51, 55, 41, 41, 41, 41, 33, 56, 58, 59, 57, 42, 42, 42, 42, 33, 52, 55, 58, 56, 43, 43, 43, 43, 33, 54, 53, 57, 59, 44, 44, 44, 44, 33, 53, 52, 56, 57, 45, 45, 45, 45, 33, 61, 63, 62, 60, 46, 46, 46, 46, 33, 63, 67, 66, 62, 47, 47, 47, 47, 33, 67, 65, 64, 66, 48, 48, 48, 48, 33, 65, 61, 60, 64, 49, 49, 49, 49, 33, 60, 62, 66, 64, 50, 50, 50, 50, 33, 65, 67, 63, 61, 51, 51, 51, 51, 33, 69, 71, 70, 68, 52, 52, 52, 52, 33, 71, 75, 74, 70, 53, 53, 53, 53, 33, 75, 73, 72, 74, 54, 54, 54, 54, 33, 73, 69, 68, 72, 55, 55, 55, 55, 33, 68, 70, 74, 72, 56, 56, 56, 56, 33, 73, 75, 71, 69, 57, 57, 57, 57],
            uvs: []
        },
        "aws-snowmobile": {
            id: "aws-snowmobile",
            primaryColorFaces: [],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 2
            },
            meshOffset: {
                x: 1.6,
                y: 0,
                z: 2
            },
            vertices: [-.9352, .329203, 6.40866, -.9352, .609407, 6.40866, -.935199, .329203, 4.44595, -.935199, .609407, 4.44595, -.0993787, .329203, 6.40866, -.0993787, .609407, 6.40866, -.0993786, .329203, 4.44595, -.0993786, .609407, 4.44595, .0385541, .251912, 5.95957, .189165, .251912, 5.95957, .0385541, .00316411, 6.10318, .189165, .00316411, 6.10318, .0385541, .00316411, 6.39041, .189165, .00316411, 6.39041, .0385541, .251912, 6.53402, .189165, .251912, 6.53402, .0385541, .500659, 6.39041, .189165, .500659, 6.39041, .0385541, .500659, 6.10318, .189165, .500659, 6.10318, -1.24617, .614243, 6.6011, -1.24617, 2.20273, 6.6011, -1.24617, .614243, -.0387373, -1.24617, 2.20272, -.0387374, .189111, .614243, 6.6011, .189111, 2.20273, 6.6011, .189111, .614243, -.0387373, .189111, 2.20272, -.0387374, .0385543, .251912, 5.23995, .189165, .251912, 5.23995, .0385543, .00316408, 5.38357, .189165, .00316408, 5.38357, .0385543, .00316408, 5.67079, .189165, .00316408, 5.67079, .0385543, .251912, 5.81441, .189165, .251912, 5.81441, .0385543, .500659, 5.67079, .189165, .500659, 5.67079, .0385543, .500659, 5.38357, .189165, .500659, 5.38357, .0385543, .251911, 4.51268, .189165, .251911, 4.51268, .0385543, .00316405, 4.6563, .189165, .00316405, 4.6563, .0385543, .00316405, 4.94352, .189165, .00316405, 4.94352, .0385543, .251912, 5.08714, .189165, .251912, 5.08714, .0385543, .500659, 4.94352, .189165, .500659, 4.94352, .0385543, .500659, 4.6563, .189165, .500659, 4.6563, .0385544, .251911, .355758, .189166, .251911, .355758, .0385544, .00316384, .499373, .189166, .00316384, .499373, .0385544, .00316387, .786602, .189166, .00316387, .786602, .0385544, .251911, .930216, .189166, .251911, .930216, .0385544, .500659, .786602, .189166, .500659, .786602, .0385544, .500659, .499373, .189166, .500659, .499373, .0385544, .251911, -.325579, .189166, .251911, -.325579, .0385544, .00316381, -.181965, .189166, .00316381, -.181965, .0385544, .00316384, .105264, .189166, .00316384, .105264, .0385544, .251911, .248879, .189166, .251911, .248879, .0385544, .500659, .105264, .189166, .500659, .105264, .0385544, .500659, -.181965, .189166, .500659, -.181965, .0385545, .251911, -3.16025, .189166, .251911, -3.16025, .0385545, .0031637, -3.01663, .189166, .0031637, -3.01663, .0385545, .00316373, -2.7294, .189166, .00316373, -2.7294, .0385545, .251911, -2.58579, .189166, .251911, -2.58579, .0385545, .500659, -2.7294, .189166, .500659, -2.7294, .0385545, .500659, -3.01663, .189166, .500659, -3.01663, -1.26409, .251912, 5.95957, -1.11348, .251912, 5.95957, -1.26409, .00316417, 6.10318, -1.11348, .00316417, 6.10318, -1.26409, .00316417, 6.39041, -1.11348, .00316417, 6.39041, -1.26409, .251912, 6.53402, -1.11348, .251912, 6.53402, -1.26409, .500659, 6.39041, -1.11348, .500659, 6.39041, -1.26409, .500659, 6.10318, -1.11348, .500659, 6.10318, -1.26409, .251912, 5.23995, -1.11348, .251912, 5.23995, -1.26409, .00316414, 5.38357, -1.11348, .00316414, 5.38357, -1.26409, .00316414, 5.67079, -1.11348, .00316414, 5.67079, -1.26409, .251912, 5.81441, -1.11348, .251912, 5.81441, -1.26409, .500659, 5.67079, -1.11348, .500659, 5.67079, -1.26409, .500659, 5.38357, -1.11348, .500659, 5.38357, -1.26409, .251912, 4.51268, -1.11348, .251912, 4.51268, -1.26409, .00316411, 4.6563, -1.11348, .00316411, 4.6563, -1.26409, .00316411, 4.94352, -1.11348, .00316411, 4.94352, -1.26409, .251912, 5.08714, -1.11348, .251912, 5.08714, -1.26409, .500659, 4.94352, -1.11348, .500659, 4.94352, -1.26409, .500659, 4.6563, -1.11348, .500659, 4.6563, -1.26409, .251911, .355758, -1.11348, .251911, .355758, -1.26409, .0031639, .499373, -1.11348, .0031639, .499373, -1.26409, .00316393, .786602, -1.11348, .00316393, .786602, -1.26409, .251911, .930216, -1.11348, .251911, .930216, -1.26409, .500659, .786602, -1.11348, .500659, .786602, -1.26409, .500659, .499373, -1.11348, .500659, .499373, -1.26409, .251911, -.325579, -1.11348, .251911, -.325579, -1.26409, .00316387, -.181965, -1.11348, .00316387, -.181965, -1.26409, .0031639, .105264, -1.11348, .0031639, .105264, -1.26409, .251911, .248879, -1.11348, .251911, .248879, -1.26409, .500659, .105264, -1.11348, .500659, .105264, -1.26409, .500659, -.181965, -1.11348, .500659, -.181965, -1.26409, .251911, -3.16025, -1.11348, .251911, -3.16025, -1.26409, .00316349, -3.01663, -1.11348, .00316349, -3.01663, -1.26409, .00316352, -2.7294, -1.11348, .00316352, -2.7294, -1.26409, .251911, -2.58579, -1.11348, .251911, -2.58579, -1.26409, .500658, -2.7294, -1.11348, .500658, -2.7294, -1.26409, .500658, -3.01663, -1.11348, .500658, -3.01663, -1.24617, .288754, -.599148, -1.24617, 1.71422, -.599148, -1.24617, .288754, -1.64774, -1.24617, 1.71422, -1.38361, .189111, .288754, -.599148, .189111, 1.71422, -.599148, .189111, .288754, -1.64774, .189111, 1.71422, -1.38361, -1.24617, 1.34088, -.599148, -1.24617, 1.34088, -1.64774, .189111, 1.34088, -1.64774, .189111, 1.34088, -.599148, -1.05474, 1.27726, -2.08328, -.976948, .285109, -2.21434, -.105228, 1.27726, -2.08328, -.184631, .285109, -2.08328, -.983527, .930174, -2.21434, -.184631, .929671, -2.08328, -.219545, .781183, -2.96975, -.959126, .285109, -2.96975, -.963557, .781184, -2.96975, -.228405, .285109, -2.96975, -.935199, .143468, .705254, -.935199, .423672, .705254, -.935199, .143468, -1.25746, -.935199, .423672, -1.25746, -.0993786, .143468, .705254, -.0993786, .423672, .705254, -.0993785, .143468, -1.25746, -.0993785, .423672, -1.25746, -1.187, .143468, -2.55704, -1.187, .470498, -2.55704, -1.187, .143468, -3.16124, -1.187, .481142, -3.16124, .0673048, .143468, -2.55704, .0673048, .470498, -2.55704, .0673048, .143468, -3.16124, .0673048, .481142, -3.16124, -1.187, .397577, -2.55704, -1.187, .397577, -3.16124, .0673048, .397577, -3.16124, .0673048, .397577, -2.55704, -1.187, .541204, -2.79831, -1.187, .143468, -2.79831, .0673048, .541204, -2.79831, .0673048, .143468, -2.79831, .0673048, .397577, -2.79831, -1.187, .397577, -2.79831],
            normals: [-1, 0, -3.03685e-8, 0, 0, -1, 1, 0, 4.55527e-8, 0, 0, 1, -7.13127e-8, -1, 4.55527e-8, 3.56564e-8, 1, -4.55527e-8, 0, -.5, -.866026, 0, -1, 0, 0, -.5, .866026, 0, .5, .866026, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, .5, -.866026, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, -1.79536e-8, 0, -7.50461e-8, -1, 1, -3.7523e-8, 3.59073e-8, 0, 0, 1, -4.15283e-8, -1, 4.48841e-8, 0, 1, -7.18146e-8, 0, -.500001, -.866025, 0, .5, .866026, 1, 0, 0, 1, 0, 0, 0, .500001, -.866025, 0, -1, 0, 0, -.5, .866026, 0, .5, .866026, 0, 1, 0, 0, -.5, -.866025, 0, -1, 1.03758e-7, 0, -.5, .866025, 0, .5, .866025, 0, .5, -.866025, 0, -.5, .866025, 0, .5, .866025, 0, .5, -.866025, -1, 0, 0, 0, -.5, -.866026, 0, -1, 1.03758e-7, 1, 0, 0, 0, .5, -.866026, -1, 0, 0, 0, -.5, -.866026, 0, -.5, .866026, 0, .5, .866026, 1, -4.79238e-7, 0, 1, -2.39619e-7, 4.15033e-7, 1, 0, 2.76689e-7, 0, -.5, .866026, 0, .5, .866026, 0, .500001, -.866025, 1.29171e-7, .5, -.866026, 1.97876e-7, 1, -1.03758e-7, 0, -.5, -.866025, 0, -.5, .866025, 0, .5, .866025, 0, .5, -.866025, 0, -.5, .866025, 0, .5, -.866025, 0, -1, 1.03758e-7, 8.61143e-8, .5, .866026, 1.97876e-7, 1, -1.03758e-7, -430723e-9, -.999973, .00732016, 1, 2.83257e-8, 8.52641e-8, -4.15283e-8, -1, 2.84214e-8, 0, 1, 0, 0, .577546, -.816358, .0154742, .983838, -.178393, -.903227, 0, -.429162, -.916851, -.0380474, -.397411, -.90978, -.00927812, -.414987, 0, .989498, -.144547, .828542, 9.38762e-8, -.559927, .758895, -3.50887e-8, -.651213, .635198, -.145106, -.758596, .073526, .184056, -.980162, -2.42866e-8, -1, 5.48378e-8, .999015, -.00776043, -.0436883, -.999664, -.00964385, -.0240549, 0, 0, -1, 1, 0, 3.03684e-8, -3.56564e-8, -1, 4.55527e-8, 5.34845e-8, 1, -3.79606e-8, -4.75202e-8, -1, 4.10588e-8, 4.84427e-8, .986581, -.163275, 4.42986e-8, .959641, .281228, -4.75202e-8, -1, 6.17607e-8],
            uvs: [],
            metadata: {
                vertices: 208,
                type: "Geometry",
                faces: 225,
                uvs: 0,
                normals: 92,
                generator: "io_three",
                version: 3
            },
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 3, 7, 6, 2, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 4, 5, 1, 3, 3, 3, 3, 33, 0, 2, 6, 4, 4, 4, 4, 4, 33, 5, 7, 3, 1, 5, 5, 5, 5, 33, 8, 9, 11, 10, 6, 6, 6, 6, 33, 10, 11, 13, 12, 7, 7, 7, 7, 33, 12, 13, 15, 14, 8, 8, 8, 8, 33, 14, 15, 17, 16, 9, 9, 9, 9, 32, 13, 11, 9, 10, 10, 10, 32, 9, 19, 17, 11, 11, 11, 32, 17, 15, 13, 12, 12, 12, 32, 9, 17, 13, 12, 12, 12, 33, 18, 19, 9, 8, 13, 13, 13, 13, 33, 16, 17, 19, 18, 14, 14, 14, 14, 32, 18, 8, 10, 15, 15, 15, 32, 10, 12, 14, 16, 16, 16, 32, 14, 16, 18, 15, 15, 15, 32, 10, 14, 18, 17, 17, 17, 33, 21, 23, 22, 20, 18, 18, 18, 18, 33, 23, 27, 26, 22, 19, 19, 19, 19, 33, 27, 25, 24, 26, 20, 20, 20, 20, 33, 25, 21, 20, 24, 21, 21, 21, 21, 33, 20, 22, 26, 24, 22, 22, 22, 22, 33, 25, 27, 23, 21, 23, 23, 23, 23, 33, 28, 29, 31, 30, 24, 24, 24, 24, 33, 30, 31, 33, 32, 7, 7, 7, 7, 33, 32, 33, 35, 34, 8, 8, 8, 8, 33, 34, 35, 37, 36, 25, 25, 25, 25, 32, 33, 31, 29, 10, 10, 10, 32, 29, 39, 37, 26, 26, 26, 32, 37, 35, 33, 27, 27, 27, 32, 29, 37, 33, 27, 27, 27, 33, 38, 39, 29, 28, 28, 28, 28, 28, 33, 36, 37, 39, 38, 14, 14, 14, 14, 32, 38, 28, 30, 15, 15, 15, 32, 30, 32, 34, 16, 16, 16, 32, 34, 36, 38, 15, 15, 15, 32, 30, 34, 38, 17, 17, 17, 33, 40, 41, 43, 42, 6, 6, 6, 6, 33, 42, 43, 45, 44, 29, 29, 29, 29, 33, 44, 45, 47, 46, 30, 30, 30, 30, 33, 46, 47, 49, 48, 31, 31, 31, 31, 32, 45, 43, 41, 10, 10, 10, 32, 41, 51, 49, 26, 26, 26, 32, 49, 47, 45, 27, 27, 27, 32, 41, 49, 45, 12, 12, 12, 33, 50, 51, 41, 40, 13, 13, 13, 13, 33, 48, 49, 51, 50, 32, 32, 32, 32, 32, 50, 40, 42, 15, 15, 15, 32, 42, 44, 46, 16, 16, 16, 32, 46, 48, 50, 15, 15, 15, 32, 42, 46, 50, 17, 17, 17, 33, 52, 53, 55, 54, 33, 33, 33, 33, 33, 54, 55, 57, 56, 34, 34, 34, 34, 33, 56, 57, 59, 58, 35, 35, 35, 35, 33, 58, 59, 61, 60, 36, 36, 36, 36, 32, 57, 55, 53, 10, 10, 10, 32, 53, 63, 61, 11, 11, 11, 32, 61, 59, 57, 12, 12, 12, 32, 53, 61, 57, 27, 27, 27, 33, 62, 63, 53, 52, 37, 37, 37, 37, 33, 60, 61, 63, 62, 14, 14, 14, 14, 32, 62, 52, 54, 15, 15, 15, 32, 54, 56, 58, 15, 15, 15, 32, 58, 60, 62, 15, 15, 15, 32, 54, 58, 62, 17, 17, 17, 33, 64, 65, 67, 66, 33, 33, 33, 33, 33, 66, 67, 69, 68, 34, 34, 34, 34, 33, 68, 69, 71, 70, 38, 38, 38, 38, 33, 70, 71, 73, 72, 39, 39, 39, 39, 32, 69, 67, 65, 10, 10, 10, 32, 65, 75, 73, 11, 11, 11, 32, 73, 71, 69, 12, 12, 12, 32, 65, 73, 69, 12, 12, 12, 33, 74, 75, 65, 64, 40, 40, 40, 40, 33, 72, 73, 75, 74, 14, 14, 14, 14, 32, 74, 64, 66, 15, 15, 15, 32, 66, 68, 70, 15, 15, 15, 32, 70, 72, 74, 15, 15, 15, 32, 66, 70, 74, 41, 41, 41, 33, 76, 77, 79, 78, 42, 42, 42, 42, 33, 78, 79, 81, 80, 43, 43, 43, 43, 33, 80, 81, 83, 82, 8, 8, 8, 8, 33, 82, 83, 85, 84, 25, 25, 25, 25, 32, 81, 79, 77, 44, 44, 44, 32, 77, 87, 85, 11, 11, 11, 32, 85, 83, 81, 27, 27, 27, 32, 77, 85, 81, 27, 27, 27, 33, 86, 87, 77, 76, 45, 45, 45, 45, 33, 84, 85, 87, 86, 32, 32, 32, 32, 32, 86, 76, 78, 46, 46, 46, 32, 78, 80, 82, 15, 15, 15, 32, 82, 84, 86, 15, 15, 15, 32, 78, 82, 86, 17, 17, 17, 33, 88, 89, 91, 90, 47, 47, 47, 47, 33, 90, 91, 93, 92, 7, 7, 7, 7, 33, 92, 93, 95, 94, 48, 48, 48, 48, 33, 94, 95, 97, 96, 49, 49, 49, 49, 32, 93, 91, 89, 50, 50, 50, 32, 89, 99, 97, 51, 51, 51, 32, 97, 95, 93, 12, 12, 12, 32, 89, 97, 93, 52, 52, 52, 33, 98, 99, 89, 88, 13, 13, 13, 13, 33, 96, 97, 99, 98, 14, 14, 14, 14, 32, 98, 88, 90, 15, 15, 15, 32, 90, 92, 94, 16, 16, 16, 32, 94, 96, 98, 15, 15, 15, 32, 90, 94, 98, 17, 17, 17, 33, 100, 101, 103, 102, 24, 24, 24, 24, 33, 102, 103, 105, 104, 7, 7, 7, 7, 33, 104, 105, 107, 106, 53, 53, 53, 53, 33, 106, 107, 109, 108, 54, 54, 54, 54, 32, 105, 103, 101, 10, 10, 10, 32, 101, 111, 109, 26, 26, 26, 32, 109, 107, 105, 27, 27, 27, 32, 101, 109, 105, 27, 27, 27, 33, 110, 111, 101, 100, 55, 55, 55, 55, 33, 108, 109, 111, 110, 14, 14, 14, 14, 32, 110, 100, 102, 15, 15, 15, 32, 102, 104, 106, 16, 16, 16, 32, 106, 108, 110, 15, 15, 15, 32, 102, 106, 110, 17, 17, 17, 33, 112, 113, 115, 114, 6, 6, 6, 6, 33, 114, 115, 117, 116, 7, 7, 7, 7, 33, 116, 117, 119, 118, 30, 30, 30, 30, 33, 118, 119, 121, 120, 31, 31, 31, 31, 32, 117, 115, 113, 10, 10, 10, 32, 113, 123, 121, 11, 11, 11, 32, 121, 119, 117, 27, 27, 27, 32, 113, 121, 117, 12, 12, 12, 33, 122, 123, 113, 112, 56, 56, 56, 56, 33, 120, 121, 123, 122, 57, 57, 57, 57, 32, 122, 112, 114, 15, 15, 15, 32, 114, 116, 118, 16, 16, 16, 32, 118, 120, 122, 15, 15, 15, 32, 114, 118, 122, 17, 17, 17, 33, 124, 125, 127, 126, 58, 58, 58, 58, 33, 126, 127, 129, 128, 34, 34, 34, 34, 33, 128, 129, 131, 130, 59, 59, 59, 59, 33, 130, 131, 133, 132, 60, 60, 60, 60, 32, 129, 127, 125, 10, 10, 10, 32, 125, 135, 133, 11, 11, 11, 32, 133, 131, 129, 12, 12, 12, 32, 125, 133, 129, 27, 27, 27, 33, 134, 135, 125, 124, 61, 61, 61, 61, 33, 132, 133, 135, 134, 14, 14, 14, 14, 32, 134, 124, 126, 15, 15, 15, 32, 126, 128, 130, 15, 15, 15, 32, 130, 132, 134, 15, 15, 15, 32, 126, 130, 134, 17, 17, 17, 33, 136, 137, 139, 138, 58, 58, 58, 58, 33, 138, 139, 141, 140, 34, 34, 34, 34, 33, 140, 141, 143, 142, 62, 62, 62, 62, 33, 142, 143, 145, 144, 39, 39, 39, 39, 32, 141, 139, 137, 10, 10, 10, 32, 137, 147, 145, 11, 11, 11, 32, 145, 143, 141, 12, 12, 12, 32, 137, 145, 141, 12, 12, 12, 33, 146, 147, 137, 136, 63, 63, 63, 63, 33, 144, 145, 147, 146, 14, 14, 14, 14, 32, 146, 136, 138, 15, 15, 15, 32, 138, 140, 142, 15, 15, 15, 32, 142, 144, 146, 15, 15, 15, 32, 138, 142, 146, 41, 41, 41, 33, 148, 149, 151, 150, 24, 24, 24, 24, 33, 150, 151, 153, 152, 64, 64, 64, 64, 33, 152, 153, 155, 154, 30, 30, 30, 30, 33, 154, 155, 157, 156, 65, 65, 65, 65, 32, 153, 151, 149, 44, 44, 44, 32, 149, 159, 157, 26, 26, 26, 32, 157, 155, 153, 12, 12, 12, 32, 149, 157, 153, 12, 12, 12, 33, 158, 159, 149, 148, 55, 55, 55, 55, 33, 156, 157, 159, 158, 66, 66, 66, 66, 32, 158, 148, 150, 15, 15, 15, 32, 150, 152, 154, 15, 15, 15, 32, 154, 156, 158, 15, 15, 15, 32, 150, 154, 158, 17, 17, 17, 33, 168, 169, 162, 160, 15, 15, 15, 15, 33, 166, 162, 173, 175, 67, 67, 67, 67, 33, 170, 171, 164, 166, 68, 68, 68, 68, 33, 171, 168, 160, 164, 21, 21, 21, 21, 33, 160, 162, 166, 164, 69, 69, 69, 69, 33, 165, 167, 163, 161, 70, 70, 70, 70, 33, 165, 161, 168, 171, 21, 21, 21, 21, 33, 167, 165, 171, 170, 12, 12, 12, 12, 33, 163, 167, 170, 169, 71, 71, 71, 71, 33, 161, 163, 169, 168, 15, 15, 15, 15, 33, 176, 177, 178, 180, 72, 72, 72, 72, 32, 173, 162, 169, 73, 73, 73, 32, 169, 172, 176, 74, 74, 74, 32, 169, 176, 173, 75, 75, 75, 33, 169, 170, 174, 172, 76, 76, 76, 76, 32, 174, 170, 166, 77, 77, 77, 32, 166, 175, 177, 78, 78, 78, 32, 166, 177, 174, 79, 79, 79, 33, 172, 174, 177, 176, 80, 80, 80, 80, 33, 180, 178, 181, 179, 1, 1, 1, 1, 33, 175, 173, 179, 181, 81, 81, 81, 81, 33, 177, 175, 181, 178, 82, 82, 82, 82, 33, 173, 176, 180, 179, 83, 83, 83, 83, 33, 183, 185, 184, 182, 15, 15, 15, 15, 33, 185, 189, 188, 184, 84, 84, 84, 84, 33, 189, 187, 186, 188, 85, 85, 85, 85, 33, 187, 183, 182, 186, 21, 21, 21, 21, 33, 182, 184, 188, 186, 86, 86, 86, 86, 33, 187, 189, 185, 183, 87, 87, 87, 87, 33, 207, 199, 192, 203, 46, 46, 46, 46, 33, 199, 200, 196, 192, 1, 1, 1, 1, 33, 206, 201, 194, 205, 12, 12, 12, 12, 33, 201, 198, 190, 194, 21, 21, 21, 21, 33, 203, 192, 196, 205, 88, 88, 88, 88, 33, 204, 197, 193, 202, 89, 89, 89, 89, 33, 195, 191, 198, 201, 21, 21, 21, 21, 33, 204, 195, 201, 206, 12, 12, 12, 12, 33, 193, 197, 200, 199, 1, 1, 1, 1, 33, 202, 193, 199, 207, 15, 15, 15, 15, 33, 191, 202, 207, 198, 15, 15, 15, 15, 33, 197, 204, 206, 200, 12, 12, 12, 12, 33, 195, 204, 202, 191, 90, 90, 90, 90, 33, 190, 203, 205, 194, 91, 91, 91, 91, 33, 200, 206, 205, 196, 27, 27, 27, 27, 33, 198, 207, 203, 190, 15, 15, 15, 15]
        },
        bot: {
            id: "bot",
            primaryColorFaces: [52, 67, 104, 105, 126, 179, 180, 181, 182, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            disableImagePlane: true,
            normals: [1.1156e-7, .962686, -.27062, 1.85305e-7, .824758, .565486, 3.59987e-8, .448305, -.893881, 1.28172e-7, .998227, -.0595151, 6.83021e-8, .618523, .785767, 0, .720299, -.693664, 0, .988803, .149225, 0, .29581, .955247, 0, .883152, -.469086, 0, .931552, .363608, 0, .107741, -.994179, 1.11015e-7, .968194, -.250201, 1.24676e-7, .809601, .586981, 1.1156e-7, .962686, -.27062, 1.23537e-7, .824758, .565486, 0, .448305, -.893881, -1.28172e-7, .998227, -.0595151, -6.83021e-8, .618523, .785767, 0, .720299, -.693664, -1.3615e-7, .988803, .149225, -1.85533e-8, .29581, .955247, 5.94187e-8, .883153, -.469086, 0, .931552, .363607, 0, -.107741, .994179, 0, .968194, -.250201, 0, .809601, .586981, -255072e-11, 1, 0, 756225e-10, -.5, -.866025, 151182e-9, -1, 0, 755908e-10, -.5, .866025, -755277e-10, .5, .866025, 1, 151383e-9, -1.9995e-11, 151245e-9, -1, 0, -151055e-9, 1, 0, -151182e-9, 1, -3.28189e-8, 0, 0, -1, -75654e-9, .5, -.866025, 1, 151383e-9, 0, -1, -151383e-9, 0, 0, 0, 1, 2.30286e-7, -1, -1.15143e-7, -2.30286e-7, 1, 3.45429e-7, -1.49012e-8, -1, 4.47035e-8, -.738151, .674636, -1.96095e-7, 1, 105076e-11, 5.66244e-7, -4.17233e-7, -7.97111e-14, 1, -1, -1.91047e-7, -2.38419e-7, 1.78814e-7, 5.73141e-7, -1, -3.32251e-8, 1, -3.32251e-8, 2.20726e-7, .674636, -.73815, -3.0798e-7, .674636, .73815, .73815, .674636, 4.21147e-7, 0, 0, -1, -.866026, -197126e-11, -.5, .866025, 9.8563e-7, -.5, .866025, 9.8563e-7, .5, -2.84527e-7, -6.47646e-13, 1, -.866025, -197126e-11, .5, 0, 0, 1, .866026, 0, .5, -.866025, -9.8563e-7, .5, .866026, 197126e-11, -.5, -.866025, 197126e-11, -.5, 0, 0, -1, 0, 0, -1, -.866025, -9.8563e-7, -.5, .866025, 394252e-11, -.5, .866025, -197126e-11, .5, -2.84527e-7, -6.47648e-13, 1, -.866025, -9.8563e-7, .5, 0, 0, 1, .866025, -295689e-11, .5, -.866025, 197126e-11, .5, .866026, 9.85634e-7, -.5, -.866025, 394254e-11, -.5, -1, 5.42825e-7, 0, 1.81479e-7, -9.85115e-14, 1, 0, 1, 151258e-11, -113252e-11, 1, -1.69412e-7, 0, -1, 151258e-11, 1, -108565e-11, 1.50262e-13, 1, -5.42825e-7, 9.19609e-14, -1, 5.42825e-7, -9.19609e-14, 75591e-9, -.5, -.866025, 151182e-9, -1, 0, 756541e-10, -.5, .866025, -756541e-10, .5, .866025, 1, 150924e-9, 1.13488e-7, 151245e-9, -1, 0, -151056e-9, 1, -1.98639e-7, -151182e-9, 1, -3.28189e-8, -756541e-10, .5, -.866025, 1, 150924e-9, 0, -1, -150924e-9, 0, -1, -151383e-9, 1.94395e-11, 119048e-11, 1, -1.69412e-7, 755796e-10, -.5, -.866025, 756059e-10, -.5, .866025, -755909e-10, .5, .866025, 1, 150848e-9, 1.3241e-7, 1, 150466e-9, 0, 1, 151383e-9, 0, 1, 151383e-9, -7.77582e-12, -151308e-9, 1, 0, 0, 0, -1, -755277e-10, .5, -.866025, 1, 151383e-9, -1.15624e-11, -1.49012e-8, -1, 4.47035e-8, -.738151, .674636, -1.93785e-7, 1, -7.64188e-7, 4.55492e-14, -1.78814e-7, -7.64189e-7, 1, -1, -1.91047e-7, -2.38419e-7, 2.38419e-7, 7.64188e-7, -1, 1.98703e-14, 1, -6.64502e-8, 1.75989e-7, .674637, -.73815, -3.63771e-7, .674637, .73815, .73815, .674636, 3.97868e-7, -.866025, -197126e-11, -.5, .866025, 108657e-11, -.5, -2.84527e-7, -3.23822e-13, 1, -.866025, -197126e-11, .5, .866025, 197126e-11, .5, .866026, 203731e-11, -.5, -.866026, -9.8563e-7, -.5, -.866025, -19015e-10, -.5, .866025, -217313e-11, -.5, .866025, -190149e-11, .5, -2.84527e-7, 6.47645e-13, 1, -.866025, -197127e-11, .5, .866026, 101866e-11, .5, -.866025, 373509e-11, .5, .866025, -295689e-11, -.5, -.866025, 197126e-11, -.5, 1.81479e-7, -1.97023e-13, 1, 0, 1, 0, 4.92055e-8, 1, 308351e-11, 4.92055e-8, 1, -157093e-11, -4.53698e-8, -1, -6.4101e-8, -113252e-11, -1, 1.69412e-7, 0, -1, -151258e-11, 0, -1, 0, -9.07396e-8, -1, -138437e-11, 1, -108565e-11, 0, 0, 0, 1, -1, 5.42825e-7, -9.19609e-14, 756226e-10, -.5, -.866025, 755909e-10, -.5, .866025, 1, 151383e-9, -2.33274e-11, 1, 151383e-9, 0, 1, 151383e-9, -3.00706e-11, 1, 151001e-9, 1.32414e-7, -151308e-9, 1, 0, -151308e-9, 1, 0, -755278e-10, .5, -.866025, 1, 150924e-9, -7.70827e-12, -1, -150924e-9, -1.13498e-7, -1, -151383e-9, 0, -1, -151001e-9, -1.32414e-7, -1, -151383e-9, 0, 0, 1, 0, -2.84527e-7, 1, -1.64272e-7, -2.27622e-7, 1, 1.31417e-7, 0, 1, 0, 0, 1, 0, -2.27622e-7, 1, -1.31417e-7, 0, 1, 0, -2.84527e-7, 1, 1.64272e-7, -.894427, -123782e-11, -.447214, .894427, 123782e-11, -.447214, -2.27622e-7, 1, -118276e-11, 227621e-11, 1, -197126e-11, 2.84527e-7, 1, 147845e-11, -9.10488e-7, 1, 7.88506e-7, -9.10485e-7, 1, 7.88504e-7, -9.10485e-7, 1, -7.88503e-7, 113811e-11, 1, -9.8563e-7, 113811e-11, 1, 9.85632e-7, 227621e-11, 1, 105134e-11, 2.84527e-7, 1, 147845e-11, -170717e-11, 1, -3.28545e-7, -2.27621e-7, 1, -118276e-11],
            vertices: [-1.13587, .163058, -.906367, -1.01945, .163058, -.906367, -1.13587, .389647, -1.35214, -1.01945, .389647, -1.35214, -.966642, .0854361, -1.18249, -.850222, .0854361, -1.18249, -.966642, .467268, -1.07601, -.850222, .467268, -1.07601, -.797411, .23191, -1.39612, -.680992, .23191, -1.39612, -.797411, .320795, -.862377, -.680992, .320795, -.862377, -.62818, .43055, -1.2965, -.511761, .43055, -1.2965, -.62818, .122155, -.962, -.511761, .122155, -.962, -.45895, .448194, -1.00056, -.34253, .448194, -1.00056, -.45895, .104511, -1.25794, -.34253, .104511, -1.25794, -.289719, .264132, -.855675, -.173299, .264132, -.855675, -.289719, .288572, -1.40283, -.173299, .288572, -1.40283, -.120488, .094414, -1.03191, -.00406849, .094414, -1.03191, -.120488, .45829, -1.22659, -.00406849, .45829, -1.22659, .0487428, .138254, -1.3224, .165162, .138254, -1.3224, .0487428, .414451, -.936099, .165162, .414451, -.936099, .217973, .344192, -1.38618, .334393, .344192, -1.38618, .217973, .208512, -.872326, .334393, .208512, -.872326, .387204, .470501, -1.14837, .503624, .470501, -1.14837, .387204, .0822037, -1.11013, .503624, .0822037, -1.11013, .556435, .36892, -.888125, .672855, .36892, -.888125, .556435, .183785, -1.37038, .672855, .183785, -1.37038, .725666, .158684, -.910909, .842085, .158684, -.910909, .725666, .394021, -1.34759, .842085, .394021, -1.34759, .894897, .086566, -1.18998, 1.01132, .086566, -1.18998, .894897, .466138, -1.06852, 1.01132, .466138, -1.06852, 1.06413, .237217, -1.39777, 1.18055, .237217, -1.39777, 1.06413, .315487, -.860733, 1.18055, .315487, -.860733, 1.00759, .207334, -1.42055, 1.00755, .467198, -1.42055, 1.00761, .0774016, -.43745, 1.24357, .0774373, -.43745, 1.00761, .0774016, -.137384, 1.24357, .0774373, -.137384, 1.00757, .337266, .0126483, 1.24353, .337302, .0126483, 1.00753, .59713, -.137385, 1.24349, .597166, -.137385, 1.00753, .59713, -.43745, 1.24349, .597166, -.43745, 1.00759, .207334, -.512466, 1.24355, .207369, -.512466, 1.00755, .467198, -.512466, 1.24351, .467234, -.512466, 1.24355, .207369, -1.42055, 1.24351, .467234, -1.42055, -.131081, .761232, .421753, -.131081, .787232, .421753, -.00166681, .761232, .162924, -.00166688, .787232, .162924, .127748, .761232, .421753, .127748, .787232, .421753, .998333, .0158513, -.767566, .998333, .0158514, 1.23243, -1.00167, .0158514, 1.23243, -1.00167, .0158513, -.767567, .998334, .63983, -.767566, .998333, .63983, 1.23243, -1.00167, .63983, 1.23243, -1.00167, .63983, -.767566, .895316, .752546, -.664548, .895315, .752546, 1.12942, -.898649, .752546, -.664549, -.89865, .752546, 1.12942, -.532596, .76063, -.435241, -.532596, .786816, -.435241, -.270738, .786816, -.435241, -.270738, .76063, -.435241, -.296924, .76063, -.0270439, -.270738, .76063, .0183113, -.532596, .76063, .0183112, -.663525, .76063, -.208465, -.50641, .76063, -.389886, -.611154, .76063, -.208465, -.50641, .76063, -.0270439, -.19218, .76063, -.208465, -.296923, .76063, -.389886, -.139808, .76063, -.208465, -.663525, .786816, -.208465, -.296923, .786816, -.0270439, -.270738, .786816, .0183113, -.139808, .786816, -.208465, -.50641, .786816, -.389886, -.296923, .786816, -.389886, -.19218, .786816, -.208465, -.50641, .786816, -.0270439, -.611154, .786816, -.208465, -.532596, .786816, .0183112, .267404, .762973, -.435241, .267404, .789159, -.435241, .529262, .789159, -.435241, .529262, .762973, -.435241, .503076, .762973, -.0270439, .529262, .762973, .0183113, .267404, .762973, .0183112, .136475, .762973, -.208465, .29359, .762973, -.389886, .188847, .762973, -.208465, .29359, .762973, -.0270439, .60782, .762973, -.208465, .503076, .762973, -.389886, .660192, .762973, -.208465, .136475, .789159, -.208465, .503077, .789159, -.0270439, .529262, .789159, .0183113, .660192, .789159, -.208465, .29359, .789159, -.389886, .503077, .789159, -.389886, .60782, .789159, -.208465, .29359, .789159, -.0270439, .188846, .789159, -.208465, .267404, .789159, .0183112, -.658543, .817369, .972466, -.658543, .817369, .54182, -.658543, .707564, .54182, -.658543, .707564, .972466, .655209, .817369, .972466, .655209, .707564, .972466, -.602867, .817369, .93306, -.602867, .817369, .581226, .608474, .817369, .581226, .655209, .817369, .54182, .608474, .817369, .93306, .655209, .707564, .54182, -.602867, .707564, .93306, .608473, .707564, .93306, .608473, .707564, .581226, -.602867, .707564, .581226, -1.24349, .207334, -1.42055, -1.24353, .467198, -1.42055, -1.24347, .0774016, -.43745, -1.0075, .0774373, -.43745, -1.24347, .0774016, -.137384, -1.0075, .0774373, -.137384, -1.24351, .337266, .0126484, -1.00754, .337302, .0126484, -1.24355, .59713, -.137384, -1.00758, .597166, -.137384, -1.24355, .59713, -.43745, -1.00758, .597166, -.43745, -1.24349, .207334, -.512466, -1.00752, .207369, -.512466, -1.24353, .467198, -.512466, -1.00756, .467234, -.512466, -1.00752, .207369, -1.42055, -1.00756, .467234, -1.42055],
            uvs: [],
            metadata: {
                normals: 181,
                generator: "io_three",
                vertices: 174,
                version: 3,
                type: "Geometry",
                uvs: 0,
                faces: 213
            },
            faces: [33, 0, 1, 5, 4, 0, 0, 0, 0, 33, 4, 5, 9, 8, 1, 1, 1, 1, 33, 8, 12, 13, 9, 2, 2, 2, 2, 33, 12, 16, 17, 13, 3, 3, 3, 3, 33, 16, 20, 21, 17, 4, 4, 4, 4, 33, 20, 21, 25, 24, 5, 5, 5, 5, 33, 24, 25, 29, 28, 6, 6, 6, 6, 33, 28, 29, 33, 32, 7, 7, 7, 7, 33, 32, 36, 37, 33, 8, 8, 8, 8, 33, 36, 40, 41, 37, 9, 9, 9, 9, 33, 40, 41, 45, 44, 10, 10, 10, 10, 33, 44, 45, 49, 48, 11, 11, 11, 11, 33, 48, 49, 53, 52, 12, 12, 12, 12, 33, 3, 2, 6, 7, 13, 13, 13, 13, 33, 7, 6, 10, 11, 14, 14, 14, 14, 33, 11, 15, 14, 10, 15, 15, 15, 15, 33, 15, 19, 18, 14, 16, 16, 16, 16, 33, 19, 23, 22, 18, 17, 17, 17, 17, 33, 23, 22, 26, 27, 18, 18, 18, 18, 33, 27, 26, 30, 31, 19, 19, 19, 19, 33, 31, 30, 34, 35, 20, 20, 20, 20, 33, 35, 39, 38, 34, 21, 21, 21, 21, 33, 39, 43, 42, 38, 22, 22, 22, 22, 33, 43, 47, 46, 42, 23, 23, 23, 23, 33, 47, 46, 50, 51, 24, 24, 24, 24, 33, 51, 50, 54, 55, 25, 25, 25, 25, 32, 149, 148, 144, 26, 26, 26, 32, 68, 69, 59, 27, 27, 27, 32, 58, 59, 61, 28, 28, 28, 32, 60, 61, 63, 29, 29, 29, 32, 63, 65, 64, 30, 30, 30, 32, 69, 71, 63, 31, 31, 31, 32, 68, 56, 72, 32, 32, 32, 32, 65, 67, 66, 33, 33, 33, 32, 71, 73, 57, 34, 34, 34, 32, 73, 72, 56, 35, 35, 35, 32, 67, 71, 70, 36, 36, 36, 32, 69, 72, 73, 37, 37, 37, 32, 70, 57, 56, 38, 38, 38, 32, 75, 74, 78, 39, 39, 39, 32, 74, 76, 78, 40, 40, 40, 32, 79, 77, 75, 41, 41, 41, 32, 81, 82, 83, 42, 42, 42, 32, 87, 86, 91, 43, 43, 43, 32, 84, 85, 81, 44, 44, 44, 32, 85, 86, 82, 45, 45, 45, 32, 82, 86, 87, 46, 46, 46, 32, 80, 83, 87, 47, 47, 47, 32, 90, 91, 89, 48, 48, 48, 32, 87, 90, 88, 49, 49, 49, 32, 86, 85, 89, 50, 50, 50, 32, 84, 88, 89, 51, 51, 51, 32, 92, 93, 94, 52, 52, 52, 32, 106, 93, 92, 53, 53, 53, 32, 95, 94, 109, 54, 54, 54, 32, 109, 108, 97, 55, 55, 55, 32, 108, 115, 98, 56, 56, 56, 32, 115, 106, 99, 57, 57, 57, 32, 104, 111, 110, 58, 58, 58, 32, 101, 100, 110, 59, 59, 59, 32, 104, 103, 112, 60, 60, 60, 32, 101, 114, 113, 61, 61, 61, 32, 103, 96, 107, 62, 62, 62, 32, 96, 102, 113, 63, 63, 63, 32, 116, 117, 118, 64, 64, 64, 32, 123, 130, 117, 65, 65, 65, 32, 119, 118, 133, 66, 66, 66, 32, 129, 133, 132, 67, 67, 67, 32, 132, 139, 122, 68, 68, 68, 32, 139, 130, 123, 69, 69, 69, 32, 128, 135, 134, 70, 70, 70, 32, 124, 134, 138, 71, 71, 71, 32, 127, 136, 135, 72, 72, 72, 32, 126, 125, 138, 73, 73, 73, 32, 127, 120, 131, 74, 74, 74, 32, 120, 126, 137, 52, 52, 52, 32, 141, 142, 143, 75, 75, 75, 32, 140, 143, 145, 76, 76, 76, 32, 147, 149, 141, 77, 77, 77, 32, 144, 148, 150, 78, 78, 78, 32, 141, 149, 151, 63, 63, 63, 32, 151, 154, 155, 79, 79, 79, 32, 144, 145, 151, 80, 80, 80, 32, 146, 152, 155, 81, 81, 81, 32, 147, 155, 154, 39, 39, 39, 32, 146, 150, 153, 63, 63, 63, 32, 148, 154, 153, 82, 82, 82, 32, 169, 159, 158, 83, 83, 83, 32, 159, 161, 160, 84, 84, 84, 32, 161, 163, 162, 85, 85, 85, 32, 163, 165, 164, 86, 86, 86, 32, 169, 171, 163, 87, 87, 87, 32, 168, 156, 172, 88, 88, 88, 32, 165, 167, 166, 89, 89, 89, 32, 171, 173, 157, 90, 90, 90, 32, 173, 172, 156, 63, 63, 63, 32, 167, 171, 170, 91, 91, 91, 32, 169, 172, 173, 92, 92, 92, 32, 170, 157, 156, 93, 93, 93, 32, 160, 162, 168, 94, 94, 94, 32, 146, 147, 141, 95, 95, 95, 32, 58, 68, 59, 96, 96, 96, 32, 60, 58, 61, 28, 28, 28, 32, 62, 60, 63, 97, 97, 97, 32, 62, 63, 64, 98, 98, 98, 32, 63, 61, 69, 99, 99, 99, 32, 59, 69, 61, 100, 100, 100, 32, 71, 67, 65, 101, 101, 101, 32, 65, 63, 71, 102, 102, 102, 32, 69, 68, 72, 32, 32, 32, 32, 64, 65, 66, 33, 33, 33, 32, 70, 71, 57, 103, 103, 103, 32, 57, 73, 56, 104, 104, 104, 32, 66, 67, 70, 105, 105, 105, 32, 71, 69, 73, 106, 106, 106, 32, 68, 70, 56, 38, 38, 38, 32, 79, 75, 78, 39, 39, 39, 32, 80, 81, 83, 107, 107, 107, 32, 90, 87, 91, 108, 108, 108, 32, 80, 84, 81, 109, 109, 109, 32, 81, 85, 82, 110, 110, 110, 32, 83, 82, 87, 111, 111, 111, 32, 84, 80, 87, 112, 112, 112, 32, 88, 90, 89, 113, 113, 113, 32, 84, 87, 88, 114, 114, 114, 32, 91, 86, 89, 115, 115, 115, 32, 85, 84, 89, 116, 116, 116, 32, 95, 92, 94, 52, 52, 52, 32, 99, 106, 92, 117, 117, 117, 32, 105, 95, 109, 118, 118, 118, 32, 105, 109, 97, 55, 55, 55, 32, 97, 108, 98, 119, 119, 119, 32, 98, 115, 99, 120, 120, 120, 32, 100, 104, 110, 70, 70, 70, 32, 114, 101, 110, 121, 121, 121, 32, 111, 104, 112, 60, 60, 60, 32, 102, 101, 113, 122, 122, 122, 32, 112, 103, 107, 123, 123, 123, 32, 107, 96, 113, 63, 63, 63, 32, 119, 116, 118, 52, 52, 52, 32, 116, 123, 117, 124, 124, 124, 32, 129, 119, 133, 125, 125, 125, 32, 121, 129, 132, 126, 126, 126, 32, 121, 132, 122, 127, 127, 127, 32, 122, 139, 123, 128, 128, 128, 32, 124, 128, 134, 70, 70, 70, 32, 125, 124, 138, 129, 129, 129, 32, 128, 127, 135, 130, 130, 130, 32, 137, 126, 138, 131, 131, 131, 32, 136, 127, 131, 132, 132, 132, 32, 131, 120, 137, 63, 63, 63, 32, 140, 141, 143, 75, 75, 75, 32, 144, 140, 145, 133, 133, 133, 32, 141, 140, 146, 134, 134, 134, 32, 147, 148, 149, 135, 135, 135, 32, 146, 140, 144, 134, 134, 134, 32, 150, 146, 144, 136, 136, 136, 32, 142, 141, 151, 104, 104, 104, 32, 145, 143, 152, 137, 137, 137, 32, 153, 154, 151, 138, 138, 138, 32, 145, 152, 153, 139, 139, 139, 32, 152, 143, 142, 140, 140, 140, 32, 142, 151, 155, 141, 141, 141, 32, 149, 144, 151, 142, 142, 142, 32, 147, 146, 155, 81, 81, 81, 32, 148, 147, 154, 143, 143, 143, 32, 152, 146, 153, 104, 104, 104, 32, 150, 148, 153, 144, 144, 144, 32, 168, 169, 158, 145, 145, 145, 32, 158, 159, 160, 84, 84, 84, 32, 160, 161, 162, 146, 146, 146, 32, 162, 163, 164, 86, 86, 86, 32, 163, 161, 169, 147, 147, 147, 32, 159, 169, 161, 148, 148, 148, 32, 171, 167, 165, 149, 149, 149, 32, 165, 163, 171, 150, 150, 150, 32, 169, 168, 172, 88, 88, 88, 32, 164, 165, 166, 151, 151, 151, 32, 170, 171, 157, 152, 152, 152, 32, 157, 173, 156, 104, 104, 104, 32, 166, 167, 170, 153, 153, 153, 32, 171, 169, 173, 154, 154, 154, 32, 168, 170, 156, 93, 93, 93, 32, 170, 168, 162, 155, 155, 155, 32, 158, 160, 168, 156, 156, 156, 32, 162, 164, 170, 157, 157, 157, 32, 166, 170, 164, 158, 158, 158, 32, 109, 94, 111, 159, 159, 159, 32, 107, 113, 115, 160, 160, 160, 32, 109, 111, 112, 159, 159, 159, 32, 107, 115, 108, 161, 161, 161, 32, 109, 112, 107, 162, 162, 162, 32, 107, 108, 109, 163, 163, 163, 32, 106, 115, 113, 134, 134, 134, 32, 111, 94, 93, 164, 164, 164, 32, 106, 113, 114, 165, 165, 165, 32, 110, 111, 93, 166, 166, 166, 32, 93, 106, 114, 163, 163, 163, 32, 93, 114, 110, 134, 134, 134, 33, 74, 75, 77, 76, 167, 167, 167, 167, 33, 78, 76, 77, 79, 168, 168, 168, 168, 32, 118, 117, 134, 169, 169, 169, 32, 135, 136, 133, 170, 170, 170, 32, 118, 134, 135, 171, 171, 171, 32, 135, 133, 118, 172, 172, 172, 32, 130, 139, 137, 173, 173, 173, 32, 134, 117, 130, 174, 174, 174, 32, 130, 137, 138, 175, 175, 175, 32, 130, 138, 134, 176, 176, 176, 32, 132, 133, 136, 177, 177, 177, 32, 131, 137, 139, 178, 178, 178, 32, 132, 136, 131, 179, 179, 179, 32, 131, 139, 132, 180, 180, 180]
        },
        cache: {
            id: "cache",
            primaryColorFaces: [2, 22, 23, 24, 25, 26, 27, 28, 29, 3, 30, 31, 32, 33, 34, 35],
            imagePlanePosition: {
                y: .52
            },
            imagePlaneRotation: {
                x: -1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .4,
            uvs: [],
            metadata: {
                normals: 75,
                faces: 122,
                vertices: 148,
                version: 3,
                generator: "io_three",
                type: "Geometry",
                uvs: 0
            },
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 19, 15, 6, 10, 1, 1, 1, 1, 32, 1, 0, 4, 2, 2, 2, 32, 4, 12, 8, 3, 3, 3, 32, 8, 5, 1, 4, 4, 4, 32, 4, 8, 1, 5, 5, 5, 32, 2, 1, 5, 6, 6, 6, 32, 5, 14, 10, 7, 7, 7, 32, 10, 6, 2, 8, 8, 8, 32, 5, 10, 2, 9, 9, 9, 32, 3, 2, 6, 10, 10, 10, 32, 6, 15, 11, 11, 11, 11, 32, 11, 7, 3, 12, 12, 12, 32, 6, 11, 3, 13, 13, 13, 32, 13, 4, 0, 14, 14, 14, 32, 0, 3, 7, 15, 15, 15, 32, 7, 9, 13, 7, 7, 7, 32, 0, 7, 13, 16, 16, 16, 33, 18, 17, 16, 19, 17, 17, 17, 17, 33, 18, 19, 10, 14, 18, 18, 18, 18, 33, 9, 7, 11, 16, 19, 19, 19, 19, 33, 13, 9, 16, 17, 20, 20, 20, 20, 33, 4, 13, 17, 12, 21, 21, 21, 21, 33, 8, 18, 14, 5, 22, 22, 22, 22, 33, 17, 18, 8, 12, 23, 23, 23, 23, 33, 15, 19, 16, 11, 24, 24, 24, 24, 33, 21, 23, 22, 20, 25, 25, 25, 25, 33, 23, 27, 26, 22, 26, 26, 26, 26, 33, 27, 25, 24, 26, 27, 27, 27, 27, 33, 25, 21, 20, 24, 28, 28, 28, 28, 33, 20, 22, 26, 24, 29, 29, 29, 29, 33, 25, 27, 23, 21, 7, 7, 7, 7, 33, 29, 31, 30, 28, 25, 25, 25, 25, 33, 31, 35, 34, 30, 26, 26, 26, 26, 33, 35, 33, 32, 34, 27, 27, 27, 27, 33, 33, 29, 28, 32, 30, 30, 30, 30, 33, 28, 30, 34, 32, 31, 31, 31, 31, 33, 33, 35, 31, 29, 32, 32, 32, 32, 33, 37, 39, 38, 36, 33, 33, 33, 33, 33, 39, 43, 42, 38, 34, 34, 34, 34, 33, 43, 41, 40, 42, 27, 27, 27, 27, 33, 41, 37, 36, 40, 35, 35, 35, 35, 33, 36, 38, 42, 40, 36, 36, 36, 36, 33, 41, 43, 39, 37, 7, 7, 7, 7, 33, 45, 47, 46, 44, 25, 25, 25, 25, 33, 47, 51, 50, 46, 37, 37, 37, 37, 33, 51, 49, 48, 50, 27, 27, 27, 27, 33, 49, 45, 44, 48, 38, 38, 38, 38, 33, 44, 46, 50, 48, 39, 39, 39, 39, 33, 49, 51, 47, 45, 7, 7, 7, 7, 33, 53, 55, 54, 52, 27, 27, 27, 27, 33, 55, 59, 58, 54, 40, 40, 40, 40, 33, 59, 57, 56, 58, 25, 25, 25, 25, 33, 57, 53, 52, 56, 41, 41, 41, 41, 33, 52, 54, 58, 56, 42, 42, 42, 42, 33, 57, 59, 55, 53, 43, 43, 43, 43, 33, 61, 63, 62, 60, 27, 27, 27, 27, 33, 63, 67, 66, 62, 44, 44, 44, 44, 33, 67, 65, 64, 66, 25, 25, 25, 25, 33, 65, 61, 60, 64, 45, 45, 45, 45, 33, 60, 62, 66, 64, 42, 42, 42, 42, 33, 65, 67, 63, 61, 43, 43, 43, 43, 33, 69, 71, 70, 68, 27, 27, 27, 27, 33, 71, 75, 74, 70, 44, 44, 44, 44, 33, 75, 73, 72, 74, 25, 25, 25, 25, 33, 73, 69, 68, 72, 46, 46, 46, 46, 33, 68, 70, 74, 72, 47, 47, 47, 47, 33, 73, 75, 71, 69, 43, 43, 43, 43, 33, 77, 79, 78, 76, 27, 27, 27, 27, 33, 79, 83, 82, 78, 48, 48, 48, 48, 33, 83, 81, 80, 82, 25, 25, 25, 25, 33, 81, 77, 76, 80, 45, 45, 45, 45, 33, 76, 78, 82, 80, 49, 49, 49, 49, 33, 81, 83, 79, 77, 43, 43, 43, 43, 33, 85, 87, 86, 84, 50, 50, 50, 50, 33, 87, 91, 90, 86, 51, 51, 51, 51, 33, 91, 89, 88, 90, 52, 52, 52, 52, 33, 89, 85, 84, 88, 53, 53, 53, 53, 33, 84, 86, 90, 88, 54, 54, 54, 54, 33, 89, 91, 87, 85, 55, 55, 55, 55, 33, 93, 95, 94, 92, 50, 50, 50, 50, 33, 95, 99, 98, 94, 51, 51, 51, 51, 33, 99, 97, 96, 98, 52, 52, 52, 52, 33, 97, 93, 92, 96, 56, 56, 56, 56, 33, 92, 94, 98, 96, 57, 57, 57, 57, 33, 97, 99, 95, 93, 58, 58, 58, 58, 33, 101, 103, 102, 100, 59, 59, 59, 59, 33, 103, 107, 106, 102, 60, 60, 60, 60, 33, 107, 105, 104, 106, 52, 52, 52, 52, 33, 105, 101, 100, 104, 61, 61, 61, 61, 33, 100, 102, 106, 104, 62, 62, 62, 62, 33, 105, 107, 103, 101, 55, 55, 55, 55, 33, 109, 111, 110, 108, 50, 50, 50, 50, 33, 111, 115, 114, 110, 63, 63, 63, 63, 33, 115, 113, 112, 114, 52, 52, 52, 52, 33, 113, 109, 108, 112, 64, 64, 64, 64, 33, 108, 110, 114, 112, 65, 65, 65, 65, 33, 113, 115, 111, 109, 55, 55, 55, 55, 33, 117, 119, 118, 116, 52, 52, 52, 52, 33, 119, 123, 122, 118, 66, 66, 66, 66, 33, 123, 121, 120, 122, 50, 50, 50, 50, 33, 121, 117, 116, 120, 67, 67, 67, 67, 33, 116, 118, 122, 120, 68, 68, 68, 68, 33, 121, 123, 119, 117, 7, 7, 7, 7, 33, 125, 127, 126, 124, 52, 52, 52, 52, 33, 127, 131, 130, 126, 69, 69, 69, 69, 33, 131, 129, 128, 130, 50, 50, 50, 50, 33, 129, 125, 124, 128, 70, 70, 70, 70, 33, 124, 126, 130, 128, 68, 68, 68, 68, 33, 129, 131, 127, 125, 7, 7, 7, 7, 33, 133, 135, 134, 132, 52, 52, 52, 52, 33, 135, 139, 138, 134, 71, 71, 71, 71, 33, 139, 137, 136, 138, 50, 50, 50, 50, 33, 137, 133, 132, 136, 70, 70, 70, 70, 33, 132, 134, 138, 136, 72, 72, 72, 72, 33, 137, 139, 135, 133, 7, 7, 7, 7, 33, 141, 143, 142, 140, 52, 52, 52, 52, 33, 143, 147, 146, 142, 73, 73, 73, 73, 33, 147, 145, 144, 146, 50, 50, 50, 50, 33, 145, 141, 140, 144, 74, 74, 74, 74, 33, 140, 142, 146, 144, 72, 72, 72, 72, 33, 145, 147, 143, 141, 7, 7, 7, 7],
            normals: [-7.10543e-15, -1, 5.96046e-8, -.29579, .908304, .295789, 1, -593045e-11, 3.53482e-13, -.0322412, .99948, -7.68692e-8, 1, 815434e-11, 298022e-11, 1, 499406e-11, 4.39192e-7, -5.96046e-8, -815436e-11, 1, 0, 1, 0, -238418e-11, 222391e-11, 1, -3.7645e-7, -2.73113e-7, 1, -1, -296522e-11, -2.38418e-7, -.0623783, .998053, -7.43607e-8, -1, -370653e-11, -5.96048e-7, -1, -421374e-11, -1.88225e-7, 178814e-11, 593044e-11, -1, 2.08616e-7, 444784e-11, -1, 1.88225e-7, 394062e-11, -1, 1.09652e-14, 1, -6.62274e-8, -1.35485e-7, .837946, .545754, -.295789, .908304, -.295791, 7.26204e-8, .837945, -.545755, .29579, .908304, -.29579, .29579, .908304, .29579, .545755, .837945, 1.07305e-7, -.545754, .837945, -1.36569e-7, 0, 0, -1, .992192, 0, -.124721, 0, 0, 1, -.996405, 0, -.0847116, 0, -.985029, -.172388, -.996405, 0, -.0847114, 0, -.985029, -.172388, 0, 1, 0, -264923e-11, 0, -1, .992192, 0, -.124721, -.996405, 0, -.0847115, -1.75448e-7, -.985029, -.172387, .992192, 0, -.124721, -.996405, 0, -.0847113, 0, -.985029, -.172387, -.992192, 0, .124721, .996405, 0, .0847116, 0, -.985029, .172387, 0, 1, 0, -.992192, 0, .124721, .996405, 0, .0847114, .996405, 0, .0847114, 0, -.985029, .172387, -.992192, 0, .124721, 0, -.985029, .172387, 1, 0, 0, .124721, 0, .992192, -1, 0, 0, .0847116, 0, -.996405, .172388, -.985029, 0, 0, 1, 0, .0847114, 0, -.996405, .172387, -.985029, 2.5064e-7, 9.40993e-8, 1, -2.44911e-7, 1, -2.11973e-12, -264923e-11, .124721, 1.70888e-7, .992192, .0847115, -1.71614e-7, -.996405, .172387, -.985029, -1.75448e-7, .124721, 1.70888e-7, .992192, .0847113, -3.26067e-7, -.996405, .172387, -.985029, 0, -.124721, 0, -.992192, -.0847116, 0, .996405, -.172387, -.985029, 0, -.124721, 0, -.992192, -.0847114, 0, .996405, -.124721, -1.70888e-7, -.992192, -.172387, -.985029, 0, -.124721, -1.70888e-7, -.992192, -.0847114, 1.71614e-7, .996405],
            vertices: [1, -713587e-9, -1, 1, -713468e-9, 1, -1, -713468e-9, 1, -1, -713587e-9, -1, 1, .0796914, -.999999, .999999, .0796915, 1, -1, .0796915, 1, -1, .0796914, -1, 1, .0796915, .9, -.9, .0796914, -1, -.9, .0796915, 1, -1, .0796914, -.9, 1, .0796914, -.9, .9, .0796914, -1, .899999, .0796915, 1, -1, .0796915, .9, -.9, .144821, -.9, .9, .144821, -.9, .9, .144822, .9, -.9, .144822, .9, .648057, .0186934, 1.39775, .648057, 700355e-10, 1.39775, .558062, .0186934, 1.39775, .558062, 700355e-10, 1.39775, .673629, .0713333, 1.09697, .673629, 700355e-10, 1.09697, .520252, .0713333, 1.09697, .520252, 700355e-10, 1.09697, -.551943, .0186934, 1.39775, -.551943, 700355e-10, 1.39775, -.641938, .0186934, 1.39775, -.641938, 700355e-10, 1.39775, -.526371, .0713333, 1.09697, -.526371, 700355e-10, 1.09697, -.679748, .0713333, 1.09697, -.679748, 700355e-10, 1.09697, .248057, .0186934, 1.39775, .248057, 700355e-10, 1.39775, .158062, .0186934, 1.39775, .158062, 700355e-10, 1.39775, .273629, .0713333, 1.09697, .273629, 700355e-10, 1.09697, .120252, .0713333, 1.09697, .120252, 700355e-10, 1.09697, -.151943, .0186934, 1.39775, -.151943, 700355e-10, 1.39775, -.241938, .0186934, 1.39775, -.241938, 700355e-10, 1.39775, -.126371, .0713333, 1.09697, -.126371, 700355e-10, 1.09697, -.279748, .0713333, 1.09697, -.279748, 700355e-10, 1.09697, -.648057, .0186933, -1.40303, -.648057, 699162e-10, -1.40303, -.558061, .0186933, -1.40303, -.558061, 699162e-10, -1.40303, -.673629, .0713332, -1.10225, -.673629, 699162e-10, -1.10225, -.520252, .0713332, -1.10225, -.520252, 699162e-10, -1.10225, .551943, .0186933, -1.40303, .551943, 699162e-10, -1.40303, .641939, .0186933, -1.40303, .641939, 699162e-10, -1.40303, .526371, .0713332, -1.10225, .526371, 699162e-10, -1.10225, .679748, .0713332, -1.10225, .679748, 699162e-10, -1.10225, -.248057, .0186933, -1.40303, -.248057, 699162e-10, -1.40303, -.158061, .0186933, -1.40303, -.158061, 699162e-10, -1.40303, -.273629, .0713332, -1.10225, -.273629, 699162e-10, -1.10225, -.120252, .0713332, -1.10225, -.120252, 699162e-10, -1.10225, .151943, .0186933, -1.40303, .151943, 699162e-10, -1.40303, .241939, .0186933, -1.40303, .241939, 699162e-10, -1.40303, .126371, .0713332, -1.10225, .126371, 699162e-10, -1.10225, .279748, .0713332, -1.10225, .279748, 699162e-10, -1.10225, -1.40039, .0186934, .645418, -1.40039, 699759e-10, .645418, -1.40039, .0186934, .555423, -1.40039, 699759e-10, .555423, -1.09961, .0713332, .67099, -1.09961, 699759e-10, .67099, -1.09961, .0713332, .517613, -1.09961, 699759e-10, .517613, -1.40039, .0186934, -.554582, -1.40039, 699759e-10, -.554582, -1.40039, .0186934, -.644577, -1.40039, 699759e-10, -.644577, -1.09961, .0713332, -.52901, -1.09961, 699759e-10, -.52901, -1.09961, .0713332, -.682387, -1.09961, 699162e-10, -.682387, -1.40039, .0186934, .245418, -1.40039, 699759e-10, .245418, -1.40039, .0186934, .155423, -1.40039, 699759e-10, .155423, -1.09961, .0713332, .27099, -1.09961, 699759e-10, .27099, -1.09961, .0713332, .117613, -1.09961, 699759e-10, .117613, -1.40039, .0186934, -.154582, -1.40039, 699759e-10, -.154582, -1.40039, .0186934, -.244577, -1.40039, 699759e-10, -.244577, -1.09961, .0713332, -.12901, -1.09961, 699759e-10, -.12901, -1.09961, .0713332, -.282387, -1.09961, 699759e-10, -.282387, 1.40039, .0186934, -.650696, 1.40039, 699759e-10, -.650696, 1.40039, .0186934, -.5607, 1.40039, 699759e-10, -.5607, 1.09961, .0713332, -.676268, 1.09961, 699759e-10, -.676268, 1.09961, .0713332, -.522891, 1.09961, 699759e-10, -.522891, 1.40039, .0186934, .549304, 1.40039, 699759e-10, .549304, 1.40039, .0186934, .6393, 1.40039, 699759e-10, .6393, 1.09961, .0713332, .523732, 1.09961, 699759e-10, .523732, 1.09961, .0713332, .677109, 1.09961, 699759e-10, .677109, 1.40039, .0186934, -.250696, 1.40039, 699759e-10, -.250696, 1.40039, .0186934, -.1607, 1.40039, 699759e-10, -.1607, 1.09961, .0713332, -.276268, 1.09961, 699759e-10, -.276268, 1.09961, .0713332, -.122891, 1.09961, 699759e-10, -.122891, 1.40039, .0186934, .149304, 1.40039, 699759e-10, .149304, 1.40039, .0186934, .2393, 1.40039, 699759e-10, .2393, 1.09961, .0713332, .123732, 1.09961, 699759e-10, .123732, 1.09961, .0713332, .277109, 1.09961, 699759e-10, .277109]
        },
        brain: {
            id: "brain",
            primaryColorFaces: [0, 1, 2, 3, 4, 5, 6, 7, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313],
            imagePlanePosition: {
                y: 2.77
            },
            imagePlaneRotation: {
                x: -1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .36,
            normals: [-.412469, .910972, -4.57149e-8, 0, .910972, -.412469, .412469, .910972, -4.57149e-8, 0, .910972, .412469, 0, -1, 5.89786e-8, 0, 1, -4.16789e-8, -.353554, -.866025, .353554, 0, -1, 0, 0, -1, 0, 0, -1, 0, .707107, 0, .707107, .707107, 5.50368e-7, .707107, .707107, 0, .707106, .707107, -1.69344e-7, .707107, .353553, .866025, -.353554, .353553, -.866025, -.353553, -.707107, 0, .707107, .707107, 0, -.707107, -.353553, .866025, .353553, -.707107, -6.60736e-8, .707107, -.965926, 4.62515e-8, -.258819, -.25882, 0, -.965926, .707107, 0, -.707107, -.730092, .654766, -.195569, -.707106, -2.75069e-7, .707107, -.195569, .654767, -.730091, .258826, 184801e-11, .965924, .965924, 17621e-10, .258826, .72999, -.654993, .19519, .19519, -.654993, .72999, -.560792, .814207, -.150264, -.908231, .34043, -.24336, -.797185, -.564685, -.213605, -.664871, .340429, -.664871, -.58358, -.564685, -.58358, -.410528, .814207, -.410528, -.24336, .340429, -.908231, -.213605, -.564685, -.797185, -.150264, .814207, -.560792, .701373, .256709, -.664963, .654348, -.452604, -.605788, .451785, .716888, -.531002, .290582, -.918255, .269018, .451784, .716888, .531002, .701373, .25671, .664963, -.229622, .777618, .585307, -.372272, .382322, .84572, -.106045, -.948437, .298699, -.669136, .456631, .586298, -.308701, -.901126, .304425, -.560955, .655089, .50615, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -.868065, .402099, .29117, -.760407, -.602816, .241649, -.671373, .721066, .171237, .991793, .0958096, -.0846625, .999942, -.0107296, 1.07097e-7, .996838, .0481552, -.0632133, .987491, -.157672, 2.80981e-8, .999492, .0311615, .00672965, .999525, -.0257839, .0168961, -4.97359e-8, 1, -4.31338e-8, 1.88035e-7, 1, 0, 2.21165e-8, 1, -3.8307e-8, 0, 1, -5.59738e-8, .560792, .814207, -.150264, .908231, .340429, -.24336, .797185, -.564685, -.213605, .664871, .340429, -.664871, .58358, -.564685, -.58358, .410528, .814207, -.410528, .24336, .340429, -.908231, .213605, -.564685, -.797185, .150264, .814207, -.560792, -.701373, .256709, -.664963, -.654348, -.452603, -.605788, -.442489, .718518, -.536595, -.290582, -.918255, .269018, -.442488, .718519, .536595, -.701373, .25671, .664963, .229622, .777618, .585307, .372272, .382322, .84572, .106045, -.948437, .298699, .669136, .456631, .586298, .308701, -.901126, .304425, .560955, .655089, .50615, .868065, .402099, .29117, .760407, -.602816, .241649, .671373, .721066, .171237, -.98805, .104767, -.113051, -.987491, -.157672, 2.80981e-8, -.996838, .0481552, -.0632133, -.999285, -.0378047, 1.07027e-7, -.999726, .0095676, .021364, -.999898, -.0137657, .00386599, 6.88255e-8, 1, -2.5686e-7, -4.97359e-8, 1, -4.31338e-8, -5.43891e-8, 1, -4.34464e-8, -.353554, -.866025, -.353554, 0, -1, 0, 0, -1, 0, -.707107, 0, .707107, -.707107, 5.08032e-7, .707107, -.707106, 0, .707107, -.707107, -1.69344e-7, .707107, .353554, .866026, .353553, .353554, -.866025, .353554, -.707107, 0, -.707107, .707107, 0, .707107, -.353553, .866025, -.353553, -.707107, 1.27742e-7, -.707106, .258819, 1.73994e-7, -.965926, .965926, 0, -.258819, .707107, 6.60736e-8, .707107, .195569, .654767, -.730092, -.707107, -2.75069e-7, -.707107, .707106, -1.28365e-7, .707107, .730091, .654767, -.195569, -.965924, 17621e-10, .258827, -.258826, 1848e-9, .965924, -.19519, -.654993, .72999, -.72999, -.654992, .195191, .353554, -.866025, .353553, 0, -1, 0, .707107, 0, -.707107, .707107, 0, -.707107, -.353553, .866025, -.353553, -.353554, -.866025, -.353553, .707107, 0, .707107, -.707107, 0, -.707107, .353553, .866026, .353553, .707107, 0, .707107, -.258819, 1.73994e-7, .965926, -.965926, 0, .258819, -.707107, 0, -.707107, -.195569, .654767, .730091, .707106, 2.75069e-7, .707107, -.730091, .654767, .195569, .965924, 180616e-11, -.258826, .258826, 17621e-10, -.965924, .19519, -.654993, -.72999, .72999, -.654993, -.19519, .353554, -.866025, -.353553, -.707107, 0, -.707107, -.707107, 0, -.707107, -.707107, 0, -.707107, -.353553, .866026, .353553, -.353554, -.866025, .353553, .707107, 0, -.707107, -.707107, 0, .707107, .353553, .866026, -.353553, .707107, 6.60736e-8, -.707107, .965926, 8.58957e-8, .258819, .258818, 0, .965926, -.707106, -1.27742e-7, .707107, .730092, .654766, .195569, .707107, 1.28365e-7, -.707107, -.707106, 2.75069e-7, .707107, .195569, .654766, .730092, -.258826, 17621e-10, -.965924, -.965924, 180616e-11, -.258826, -.72999, -.654993, -.19519, -.19519, -.654993, -.72999],
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 3, 7, 6, 2, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 4, 5, 1, 3, 3, 3, 3, 33, 0, 2, 6, 4, 4, 4, 4, 4, 33, 5, 7, 3, 1, 5, 5, 5, 5, 33, 11, 10, 16, 17, 6, 6, 6, 6, 32, 29, 20, 21, 7, 7, 7, 32, 21, 23, 25, 7, 7, 7, 32, 25, 27, 29, 8, 8, 8, 32, 21, 25, 29, 9, 9, 9, 32, 8, 9, 10, 10, 10, 10, 32, 10, 11, 12, 11, 11, 11, 32, 12, 13, 8, 12, 12, 12, 32, 10, 12, 8, 13, 13, 13, 33, 8, 13, 19, 15, 14, 14, 14, 14, 33, 12, 11, 17, 18, 15, 15, 15, 15, 33, 10, 9, 14, 16, 16, 16, 16, 16, 33, 13, 12, 18, 19, 17, 17, 17, 17, 33, 9, 8, 15, 14, 18, 18, 18, 18, 33, 21, 22, 24, 23, 19, 19, 19, 19, 33, 23, 24, 26, 25, 20, 20, 20, 20, 33, 25, 26, 28, 27, 21, 21, 21, 21, 33, 27, 28, 30, 29, 22, 22, 22, 22, 33, 26, 24, 14, 15, 23, 23, 23, 23, 33, 24, 22, 16, 14, 24, 24, 24, 24, 33, 30, 28, 19, 18, 22, 22, 22, 22, 33, 28, 26, 15, 19, 25, 25, 25, 25, 33, 20, 17, 22, 21, 26, 26, 26, 26, 33, 29, 30, 17, 20, 27, 27, 27, 27, 32, 17, 30, 18, 28, 28, 28, 32, 22, 17, 16, 29, 29, 29, 33, 32, 31, 35, 36, 30, 30, 30, 30, 33, 33, 32, 36, 37, 31, 31, 31, 31, 33, 34, 33, 37, 38, 32, 32, 32, 32, 33, 37, 36, 40, 41, 33, 33, 33, 33, 33, 38, 37, 41, 42, 34, 34, 34, 34, 33, 36, 35, 39, 40, 35, 35, 35, 35, 33, 41, 40, 44, 45, 36, 36, 36, 36, 33, 42, 41, 45, 46, 37, 37, 37, 37, 33, 40, 39, 43, 44, 38, 38, 38, 38, 33, 45, 44, 48, 49, 39, 39, 39, 39, 33, 46, 45, 49, 50, 40, 40, 40, 40, 33, 44, 43, 47, 48, 41, 41, 41, 41, 33, 54, 53, 57, 58, 42, 42, 42, 42, 33, 52, 51, 55, 56, 43, 43, 43, 43, 33, 53, 52, 56, 57, 44, 44, 44, 44, 33, 56, 55, 59, 60, 45, 45, 45, 45, 33, 57, 56, 60, 61, 46, 46, 46, 46, 33, 58, 57, 61, 62, 47, 47, 47, 47, 33, 61, 60, 64, 65, 48, 48, 48, 48, 33, 62, 61, 65, 66, 49, 49, 49, 49, 33, 60, 59, 63, 64, 50, 50, 50, 50, 32, 35, 31, 63, 51, 51, 51, 32, 63, 59, 55, 51, 51, 51, 32, 55, 51, 47, 52, 52, 52, 32, 47, 43, 39, 53, 53, 53, 32, 39, 35, 63, 52, 52, 52, 32, 63, 55, 47, 52, 52, 52, 32, 63, 47, 39, 54, 54, 54, 33, 65, 64, 32, 33, 55, 55, 55, 55, 33, 66, 65, 33, 34, 56, 56, 56, 56, 33, 64, 63, 31, 32, 57, 57, 57, 57, 32, 49, 48, 47, 58, 58, 58, 32, 47, 51, 52, 59, 59, 59, 32, 52, 53, 54, 60, 60, 60, 32, 54, 50, 49, 61, 61, 61, 32, 49, 47, 52, 62, 62, 62, 32, 52, 54, 49, 63, 63, 63, 32, 38, 34, 66, 52, 52, 52, 32, 66, 62, 58, 52, 52, 52, 32, 58, 54, 50, 64, 64, 64, 32, 50, 46, 42, 53, 53, 53, 32, 42, 38, 66, 65, 65, 65, 32, 66, 58, 50, 66, 66, 66, 32, 66, 50, 42, 67, 67, 67, 33, 68, 72, 71, 67, 68, 68, 68, 68, 33, 69, 73, 72, 68, 69, 69, 69, 69, 33, 70, 74, 73, 69, 70, 70, 70, 70, 33, 73, 77, 76, 72, 71, 71, 71, 71, 33, 74, 78, 77, 73, 72, 72, 72, 72, 33, 72, 76, 75, 71, 73, 73, 73, 73, 33, 77, 81, 80, 76, 74, 74, 74, 74, 33, 78, 82, 81, 77, 75, 75, 75, 75, 33, 76, 80, 79, 75, 76, 76, 76, 76, 33, 81, 85, 84, 80, 77, 77, 77, 77, 33, 82, 86, 85, 81, 78, 78, 78, 78, 33, 80, 84, 83, 79, 79, 79, 79, 79, 33, 90, 94, 93, 89, 80, 80, 80, 80, 33, 88, 92, 91, 87, 81, 81, 81, 81, 33, 89, 93, 92, 88, 82, 82, 82, 82, 33, 92, 96, 95, 91, 83, 83, 83, 83, 33, 93, 97, 96, 92, 84, 84, 84, 84, 33, 94, 98, 97, 93, 85, 85, 85, 85, 33, 97, 101, 100, 96, 86, 86, 86, 86, 33, 98, 102, 101, 97, 87, 87, 87, 87, 33, 96, 100, 99, 95, 88, 88, 88, 88, 33, 101, 69, 68, 100, 89, 89, 89, 89, 33, 102, 70, 69, 101, 90, 90, 90, 90, 33, 100, 68, 67, 99, 91, 91, 91, 91, 32, 83, 84, 85, 92, 92, 92, 32, 85, 86, 90, 93, 93, 93, 32, 90, 89, 88, 94, 94, 94, 32, 88, 87, 83, 95, 95, 95, 32, 83, 85, 90, 96, 96, 96, 32, 90, 88, 83, 97, 97, 97, 32, 102, 70, 74, 54, 54, 54, 32, 74, 78, 82, 98, 98, 98, 32, 82, 86, 90, 99, 99, 99, 32, 90, 94, 98, 51, 51, 51, 32, 98, 102, 74, 54, 54, 54, 32, 74, 82, 90, 100, 100, 100, 32, 74, 90, 98, 52, 52, 52, 32, 99, 67, 71, 54, 54, 54, 32, 71, 75, 79, 52, 52, 52, 32, 79, 83, 87, 52, 52, 52, 32, 87, 91, 95, 52, 52, 52, 32, 95, 99, 71, 52, 52, 52, 32, 71, 79, 87, 53, 53, 53, 32, 71, 87, 95, 52, 52, 52, 33, 106, 105, 111, 112, 101, 101, 101, 101, 32, 124, 115, 116, 7, 7, 7, 32, 116, 118, 120, 9, 9, 9, 32, 120, 122, 124, 102, 102, 102, 32, 116, 120, 124, 103, 103, 103, 32, 103, 104, 105, 104, 104, 104, 32, 105, 106, 107, 105, 105, 105, 32, 107, 108, 103, 106, 106, 106, 32, 105, 107, 103, 107, 107, 107, 33, 103, 108, 114, 110, 108, 108, 108, 108, 33, 107, 106, 112, 113, 109, 109, 109, 109, 33, 105, 104, 109, 111, 110, 110, 110, 110, 33, 108, 107, 113, 114, 111, 111, 111, 111, 33, 104, 103, 110, 109, 112, 112, 112, 112, 33, 116, 117, 119, 118, 113, 113, 113, 113, 33, 118, 119, 121, 120, 114, 114, 114, 114, 33, 120, 121, 123, 122, 115, 115, 115, 115, 33, 122, 123, 125, 124, 116, 116, 116, 116, 33, 121, 119, 109, 110, 117, 117, 117, 117, 33, 119, 117, 111, 109, 118, 118, 118, 118, 33, 125, 123, 114, 113, 119, 119, 119, 119, 33, 123, 121, 110, 114, 120, 120, 120, 120, 33, 115, 112, 117, 116, 121, 121, 121, 121, 33, 124, 125, 112, 115, 122, 122, 122, 122, 32, 112, 125, 113, 123, 123, 123, 32, 117, 112, 111, 124, 124, 124, 33, 129, 128, 134, 135, 125, 125, 125, 125, 32, 147, 138, 139, 7, 7, 7, 32, 139, 141, 143, 126, 126, 126, 32, 143, 145, 147, 126, 126, 126, 32, 139, 143, 147, 126, 126, 126, 32, 126, 127, 128, 127, 127, 127, 32, 128, 129, 130, 127, 127, 127, 32, 130, 131, 126, 127, 127, 127, 32, 128, 130, 126, 128, 128, 128, 33, 126, 131, 137, 133, 129, 129, 129, 129, 33, 130, 129, 135, 136, 130, 130, 130, 130, 33, 128, 127, 132, 134, 131, 131, 131, 131, 33, 131, 130, 136, 137, 132, 132, 132, 132, 33, 127, 126, 133, 132, 133, 133, 133, 133, 33, 139, 140, 142, 141, 134, 134, 134, 134, 33, 141, 142, 144, 143, 135, 135, 135, 135, 33, 143, 144, 146, 145, 136, 136, 136, 136, 33, 145, 146, 148, 147, 137, 137, 137, 137, 33, 144, 142, 132, 133, 138, 138, 138, 138, 33, 142, 140, 134, 132, 139, 139, 139, 139, 33, 148, 146, 137, 136, 137, 137, 137, 137, 33, 146, 144, 133, 137, 140, 140, 140, 140, 33, 138, 135, 140, 139, 141, 141, 141, 141, 33, 147, 148, 135, 138, 142, 142, 142, 142, 32, 135, 148, 136, 143, 143, 143, 32, 140, 135, 134, 144, 144, 144, 33, 152, 151, 157, 158, 145, 145, 145, 145, 32, 170, 161, 162, 7, 7, 7, 32, 162, 164, 166, 102, 102, 102, 32, 166, 168, 170, 126, 126, 126, 32, 162, 166, 170, 102, 102, 102, 32, 149, 150, 151, 146, 146, 146, 32, 151, 152, 153, 146, 146, 146, 32, 153, 154, 149, 147, 147, 147, 32, 151, 153, 149, 148, 148, 148, 33, 149, 154, 160, 156, 149, 149, 149, 149, 33, 153, 152, 158, 159, 150, 150, 150, 150, 33, 151, 150, 155, 157, 151, 151, 151, 151, 33, 154, 153, 159, 160, 152, 152, 152, 152, 33, 150, 149, 156, 155, 153, 153, 153, 153, 33, 162, 163, 165, 164, 154, 154, 154, 154, 33, 164, 165, 167, 166, 155, 155, 155, 155, 33, 166, 167, 169, 168, 156, 156, 156, 156, 33, 168, 169, 171, 170, 157, 157, 157, 157, 33, 167, 165, 155, 156, 158, 158, 158, 158, 33, 165, 163, 157, 155, 159, 159, 159, 159, 33, 171, 169, 160, 159, 160, 160, 160, 160, 33, 169, 167, 156, 160, 161, 161, 161, 161, 33, 161, 158, 163, 162, 162, 162, 162, 162, 33, 170, 171, 158, 161, 163, 163, 163, 163, 32, 158, 171, 159, 164, 164, 164, 32, 163, 158, 157, 165, 165, 165],
            vertices: [-1.51592, 5.96046e-8, 1.51592, -1.43009, .0388629, 1.43009, -1.51592, -1.19209e-7, -1.51592, -1.43009, .0388628, -1.43009, 1.51592, 5.96046e-8, 1.51592, 1.43009, .0388629, 1.43009, 1.51592, -1.19209e-7, -1.51592, 1.43009, .0388628, -1.43009, -.732599, .524737, -.715952, -.781399, .484893, -.667152, -.781399, .405203, -.667152, -.732599, .365359, -.715952, -.6838, .405203, -.764751, -.6838, .484893, -.764751, -1.07017, .484893, -.955927, -1.02137, .524737, -1.00473, -1.07017, .405203, -.955927, -1.02137, .365359, -1.00473, -.972574, .405203, -1.05353, -.972574, .484893, -1.05353, -1.02137, .0337631, -1.00473, -1.09835, .0337631, -.9841, -1.09835, .365408, -.9841, -1.1547, .0337631, -1.04045, -1.1547, .365408, -1.04045, -1.13407, .0337631, -1.11742, -1.13407, .365408, -1.11742, -1.0571, .0337631, -1.13805, -1.0571, .365408, -1.13805, -1.00075, .0337631, -1.0817, -1.00075, .365408, -1.0817, -.658337, .829167, -.112444, -1.02436, .577064, -.112444, -1.15834, .219634, -.112444, -1.02436, .0304974, -.112444, -.59135, .829167, -.362444, -.908337, .577064, -.545456, -1.02436, .219634, -.612443, -.908337, .0304974, -.545456, -.408337, .829167, -.545456, -.59135, .577064, -.862444, -.658337, .219634, -.978469, -.59135, .0304973, -.862443, -.158337, .829167, -.612443, -.158337, .577064, -.978469, -.158337, .219634, -1.11244, -.158337, .0304973, -.978469, -.0494333, .829167, -.545456, -.0521385, .577064, -.862444, -.0275141, .219634, -.978469, -.0577134, .0304973, -.862443, -.0494334, .829167, .706705, -.0521386, .577065, 1.02369, -.0275142, .219634, 1.13972, -.0577135, .0304974, .51941, -.158337, .829167, .773692, -.158337, .577065, 1.13972, -.158337, .219634, 1.27369, -.158337, .0304974, .635436, -.408337, .829167, .706705, -.46798, .590003, .969961, -.591011, .227481, 1.1073, -.59135, .0304974, .51941, -.59135, .829167, .523692, -.727039, .577065, .679781, -.892697, .219634, .773692, -.908337, .0304974, .202423, .658717, .829167, -.112444, 1.02474, .577064, -.112444, 1.15872, .219634, -.112444, 1.02474, .0304974, -.112444, .591729, .829167, -.362444, .908717, .577064, -.545456, 1.02474, .219634, -.612443, .908717, .0304974, -.545456, .408717, .829167, -.545456, .591729, .577064, -.862444, .658717, .219634, -.978469, .591729, .0304973, -.862443, .158717, .829167, -.612443, .158717, .577064, -.978469, .158717, .219634, -1.11244, .158717, .0304973, -.978469, .0429804, .829167, -.545456, .052518, .577064, -.862444, .0278936, .219634, -.978469, .0580929, .0304973, -.862443, .0429806, .829167, .706705, .0525181, .577065, 1.02369, .0278937, .219634, 1.13972, .058093, .0304974, .51941, .158717, .829167, .773692, .158717, .577065, 1.13972, .158717, .219634, 1.27369, .158717, .0304974, .635436, .408717, .829167, .706705, .468359, .590003, .969961, .591391, .227481, 1.1073, .59173, .0304974, .51941, .591729, .829167, .523692, .727418, .577065, .679781, .893077, .219634, .773692, .908717, .0304974, .202423, .732596, .524737, -.715956, .683796, .484893, -.764755, .683796, .405203, -.764755, .732596, .365359, -.715956, .781395, .405203, -.667156, .781395, .484893, -.667156, .97257, .484893, -1.05353, 1.02137, .524737, -1.00473, .97257, .405203, -1.05353, 1.02137, .365359, -1.00473, 1.07017, .405203, -.955931, 1.07017, .484893, -.955931, 1.02137, .0337631, -1.00473, 1.00074, .0337631, -1.0817, 1.00074, .365408, -1.0817, 1.05709, .0337631, -1.13805, 1.05709, .365408, -1.13805, 1.13407, .0337631, -1.11743, 1.13407, .365408, -1.11743, 1.15469, .0337631, -1.04045, 1.15469, .365408, -1.04045, 1.09834, .0337631, -.984104, 1.09834, .365408, -.984104, -.406176, .524737, .918264, -.357376, .484893, .967063, -.357376, .405204, .967063, -.406176, .365359, .918264, -.454975, .405204, .869464, -.454975, .484893, .869464, -.646151, .484893, 1.25584, -.69495, .524737, 1.20704, -.646151, .405204, 1.25584, -.69495, .365359, 1.20704, -.743749, .405204, 1.15824, -.743749, .484893, 1.15824, -.694949, .0337632, 1.20704, -.674324, .0337632, 1.28401, -.674324, .365408, 1.28401, -.730673, .0337632, 1.34036, -.730673, .365408, 1.34036, -.807647, .0337632, 1.31974, -.807647, .365408, 1.31974, -.828272, .0337632, 1.24276, -.828272, .365408, 1.24276, -.771923, .0337632, 1.18641, -.771923, .365408, 1.18641, .40618, .524737, .918264, .45498, .484893, .869464, .45498, .405204, .869464, .40618, .365359, .918264, .357381, .405204, .967063, .357381, .484893, .967063, .743754, .484893, 1.15824, .694955, .524737, 1.20704, .743754, .405204, 1.15824, .694955, .365359, 1.20704, .646155, .405204, 1.25584, .646155, .484893, 1.25584, .694954, .0337632, 1.20704, .771928, .0337632, 1.18641, .771928, .365408, 1.18641, .828277, .0337632, 1.24276, .828277, .365408, 1.24276, .807651, .0337632, 1.31974, .807651, .365408, 1.31974, .730678, .0337632, 1.34036, .730678, .365408, 1.34036, .674329, .0337632, 1.28401, .674329, .365408, 1.28401],
            metadata: {
                version: 3,
                generator: "io_three",
                vertices: 172,
                normals: 166,
                uvs: 0,
                type: "Geometry",
                faces: 198
            },
            uvs: []
        },
        connection: {
            id: "connection",
            primaryColorFaces: [163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 95, 94, 93, 92, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 69, 68, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            disableImagePlane: true,
            vertices: [1.28963, .866, -.161259, 1.71144, .866, -.161259, 1.28963, .72635, -.0806296, 1.71144, .72635, -.0806296, 1.28963, .72635, .0806296, 1.71144, .72635, .0806296, 1.28963, .866, .161259, 1.71144, .866, .161259, 1.28963, 1.00565, .0806295, 1.71144, 1.00565, .0806295, 1.28963, 1.00565, -.0806296, 1.71144, 1.00565, -.0806296, 1.3209, .866, -1, 1.70926, .866, -1, 1.70926, 5.96046e-7, -.5, 1.3209, 5.96046e-7, -.5, 1.3209, 6.55651e-7, .5, 1.3209, .866001, 1, 1.3209, .866001, .665522, 1.3209, .289659, .332761, 1.3209, .289659, -.332761, 1.3209, .866, -.665522, 1.3209, 1.44234, -.332761, 1.3209, 1.44234, .332761, 1.3209, 1.732, .5, 1.3209, 1.732, -.5, 1.70926, 1.732, -.5, 1.70926, 1.732, .5, 1.70926, .866001, 1, 1.70926, .866001, .665522, 1.70926, 1.44234, .332761, 1.70926, 1.44234, -.332761, 1.70926, .866, -.665522, 1.70926, .289659, -.332761, 1.70926, .289659, .332761, 1.70926, 6.55651e-7, .5, -1.71037, .866, -.161259, -1.28856, .866, -.161259, -1.71037, .72635, -.0806296, -1.28856, .72635, -.0806296, -1.71037, .72635, .0806296, -1.28856, .72635, .0806296, -1.71037, .866, .161259, -1.28856, .866, .161259, -1.71037, 1.00565, .0806295, -1.28856, 1.00565, .0806295, -1.71037, 1.00565, -.0806296, -1.28856, 1.00565, -.0806296, .68963, .866, -.161259, 1.11144, .866, -.161259, .68963, .72635, -.0806296, 1.11144, .72635, -.0806296, .68963, .72635, .0806296, 1.11144, .72635, .0806296, .68963, .866, .161259, 1.11144, .866, .161259, .68963, 1.00565, .0806295, 1.11144, 1.00565, .0806295, .68963, 1.00565, -.0806296, 1.11144, 1.00565, -.0806296, .0896302, .866, -.161259, .511436, .866, -.161259, .0896302, .72635, -.0806296, .511436, .72635, -.0806296, .0896302, .72635, .0806296, .511436, .72635, .0806296, .0896302, .866, .161259, .511436, .866, .161259, .0896302, 1.00565, .0806295, .511436, 1.00565, .0806295, .0896302, 1.00565, -.0806296, .511436, 1.00565, -.0806296, -.51037, .866, -.161259, -.0885645, .866, -.161259, -.51037, .72635, -.0806296, -.0885645, .72635, -.0806296, -.51037, .72635, .0806296, -.0885645, .72635, .0806296, -.51037, .866, .161259, -.0885645, .866, .161259, -.51037, 1.00565, .0806295, -.0885645, 1.00565, .0806295, -.51037, 1.00565, -.0806296, -.0885645, 1.00565, -.0806296, -1.11037, .866, -.161259, -.688565, .866, -.161259, -1.11037, .72635, -.0806296, -.688565, .72635, -.0806296, -1.11037, .72635, .0806296, -.688565, .72635, .0806296, -1.11037, .866, .161259, -.688565, .866, .161259, -1.11037, 1.00565, .0806295, -.688565, 1.00565, .0806295, -1.11037, 1.00565, -.0806296, -.688565, 1.00565, -.0806296, -1.71086, .866, -1, -1.3225, .866, -1, -1.3225, 5.96046e-7, -.5, -1.71086, 5.96046e-7, -.5, -1.71086, 6.55651e-7, .5, -1.71086, .866001, 1, -1.71086, .866001, .665522, -1.71086, .289659, .332761, -1.71086, .289659, -.332761, -1.71086, .866, -.665522, -1.71086, 1.44234, -.332761, -1.71086, 1.44234, .332761, -1.71086, 1.732, .5, -1.71086, 1.732, -.5, -1.3225, 1.732, -.5, -1.3225, 1.732, .5, -1.3225, .866001, 1, -1.3225, .866001, .665522, -1.3225, 1.44234, .332761, -1.3225, 1.44234, -.332761, -1.3225, .866, -.665522, -1.3225, .289659, -.332761, -1.3225, .289659, .332761, -1.3225, 6.55651e-7, .5],
            normals: [-3.42305e-8, -.500011, -.866019, -7.06543e-8, -1, 1.8481e-7, 0, -.500011, .866019, 0, .500011, .866019, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, .500011, -.866019, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -.500011, -.866019, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, .500011, -.866019, 1, 0, 0, 1, 0, 0, 0, -1, 5.96046e-8, 0, -.500011, .866019, 0, .500011, .866019, 0, .500011, .866019, 0, -.500011, .866019, 0, 1, 0, 0, -1, 0, 0, .500011, -.866019, 0, -.500011, -.866019, -3.42305e-8, -.500011, -.866019, -7.06542e-8, -1, 1.8481e-7, 0, -.500011, .866019, 0, .500011, .866019, 0, .500011, -.866019, 0, 1, 0, -3.42305e-8, -.500011, -.866019, -7.06542e-8, -1, 1.8481e-7, 0, .500011, -.866019, -3.42305e-8, -.500011, -.866019, -1.41308e-7, -1, 0, -3.42305e-8, -.500011, .866019, -1, 5.33517e-8, 0, -1, 5.33517e-8, 0, -1, 5.33517e-8, 0, 0, -.500011, -.866019, -7.06542e-8, -1, 1.8481e-7, -3.42305e-8, -.500011, .866019, 1, -5.33516e-8, 0, 1, -5.33517e-8, 0, 1, -5.33516e-8, 1.97198e-14, 1, -5.33516e-8, -6.57328e-15, 0, .500011, -.866019, 0, -1, 5.96046e-8, 0, -.500011, .866019, 0, -.500011, -.866019],
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 2, 3, 5, 4, 1, 1, 1, 1, 33, 4, 5, 7, 6, 2, 2, 2, 2, 33, 6, 7, 9, 8, 3, 3, 3, 3, 32, 5, 3, 1, 4, 4, 4, 32, 1, 11, 9, 5, 5, 5, 32, 9, 7, 5, 6, 6, 6, 32, 1, 9, 5, 7, 7, 7, 33, 1, 0, 10, 11, 8, 8, 8, 8, 33, 8, 9, 11, 10, 9, 9, 9, 9, 32, 10, 0, 2, 10, 10, 10, 32, 2, 4, 6, 11, 11, 11, 32, 6, 8, 10, 10, 10, 10, 32, 2, 6, 10, 12, 12, 12, 33, 12, 13, 14, 15, 13, 13, 13, 13, 32, 21, 12, 15, 14, 14, 14, 32, 16, 17, 18, 12, 12, 12, 32, 20, 21, 15, 10, 10, 10, 32, 16, 18, 19, 15, 15, 15, 32, 20, 15, 16, 11, 11, 11, 32, 16, 19, 20, 14, 14, 14, 32, 25, 12, 21, 14, 14, 14, 32, 23, 18, 17, 11, 11, 11, 32, 25, 21, 22, 16, 16, 16, 32, 23, 17, 24, 17, 17, 17, 32, 25, 22, 23, 14, 14, 14, 32, 23, 24, 25, 12, 12, 12, 33, 25, 26, 13, 12, 18, 18, 18, 18, 32, 32, 13, 26, 4, 4, 4, 32, 27, 28, 29, 6, 6, 6, 32, 31, 32, 26, 19, 19, 19, 32, 27, 29, 30, 20, 20, 20, 32, 31, 26, 27, 7, 7, 7, 32, 27, 30, 31, 7, 7, 7, 32, 14, 13, 32, 7, 7, 7, 32, 34, 29, 28, 7, 7, 7, 32, 14, 32, 33, 5, 5, 5, 32, 34, 28, 35, 6, 6, 6, 32, 14, 33, 34, 7, 7, 7, 32, 34, 35, 14, 6, 6, 6, 33, 15, 14, 35, 16, 21, 21, 21, 21, 33, 16, 35, 28, 17, 22, 22, 22, 22, 33, 17, 28, 27, 24, 23, 23, 23, 23, 33, 24, 27, 26, 25, 9, 9, 9, 9, 33, 21, 20, 33, 32, 24, 24, 24, 24, 33, 22, 21, 32, 31, 25, 25, 25, 25, 33, 20, 19, 34, 33, 26, 26, 26, 26, 33, 23, 22, 31, 30, 27, 27, 27, 27, 33, 19, 18, 29, 34, 28, 28, 28, 28, 33, 18, 23, 30, 29, 29, 29, 29, 29, 33, 36, 37, 39, 38, 30, 30, 30, 30, 33, 38, 39, 41, 40, 31, 31, 31, 31, 33, 40, 41, 43, 42, 32, 32, 32, 32, 33, 42, 43, 45, 44, 33, 33, 33, 33, 32, 41, 39, 37, 4, 4, 4, 32, 37, 47, 45, 5, 5, 5, 32, 45, 43, 41, 6, 6, 6, 32, 37, 45, 41, 7, 7, 7, 33, 46, 47, 37, 36, 34, 34, 34, 34, 33, 44, 45, 47, 46, 35, 35, 35, 35, 32, 46, 36, 38, 10, 10, 10, 32, 38, 40, 42, 11, 11, 11, 32, 42, 44, 46, 10, 10, 10, 32, 38, 42, 46, 12, 12, 12, 33, 48, 49, 51, 50, 36, 36, 36, 36, 33, 50, 51, 53, 52, 37, 37, 37, 37, 33, 52, 53, 55, 54, 25, 25, 25, 25, 33, 54, 55, 57, 56, 3, 3, 3, 3, 32, 53, 51, 49, 4, 4, 4, 32, 49, 59, 57, 5, 5, 5, 32, 57, 55, 53, 6, 6, 6, 32, 49, 57, 53, 7, 7, 7, 33, 58, 59, 49, 48, 38, 38, 38, 38, 33, 56, 57, 59, 58, 9, 9, 9, 9, 32, 58, 48, 50, 10, 10, 10, 32, 50, 52, 54, 11, 11, 11, 32, 54, 56, 58, 10, 10, 10, 32, 50, 54, 58, 12, 12, 12, 33, 60, 61, 63, 62, 39, 39, 39, 39, 33, 62, 63, 65, 64, 40, 40, 40, 40, 33, 64, 65, 67, 66, 41, 41, 41, 41, 33, 66, 67, 69, 68, 3, 3, 3, 3, 32, 65, 63, 61, 4, 4, 4, 32, 61, 71, 69, 5, 5, 5, 32, 69, 67, 65, 6, 6, 6, 32, 61, 69, 65, 7, 7, 7, 33, 70, 71, 61, 60, 38, 38, 38, 38, 33, 68, 69, 71, 70, 9, 9, 9, 9, 32, 70, 60, 62, 42, 42, 42, 32, 62, 64, 66, 43, 43, 43, 32, 66, 68, 70, 42, 42, 42, 32, 62, 66, 70, 44, 44, 44, 33, 72, 73, 75, 74, 45, 45, 45, 45, 33, 74, 75, 77, 76, 46, 46, 46, 46, 33, 76, 77, 79, 78, 47, 47, 47, 47, 33, 78, 79, 81, 80, 33, 33, 33, 33, 32, 77, 75, 73, 48, 48, 48, 32, 73, 83, 81, 49, 49, 49, 32, 81, 79, 77, 50, 50, 50, 32, 73, 81, 77, 51, 51, 51, 33, 82, 83, 73, 72, 8, 8, 8, 8, 33, 80, 81, 83, 82, 9, 9, 9, 9, 32, 82, 72, 74, 14, 14, 14, 32, 74, 76, 78, 10, 10, 10, 32, 78, 80, 82, 10, 10, 10, 32, 74, 78, 82, 12, 12, 12, 33, 84, 85, 87, 86, 30, 30, 30, 30, 33, 86, 87, 89, 88, 31, 31, 31, 31, 33, 88, 89, 91, 90, 32, 32, 32, 32, 33, 90, 91, 93, 92, 33, 33, 33, 33, 32, 89, 87, 85, 4, 4, 4, 32, 85, 95, 93, 5, 5, 5, 32, 93, 91, 89, 6, 6, 6, 32, 85, 93, 89, 7, 7, 7, 33, 94, 95, 85, 84, 34, 34, 34, 34, 33, 92, 93, 95, 94, 35, 35, 35, 35, 32, 94, 84, 86, 10, 10, 10, 32, 86, 88, 90, 11, 11, 11, 32, 90, 92, 94, 10, 10, 10, 32, 86, 90, 94, 12, 12, 12, 33, 96, 97, 98, 99, 13, 13, 13, 13, 32, 105, 96, 99, 14, 14, 14, 32, 100, 101, 102, 12, 12, 12, 32, 104, 105, 99, 10, 10, 10, 32, 100, 102, 103, 15, 15, 15, 32, 104, 99, 100, 11, 11, 11, 32, 100, 103, 104, 14, 14, 14, 32, 109, 96, 105, 14, 14, 14, 32, 107, 102, 101, 11, 11, 11, 32, 109, 105, 106, 16, 16, 16, 32, 107, 101, 108, 17, 17, 17, 32, 109, 106, 107, 14, 14, 14, 32, 107, 108, 109, 12, 12, 12, 33, 109, 110, 97, 96, 52, 52, 52, 52, 32, 116, 97, 110, 4, 4, 4, 32, 111, 112, 113, 6, 6, 6, 32, 115, 116, 110, 19, 19, 19, 32, 111, 113, 114, 20, 20, 20, 32, 115, 110, 111, 7, 7, 7, 32, 111, 114, 115, 7, 7, 7, 32, 98, 97, 116, 7, 7, 7, 32, 118, 113, 112, 7, 7, 7, 32, 98, 116, 117, 5, 5, 5, 32, 118, 112, 119, 6, 6, 6, 32, 98, 117, 118, 7, 7, 7, 32, 118, 119, 98, 6, 6, 6, 33, 99, 98, 119, 100, 53, 53, 53, 53, 33, 100, 119, 112, 101, 54, 54, 54, 54, 33, 101, 112, 111, 108, 23, 23, 23, 23, 33, 108, 111, 110, 109, 35, 35, 35, 35, 33, 105, 104, 117, 116, 24, 24, 24, 24, 33, 106, 105, 116, 115, 25, 25, 25, 25, 33, 104, 103, 118, 117, 26, 26, 26, 26, 33, 107, 106, 115, 114, 27, 27, 27, 27, 33, 103, 102, 113, 118, 28, 28, 28, 28, 33, 102, 107, 114, 113, 55, 55, 55, 55],
            metadata: {
                vertices: 120,
                faces: 156,
                generator: "io_three",
                normals: 56,
                type: "Geometry",
                version: 3
            }
        },
        "data-warehouse": {
            id: "data-warehouse",
            primaryColorFaces: [4, 5, 10, 11],
            imagePlanePosition: {
                x: 1.9,
                y: 1,
                z: 0
            },
            imagePlaneRotation: {
                x: -1.5707963267948966,
                y: .2,
                z: 1.5707963267948966
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .55,
            vertices: [-3, 2.38419e-7, 3, -3, 1, 3, -3, -2.38419e-7, -3, -3, 1, -3, 3, 2.38419e-7, 3, 3, .150939, 3, 3, -2.38419e-7, -3, 3, .150939, -3, -.886621, 1, -3, -.886621, -2.38419e-7, -3, -.886621, 1, 3, -.886621, 2.38419e-7, 3, -2.92789, 1.11305, 2, -2.92789, 1.75011, 2, -2.42789, 1.11305, 1.13397, -2.42789, 1.75011, 1.13397, -1.42789, 1.11305, 1.13397, -1.42789, 1.75011, 1.13397, -.927886, 1.11305, 2, -.927886, 1.75011, 2, -1.42789, 1.11305, 2.86603, -1.42789, 1.75011, 2.86603, -2.42789, 1.11305, 2.86603, -2.42789, 1.75011, 2.86603, -2.92789, 3.51305, 2, -2.92789, 4.15011, 2, -2.42789, 3.51305, 1.13397, -2.42789, 4.15011, 1.13397, -1.42789, 3.51305, 1.13397, -1.42789, 4.15011, 1.13397, -.927886, 3.51305, 2, -.927886, 4.15011, 2, -1.42789, 3.51305, 2.86603, -1.42789, 4.15011, 2.86603, -2.42789, 3.51305, 2.86603, -2.42789, 4.15011, 2.86603, -2.92789, 1.91305, 2, -2.92789, 2.55011, 2, -2.42789, 1.91305, 1.13397, -2.42789, 2.55011, 1.13397, -1.42789, 1.91305, 1.13397, -1.42789, 2.55011, 1.13397, -.927886, 1.91305, 2, -.927886, 2.55011, 2, -1.42789, 1.91305, 2.86603, -1.42789, 2.55011, 2.86603, -2.42789, 1.91305, 2.86603, -2.42789, 2.55011, 2.86603, -2.92789, 2.71305, 2, -2.92789, 3.35011, 2, -2.42789, 2.71305, 1.13397, -2.42789, 3.35011, 1.13397, -1.42789, 2.71305, 1.13397, -1.42789, 3.35011, 1.13397, -.927886, 2.71305, 2, -.927886, 3.35011, 2, -1.42789, 2.71305, 2.86603, -1.42789, 3.35011, 2.86603, -2.42789, 2.71305, 2.86603, -2.42789, 3.35011, 2.86603, -2.92789, 1.11305, -2, -2.92789, 1.75011, -2, -2.42789, 1.11305, -2.86603, -2.42789, 1.75011, -2.86603, -1.42789, 1.11305, -2.86603, -1.42789, 1.75011, -2.86603, -.927886, 1.11305, -2, -.927886, 1.75011, -2, -1.42789, 1.11305, -1.13397, -1.42789, 1.75011, -1.13397, -2.42789, 1.11305, -1.13397, -2.42789, 1.75011, -1.13397, -2.92789, 3.51305, -2, -2.92789, 4.15011, -2, -2.42789, 3.51305, -2.86603, -2.42789, 4.15011, -2.86603, -1.42789, 3.51305, -2.86603, -1.42789, 4.15011, -2.86603, -.927886, 3.51305, -2, -.927886, 4.15011, -2, -1.42789, 3.51305, -1.13397, -1.42789, 4.15011, -1.13397, -2.42789, 3.51305, -1.13397, -2.42789, 4.15011, -1.13397, -2.92789, 1.91305, -2, -2.92789, 2.55011, -2, -2.42789, 1.91305, -2.86603, -2.42789, 2.55011, -2.86603, -1.42789, 1.91305, -2.86603, -1.42789, 2.55011, -2.86603, -.927886, 1.91305, -2, -.927886, 2.55011, -2, -1.42789, 1.91305, -1.13397, -1.42789, 2.55011, -1.13397, -2.42789, 1.91305, -1.13397, -2.42789, 2.55011, -1.13397, -2.92789, 2.71305, -2, -2.92789, 3.35011, -2, -2.42789, 2.71305, -2.86603, -2.42789, 3.35011, -2.86603, -1.42789, 2.71305, -2.86603, -1.42789, 3.35011, -2.86603, -.927886, 2.71305, -2, -.927886, 3.35011, -2, -1.42789, 2.71305, -1.13397, -1.42789, 3.35011, -1.13397, -2.42789, 2.71305, -1.13397, -2.42789, 3.35011, -1.13397, -2.92789, 1.11305, 5.4694e-10, -2.92789, 1.75011, -2.72996e-8, -2.42789, 1.11305, -.866025, -2.42789, 1.75011, -.866025, -1.42789, 1.11305, -.866025, -1.42789, 1.75011, -.866025, -.927886, 1.11305, -8.68758e-8, -.927886, 1.75011, -1.14722e-7, -1.42789, 1.11305, .866025, -1.42789, 1.75011, .866025, -2.42789, 1.11305, .866025, -2.42789, 1.75011, .866025, -2.92789, 3.51305, -1.0436e-7, -2.92789, 4.15011, -1.32207e-7, -2.42789, 3.51305, -.866026, -2.42789, 4.15011, -.866026, -1.42789, 3.51305, -.866026, -1.42789, 4.15011, -.866026, -.927886, 3.51305, -1.91783e-7, -.927886, 4.15011, -2.1963e-7, -1.42789, 3.51305, .866025, -1.42789, 4.15011, .866025, -2.42789, 3.51305, .866025, -2.42789, 4.15011, .866025, -2.92789, 1.91305, -3.44222e-8, -2.92789, 2.55011, -6.22688e-8, -2.42789, 1.91305, -.866026, -2.42789, 2.55011, -.866026, -1.42789, 1.91305, -.866026, -1.42789, 2.55011, -.866026, -.927886, 1.91305, -1.21845e-7, -.927886, 2.55011, -1.49692e-7, -1.42789, 1.91305, .866025, -1.42789, 2.55011, .866025, -2.42789, 1.91305, .866025, -2.42789, 2.55011, .866025, -2.92789, 2.71305, -6.93913e-8, -2.92789, 3.35011, -9.72379e-8, -2.42789, 2.71305, -.866026, -2.42789, 3.35011, -.866026, -1.42789, 2.71305, -.866026, -1.42789, 3.35011, -.866026, -.927886, 2.71305, -1.56814e-7, -.927886, 3.35011, -1.84661e-7, -1.42789, 2.71305, .866025, -1.42789, 3.35011, .866025, -2.42789, 2.71305, .866025, -2.42789, 3.35011, .866025],
            normals: [-1, 0, 0, -6.13434e-8, 0, -1, 1, 0, 0, 0, 0, 1, 0, -1, 7.94729e-8, 0, 1, -3.97364e-8, .213424, .97696, -6.49242e-8, 0, -1, 7.94729e-8, 6.13434e-8, 0, 1, 0, 0, -1, -.866026, 0, -.5, 0, 0, -1, .866025, 0, -.5, .866025, 0, .5, 0, 1, 0, 0, 1, -1.37651e-7, 1.19209e-7, 1, -6.88255e-8, -3.97364e-8, 1, -6.88255e-8, -.866025, 0, .5, 0, 0, 1, -1.19209e-7, -1, 6.88255e-8, 0, -1, 1.37651e-7, 0, -1, 0, 3.97364e-8, -1, 6.88255e-8, -.866026, -9.35627e-8, -.5, 0, -1.87125e-7, -1, .866025, -9.35627e-8, -.5, .866026, 4.67813e-8, .5, 0, 1, -5.50604e-7, 0, 1, 0, -4.76837e-7, 1, -2.75302e-7, 1.58946e-7, 1, -2.75302e-7, -.866026, 4.67813e-8, .5, 0, -1, 0, 0, -1, 0, 0, -1, 0, .866025, 0, -.5, .866026, 0, .5, 0, 1, -2.75302e-7, 2.38419e-7, 1, -1.37651e-7, -7.94729e-8, 1, -1.37651e-7, -.866026, 0, .5, 1.19209e-7, -1, 6.88255e-8, 0, -1, 1.37651e-7, -3.97364e-8, -1, 6.88255e-8, .866026, 0, .5, 0, 1, 0, 0, 1, 0, 0, 1, 0, -.866026, 0, .5, -.866025, 0, -.5, .866025, 0, .5, 0, 1, -1.37651e-7, -1.19209e-7, 1, -6.88255e-8, 3.97364e-8, 1, -6.88255e-8, -.866025, 0, .5, 1.19209e-7, -1, 6.88255e-8, 0, -1, 0, 0, -1, 1.37651e-7, -3.97364e-8, -1, 6.88255e-8, -.866025, 0, -.5, 0, 0, -1, .866025, 0, -.5, .866025, 4.67814e-8, .5, 0, 1, 0, -.866025, 4.67814e-8, .5, 0, 1.87125e-7, 1, 0, 1, -2.75302e-7, -2.38419e-7, 1, -1.37651e-7, 7.94729e-8, 1, -1.37651e-7, -.866025, 0, .5, -1.19209e-7, -1, 6.88255e-8, 0, -1, 1.37651e-7, 3.97364e-8, -1, 6.88255e-8, .866025, 0, .5, -.866025, 0, .5, -.866025, 0, -.5, .866025, -2.33907e-8, -.5, .866025, 2.33907e-8, .5, -.866025, 0, .5, .866025, -2.33907e-8, -.5, .866025, 2.33907e-8, .5, -.866025, -4.67813e-8, -.5, 0, -9.35627e-8, -1, .866025, -2.33907e-8, -.5, .866025, 2.33907e-8, .5, -.866025, 4.67813e-8, .5, 0, 9.35627e-8, 1, 2.38419e-7, -1, 1.37651e-7, 0, -1, 2.75302e-7, -7.94728e-8, -1, 1.37651e-7],
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 8, 7, 6, 9, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 11, 10, 1, 3, 3, 3, 3, 33, 11, 9, 6, 4, 4, 4, 4, 4, 33, 10, 8, 3, 1, 5, 5, 5, 5, 33, 5, 7, 8, 10, 6, 6, 6, 6, 33, 0, 2, 9, 11, 7, 7, 7, 7, 33, 5, 10, 11, 4, 8, 8, 8, 8, 33, 3, 8, 9, 2, 9, 9, 9, 9, 33, 12, 13, 15, 14, 10, 10, 10, 10, 33, 14, 15, 17, 16, 11, 11, 11, 11, 33, 16, 17, 19, 18, 12, 12, 12, 12, 33, 18, 19, 21, 20, 13, 13, 13, 13, 32, 17, 15, 13, 14, 14, 14, 32, 13, 23, 21, 15, 15, 15, 32, 21, 19, 17, 16, 16, 16, 32, 13, 21, 17, 17, 17, 17, 33, 22, 23, 13, 12, 18, 18, 18, 18, 33, 20, 21, 23, 22, 19, 19, 19, 19, 32, 22, 12, 14, 20, 20, 20, 32, 14, 16, 18, 21, 21, 21, 32, 18, 20, 22, 22, 22, 22, 32, 14, 18, 22, 23, 23, 23, 33, 24, 25, 27, 26, 24, 24, 24, 24, 33, 26, 27, 29, 28, 25, 25, 25, 25, 33, 28, 29, 31, 30, 26, 26, 26, 26, 33, 30, 31, 33, 32, 27, 27, 27, 27, 32, 29, 27, 25, 28, 28, 28, 32, 25, 35, 33, 29, 29, 29, 32, 33, 31, 29, 30, 30, 30, 32, 25, 33, 29, 31, 31, 31, 33, 34, 35, 25, 24, 32, 32, 32, 32, 33, 32, 33, 35, 34, 19, 19, 19, 19, 32, 34, 24, 26, 33, 33, 33, 32, 26, 28, 30, 34, 34, 34, 32, 30, 32, 34, 22, 22, 22, 32, 26, 30, 34, 35, 35, 35, 33, 36, 37, 39, 38, 10, 10, 10, 10, 33, 38, 39, 41, 40, 11, 11, 11, 11, 33, 40, 41, 43, 42, 36, 36, 36, 36, 33, 42, 43, 45, 44, 37, 37, 37, 37, 32, 41, 39, 37, 14, 14, 14, 32, 37, 47, 45, 38, 38, 38, 32, 45, 43, 41, 39, 39, 39, 32, 37, 45, 41, 40, 40, 40, 33, 46, 47, 37, 36, 41, 41, 41, 41, 33, 44, 45, 47, 46, 19, 19, 19, 19, 32, 46, 36, 38, 42, 42, 42, 32, 38, 40, 42, 34, 34, 34, 32, 42, 44, 46, 43, 43, 43, 32, 38, 42, 46, 44, 44, 44, 33, 48, 49, 51, 50, 10, 10, 10, 10, 33, 50, 51, 53, 52, 11, 11, 11, 11, 33, 52, 53, 55, 54, 36, 36, 36, 36, 33, 54, 55, 57, 56, 45, 45, 45, 45, 32, 53, 51, 49, 14, 14, 14, 32, 49, 59, 57, 46, 46, 46, 32, 57, 55, 53, 47, 47, 47, 32, 49, 57, 53, 48, 48, 48, 33, 58, 59, 49, 48, 49, 49, 49, 49, 33, 56, 57, 59, 58, 19, 19, 19, 19, 32, 58, 48, 50, 33, 33, 33, 32, 50, 52, 54, 34, 34, 34, 32, 54, 56, 58, 22, 22, 22, 32, 50, 54, 58, 35, 35, 35, 33, 60, 61, 63, 62, 50, 50, 50, 50, 33, 62, 63, 65, 64, 11, 11, 11, 11, 33, 64, 65, 67, 66, 12, 12, 12, 12, 33, 66, 67, 69, 68, 51, 51, 51, 51, 32, 65, 63, 61, 52, 52, 52, 32, 61, 71, 69, 46, 46, 46, 32, 69, 67, 65, 53, 53, 53, 32, 61, 69, 65, 54, 54, 54, 33, 70, 71, 61, 60, 55, 55, 55, 55, 33, 68, 69, 71, 70, 19, 19, 19, 19, 32, 70, 60, 62, 56, 56, 56, 32, 62, 64, 66, 57, 57, 57, 32, 66, 68, 70, 58, 58, 58, 32, 62, 66, 70, 59, 59, 59, 33, 72, 73, 75, 74, 60, 60, 60, 60, 33, 74, 75, 77, 76, 61, 61, 61, 61, 33, 76, 77, 79, 78, 62, 62, 62, 62, 33, 78, 79, 81, 80, 63, 63, 63, 63, 32, 77, 75, 73, 64, 64, 64, 32, 73, 83, 81, 29, 29, 29, 32, 81, 79, 77, 48, 48, 48, 32, 73, 81, 77, 29, 29, 29, 33, 82, 83, 73, 72, 65, 65, 65, 65, 33, 80, 81, 83, 82, 66, 66, 66, 66, 32, 82, 72, 74, 33, 33, 33, 32, 74, 76, 78, 57, 57, 57, 32, 78, 80, 82, 22, 22, 22, 32, 74, 78, 82, 35, 35, 35, 33, 84, 85, 87, 86, 50, 50, 50, 50, 33, 86, 87, 89, 88, 11, 11, 11, 11, 33, 88, 89, 91, 90, 12, 12, 12, 12, 33, 90, 91, 93, 92, 51, 51, 51, 51, 32, 89, 87, 85, 67, 67, 67, 32, 85, 95, 93, 46, 46, 46, 32, 93, 91, 89, 68, 68, 68, 32, 85, 93, 89, 69, 69, 69, 33, 94, 95, 85, 84, 70, 70, 70, 70, 33, 92, 93, 95, 94, 19, 19, 19, 19, 32, 94, 84, 86, 71, 71, 71, 32, 86, 88, 90, 72, 72, 72, 32, 90, 92, 94, 22, 22, 22, 32, 86, 90, 94, 73, 73, 73, 33, 96, 97, 99, 98, 50, 50, 50, 50, 33, 98, 99, 101, 100, 11, 11, 11, 11, 33, 100, 101, 103, 102, 12, 12, 12, 12, 33, 102, 103, 105, 104, 74, 74, 74, 74, 32, 101, 99, 97, 64, 64, 64, 32, 97, 107, 105, 46, 46, 46, 32, 105, 103, 101, 48, 48, 48, 32, 97, 105, 101, 29, 29, 29, 33, 106, 107, 97, 96, 75, 75, 75, 75, 33, 104, 105, 107, 106, 19, 19, 19, 19, 32, 106, 96, 98, 33, 33, 33, 32, 98, 100, 102, 57, 57, 57, 32, 102, 104, 106, 22, 22, 22, 32, 98, 102, 106, 35, 35, 35, 33, 108, 109, 111, 110, 76, 76, 76, 76, 33, 110, 111, 113, 112, 11, 11, 11, 11, 33, 112, 113, 115, 114, 77, 77, 77, 77, 33, 114, 115, 117, 116, 78, 78, 78, 78, 32, 113, 111, 109, 64, 64, 64, 32, 109, 119, 117, 29, 29, 29, 32, 117, 115, 113, 47, 47, 47, 32, 109, 117, 113, 48, 48, 48, 33, 118, 119, 109, 108, 79, 79, 79, 79, 33, 116, 117, 119, 118, 19, 19, 19, 19, 32, 118, 108, 110, 33, 33, 33, 32, 110, 112, 114, 34, 34, 34, 32, 114, 116, 118, 33, 33, 33, 32, 110, 114, 118, 35, 35, 35, 33, 120, 121, 123, 122, 60, 60, 60, 60, 33, 122, 123, 125, 124, 11, 11, 11, 11, 33, 124, 125, 127, 126, 80, 80, 80, 80, 33, 126, 127, 129, 128, 81, 81, 81, 81, 32, 125, 123, 121, 64, 64, 64, 32, 121, 131, 129, 29, 29, 29, 32, 129, 127, 125, 47, 47, 47, 32, 121, 129, 125, 48, 48, 48, 33, 130, 131, 121, 120, 79, 79, 79, 79, 33, 128, 129, 131, 130, 19, 19, 19, 19, 32, 130, 120, 122, 33, 33, 33, 32, 122, 124, 126, 34, 34, 34, 32, 126, 128, 130, 33, 33, 33, 32, 122, 126, 130, 35, 35, 35, 33, 132, 133, 135, 134, 76, 76, 76, 76, 33, 134, 135, 137, 136, 11, 11, 11, 11, 33, 136, 137, 139, 138, 77, 77, 77, 77, 33, 138, 139, 141, 140, 78, 78, 78, 78, 32, 137, 135, 133, 64, 64, 64, 32, 133, 143, 141, 29, 29, 29, 32, 141, 139, 137, 47, 47, 47, 32, 133, 141, 137, 48, 48, 48, 33, 142, 143, 133, 132, 79, 79, 79, 79, 33, 140, 141, 143, 142, 19, 19, 19, 19, 32, 142, 132, 134, 33, 33, 33, 32, 134, 136, 138, 34, 34, 34, 32, 138, 140, 142, 33, 33, 33, 32, 134, 138, 142, 35, 35, 35, 33, 144, 145, 147, 146, 82, 82, 82, 82, 33, 146, 147, 149, 148, 83, 83, 83, 83, 33, 148, 149, 151, 150, 84, 84, 84, 84, 33, 150, 151, 153, 152, 85, 85, 85, 85, 32, 149, 147, 145, 64, 64, 64, 32, 145, 155, 153, 29, 29, 29, 32, 153, 151, 149, 47, 47, 47, 32, 145, 153, 149, 48, 48, 48, 33, 154, 155, 145, 144, 86, 86, 86, 86, 33, 152, 153, 155, 154, 87, 87, 87, 87, 32, 154, 144, 146, 88, 88, 88, 32, 146, 148, 150, 57, 57, 57, 32, 150, 152, 154, 89, 89, 89, 32, 146, 150, 154, 90, 90, 90],
            metadata: {
                vertices: 156,
                faces: 178,
                generator: "io_three",
                normals: 91,
                type: "Geometry",
                version: 3
            }
        },
        "disk-storage": {
            id: "disk-storage",
            primaryColorFaces: [4, 5, 7, 92, 93, 100, 101, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 300, 301, 303, 308, 309, 311, 316, 317, 319],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 3, 5, 4, 2, 1, 1, 1, 1, 33, 0, 4, 5, 1, 2, 2, 2, 2, 32, 0, 2, 4, 3, 3, 3, 32, 1, 5, 3, 4, 4, 4, 33, 6, 7, 9, 8, 5, 5, 5, 5, 33, 8, 9, 11, 10, 6, 6, 6, 6, 33, 10, 11, 13, 12, 7, 7, 7, 7, 33, 12, 13, 15, 14, 8, 8, 8, 8, 33, 14, 15, 17, 16, 9, 9, 9, 9, 33, 16, 17, 19, 18, 10, 10, 10, 10, 33, 18, 19, 21, 20, 11, 11, 11, 11, 33, 20, 21, 23, 22, 12, 12, 12, 12, 33, 22, 23, 25, 24, 13, 13, 13, 13, 33, 24, 25, 27, 26, 14, 14, 14, 14, 32, 11, 9, 7, 15, 15, 15, 32, 7, 29, 27, 16, 16, 16, 32, 27, 25, 23, 16, 16, 16, 32, 23, 21, 19, 15, 15, 15, 32, 19, 17, 15, 16, 16, 16, 32, 15, 13, 11, 17, 17, 17, 32, 11, 7, 27, 18, 18, 18, 32, 27, 23, 19, 16, 16, 16, 32, 19, 15, 11, 16, 16, 16, 32, 27, 19, 11, 16, 16, 16, 33, 28, 29, 7, 6, 19, 19, 19, 19, 33, 26, 27, 29, 28, 20, 20, 20, 20, 32, 28, 6, 8, 21, 21, 21, 32, 8, 10, 12, 3, 3, 3, 32, 12, 14, 16, 3, 3, 3, 32, 16, 18, 20, 3, 3, 3, 32, 20, 22, 24, 3, 3, 3, 32, 24, 26, 28, 3, 3, 3, 32, 28, 8, 12, 21, 21, 21, 32, 12, 16, 20, 3, 3, 3, 32, 20, 24, 28, 3, 3, 3, 32, 12, 20, 28, 3, 3, 3, 33, 59, 61, 32, 36, 22, 22, 22, 22, 33, 31, 33, 37, 35, 23, 23, 23, 23, 33, 32, 30, 34, 36, 24, 24, 24, 24, 33, 58, 37, 33, 60, 25, 25, 25, 25, 33, 41, 40, 42, 45, 26, 26, 26, 26, 33, 38, 39, 44, 43, 27, 27, 27, 27, 33, 39, 41, 45, 44, 28, 28, 28, 28, 33, 40, 38, 43, 42, 29, 29, 29, 29, 33, 31, 35, 46, 48, 30, 30, 30, 30, 33, 30, 49, 47, 34, 30, 30, 30, 30, 33, 48, 46, 50, 52, 31, 31, 31, 31, 33, 47, 49, 53, 51, 32, 32, 32, 32, 32, 30, 32, 61, 33, 33, 33, 32, 61, 65, 64, 34, 34, 34, 32, 60, 33, 31, 35, 35, 35, 32, 61, 64, 60, 34, 34, 34, 32, 49, 30, 61, 36, 36, 36, 32, 56, 57, 53, 37, 37, 37, 32, 53, 49, 61, 38, 38, 38, 32, 61, 60, 31, 39, 39, 39, 32, 48, 52, 56, 40, 40, 40, 32, 61, 31, 48, 36, 36, 36, 32, 56, 53, 61, 41, 41, 41, 32, 61, 48, 56, 42, 42, 42, 33, 46, 47, 51, 50, 16, 16, 16, 16, 33, 51, 53, 57, 55, 43, 43, 43, 43, 33, 50, 51, 55, 54, 44, 44, 44, 44, 33, 52, 50, 54, 56, 45, 45, 45, 45, 33, 54, 55, 57, 56, 46, 46, 46, 46, 33, 59, 63, 65, 61, 47, 47, 47, 47, 33, 58, 62, 63, 59, 48, 48, 48, 48, 33, 60, 64, 62, 58, 49, 49, 49, 49, 33, 62, 64, 65, 63, 50, 50, 50, 50, 33, 42, 43, 44, 45, 16, 16, 16, 16, 32, 41, 37, 58, 51, 51, 51, 32, 58, 59, 36, 52, 52, 52, 32, 36, 40, 41, 53, 53, 53, 32, 58, 36, 41, 54, 54, 54, 33, 34, 38, 40, 36, 55, 55, 55, 55, 32, 35, 37, 41, 56, 56, 56, 32, 47, 46, 35, 57, 57, 57, 32, 38, 34, 47, 58, 58, 58, 32, 35, 41, 39, 59, 59, 59, 32, 39, 38, 47, 60, 60, 60, 32, 35, 39, 47, 61, 61, 61, 33, 66, 67, 69, 68, 62, 62, 62, 62, 33, 68, 69, 71, 70, 63, 63, 63, 63, 33, 70, 71, 73, 72, 64, 64, 64, 64, 33, 72, 73, 75, 74, 65, 65, 65, 65, 33, 74, 75, 77, 76, 66, 66, 66, 66, 33, 76, 77, 79, 78, 67, 67, 67, 67, 33, 78, 79, 81, 80, 68, 68, 68, 68, 33, 80, 81, 83, 82, 69, 69, 69, 69, 33, 82, 83, 85, 84, 70, 70, 70, 70, 33, 84, 85, 87, 86, 71, 71, 71, 71, 32, 71, 69, 67, 72, 72, 72, 32, 67, 89, 87, 73, 73, 73, 32, 87, 85, 83, 16, 16, 16, 32, 83, 81, 79, 74, 74, 74, 32, 79, 77, 75, 75, 75, 75, 32, 75, 73, 71, 76, 76, 76, 32, 71, 67, 87, 77, 77, 77, 32, 87, 83, 79, 78, 78, 78, 32, 79, 75, 71, 79, 79, 79, 32, 87, 79, 71, 80, 80, 80, 33, 88, 89, 67, 66, 81, 81, 81, 81, 33, 86, 87, 89, 88, 82, 82, 82, 82, 32, 88, 66, 68, 21, 21, 21, 32, 68, 70, 72, 83, 83, 83, 32, 72, 74, 76, 3, 3, 3, 32, 76, 78, 80, 3, 3, 3, 32, 80, 82, 84, 3, 3, 3, 32, 84, 86, 88, 3, 3, 3, 32, 88, 68, 72, 21, 21, 21, 32, 72, 76, 80, 3, 3, 3, 32, 80, 84, 88, 83, 83, 83, 32, 72, 80, 88, 3, 3, 3, 33, 90, 91, 93, 92, 84, 84, 84, 84, 33, 92, 93, 95, 94, 85, 85, 85, 85, 33, 94, 95, 97, 96, 86, 86, 86, 86, 33, 96, 97, 99, 98, 87, 87, 87, 87, 33, 98, 99, 101, 100, 88, 88, 88, 88, 33, 100, 101, 103, 102, 67, 67, 67, 67, 33, 102, 103, 105, 104, 68, 68, 68, 68, 33, 104, 105, 107, 106, 89, 89, 89, 89, 33, 106, 107, 109, 108, 90, 90, 90, 90, 33, 108, 109, 111, 110, 91, 91, 91, 91, 32, 95, 93, 91, 16, 16, 16, 32, 91, 113, 111, 16, 16, 16, 32, 111, 109, 107, 92, 92, 92, 32, 107, 105, 103, 16, 16, 16, 32, 103, 101, 99, 16, 16, 16, 32, 99, 97, 95, 93, 93, 93, 32, 95, 91, 111, 18, 18, 18, 32, 111, 107, 103, 94, 94, 94, 32, 103, 99, 95, 95, 95, 95, 32, 111, 103, 95, 96, 96, 96, 33, 112, 113, 91, 90, 97, 97, 97, 97, 33, 110, 111, 113, 112, 98, 98, 98, 98, 32, 112, 90, 92, 21, 21, 21, 32, 92, 94, 96, 99, 99, 99, 32, 96, 98, 100, 100, 100, 100, 32, 100, 102, 104, 3, 3, 3, 32, 104, 106, 108, 101, 101, 101, 32, 108, 110, 112, 102, 102, 102, 32, 112, 92, 96, 103, 103, 103, 32, 96, 100, 104, 104, 104, 104, 32, 104, 108, 112, 105, 105, 105, 32, 96, 104, 112, 106, 106, 106, 33, 114, 115, 117, 116, 107, 107, 107, 107, 33, 116, 117, 119, 118, 108, 108, 108, 108, 33, 118, 119, 121, 120, 109, 109, 109, 109, 33, 120, 121, 123, 122, 110, 110, 110, 110, 33, 122, 123, 125, 124, 66, 66, 66, 66, 33, 124, 125, 127, 126, 111, 111, 111, 111, 33, 126, 127, 129, 128, 112, 112, 112, 112, 33, 128, 129, 131, 130, 113, 113, 113, 113, 33, 130, 131, 133, 132, 114, 114, 114, 114, 33, 132, 133, 135, 134, 115, 115, 115, 115, 32, 119, 117, 115, 116, 116, 116, 32, 115, 137, 135, 117, 117, 117, 32, 135, 133, 131, 16, 16, 16, 32, 131, 129, 127, 16, 16, 16, 32, 127, 125, 123, 16, 16, 16, 32, 123, 121, 119, 76, 76, 76, 32, 119, 115, 135, 118, 118, 118, 32, 135, 131, 127, 16, 16, 16, 32, 127, 123, 119, 16, 16, 16, 32, 135, 127, 119, 16, 16, 16, 33, 136, 137, 115, 114, 81, 81, 81, 81, 33, 134, 135, 137, 136, 82, 82, 82, 82, 32, 136, 114, 116, 21, 21, 21, 32, 116, 118, 120, 3, 3, 3, 32, 120, 122, 124, 119, 119, 119, 32, 124, 126, 128, 3, 3, 3, 32, 128, 130, 132, 120, 120, 120, 32, 132, 134, 136, 83, 83, 83, 32, 136, 116, 120, 21, 21, 21, 32, 120, 124, 128, 121, 121, 121, 32, 128, 132, 136, 122, 122, 122, 32, 120, 128, 136, 123, 123, 123, 33, 138, 139, 141, 140, 107, 107, 107, 107, 33, 140, 141, 143, 142, 124, 124, 124, 124, 33, 142, 143, 145, 144, 125, 125, 125, 125, 33, 144, 145, 147, 146, 126, 126, 126, 126, 33, 146, 147, 149, 148, 127, 127, 127, 127, 33, 148, 149, 151, 150, 128, 128, 128, 128, 33, 150, 151, 153, 152, 68, 68, 68, 68, 33, 152, 153, 155, 154, 129, 129, 129, 129, 33, 154, 155, 157, 156, 130, 130, 130, 130, 33, 156, 157, 159, 158, 131, 131, 131, 131, 32, 143, 141, 139, 16, 16, 16, 32, 139, 161, 159, 16, 16, 16, 32, 159, 157, 155, 16, 16, 16, 32, 155, 153, 151, 132, 132, 132, 32, 151, 149, 147, 133, 133, 133, 32, 147, 145, 143, 76, 76, 76, 32, 143, 139, 159, 18, 18, 18, 32, 159, 155, 151, 134, 134, 134, 32, 151, 147, 143, 135, 135, 135, 32, 159, 151, 143, 136, 136, 136, 33, 160, 161, 139, 138, 81, 81, 81, 81, 33, 158, 159, 161, 160, 137, 137, 137, 137, 32, 160, 138, 140, 21, 21, 21, 32, 140, 142, 144, 138, 138, 138, 32, 144, 146, 148, 3, 3, 3, 32, 148, 150, 152, 3, 3, 3, 32, 152, 154, 156, 3, 3, 3, 32, 156, 158, 160, 139, 139, 139, 32, 160, 140, 144, 140, 140, 140, 32, 144, 148, 152, 3, 3, 3, 32, 152, 156, 160, 141, 141, 141, 32, 144, 152, 160, 142, 142, 142, 33, 163, 165, 164, 162, 143, 143, 143, 143, 33, 165, 167, 166, 164, 144, 144, 144, 144, 33, 167, 163, 162, 166, 145, 145, 145, 145, 32, 162, 164, 166, 3, 3, 3, 32, 163, 167, 165, 18, 18, 18, 33, 169, 171, 170, 168, 0, 0, 0, 0, 33, 171, 173, 172, 170, 146, 146, 146, 146, 33, 173, 169, 168, 172, 2, 2, 2, 2, 32, 168, 170, 172, 3, 3, 3, 32, 169, 173, 171, 18, 18, 18, 33, 175, 177, 176, 174, 147, 147, 147, 147, 33, 177, 179, 178, 176, 148, 148, 148, 148, 33, 179, 175, 174, 178, 149, 149, 149, 149, 32, 174, 176, 178, 3, 3, 3, 32, 175, 179, 177, 150, 150, 150],
            vertices: [.291458, .542273, .46207, .291458, .586847, .46207, .00510331, .542273, .187452, .00510331, .586847, .187452, .175449, .542273, .0826549, .175449, .586847, .0826549, 0, .22, -.2, 0, 1.16846, -.2, .1, .22, -.173205, .1, 1.16846, -.173205, .173205, .22, -.1, .173205, 1.16846, -.1, .2, .22, -8.74227e-10, .2, 1.16846, -4.23327e-8, .173205, .22, .1, .173205, 1.16846, .1, .1, .22, .173205, .1, 1.16846, .173205, 3.01992e-8, .22, .2, 3.01992e-8, 1.16846, .2, -.1, .22, .173205, -.1, 1.16846, .173205, -.173205, .22, .1, -.173205, 1.16846, .1, -.2, .22, 8.33659e-8, -.2, 1.16846, 4.19075e-8, -.173205, .22, -.0999999, -.173205, 1.16846, -.0999999, -.1, .22, -.173205, -.1, 1.16846, -.173205, -1, 0, 1, 1, 0, 1, -1, -1.19209e-7, -1, 1, -1.19209e-7, -1, -.808189, .264086, .808189, .808189, .264086, .808189, -.808189, .264086, -.808189, .808189, .264086, -.808189, -.670791, .26409, .670791, .670791, .26409, .670791, -.670791, .26409, -.670791, .670791, .26409, -.670791, -.670791, .104697, -.670791, -.670791, .104697, .670791, .670791, .104697, .670791, .670791, .104697, -.670791, .202047, .264086, .808189, -.202047, .264086, .808189, .297953, 0, 1, -.297953, 0, 1, .202047, .264086, .808191, -.202047, .264086, .808191, .297953, 0, 1, -.297953, 0, 1, .198865, .262188, 1.11376, -.20523, .262188, 1.11376, .29477, -.00189751, 1.11376, -.301135, -.00189751, 1.11376, .203638, .264082, -.808192, -.200456, .264082, -.808192, .299544, -423193e-11, -1, -.296362, -423193e-11, -1, .200456, .262184, -1.11376, -.203638, .262184, -1.11376, .296362, -.00190187, -1.11376, -.299544, -.00190187, -1.11376, 0, .2, -.6145, 0, .3, -.6145, .307203, .2, -.532173, .307203, .3, -.532173, .532091, .2, -.30725, .532091, .3, -.30725, .614405, .2, 1.81184e-8, .614405, .3, 1.37472e-8, .532091, .2, .30725, .532091, .3, .30725, .307203, .2, .532173, .307203, .3, .532173, 9.27726e-8, .2, .6145, 9.27726e-8, .3, .6145, -.307203, .2, .532173, -.307203, .3, .532173, -.53209, .2, .30725, -.53209, .3, .30725, -.614405, .2, 2.76946e-7, -.614405, .3, 2.72575e-7, -.532091, .2, -.30725, -.532091, .3, -.30725, -.307203, .2, -.532172, -.307203, .3, -.532172, 0, .45, -.6145, 0, .55, -.6145, .307203, .45, -.532173, .307203, .55, -.532173, .532091, .45, -.30725, .532091, .55, -.30725, .614405, .45, 7.19053e-9, .614405, .55, 2.81938e-9, .532091, .45, .30725, .532091, .55, .30725, .307203, .45, .532173, .307203, .55, .532173, 9.27726e-8, .45, .6145, 9.27726e-8, .55, .6145, -.307203, .45, .532173, -.307203, .55, .532173, -.53209, .45, .30725, -.53209, .55, .30725, -.614405, .45, 2.66018e-7, -.614405, .55, 2.61647e-7, -.532091, .45, -.30725, -.532091, .55, -.30725, -.307203, .45, -.532172, -.307203, .55, -.532172, 0, .7, -.6145, 0, .8, -.6145, .307203, .7, -.532173, .307203, .8, -.532173, .532091, .7, -.30725, .532091, .8, -.30725, .614405, .7, -3.73732e-9, .614405, .8, -8.10846e-9, .532091, .7, .30725, .532091, .8, .30725, .307203, .7, .532173, .307203, .8, .532173, 9.27726e-8, .7, .6145, 9.27726e-8, .8, .6145, -.307203, .7, .532173, -.307203, .8, .532173, -.53209, .7, .30725, -.53209, .8, .30725, -.614405, .7, 2.55091e-7, -.614405, .8, 2.50719e-7, -.532091, .7, -.30725, -.532091, .8, -.30725, -.307203, .7, -.532172, -.307203, .8, -.532172, 0, .95, -.6145, 0, 1.05, -.6145, .307203, .95, -.532173, .307203, 1.05, -.532173, .532091, .95, -.30725, .532091, 1.05, -.30725, .614405, .95, -1.46652e-8, .614405, 1.05, -1.90363e-8, .532091, .95, .30725, .532091, 1.05, .30725, .307203, .95, .532173, .307203, 1.05, .532173, 9.27726e-8, .95, .6145, 9.27726e-8, 1.05, .6145, -.307203, .95, .532173, -.307203, 1.05, .532173, -.53209, .95, .30725, -.53209, 1.05, .30725, -.614405, .95, 2.44163e-7, -.614405, 1.05, 2.39792e-7, -.532091, .95, -.30725, -.532091, 1.05, -.30725, -.307203, .95, -.532172, -.307203, 1.05, -.532172, .291458, 1.04227, .46207, .291458, 1.08685, .46207, .00510331, 1.04227, .187452, .00510331, 1.08685, .187452, .175449, 1.04227, .0826548, .175449, 1.08685, .0826548, .291458, .792273, .46207, .291458, .836847, .46207, .00510331, .792273, .187452, .00510331, .836847, .187452, .175449, .792273, .0826549, .175449, .836847, .0826549, .291458, .292273, .462071, .291458, .336847, .462071, .00510331, .292273, .187452, .00510331, .336847, .187452, .175449, .292273, .0826549, .175449, .336847, .0826549],
            metadata: {
                faces: 225,
                generator: "io_three",
                type: "Geometry",
                normals: 151,
                uvs: 0,
                version: 3,
                vertices: 180
            },
            normals: [-.692162, 0, .721743, -.523986, 0, -.851727, .956297, 0, -.292396, 0, -1, 0, 2.13162e-7, 1, -2.22272e-7, .258819, -4.50525e-8, -.965926, .707107, -3.08254e-8, -.707107, .965926, -1.18559e-8, -.258819, .965926, 1.06703e-8, .258819, .707107, 3.08254e-8, .707107, .258819, 4.62381e-8, .965926, -.258819, 4.62381e-8, .965926, -.707107, 2.84542e-8, .707107, -.965926, 9.48473e-9, .25882, -.965926, -1.06703e-8, -.258819, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -.258819, -4.50524e-8, -.965926, -.707107, -3.08254e-8, -.707106, 0, -1, 0, 4.09062e-7, .587668, -.809103, .809102, .587668, -3.78727e-8, -.809102, .587668, -3.78727e-8, -4.11057e-7, .587668, -.809102, 0, 3.73949e-7, 1, 0, -3.73949e-7, -1, -1, 0, 0, 1, 0, 0, 0, .587668, .809102, .939635, .342179, 0, -.939635, .342179, 0, -584493e-11, -1, 5.96047e-8, 0, -.999861, .0166786, 587149e-11, -1, 5.96047e-8, 0, -1, 211596e-11, 0, -.999861, -.0166775, -.00265952, -.999996, 0, 0, -1, 211596e-11, .512126, -.858911, 0, -.00320125, -.999995, -4.31016e-7, .0512341, -.998571, -.0152224, -.941179, .337721, -.0112291, 0, .999981, .00620961, .937754, .346864, .0173728, 0, 270842e-11, 1, -.941179, .337721, .0112291, 0, .999981, -.00621, .937754, .346865, -.0173731, 0, 270842e-11, -1, -680278e-11, 1, -371696e-10, 0, .537666, -.843158, 0, 1, -303668e-10, 406445e-11, 1, -741175e-10, -29933e-9, 1, -4.03011e-8, 30293e-9, 1, -7.37509e-8, 0, 0, 0, 0, 1, 294992e-10, 294992e-10, 1, 0, 0, 1, 294992e-10, 0, 1, 294992e-10, .258856, 0, -.965916, .707161, 0, -.707052, .965936, -5.8558e-8, -.258782, .965936, 5.8558e-8, .258782, .707161, 0, .707052, .258856, 0, .965916, -.258856, 0, .965916, -.707161, 0, .707053, -.965936, 0, .258782, -.965936, 0, -.258781, 4.85059e-8, 1, -1.80999e-7, -4.8506e-8, 1, -1.80999e-7, 4.8506e-8, 1, -1.80999e-7, -4.8506e-8, 1, -1.80999e-7, 0, 1, 0, -2.44475e-14, 1, -9.69969e-8, -5.60099e-8, 1, 3.25968e-14, 5.60099e-8, 1, 5.43279e-15, -9.05465e-15, 1, -3.23323e-8, -.258856, 0, -.965916, -.707162, 0, -.707052, 0, -1, 0, .258856, 0, -.965916, .707161, -1.17124e-7, -.707052, .965936, -5.85581e-8, -.258782, .965936, 5.8558e-8, .258782, .707161, 1.17124e-7, .707052, -.707161, 1.17124e-7, .707053, -.965936, 2.9279e-8, .258782, -.965936, -2.9279e-8, -.258781, -3.62054e-7, 1, -9.69968e-8, 3.62053e-7, 1, -9.69969e-8, 5.60099e-8, 1, -9.6997e-8, -5.60099e-8, 1, -9.6997e-8, -1.44874e-14, 1, -6.46647e-8, -.258856, 0, -.965916, -.707162, -1.17124e-7, -.707052, 1.81027e-7, -1, -4.84985e-8, -1.81027e-7, -1, -4.84985e-8, 1.81027e-7, -1, -4.84986e-8, -1.81027e-7, -1, -4.84984e-8, 1.62984e-14, -1, 5.60012e-8, 5.43279e-15, -1, 5.60012e-8, 3.25967e-14, -1, 5.60012e-8, 3.62186e-15, -1, 5.60012e-8, .258856, 0, -.965916, .707161, 0, -.707052, .965936, 0, -.258782, .965936, 0, .258782, .258856, 0, .965916, -.258856, 0, .965916, -.707161, 0, .707052, -.965936, 2.9279e-8, .258782, -.965936, -2.9279e-8, -.258781, 9.70119e-8, 1, -3.61998e-7, -9.70119e-8, 1, -3.61997e-7, -4.88951e-14, 1, -1.93994e-7, -3.62054e-7, -1, -9.69971e-8, 3.62054e-7, -1, -9.69973e-8, 1.08656e-14, -1, 1.12002e-7, 9.7012e-8, -1, 5.60012e-8, -3.23373e-8, -1, 5.60013e-8, .707161, 0, -.707052, .965936, -5.85581e-8, -.258782, .965936, 5.85581e-8, .258782, .707161, 0, .707052, .258856, 0, .965916, -.707161, 0, .707052, -.965936, 0, .258782, -.965936, 0, -.258781, 1.94024e-7, 1, -7.23996e-7, -1.94024e-7, 1, -7.23996e-7, -2.2404e-7, 1, 1.30387e-13, 2.2404e-7, 1, 2.17312e-14, -2.89749e-14, 1, -1.29329e-7, -.707162, 0, -.707052, -2.65042e-7, -1, 2.65001e-7, 2.65042e-7, -1, 2.65001e-7, 3.25967e-14, -1, 1.12002e-7, -9.70119e-8, -1, 5.60013e-8, 3.23373e-8, -1, 5.60012e-8, -.692161, 0, .721743, -.523986, -1.04469e-7, -.851727, .956297, -1.05324e-7, -.292396, -.523986, 0, -.851727, -.692162, 0, .721743, -.523986, 0, -.851727, .956297, 0, -.292396, -4.06724e-8, 1, -6.6112e-8],
            uvs: []
        },
        "echo-dot": {
            id: "echo-dot",
            primaryColorFaces: [18, 19, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77],
            secondaryColorFaces: [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            uvs: [],
            normals: [.19509, -4.59778e-8, -.980785, 0, -1, 0, 0, -1, 0, 0, -1, 0, 2.21776e-7, -1, 3.31911e-7, -2.21775e-7, -1, 3.3191e-7, -1.10135e-7, -1, 0, 1.7154e-14, -1, 1.10135e-7, -1.61289e-8, -1, 3.89386e-8, 3.89386e-8, -1, 1.61289e-8, -.19509, -4.59779e-8, -.980785, .0329971, .985592, -.165888, .55557, -7.66298e-8, -.83147, .83147, -3.06519e-8, -.55557, .980785, 0, -.19509, .980785, 0, .19509, .83147, 3.06519e-8, .55557, .55557, 7.66298e-8, .83147, .19509, 4.59779e-8, .980785, -.19509, 4.98094e-8, .980785, -.55557, 7.66298e-8, .83147, -.831469, 1.53259e-8, .55557, -.980785, 3.83149e-9, .19509, -.980785, -3.83149e-9, -.19509, -.831469, -1.53259e-8, -.55557, -.55557, -7.66297e-8, -.83147, -.032997, .985592, -.165888, .0939678, .985592, -.140633, .140633, .985593, -.0939678, .165887, .985593, -.0329971, .165887, .985593, .0329969, .140632, .985593, .0939673, .0939672, .985593, .140632, .0329969, .985593, .165887, -.0329969, .985593, .165887, -.0939672, .985593, .140632, -.140632, .985593, .0939673, -.165887, .985592, .0329968, -.165887, .985593, -.0329971, -.140633, .985592, -.0939678, -.0939678, .985592, -.140633, .15045, .986652, .0623184, .0623184, .986652, .15045, -.0623185, .986652, .15045, -.15045, .986651, .0623184, -.15045, .986651, -.0623184, .150485, .986645, .0623329, .062333, .986645, .150485, -.062333, .986645, .150485, -.150485, .986645, .062333, .0623331, .986645, .150485, -.0623331, .986645, .150485, .0623183, .986651, -.15045, .15045, .986652, -.0623185, .155259, .985778, .0643103, .0643104, .985778, .155259, -.0643104, .985778, .155259, -.155259, .985778, .0643103, -.0623183, .986651, -.15045, -.155259, .985778, -.0643103, -.150485, .986645, .062333, -.150485, .986645, -.0623331, -.062333, .986645, -.150485, .062333, .986645, -.150485, .150485, .986645, -.0623331, .150485, .986645, .062333, -.150485, .986645, -.062333, -.062333, .986645, -.150485, .062333, .986645, -.150485, .150485, .986645, -.062333, .155259, .985778, .0643103, .0643103, .985778, .155259, -.0643103, .985778, .155259, -.155259, .985778, .0643103, .0643103, .985778, .155259, -.0643103, .985778, .155259, .0643103, .985778, -.155259, .155259, .985778, -.0643103, -.0643103, .985778, -.155259, -.155259, .985778, .0643103, -.155259, .985778, -.0643103, -.0643103, .985778, -.155259, .0643103, .985778, -.155259, .155259, .985778, -.0643104, .155259, .985778, .0643103, -.155259, .985778, -.0643103, -.0643103, .985778, -.155259, .0643103, .985778, -.155259, .155259, .985778, -.0643103, .062333, .986645, .150485, .0643103, .985778, .155259, .150485, .986645, .062333, .155259, .985778, .0643102, .150485, .986645, -.0623331, .155259, .985778, -.0643103, -.00587103, .999966, -.00587121, 0, 1, 0, 5.42574e-8, 1, -1.30989e-7, 1.71833e-7, 1, -7.11755e-8, -2.51638e-7, 1, -4.94646e-7, 0, 1, 0, -2.51636e-7, 1, -4.94652e-7, 7.11761e-8, 1, -1.71834e-7, 1.30989e-7, 1, -5.42575e-8, .00587126, .999966, .00587114, 3.22814e-7, 1, -3.22814e-7, -1.71833e-7, 1, -7.11755e-8, -1.71833e-7, 1, -7.11754e-8, -5.42574e-8, 1, -1.30989e-7, 0, 1, 0, 2.51636e-7, 1, -4.94651e-7, -1.71834e-7, 1, -7.11758e-8, -5.42578e-8, 1, -1.3099e-7, -.00587127, .999966, .00587114, .00587102, .999966, -.00587121, .00793443, .999955, -.00530162, .00481351, .999921, -.0116208, .0146855, .999888, -.00292113, .0167634, .999835, -.00694363, .0167637, .999854, .00333451, .0122451, .999912, .00507207, .010238, .999924, .00684084, .00278479, .999974, .00672309, .00530166, .999954, .00793451, .011621, .999921, .00481357, .00292114, .999888, .0146856, .00694362, .999835, .0167634, -.00694362, .999835, .0167634, -.00292115, .999888, .0146856, -.011621, .999921, .00481358, -.00530167, .999954, .00793451, -.00278479, .999973, .00672309, -.010238, .999924, .00684083, -.0146855, .999888, .00292114, -.0167634, .999835, .00694362, -.0167637, .999854, -.00333451, -.0122451, .999912, -.00507207, -.00481351, .999921, -.0116208, -.00793443, .999954, -.00530162, -.00530152, .999954, -.00793429, -.0116206, .999921, -.00481343, -.00292109, .999888, -.0146853, -.00694349, .999835, -.0167631, .00333444, .999854, -.0167634, .00507198, .999912, -.0122448, .00684071, .999924, -.0102379, .00672297, .999974, -.00278475],
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 32, 17, 0, 3, 1, 1, 1, 32, 3, 4, 5, 2, 2, 2, 32, 5, 6, 7, 3, 3, 3, 32, 7, 8, 9, 4, 4, 4, 32, 9, 10, 11, 2, 2, 2, 32, 11, 12, 13, 5, 5, 5, 32, 13, 14, 15, 2, 2, 2, 32, 15, 16, 17, 2, 2, 2, 32, 17, 3, 5, 2, 2, 2, 32, 5, 7, 9, 6, 6, 6, 32, 9, 11, 13, 7, 7, 7, 32, 13, 15, 17, 2, 2, 2, 32, 17, 5, 9, 8, 8, 8, 32, 9, 13, 17, 9, 9, 9, 33, 1, 0, 17, 18, 10, 10, 10, 10, 33, 2, 1, 19, 20, 11, 11, 11, 11, 33, 3, 2, 21, 4, 12, 12, 12, 12, 33, 4, 21, 22, 5, 13, 13, 13, 13, 33, 5, 22, 23, 6, 14, 14, 14, 14, 33, 6, 23, 24, 7, 15, 15, 15, 15, 33, 7, 24, 25, 8, 16, 16, 16, 16, 33, 8, 25, 26, 9, 17, 17, 17, 17, 33, 9, 26, 27, 10, 18, 18, 18, 18, 33, 10, 27, 28, 11, 19, 19, 19, 19, 33, 11, 28, 29, 12, 20, 20, 20, 20, 33, 12, 29, 30, 13, 21, 21, 21, 21, 33, 13, 30, 31, 14, 22, 22, 22, 22, 33, 14, 31, 32, 15, 23, 23, 23, 23, 33, 15, 32, 33, 16, 24, 24, 24, 24, 33, 16, 33, 18, 17, 25, 25, 25, 25, 33, 1, 18, 34, 19, 26, 26, 26, 26, 33, 21, 2, 20, 35, 27, 27, 27, 27, 33, 22, 21, 35, 47, 28, 28, 28, 28, 33, 23, 22, 47, 51, 29, 29, 29, 29, 33, 24, 23, 51, 50, 30, 30, 30, 30, 33, 25, 24, 50, 49, 31, 31, 31, 31, 33, 26, 25, 49, 48, 32, 32, 32, 32, 33, 27, 26, 48, 55, 33, 33, 33, 33, 33, 28, 27, 55, 56, 34, 34, 34, 34, 33, 29, 28, 56, 57, 35, 35, 35, 35, 33, 30, 29, 57, 58, 36, 36, 36, 36, 33, 31, 30, 58, 59, 37, 37, 37, 37, 33, 32, 31, 59, 60, 38, 38, 38, 38, 33, 33, 32, 60, 61, 39, 39, 39, 39, 33, 18, 33, 61, 34, 40, 40, 40, 40, 33, 37, 36, 72, 73, 41, 41, 41, 41, 33, 38, 37, 73, 74, 42, 42, 42, 42, 33, 39, 38, 74, 75, 43, 43, 43, 43, 33, 40, 39, 75, 76, 44, 44, 44, 44, 33, 41, 40, 76, 77, 45, 45, 45, 45, 33, 63, 62, 86, 87, 46, 46, 46, 46, 33, 64, 63, 87, 88, 47, 47, 47, 47, 33, 65, 64, 88, 89, 48, 48, 48, 48, 33, 66, 65, 89, 90, 49, 49, 49, 49, 33, 68, 67, 91, 92, 50, 50, 50, 50, 33, 69, 68, 92, 93, 51, 51, 51, 51, 33, 71, 70, 94, 95, 52, 52, 52, 52, 33, 36, 71, 95, 72, 53, 53, 53, 53, 32, 96, 73, 72, 54, 54, 54, 32, 96, 74, 73, 55, 55, 55, 32, 96, 75, 74, 56, 56, 56, 32, 96, 76, 75, 57, 57, 57, 33, 70, 41, 77, 94, 58, 58, 58, 58, 32, 96, 77, 76, 59, 59, 59, 33, 78, 69, 93, 97, 60, 60, 60, 60, 33, 79, 78, 97, 98, 61, 61, 61, 61, 33, 80, 79, 98, 99, 62, 62, 62, 62, 33, 81, 80, 99, 100, 63, 63, 63, 63, 33, 82, 81, 100, 101, 64, 64, 64, 64, 33, 67, 82, 101, 91, 65, 65, 65, 65, 33, 83, 66, 90, 102, 66, 66, 66, 66, 33, 84, 83, 102, 103, 67, 67, 67, 67, 33, 85, 84, 103, 104, 68, 68, 68, 68, 33, 62, 85, 104, 86, 69, 69, 69, 69, 32, 105, 87, 86, 70, 70, 70, 32, 105, 88, 87, 71, 71, 71, 32, 105, 89, 88, 72, 72, 72, 32, 105, 90, 89, 73, 73, 73, 32, 106, 92, 91, 74, 74, 74, 32, 106, 93, 92, 75, 75, 75, 32, 96, 95, 94, 76, 76, 76, 32, 96, 72, 95, 77, 77, 77, 32, 96, 94, 77, 78, 78, 78, 32, 106, 97, 93, 79, 79, 79, 32, 106, 98, 97, 80, 80, 80, 32, 106, 99, 98, 81, 81, 81, 32, 106, 100, 99, 82, 82, 82, 32, 106, 101, 100, 83, 83, 83, 32, 106, 91, 101, 84, 84, 84, 32, 105, 102, 90, 85, 85, 85, 32, 105, 103, 102, 86, 86, 86, 32, 105, 104, 103, 87, 87, 87, 32, 105, 86, 104, 88, 88, 88, 33, 44, 43, 107, 108, 89, 89, 89, 89, 33, 45, 44, 108, 109, 48, 48, 48, 48, 32, 110, 108, 107, 90, 90, 90, 33, 43, 42, 111, 107, 91, 91, 91, 91, 33, 46, 45, 109, 112, 49, 49, 49, 49, 32, 110, 109, 108, 72, 72, 72, 32, 110, 107, 111, 92, 92, 92, 33, 42, 54, 113, 111, 93, 93, 93, 93, 33, 52, 46, 112, 114, 66, 66, 66, 66, 32, 110, 112, 109, 73, 73, 73, 32, 110, 111, 113, 94, 94, 94, 33, 54, 53, 115, 113, 68, 68, 68, 68, 33, 53, 52, 114, 115, 67, 67, 67, 67, 32, 110, 114, 112, 85, 85, 85, 32, 110, 113, 115, 87, 87, 87, 32, 110, 115, 114, 86, 86, 86, 32, 53, 78, 49, 95, 95, 95, 32, 70, 68, 42, 96, 96, 96, 32, 66, 68, 70, 96, 96, 96, 32, 54, 78, 53, 97, 97, 97, 32, 69, 78, 54, 98, 98, 98, 32, 68, 69, 54, 99, 99, 99, 32, 42, 68, 54, 96, 96, 96, 32, 66, 70, 65, 100, 100, 100, 32, 70, 71, 65, 101, 101, 101, 32, 65, 71, 64, 102, 102, 102, 32, 71, 36, 64, 103, 103, 103, 32, 64, 36, 61, 104, 104, 104, 32, 68, 66, 67, 105, 105, 105, 32, 66, 83, 67, 106, 106, 106, 32, 67, 83, 82, 107, 107, 107, 32, 83, 84, 82, 108, 108, 108, 32, 42, 43, 70, 109, 109, 109, 32, 70, 43, 41, 110, 110, 110, 32, 40, 41, 43, 111, 111, 111, 32, 43, 44, 40, 112, 112, 112, 32, 40, 44, 35, 113, 113, 113, 32, 82, 84, 57, 114, 114, 114, 32, 58, 57, 84, 115, 115, 115, 32, 84, 85, 58, 116, 116, 116, 32, 58, 85, 59, 117, 117, 117, 32, 85, 62, 59, 118, 118, 118, 32, 59, 62, 60, 119, 119, 119, 32, 62, 63, 60, 120, 120, 120, 32, 60, 63, 61, 121, 121, 121, 32, 63, 64, 61, 122, 122, 122, 32, 61, 36, 34, 123, 123, 123, 32, 36, 37, 34, 124, 124, 124, 32, 34, 37, 19, 125, 125, 125, 32, 37, 38, 19, 126, 126, 126, 32, 39, 19, 38, 127, 127, 127, 32, 19, 39, 20, 128, 128, 128, 32, 39, 40, 20, 129, 129, 129, 32, 20, 40, 35, 130, 130, 130, 32, 45, 35, 44, 131, 131, 131, 32, 35, 45, 47, 132, 132, 132, 32, 51, 47, 45, 133, 133, 133, 32, 45, 46, 51, 134, 134, 134, 32, 51, 46, 50, 135, 135, 135, 32, 46, 52, 50, 136, 136, 136, 32, 53, 50, 52, 137, 137, 137, 32, 50, 53, 49, 138, 138, 138, 32, 49, 78, 48, 139, 139, 139, 32, 78, 79, 48, 140, 140, 140, 32, 48, 79, 55, 141, 141, 141, 32, 79, 80, 55, 142, 142, 142, 32, 55, 80, 56, 143, 143, 143, 32, 80, 81, 56, 144, 144, 144, 32, 56, 81, 57, 145, 145, 145, 32, 81, 82, 57, 146, 146, 146],
            metadata: {
                generator: "io_three",
                version: 3,
                vertices: 116,
                type: "Geometry",
                normals: 147,
                faces: 164,
                uvs: 0
            },
            vertices: [0, 0, -1, 0, .62297, -1, .382683, .62297, -.92388, .382683, 0, -.92388, .707107, 0, -.707107, .92388, 0, -.382683, 1, 0, 4.37114e-8, .92388, 0, .382684, .707107, 5.96046e-8, .707107, .382683, 5.96046e-8, .92388, 1.50996e-7, 5.96046e-8, 1, -.382683, 5.96046e-8, .92388, -.707107, 5.96046e-8, .707107, -.92388, 0, .382684, -1, 0, -1.19249e-8, -.923879, 0, -.382684, -.707107, 0, -.707107, -.382683, 0, -.92388, -.382683, .62297, -.92388, 4.11159e-9, .641546, -.88963, .340447, .641546, -.821911, .707107, .62297, -.707107, .92388, .62297, -.382683, 1, .62297, 1.64805e-8, .92388, .62297, .382684, .707107, .62297, .707107, .382683, .62297, .923879, 1.50996e-7, .62297, 1, -.382683, .62297, .92388, -.707107, .62297, .707107, -.92388, .62297, .382684, -1, .62297, -3.91558e-8, -.923879, .62297, -.382684, -.707107, .62297, -.707107, -.340446, .641546, -.821911, .629064, .641546, -.629064, -.184641, .638217, -.506397, -.130561, .638217, -.636958, 3.02136e-7, .638217, -.691038, .130561, .638217, -.636958, .184641, .638217, -.506397, .130561, .638217, -.375836, .321759, .638217, 5.89019e-8, .375839, .638217, -.130561, .5064, .638217, -.184641, .636961, .638217, -.130561, .691041, .638217, 5.89019e-8, .821911, .641546, -.340447, .340447, .641546, .821911, .629064, .641546, .629064, .821911, .641546, .340447, .88963, .641546, 9.61062e-9, .636961, .638217, .130561, .5064, .638217, .184641, .375839, .638217, .130561, 1.38442e-7, .641546, .88963, -.340447, .641546, .821911, -.629063, .641546, .629064, -.821911, .641546, .340447, -.88963, .641546, -3.98851e-8, -.821911, .641546, -.340447, -.629063, .641546, -.629064, -.691041, .638217, 5.85294e-8, -.636961, .638217, -.130561, -.5064, .638217, -.184641, -.375839, .638217, -.130561, -.321759, .638217, 5.85294e-8, -.130561, .638217, .375839, 3.02229e-7, .638217, .321759, .130561, .638217, .375839, 3.02347e-7, .638217, -.321756, -.130561, .638217, -.375836, -.0968318, .624827, -.506397, -.0684703, .624827, -.574867, 2.91674e-7, .624827, -.603229, .0684709, .624827, -.574867, .0968323, .624827, -.506397, .0684709, .624827, -.437926, .184641, .638217, .5064, .130561, .638217, .636961, 3.0244e-7, .638217, .691041, -.130561, .638217, .636961, -.184641, .638217, .5064, -.375839, .638217, .130561, -.5064, .638217, .184641, -.636961, .638217, .130561, -.603232, .624824, 5.91148e-8, -.574871, .624824, -.0684706, -.5064, .624824, -.096832, -.437929, .624824, -.0684706, -.409568, .624824, 5.91148e-8, -.0684703, .624824, .437929, 2.91767e-7, .624824, .409568, .0684709, .624824, .437929, 2.95372e-7, .624827, -.409565, -.0684703, .624827, -.437926, 3.0003e-7, .609576, -.506397, .0968323, .624824, .5064, .0684709, .624824, .574871, 2.95465e-7, .624824, .603232, -.0684703, .624824, .574871, -.0968318, .624824, .5064, -.437929, .624824, .0684707, -.5064, .624824, .0968321, -.574871, .624824, .0684707, -.5064, .609573, 6.27617e-8, 3.0003e-7, .609573, .5064, .437929, .624824, -.0684706, .5064, .624824, -.096832, .574871, .624824, -.0684706, .5064, .609573, 6.27617e-8, .409568, .624824, 5.94873e-8, .603232, .624824, 5.94873e-8, .437929, .624824, .0684707, .574871, .624824, .0684707, .5064, .624824, .0968321]
        },
        "event-hub": {
            id: "event-hub",
            primaryColorFaces: [12, 13, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
            imagePlanePosition: {
                y: 1.34
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .37,
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 2, 3, 5, 4, 1, 1, 1, 1, 33, 4, 5, 7, 6, 2, 2, 2, 2, 33, 6, 7, 9, 8, 3, 3, 3, 3, 33, 8, 9, 11, 10, 4, 4, 4, 4, 33, 10, 11, 13, 12, 5, 5, 5, 5, 33, 5, 3, 16, 18, 6, 6, 6, 6, 33, 1, 0, 14, 15, 7, 7, 7, 7, 33, 12, 13, 15, 14, 8, 8, 8, 8, 32, 14, 0, 2, 9, 9, 9, 32, 2, 4, 6, 10, 10, 10, 32, 6, 8, 10, 11, 11, 11, 32, 10, 12, 14, 12, 12, 12, 32, 14, 2, 6, 13, 13, 13, 32, 6, 10, 14, 14, 14, 14, 32, 18, 16, 17, 15, 15, 15, 32, 17, 23, 22, 16, 16, 16, 32, 22, 21, 20, 17, 17, 17, 32, 20, 19, 18, 18, 18, 18, 32, 18, 17, 22, 19, 19, 19, 32, 22, 20, 18, 20, 20, 20, 33, 11, 9, 20, 21, 21, 21, 21, 21, 33, 1, 15, 23, 17, 22, 22, 22, 22, 33, 3, 1, 17, 16, 23, 23, 23, 23, 33, 7, 5, 18, 19, 24, 24, 24, 24, 33, 13, 11, 21, 22, 25, 25, 25, 25, 33, 9, 7, 19, 20, 26, 26, 26, 26, 33, 15, 13, 22, 23, 27, 27, 27, 27, 33, 25, 27, 26, 24, 28, 28, 28, 28, 33, 31, 29, 28, 30, 29, 29, 29, 29, 33, 29, 25, 24, 28, 30, 30, 30, 30, 33, 24, 26, 30, 28, 31, 31, 31, 31, 33, 29, 31, 27, 25, 32, 32, 32, 32, 33, 30, 26, 32, 33, 33, 33, 33, 33, 33, 27, 31, 33, 32, 34, 34, 34, 34, 32, 26, 27, 32, 35, 35, 35, 32, 31, 30, 33, 36, 36, 36, 33, 36, 34, 38, 39, 37, 37, 37, 37, 33, 35, 37, 39, 38, 38, 38, 38, 38, 32, 34, 35, 38, 39, 39, 39, 32, 37, 36, 39, 40, 40, 40, 33, 41, 43, 42, 40, 41, 41, 41, 41, 33, 47, 45, 44, 46, 42, 42, 42, 42, 33, 45, 41, 40, 44, 43, 43, 43, 43, 33, 40, 42, 46, 44, 44, 44, 44, 44, 33, 45, 47, 43, 41, 45, 45, 45, 45, 32, 48, 37, 35, 46, 46, 46, 32, 49, 43, 47, 47, 47, 47, 32, 48, 35, 49, 48, 48, 48, 32, 49, 47, 48, 49, 49, 49, 33, 46, 50, 48, 47, 50, 50, 50, 50, 33, 36, 37, 48, 50, 51, 51, 51, 51, 33, 34, 51, 49, 35, 52, 52, 52, 52, 32, 51, 34, 36, 53, 53, 53, 32, 50, 46, 42, 54, 54, 54, 32, 51, 36, 50, 55, 55, 55, 32, 50, 42, 51, 56, 56, 56, 33, 42, 43, 49, 51, 57, 57, 57, 57, 33, 54, 57, 56, 52, 58, 58, 58, 58, 33, 53, 56, 57, 55, 59, 59, 59, 59, 32, 52, 56, 53, 60, 60, 60, 32, 55, 57, 54, 61, 61, 61, 33, 59, 58, 60, 61, 62, 62, 62, 62, 33, 65, 64, 62, 63, 63, 63, 63, 63, 33, 63, 59, 58, 62, 64, 64, 64, 64, 33, 58, 62, 64, 60, 65, 65, 65, 65, 33, 63, 59, 61, 65, 66, 66, 66, 66, 32, 53, 55, 66, 67, 67, 67, 32, 66, 65, 61, 68, 68, 68, 32, 67, 53, 66, 69, 69, 69, 32, 66, 61, 67, 70, 70, 70, 33, 64, 65, 66, 68, 71, 71, 71, 71, 33, 54, 68, 66, 55, 72, 72, 72, 72, 33, 52, 53, 67, 69, 73, 73, 73, 73, 32, 54, 52, 69, 74, 74, 74, 32, 69, 60, 64, 75, 75, 75, 32, 68, 54, 69, 76, 76, 76, 32, 69, 64, 68, 77, 77, 77, 33, 60, 69, 67, 61, 78, 78, 78, 78, 33, 71, 70, 72, 73, 79, 79, 79, 79, 33, 77, 76, 74, 75, 80, 80, 80, 80, 33, 75, 71, 70, 74, 30, 30, 30, 30, 33, 70, 74, 76, 72, 81, 81, 81, 81, 33, 75, 71, 73, 77, 82, 82, 82, 82, 33, 76, 79, 78, 72, 83, 83, 83, 83, 33, 73, 78, 79, 77, 84, 84, 84, 84, 32, 72, 78, 73, 85, 85, 85, 32, 77, 79, 76, 86, 86, 86, 33, 82, 85, 84, 80, 87, 87, 87, 87, 33, 81, 84, 85, 83, 88, 88, 88, 88, 32, 80, 84, 81, 89, 89, 89, 32, 83, 85, 82, 90, 90, 90, 33, 87, 86, 88, 89, 91, 91, 91, 91, 33, 93, 92, 90, 91, 92, 92, 92, 92, 33, 91, 87, 86, 90, 93, 93, 93, 93, 33, 86, 90, 92, 88, 94, 94, 94, 94, 33, 91, 87, 89, 93, 95, 95, 95, 95, 32, 81, 83, 94, 96, 96, 96, 32, 94, 93, 89, 97, 97, 97, 32, 95, 81, 94, 98, 98, 98, 32, 94, 89, 95, 99, 99, 99, 33, 92, 93, 94, 96, 100, 100, 100, 100, 33, 82, 96, 94, 83, 101, 101, 101, 101, 33, 80, 81, 95, 97, 102, 102, 102, 102, 32, 82, 80, 97, 103, 103, 103, 32, 97, 88, 92, 104, 104, 104, 32, 96, 82, 97, 105, 105, 105, 32, 97, 92, 96, 106, 106, 106, 33, 88, 97, 95, 89, 107, 107, 107, 107, 33, 100, 98, 102, 103, 87, 87, 87, 87, 33, 99, 101, 103, 102, 88, 88, 88, 88, 32, 98, 99, 102, 108, 108, 108, 32, 101, 100, 103, 89, 89, 89, 33, 105, 107, 106, 104, 109, 109, 109, 109, 33, 111, 109, 108, 110, 110, 110, 110, 110, 33, 109, 105, 104, 108, 111, 111, 111, 111, 33, 104, 106, 110, 108, 112, 112, 112, 112, 33, 109, 111, 107, 105, 113, 113, 113, 113, 32, 112, 101, 99, 114, 114, 114, 32, 113, 107, 111, 115, 115, 115, 32, 112, 99, 113, 116, 116, 116, 32, 113, 111, 112, 117, 117, 117, 33, 110, 114, 112, 111, 118, 118, 118, 118, 33, 100, 101, 112, 114, 119, 119, 119, 119, 33, 98, 115, 113, 99, 120, 120, 120, 120, 32, 115, 98, 100, 121, 121, 121, 32, 114, 110, 106, 122, 122, 122, 32, 115, 100, 114, 123, 123, 123, 32, 114, 106, 115, 124, 124, 124, 33, 106, 107, 113, 115, 125, 125, 125, 125],
            vertices: [-.256837, -.0016165, -.62006, -.256837, .185211, -.62006, .256837, -.0016165, -.62006, .256837, .185211, -.62006, .62006, -.00161649, -.256837, .62006, .185211, -.256837, .62006, -.00161646, .256837, .62006, .185211, .256837, .256837, -.00161645, .620061, .256837, .185212, .620061, -.256837, -.00161645, .62006, -.256837, .185212, .62006, -.62006, -.00161646, .256837, -.62006, .185211, .256837, -.62006, -.00161649, -.256837, -.62006, .185211, -.256837, .222358, .267294, -.53682, -.222358, .267294, -.53682, .53682, .267294, -.222358, .53682, .267294, .222358, .222358, .267294, .53682, -.222358, .267294, .53682, -.53682, .267294, .222358, -.53682, .267294, -.222358, -.0680311, -1.86265e-8, -.401573, -.0680311, .068031, -.401573, -.0680311, -4.09782e-8, -.928006, -.0680311, .068031, -.928006, .0680311, -1.86265e-8, -.401573, .0680311, .068031, -.401573, .0680311, -4.09782e-8, -.928006, .0680311, .068031, -.928006, -.03, -4.47035e-8, -1, .03, -4.47035e-8, -1, -1, -4.09782e-8, -.928006, -1, .068031, -.928006, -.864, -4.09782e-8, -.928006, -.864, .068031, -.928006, -.961986, -4.47035e-8, -1, -.902014, -4.47035e-8, -1, -.483551, -1.67638e-8, -.387384, -.483551, .068031, -.387384, -.579761, -2.23517e-8, -.483595, -.579761, .068031, -.483595, -.387384, -2.23517e-8, -.483551, -.387384, .068031, -.483551, -.483595, -2.6077e-8, -.579761, -.483595, .068031, -.579761, -.864, .06803, -.57976, -1, .06803, -.48359, -.864, -2.6077e-8, -.57976, -1, -2.23517e-8, -.48359, 1, -4.09782e-8, -.928006, 1, .068031, -.928006, .864001, -4.09782e-8, -.928006, .864001, .068031, -.928006, .961987, -4.47035e-8, -1, .902014, -4.47035e-8, -1, .483552, -1.67638e-8, -.387384, .483552, .068031, -.387384, .579762, -2.23517e-8, -.483595, .579762, .068031, -.483595, .387385, -2.23517e-8, -.483551, .387385, .068031, -.483551, .483596, -2.6077e-8, -.579761, .483596, .068031, -.579761, .864001, .06803, -.57976, 1, .06803, -.48359, .864001, -2.6077e-8, -.57976, 1, -2.23517e-8, -.48359, -.0680311, 1.49012e-8, .401576, -.0680311, .0680311, .401576, -.0680311, 3.35276e-8, .928009, -.0680311, .0680311, .928009, .0680311, 1.49012e-8, .401576, .0680311, .0680311, .401576, .0680311, 3.35276e-8, .928009, .0680311, .0680311, .928009, -.03, 3.72529e-8, 1, .03, 3.72529e-8, 1, -1, 3.35276e-8, .928009, -1, .0680311, .928009, -.864, 3.35276e-8, .928009, -.864, .0680311, .928009, -.961986, 3.72529e-8, 1, -.902014, 3.72529e-8, 1, -.483551, 1.49012e-8, .387387, -.483551, .068031, .387387, -.579761, 1.67638e-8, .483597, -.579761, .0680311, .483597, -.387384, 1.67638e-8, .483554, -.387384, .0680311, .483554, -.483595, 2.04891e-8, .579764, -.483595, .0680311, .579764, -.864, .06803, .579763, -1, .06803, .483593, -.864, 2.04891e-8, .579763, -1, 1.67638e-8, .483593, 1, 3.35276e-8, .928009, 1, .0680311, .928009, .864001, 3.35276e-8, .928009, .864001, .0680311, .928009, .961987, 3.72529e-8, 1, .902014, 3.72529e-8, 1, .483552, 1.49012e-8, .387387, .483552, .068031, .387387, .579762, 1.67638e-8, .483597, .579762, .0680311, .483597, .387385, 1.67638e-8, .483554, .387385, .0680311, .483554, .483596, 2.04891e-8, .579764, .483596, .0680311, .579764, .864001, .06803, .579763, 1, .06803, .483593, .864001, 2.04891e-8, .579763, 1, 1.67638e-8, .483593],
            metadata: {
                faces: 130,
                generator: "io_three",
                type: "Geometry",
                normals: 126,
                uvs: 0,
                version: 3,
                vertices: 116
            },
            normals: [0, -3.19035e-7, -1, .707107, -7.76354e-8, -.707107, 1, 0, -1.16036e-7, .707107, 0, .707107, -2.32071e-7, 0, 1, -.707107, 0, .707107, .496486, .712041, -.496486, -.707107, -7.76354e-8, -.707107, -1, 0, 1.16036e-7, 0, -1, 4.61529e-8, 2.63953e-9, -1, 4.35134e-8, -9.52069e-15, -1, 4.10248e-8, -2.48857e-9, -1, 4.35134e-8, -5.46662e-10, -1, 4.48332e-8, 5.15399e-10, -1, 4.22691e-8, 0, 1, 0, -6.70142e-8, 1, -6.70142e-8, 2.54044e-14, 1, -9.47724e-8, 2.77582e-8, 1, -6.70142e-8, 1.38791e-8, 1, -3.35071e-8, -5.74891e-9, 1, -8.08933e-8, -1.74562e-7, .712041, .702138, -.496486, .712041, -.496486, 0, .712042, -.702137, .702137, .712041, -4.57186e-8, -.496486, .712041, .496486, .496486, .712042, .496486, -.702137, .712042, 8.7281e-8, -1, 0, 0, 1, 0, 0, 0, 0, 1, 0, -1, 4.24588e-8, 0, 1, -4.24588e-8, -3.14618e-14, -1, 5.17448e-8, 4.07626e-7, .726826, -.686822, -.88421, 0, -.46709, .88421, 0, -.46709, -3.14761e-14, -1, 5.17448e-8, 4.31801e-7, .726826, -.686821, -.884298, 0, -.466922, .884298, 0, -.466923, -.707107, 0, .707107, .707107, 0, -.707107, .707107, 0, .707107, -1.10321e-11, -1, 4.84113e-8, 8.82565e-12, 1, -3.87291e-8, 0, 1, 293106e-11, -246442e-11, 1, -254189e-11, 166706e-11, 1, 228002e-11, -272245e-11, 1, -392746e-11, -329043e-11, 0, -1, 1, 0, 3.42313e-7, -1, 0, -1.34119e-7, 0, -1, 4.19122e-8, 1.27465e-13, -1, 3.8738e-8, 2.86579e-9, -1, 4.27892e-8, 4.34048e-13, -1, 3.87371e-8, 11205e-9, 0, 1, 3.14761e-14, -1, 5.17448e-8, -4.31801e-7, .726826, -.686821, .884299, 0, -.466921, -.884298, 0, -.466923, .707107, 0, .707107, -.707107, 0, -.707106, .707107, 0, -.707106, 1.10321e-11, -1, 4.84113e-8, -8.82565e-12, 1, -3.87291e-8, 0, 1, 293106e-11, 272245e-11, 1, -279992e-11, -166706e-11, 1, 228002e-11, 246443e-11, 1, -356257e-11, 329043e-11, 0, -1, -1, 0, 5.1347e-7, 1, 0, -5.36476e-7, 0, -1, 4.19122e-8, -4.34062e-13, -1, 3.87383e-8, -2.86579e-9, -1, 4.27892e-8, -1.2746e-13, -1, 3.87367e-8, -11205e-9, 0, 1, -1, 0, 0, 1, 0, 0, 0, -1, 3.53823e-8, 0, 1, -4.24588e-8, 0, -1, 5.17448e-8, 0, .726826, .686822, -.88421, 0, .46709, .88421, 0, .46709, 0, -1, 5.17448e-8, 0, .726826, .686822, -.884298, 0, .466923, .884298, 0, .466923, -.707107, 0, -.707107, .707107, 0, .707107, -.707107, 0, .707106, 6.60574e-12, -1, 2.90468e-8, -1.76153e-11, 1, -7.74581e-8, 0, 1, -301664e-11, -272245e-11, 1, 264497e-11, 162863e-11, 1, -238061e-11, -246442e-11, 1, 340762e-11, -344712e-11, 0, 1, 1, 0, -3.42313e-7, -1, 0, 1.34119e-7, 0, -1, 3.7721e-8, -4.28567e-13, -1, 3.87383e-8, 9.16422e-10, -1, 3.74405e-8, -1.3353e-13, -1, 3.87367e-8, 110631e-10, 0, -1, .884299, 0, .466922, .707107, 0, -.707107, -.707107, 0, .707106, -.707107, 0, -.707106, -6.60574e-12, -1, 2.90468e-8, 1.76153e-11, 1, -7.74581e-8, 0, 1, -301664e-11, 246441e-11, 1, 238693e-11, -162863e-11, 1, -238061e-11, 272245e-11, 1, 377251e-11, 344712e-11, 0, 1, -1, 0, -5.1347e-7, 1, 0, 5.36476e-7, 0, -1, 3.7721e-8, 1.33534e-13, -1, 3.8738e-8, -9.16421e-10, -1, 3.74405e-8, 4.28554e-13, -1, 3.87371e-8, -110631e-10, 0, -1],
            uvs: []
        },
        genetics: {
            id: "genetics",
            primaryColorFaces: [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 298, 299, 300, 301, 302, 303],
            disableImagePlane: true,
            doubleSided: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            faces: [33, 4, 0, 68, 70, 0, 0, 0, 0, 33, 4, 8, 9, 5, 1, 1, 1, 1, 33, 8, 12, 13, 9, 2, 2, 2, 2, 33, 16, 20, 21, 17, 3, 3, 3, 3, 33, 20, 24, 25, 21, 4, 4, 4, 4, 33, 24, 28, 29, 25, 5, 5, 5, 5, 33, 28, 32, 33, 29, 6, 6, 6, 6, 33, 32, 36, 37, 33, 7, 7, 7, 7, 33, 36, 40, 41, 37, 8, 8, 8, 8, 33, 40, 44, 45, 41, 9, 9, 9, 9, 33, 44, 48, 49, 45, 10, 10, 10, 10, 33, 48, 52, 53, 49, 11, 11, 11, 11, 33, 52, 56, 57, 53, 12, 12, 12, 12, 33, 56, 60, 61, 57, 13, 13, 13, 13, 33, 60, 64, 65, 61, 14, 14, 14, 14, 33, 3, 2, 6, 7, 15, 15, 15, 15, 33, 7, 6, 10, 11, 16, 16, 16, 16, 33, 11, 10, 14, 15, 17, 17, 17, 17, 33, 15, 14, 18, 19, 18, 18, 18, 18, 33, 19, 18, 22, 23, 19, 19, 19, 19, 33, 23, 22, 26, 27, 20, 20, 20, 20, 33, 27, 26, 30, 31, 21, 21, 21, 21, 33, 31, 30, 34, 35, 22, 22, 22, 22, 33, 35, 34, 38, 39, 23, 23, 23, 23, 33, 39, 38, 42, 43, 24, 24, 24, 24, 33, 43, 42, 46, 47, 25, 25, 25, 25, 33, 47, 46, 50, 51, 26, 26, 26, 26, 33, 51, 50, 54, 55, 27, 27, 27, 27, 33, 55, 54, 58, 59, 28, 28, 28, 28, 33, 59, 58, 62, 63, 29, 29, 29, 29, 33, 63, 62, 66, 67, 30, 30, 30, 30, 33, 13, 12, 16, 17, 31, 31, 31, 31, 33, 68, 70, 71, 69, 32, 32, 32, 32, 33, 0, 1, 69, 68, 33, 33, 33, 33, 33, 5, 4, 70, 71, 33, 33, 33, 33, 33, 1, 5, 71, 69, 34, 34, 34, 34, 33, 73, 75, 74, 72, 35, 35, 35, 35, 33, 75, 79, 78, 74, 36, 36, 36, 36, 33, 79, 77, 76, 78, 37, 37, 37, 37, 33, 77, 73, 72, 76, 38, 38, 38, 38, 33, 72, 74, 78, 76, 39, 39, 39, 39, 33, 77, 79, 75, 73, 40, 40, 40, 40, 33, 81, 83, 82, 80, 35, 35, 35, 35, 33, 83, 87, 86, 82, 41, 41, 41, 41, 33, 87, 85, 84, 86, 42, 42, 42, 42, 33, 85, 81, 80, 84, 43, 43, 43, 43, 33, 80, 82, 86, 84, 44, 44, 44, 44, 33, 85, 87, 83, 81, 45, 45, 45, 45, 33, 89, 91, 90, 88, 35, 35, 35, 35, 33, 91, 95, 94, 90, 46, 46, 46, 46, 33, 95, 93, 92, 94, 37, 37, 37, 37, 33, 93, 89, 88, 92, 47, 47, 47, 47, 33, 88, 90, 94, 92, 48, 48, 48, 48, 33, 93, 95, 91, 89, 49, 49, 49, 49, 33, 97, 99, 98, 96, 35, 35, 35, 35, 33, 99, 103, 102, 98, 50, 50, 50, 50, 33, 103, 101, 100, 102, 37, 37, 37, 37, 33, 101, 97, 96, 100, 51, 51, 51, 51, 33, 96, 98, 102, 100, 52, 52, 52, 52, 33, 101, 103, 99, 97, 53, 53, 53, 53, 33, 105, 107, 106, 104, 54, 54, 54, 54, 33, 107, 111, 110, 106, 55, 55, 55, 55, 33, 111, 109, 108, 110, 56, 56, 56, 56, 33, 109, 105, 104, 108, 57, 57, 57, 57, 33, 104, 106, 110, 108, 58, 58, 58, 58, 33, 109, 111, 107, 105, 59, 59, 59, 59, 33, 113, 115, 114, 112, 60, 60, 60, 60, 33, 115, 119, 118, 114, 61, 61, 61, 61, 33, 119, 117, 116, 118, 62, 62, 62, 62, 33, 117, 113, 112, 116, 63, 63, 63, 63, 33, 112, 114, 118, 116, 64, 64, 64, 64, 33, 117, 119, 115, 113, 65, 65, 65, 65, 33, 121, 123, 122, 120, 66, 66, 66, 66, 33, 123, 127, 126, 122, 67, 67, 67, 67, 33, 127, 125, 124, 126, 68, 68, 68, 68, 33, 125, 121, 120, 124, 69, 69, 69, 69, 33, 120, 122, 126, 124, 70, 70, 70, 70, 33, 125, 127, 123, 121, 71, 71, 71, 71, 33, 129, 131, 130, 128, 72, 72, 72, 72, 33, 131, 135, 134, 130, 73, 73, 73, 73, 33, 135, 133, 132, 134, 56, 56, 56, 56, 33, 133, 129, 128, 132, 74, 74, 74, 74, 33, 128, 130, 134, 132, 75, 75, 75, 75, 33, 133, 135, 131, 129, 76, 76, 76, 76, 33, 137, 139, 138, 136, 77, 77, 77, 77, 33, 139, 143, 142, 138, 78, 78, 78, 78, 33, 143, 141, 140, 142, 79, 79, 79, 79, 33, 141, 137, 136, 140, 80, 80, 80, 80, 33, 136, 138, 142, 140, 39, 39, 39, 39, 33, 141, 143, 139, 137, 81, 81, 81, 81, 33, 145, 147, 146, 144, 82, 82, 82, 82, 33, 147, 151, 150, 146, 83, 83, 83, 83, 33, 151, 149, 148, 150, 84, 84, 84, 84, 33, 149, 145, 144, 148, 85, 85, 85, 85, 33, 144, 146, 150, 148, 86, 86, 86, 86, 33, 149, 151, 147, 145, 87, 87, 87, 87, 33, 153, 155, 154, 152, 88, 88, 88, 88, 33, 155, 159, 158, 154, 89, 89, 89, 89, 33, 159, 157, 156, 158, 90, 90, 90, 90, 33, 157, 153, 152, 156, 91, 91, 91, 91, 33, 152, 154, 158, 156, 48, 48, 48, 48, 33, 157, 159, 155, 153, 49, 49, 49, 49, 33, 161, 163, 162, 160, 35, 35, 35, 35, 33, 163, 167, 166, 162, 50, 50, 50, 50, 33, 167, 165, 164, 166, 37, 37, 37, 37, 33, 165, 161, 160, 164, 92, 92, 92, 92, 33, 160, 162, 166, 164, 93, 93, 93, 93, 33, 165, 167, 163, 161, 94, 94, 94, 94, 33, 169, 171, 170, 168, 54, 54, 54, 54, 33, 171, 175, 174, 170, 95, 95, 95, 95, 33, 175, 173, 172, 174, 56, 56, 56, 56, 33, 173, 169, 168, 172, 96, 96, 96, 96, 33, 168, 170, 174, 172, 97, 97, 97, 97, 33, 173, 175, 171, 169, 98, 98, 98, 98, 33, 177, 179, 178, 176, 54, 54, 54, 54, 33, 179, 183, 182, 178, 99, 99, 99, 99, 33, 183, 181, 180, 182, 56, 56, 56, 56, 33, 181, 177, 176, 180, 100, 100, 100, 100, 33, 176, 178, 182, 180, 101, 101, 101, 101, 33, 181, 183, 179, 177, 102, 102, 102, 102, 33, 185, 187, 186, 184, 54, 54, 54, 54, 33, 187, 191, 190, 186, 103, 103, 103, 103, 33, 191, 189, 188, 190, 56, 56, 56, 56, 33, 189, 185, 184, 188, 104, 104, 104, 104, 33, 184, 186, 190, 188, 105, 105, 105, 105, 33, 189, 191, 187, 185, 106, 106, 106, 106, 33, 193, 195, 194, 192, 54, 54, 54, 54, 33, 195, 199, 198, 194, 107, 107, 107, 107, 33, 199, 197, 196, 198, 56, 56, 56, 56, 33, 197, 193, 192, 196, 108, 108, 108, 108, 33, 192, 194, 198, 196, 109, 109, 109, 109, 33, 197, 199, 195, 193, 110, 110, 110, 110, 33, 202, 203, 205, 204, 111, 111, 111, 111, 33, 206, 207, 201, 200, 112, 112, 112, 112, 33, 204, 205, 207, 206, 113, 113, 113, 113, 33, 208, 210, 211, 209, 114, 114, 114, 114, 33, 210, 212, 213, 211, 115, 115, 115, 115, 33, 212, 214, 215, 213, 116, 116, 116, 116, 32, 223, 209, 211, 117, 117, 117, 32, 213, 215, 221, 118, 118, 118, 32, 222, 223, 211, 119, 119, 119, 32, 213, 221, 220, 120, 120, 120, 32, 222, 211, 213, 121, 121, 121, 32, 213, 220, 222, 122, 122, 122, 32, 210, 208, 219, 123, 123, 123, 32, 217, 214, 212, 124, 124, 124, 32, 210, 219, 218, 125, 125, 125, 32, 216, 217, 212, 126, 126, 126, 32, 212, 210, 218, 127, 127, 127, 32, 218, 216, 212, 128, 128, 128, 33, 219, 223, 222, 218, 129, 129, 129, 129, 33, 221, 217, 216, 220, 130, 130, 130, 130, 33, 216, 218, 222, 220, 131, 131, 131, 131, 33, 223, 219, 208, 209, 132, 132, 132, 132, 33, 217, 221, 215, 214, 133, 133, 133, 133, 33, 226, 227, 229, 228, 134, 134, 134, 134, 33, 230, 231, 225, 224, 135, 135, 135, 135, 33, 228, 229, 231, 230, 113, 113, 113, 113],
            vertices: [-2.93961, 1.59476, .980574, -2.6927, 1.59476, .980574, -2.93961, 1.59476, -1.01943, -2.6927, 1.59476, -1.01943, -2.58004, 1.21208, .904454, -2.33313, 1.21208, .904454, -2.58004, 1.97745, -.943305, -2.33313, 1.97745, -.943305, -2.22047, .887656, .687681, -1.97356, .887656, .687681, -2.22047, 2.30187, -.726532, -1.97356, 2.30187, -.726532, -1.86091, .670883, .363258, -1.61399, .670883, .363258, -1.86091, 2.51864, -.402109, -1.61399, 2.51864, -.402109, -1.50134, .594763, -.0194257, -1.25443, .594763, -.0194257, -1.50134, 2.59476, -.0194257, -1.25443, 2.59476, -.0194257, -1.14177, .670883, -.402109, -.894857, .670883, -.402109, -1.14177, 2.51864, .363258, -.894857, 2.51864, .363258, -.782203, .887656, -.726532, -.535289, .887656, -.726532, -.782203, 2.30187, .687681, -.535289, 2.30187, .687681, -.422635, 1.21208, -.943305, -.175721, 1.21208, -.943305, -.422635, 1.97745, .904454, -.175721, 1.97745, .904454, -.063067, 1.59476, -1.01943, .183847, 1.59476, -1.01943, -.063067, 1.59476, .980574, .183847, 1.59476, .980574, .296501, 1.97745, -.943305, .543415, 1.97745, -.943305, .296501, 1.21208, .904454, .543415, 1.21208, .904454, .656069, 2.30187, -.726532, .902983, 2.30187, -.726532, .656069, .887656, .687681, .902982, .887656, .687681, 1.01564, 2.51864, -.402109, 1.26255, 2.51864, -.402109, 1.01564, .670883, .363257, 1.26255, .670883, .363257, 1.3752, 2.59476, -.0194257, 1.62212, 2.59476, -.0194257, 1.3752, .594763, -.0194257, 1.62212, .594763, -.0194257, 1.73477, 2.51864, .363258, 1.98169, 2.51864, .363258, 1.73477, .670884, -.402109, 1.98169, .670884, -.402109, 2.09434, 2.30187, .687681, 2.34125, 2.30187, .687681, 2.09434, .887656, -.726533, 2.34125, .887656, -.726533, 2.45391, 1.97745, .904454, 2.70082, 1.97745, .904454, 2.45391, 1.21208, -.943305, 2.70082, 1.21208, -.943305, 2.81348, 1.59476, .980574, 3.06039, 1.59476, .980574, 2.81348, 1.59476, -1.01943, 3.06039, 1.59476, -1.01943, -2.9396, 1.59476, .980574, -2.69269, 1.59476, .980574, -2.58004, 1.21208, .904454, -2.33312, 1.21208, .904454, -1.97722, .758108, .491504, -1.97722, .802554, .558021, -1.97722, 2.38622, -.596366, -1.97722, 2.43066, -.529848, -1.87845, .758108, .491504, -1.87845, .802554, .558021, -1.87845, 2.38622, -.596366, -1.87845, 2.43066, -.529848, -2.68575, 1.36444, .93346, -2.68575, 1.4429, .949068, -2.68575, 1.74645, -.987027, -2.68575, 1.82491, -.971419, -2.58698, 1.36444, .93346, -2.58698, 1.4429, .949068, -2.58698, 1.74645, -.987027, -2.58698, 1.82491, -.971419, -2.30304, 1.01732, .772785, -2.30304, 1.08384, .817231, -2.30304, 2.10519, -.855325, -2.30304, 2.1717, -.81088, -2.20427, 1.01732, .772785, -2.20427, 1.08384, .817231, -2.20427, 2.10519, -.855325, -2.20427, 2.1717, -.81088, -1.61277, .62627, .132438, -1.61277, .641878, .210901, -1.61277, 2.54676, -.249573, -1.61277, 2.56236, -.17111, -1.514, .62627, .132438, -1.514, .641878, .210901, -1.514, 2.54676, -.249573, -1.514, 2.56236, -.17111, -1.23913, .641878, -.249166, -1.23913, .626271, -.170703, -1.23913, 2.56237, .132841, -1.23913, 2.54676, .211304, -1.14037, .641878, -.249166, -1.14037, .626271, -.170703, -1.14037, 2.56237, .132841, -1.14037, 2.54676, .211304, -.53061, 1.08383, -.855498, -.53061, 1.01732, -.811052, -.53061, 2.1717, .772611, -.53061, 2.10519, .817057, -.431845, 1.08383, -.855498, -.431845, 1.01732, -.811052, -.431845, 2.1717, .772611, -.431845, 2.10519, .817057, -.856427, .802553, -.596287, -.856427, .758107, -.52977, -.856427, 2.43066, .49158, -.856427, 2.38622, .558097, -.757662, .802553, -.596287, -.757662, .758107, -.52977, -.757662, 2.43066, .49158, -.757662, 2.38622, .558097, -.166159, 1.4429, -.987336, -.166159, 1.36444, -.971728, -.166159, 1.82491, .933151, -.166159, 1.74645, .948758, -.0673934, 1.4429, -.987336, -.0673934, 1.36444, -.971728, -.0673934, 1.82491, .933151, -.0673934, 1.74645, .948758, .8674, .758108, .491504, .8674, .802554, .558021, .8674, 2.38622, -.596366, .8674, 2.43066, -.529848, .966165, .758108, .491504, .966165, .802554, .558021, .966165, 2.38622, -.596366, .966165, 2.43066, -.529848, .158873, 1.36444, .93346, .158873, 1.4429, .949068, .158873, 1.74645, -.987027, .158873, 1.82491, -.971419, .257638, 1.36444, .93346, .257638, 1.4429, .949068, .257638, 1.74645, -.987027, .257638, 1.82491, -.971419, .541583, 1.01732, .772785, .541583, 1.08384, .817231, .541583, 2.10519, -.855325, .541583, 2.1717, -.81088, .640348, 1.01732, .772785, .640348, 1.08384, .817231, .640348, 2.10519, -.855325, .640348, 2.1717, -.81088, 1.23185, .62627, .132438, 1.23185, .641878, .210901, 1.23185, 2.54676, -.249573, 1.23185, 2.56236, -.17111, 1.33062, .62627, .132438, 1.33062, .641878, .210901, 1.33062, 2.54676, -.249573, 1.33062, 2.56236, -.17111, 1.60549, .641878, -.249166, 1.60549, .626271, -.170703, 1.60549, 2.56237, .132841, 1.60549, 2.54676, .211304, 1.70425, .641878, -.249166, 1.70425, .626271, -.170703, 1.70425, 2.56237, .132841, 1.70425, 2.54676, .211304, 2.31401, 1.08383, -.855498, 2.31401, 1.01732, -.811052, 2.31401, 2.1717, .772611, 2.31401, 2.10519, .817057, 2.41277, 1.08383, -.855498, 2.41277, 1.01732, -.811052, 2.41277, 2.1717, .772611, 2.41277, 2.10519, .817057, 1.98819, .802553, -.596287, 1.98819, .758107, -.52977, 1.98819, 2.43066, .49158, 1.98819, 2.38622, .558097, 2.08696, .802553, -.596287, 2.08696, .758107, -.52977, 2.08696, 2.43066, .49158, 2.08696, 2.38622, .558097, 2.67846, 1.4429, -.987336, 2.67846, 1.36444, -.971728, 2.67846, 1.82491, .933151, 2.67846, 1.74645, .948758, 2.77723, 1.4429, -.987336, 2.77723, 1.36444, -.971728, 2.77723, 1.82491, .933151, 2.77723, 1.74645, .948758, -3, 1.59075, -1.5, -2.5, 1.59075, -1.5, -3, 1.59075, 1.5, -2.5, 1.59075, 1.5, -3, 2.88975, .75, -2.5, 2.88975, .75, -3, 2.88975, -.75, -2.5, 2.88975, -.75, -3, 1.59075, -1.5, 3, 1.59075, -1.5, -3, .291753, -.75, 3, .291753, -.75, -3, .291753, .75, 3, .291753, .75, -3, 1.59075, 1.5, 3, 1.59075, 1.5, -3, 2.38419e-7, 3, -3, .496501, 3, -3, 0, -3, -3, .4965, -3, 3, -3.57628e-7, 3, 3, .4965, 3, 3, -5.96046e-7, -3, 3, .4965, -3, 2.5, 1.59075, -1.5, 3, 1.59075, -1.5, 2.5, 1.59075, 1.5, 3, 1.59075, 1.5, 2.5, 2.88975, .75, 3, 2.88975, .75, 2.5, 2.88975, -.75, 3, 2.88975, -.75],
            metadata: {
                faces: 158,
                generator: "io_three",
                type: "Geometry",
                normals: 136,
                uvs: 0,
                version: 3,
                vertices: 232
            },
            normals: [0, .1955, -.980704, 0, -.55557, .83147, 0, -.83147, .55557, 0, -.980785, -.19509, -1.16003e-7, -.83147, -.55557, -7.73355e-8, -.55557, -.83147, 0, -.19509, -.980785, 0, .195091, -.980785, 0, .55557, -.83147, 0, .831469, -.55557, 0, .980785, -.19509, 0, .980785, .195091, 0, .83147, .55557, 0, .55557, .83147, 0, .19509, .980785, 0, .19509, -.980785, 2.70674e-7, .55557, -.83147, 4.25346e-7, .83147, -.55557, 4.7368e-7, .980785, -.195091, 4.73681e-7, .980785, .195091, 0, .83147, .55557, 0, .55557, .83147, 0, .19509, .980785, 0, -.19509, .980785, -3.86678e-8, -.55557, .83147, -7.73355e-8, -.83147, .55557, 0, -.980785, .19509, 0, -.980785, -.19509, 0, -.83147, -.55557, 0, -.55557, -.83147, 0, -.19509, -.980785, 0, -.980785, .19509, 0, -.19509, .980785, 0, 0, 0, 0, -.1955, .980704, -1, 0, 0, 0, .831469, -.555572, 1, 0, 0, 2.50475e-7, -.831469, .555572, 0, -.555571, -.831469, -3.08204e-7, .555571, .831469, 0, .19509, -.980785, 1, 0, 0, -1.17871e-7, -.195091, .980785, -6.16408e-7, -.980785, -.195089, 0, .980785, .195089, 0, .55557, -.83147, 0, -.55557, .83147, 0, -.83147, -.555569, 0, .83147, .555569, 0, .980785, -.195092, 0, -.980785, .195092, 0, -.195091, -.980785, 0, .195091, .980785, -1, 0, 0, 0, .980785, .195092, 1, 0, 0, 0, -.980785, -.19509, 0, .195089, -.980785, 0, -.195089, .980785, -1, -6.19492e-7, 4.13932e-7, 0, .555571, .831469, 1, -1.50645e-7, 1.0981e-7, 0, -.555571, -.831469, 0, .831469, -.555571, 0, -.831469, .555571, -1, -2.53098e-8, -1.69115e-8, 0, .83147, .555569, 1, 2.53098e-8, 1.69115e-8, 0, -.831469, -.555571, 0, .55557, -.83147, 0, -.555569, .83147, -1, -9.06004e-8, 2.19012e-8, 0, .19509, .980785, 0, -.195092, -.980785, 0, .980785, -.195091, 0, -.980785, .195091, -1, -4.13932e-7, -6.19493e-7, 0, .831468, -.555572, 1, 4.13932e-7, 6.19493e-7, 0, -.831469, .555571, 0, .555571, .831469, -1, -1.48463e-9, 7.46375e-9, 0, .19509, -.980785, 1, -1.8417e-7, -2.88745e-8, 0, -.195091, .980785, 0, -.980785, -.195089, 0, .980785, .195089, -1, 1.69115e-8, -2.53098e-8, 0, .55557, -.83147, 1, -1.69115e-8, 2.53098e-8, 0, -.55557, .83147, 0, -.980785, .19509, 0, -.195091, -.980785, 0, .195091, .980785, 0, .980785, .195092, 0, -.980785, -.195091, 0, .195089, -.980785, 0, -.195089, .980785, 0, .555571, .831469, 0, -.555571, -.831469, 0, .831469, -.555571, 0, -.831469, .555571, 10019e-10, .83147, .55557, -5.0095e-7, -.83147, -.55557, 3.08203e-7, .55557, -.83147, -9.2461e-7, -.55557, .83147, 0, .19509, .980785, 0, -.195092, -.980785, 0, .980785, -.195091, 0, -.980785, .195091, 0, .50001, .866019, 0, .500011, -.866019, 0, 1, 0, -9.93433e-8, .500012, .866019, 6.95388e-8, 1, -1.19209e-7, 3.64259e-8, .500012, -.866019, 1, 1.29145e-7, 2.2368e-7, 1, 1.29146e-7, -2.2368e-7, 1, 0, 2.11928e-7, 1, 0, -2.11928e-7, 1, 163439e-11, -1.29889e-13, 1, 163438e-11, -6.49446e-14, -1, -2.58291e-7, 1.88423e-7, -1, 1.29146e-7, -2.2368e-7, -1, 0, 2.11928e-7, -1, 0, -2.11928e-7, -1, 163439e-11, -2.59779e-13, -1, 163439e-11, -6.49447e-14, 0, 0, -1, 0, 0, 1, -9.93411e-8, -1, 3.97364e-8, -1.4981e-7, .807879, -.589348, 5.35037e-8, .807879, .589348, 3.97372e-8, .50001, .866019, 0, .500011, -.866019],
            uvs: []
        },
        keyvalue: {
            id: "keyvalue",
            primaryColorFaces: [19, 20, 21, 22, 23, 24, 25, 26, 41, 42, 43, 44, 77, 78, 79, 80, 81, 82, 83, 84, 99, 100, 101, 102, 135, 136, 137, 138, 139, 140, 141, 142, 157, 158, 159, 160],
            imagePlanePosition: {
                y: 8.1
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .8,
            faces: [32, 4, 0, 1, 0, 0, 0, 32, 1, 2, 3, 1, 1, 1, 32, 1, 3, 4, 2, 2, 2, 33, 1, 0, 5, 6, 3, 3, 3, 3, 33, 7, 2, 1, 6, 4, 4, 4, 4, 33, 8, 3, 2, 7, 5, 5, 5, 5, 33, 4, 3, 8, 9, 6, 6, 6, 6, 33, 10, 11, 6, 5, 7, 7, 7, 7, 33, 6, 11, 12, 7, 8, 8, 8, 8, 33, 13, 8, 7, 12, 9, 9, 9, 9, 33, 9, 8, 13, 14, 10, 10, 10, 10, 33, 15, 16, 11, 10, 11, 11, 11, 11, 33, 11, 16, 17, 12, 12, 12, 12, 12, 33, 12, 17, 18, 13, 13, 13, 13, 13, 33, 14, 13, 18, 19, 14, 14, 14, 14, 32, 15, 19, 18, 15, 15, 15, 32, 18, 17, 16, 16, 16, 16, 32, 18, 16, 15, 17, 17, 17, 33, 51, 47, 106, 104, 18, 18, 18, 18, 32, 20, 21, 22, 0, 0, 0, 33, 23, 21, 20, 24, 19, 19, 19, 19, 33, 22, 21, 23, 25, 20, 20, 20, 20, 33, 26, 27, 23, 24, 21, 21, 21, 21, 33, 23, 27, 28, 25, 22, 22, 22, 22, 33, 29, 30, 27, 26, 23, 23, 23, 23, 33, 27, 30, 31, 28, 24, 24, 24, 24, 32, 31, 30, 29, 25, 25, 25, 33, 9, 14, 100, 99, 26, 26, 26, 26, 33, 41, 46, 105, 110, 27, 27, 27, 27, 33, 83, 79, 118, 119, 28, 28, 28, 28, 33, 4, 9, 99, 98, 29, 29, 29, 29, 33, 79, 74, 116, 118, 30, 30, 30, 30, 33, 36, 41, 110, 109, 31, 31, 31, 31, 32, 36, 32, 33, 0, 0, 0, 32, 33, 34, 35, 1, 1, 1, 32, 33, 35, 36, 2, 2, 2, 33, 37, 38, 33, 32, 3, 3, 3, 3, 33, 39, 34, 33, 38, 4, 4, 4, 4, 33, 40, 35, 34, 39, 5, 5, 5, 5, 33, 36, 35, 40, 41, 6, 6, 6, 6, 33, 42, 43, 38, 37, 32, 32, 32, 32, 33, 38, 43, 44, 39, 33, 33, 33, 33, 33, 45, 40, 39, 44, 34, 34, 34, 34, 33, 41, 40, 45, 46, 35, 35, 35, 35, 33, 47, 48, 43, 42, 11, 11, 11, 11, 33, 43, 48, 49, 44, 36, 36, 36, 36, 33, 44, 49, 50, 45, 13, 13, 13, 13, 33, 46, 45, 50, 51, 37, 37, 37, 37, 32, 47, 51, 50, 38, 38, 38, 32, 50, 49, 48, 39, 39, 39, 32, 50, 48, 47, 38, 38, 38, 33, 69, 64, 113, 114, 40, 40, 40, 40, 32, 52, 53, 54, 0, 0, 0, 33, 55, 53, 52, 56, 19, 19, 19, 19, 33, 54, 53, 55, 57, 20, 20, 20, 20, 33, 58, 59, 55, 56, 21, 21, 21, 21, 33, 55, 59, 60, 57, 41, 41, 41, 41, 33, 61, 62, 59, 58, 42, 42, 42, 42, 33, 59, 62, 63, 60, 43, 43, 43, 43, 32, 63, 62, 61, 38, 38, 38, 33, 46, 51, 104, 105, 44, 44, 44, 44, 33, 0, 4, 98, 97, 45, 45, 45, 45, 33, 32, 36, 109, 108, 45, 45, 45, 45, 33, 78, 83, 119, 117, 46, 46, 46, 46, 33, 5, 0, 97, 96, 47, 47, 47, 47, 33, 73, 78, 117, 115, 48, 48, 48, 48, 32, 68, 64, 65, 49, 49, 49, 32, 65, 66, 67, 50, 50, 50, 32, 65, 67, 68, 51, 51, 51, 33, 69, 70, 65, 64, 52, 52, 52, 52, 33, 71, 66, 65, 70, 53, 53, 53, 53, 33, 72, 67, 66, 71, 54, 54, 54, 54, 33, 68, 67, 72, 73, 55, 55, 55, 55, 33, 74, 75, 70, 69, 56, 56, 56, 56, 33, 70, 75, 76, 71, 57, 57, 57, 57, 33, 77, 72, 71, 76, 58, 58, 58, 58, 33, 73, 72, 77, 78, 59, 59, 59, 59, 33, 79, 80, 75, 74, 60, 60, 60, 60, 33, 75, 80, 81, 76, 61, 61, 61, 61, 33, 76, 81, 82, 77, 62, 62, 62, 62, 33, 78, 77, 82, 83, 63, 63, 63, 63, 32, 79, 83, 82, 38, 38, 38, 32, 82, 81, 80, 39, 39, 39, 32, 82, 80, 79, 38, 38, 38, 33, 15, 10, 103, 102, 64, 64, 64, 64, 32, 84, 85, 86, 65, 65, 65, 33, 87, 85, 84, 88, 66, 66, 66, 66, 33, 86, 85, 87, 89, 67, 67, 67, 67, 33, 90, 91, 87, 88, 68, 68, 68, 68, 33, 87, 91, 92, 89, 69, 69, 69, 69, 33, 93, 94, 91, 90, 70, 70, 70, 70, 33, 91, 94, 95, 92, 71, 71, 71, 71, 32, 95, 94, 93, 38, 38, 38, 33, 37, 32, 108, 107, 47, 47, 47, 47, 33, 10, 5, 96, 103, 72, 72, 72, 72, 33, 74, 69, 114, 116, 73, 73, 73, 73, 33, 108, 54, 57, 107, 74, 74, 74, 74, 33, 57, 60, 111, 107, 75, 75, 75, 75, 33, 111, 60, 63, 106, 76, 76, 76, 76, 33, 68, 73, 115, 112, 31, 31, 31, 31, 33, 47, 42, 111, 106, 77, 77, 77, 77, 33, 14, 19, 101, 100, 78, 78, 78, 78, 33, 64, 68, 112, 113, 79, 79, 79, 79, 33, 42, 37, 107, 111, 80, 80, 80, 80, 33, 19, 15, 102, 101, 18, 18, 18, 18, 33, 109, 52, 54, 108, 81, 81, 81, 81, 33, 109, 110, 56, 52, 82, 82, 82, 82, 33, 110, 105, 58, 56, 83, 83, 83, 83, 33, 58, 105, 104, 61, 84, 84, 84, 84, 33, 104, 106, 63, 61, 85, 85, 85, 85, 33, 95, 118, 116, 92, 86, 86, 86, 86, 33, 92, 116, 114, 89, 87, 87, 87, 87, 33, 89, 114, 113, 86, 88, 88, 88, 88, 33, 86, 113, 112, 84, 89, 89, 89, 89, 33, 84, 112, 115, 88, 90, 90, 90, 90, 33, 88, 115, 117, 90, 91, 91, 91, 91, 33, 93, 119, 118, 95, 92, 92, 92, 92, 33, 90, 117, 119, 93, 93, 93, 93, 93, 33, 29, 26, 100, 101, 94, 94, 94, 94, 33, 26, 24, 99, 100, 95, 95, 95, 95, 33, 24, 20, 98, 99, 96, 96, 96, 96, 33, 20, 22, 97, 98, 81, 81, 81, 81, 33, 22, 25, 96, 97, 74, 74, 74, 74, 33, 25, 28, 103, 96, 97, 97, 97, 97, 33, 28, 31, 102, 103, 98, 98, 98, 98, 33, 31, 29, 101, 102, 99, 99, 99, 99],
            vertices: [-.0541261, 0, .899999, -.9, 0, .899999, -.9, 0, -.9, .9, 0, -.899999, .9, 0, -.0541266, -.154126, .1, .999999, -1, .1, .999999, -1, .1, -1, 1, .1, -.999999, 1, .1, -.154127, -.154126, .4, 1, -1, .4, .999999, -1, .4, -.999999, 1, .4, -.999999, 1, .4, -.154127, -.0541263, .5, .9, -.9, .5, .899999, -.9, .5, -.9, .9, .5, -.899999, .9, .5, -.0541266, .9, 0, .259391, .9, 0, .9, .259392, 0, .899999, 1, .1, 1, 1, .1, .159391, .159392, .1, .999999, 1, .4, .159391, .999999, .4, 1, .159391, .4, 1, .9, .5, .259391, .899999, .5, .9, .259391, .5, .9, -.0541261, 1.1, .899999, -.9, 1.1, .899999, -.9, 1.1, -.9, .9, 1.1, -.9, .9, 1.1, -.0541267, -.154126, 1.2, .999999, -1, 1.2, .999999, -1, 1.2, -1, 1, 1.2, -1, 1, 1.2, -.154127, -.154126, 1.5, .999999, -1, 1.5, .999999, -1, 1.5, -1, 1, 1.5, -.999999, 1, 1.5, -.154127, -.0541263, 1.6, .9, -.9, 1.6, .899999, -.9, 1.6, -.9, .9, 1.6, -.899999, .9, 1.6, -.0541266, .9, 1.1, .259391, .9, 1.1, .899999, .259392, 1.1, .899999, 1, 1.2, .999999, 1, 1.2, .159391, .159392, 1.2, .999999, 1, 1.5, .159391, .999999, 1.5, 1, .159391, 1.5, 1, .9, 1.6, .259391, .899999, 1.6, .9, .259391, 1.6, .9, -.0541261, .55, .899999, -.9, .55, .899999, -.9, .55, -.9, .9, .55, -.899999, .9, .55, -.0541266, -.154126, .65, .999999, -1, .65, .999999, -1, .65, -1, 1, .65, -.999999, 1, .65, -.154127, -.154126, .95, .999999, -1, .95, .999999, -1, .95, -1, 1, .95, -.999999, 1, .95, -.154127, -.0541263, 1.05, .9, -.9, 1.05, .899999, -.9, 1.05, -.9, .9, 1.05, -.899999, .9, 1.05, -.0541266, .9, .55, .259391, .9, .55, .9, .259392, .55, .899999, 1, .65, 1, 1, .65, .159391, .159392, .65, .999999, 1, .95, .159391, .999999, .95, 1, .159391, .95, 1, .9, 1.05, .259391, .899999, 1.05, .9, .259391, 1.05, .9, .095096, .145, .902984, .165096, .075, .832984, .832984, .075, .165095, .902984, .145, .0950954, .902984, .355, .0950954, .832984, .425, .165095, .165096, .425, .832984, .0950959, .355, .902984, .832984, 1.525, .165095, .902984, 1.455, .0950953, .165096, 1.525, .832984, .095096, 1.245, .902984, .165096, 1.175, .832984, .832984, 1.175, .165095, .902984, 1.245, .0950954, .0950959, 1.455, .902984, .832984, .625, .165095, .165096, .625, .832984, .095096, .695, .902984, .902984, .695, .0950954, .0950959, .905, .902984, .902984, .905, .0950953, .165096, .975, .832984, .832984, .975, .165095],
            metadata: {
                faces: 126,
                version: 3,
                normals: 100,
                uvs: 0,
                generator: "io_three",
                type: "Geometry",
                vertices: 120
            },
            normals: [0, -1, 0, 0, -1, 0, 0, -1, 0, -1.0121e-7, -.707107, .707107, -.707107, -.707107, -1.76767e-7, 1.00515e-7, -.707106, -.707108, .707107, -.707107, 0, -2.81861e-7, 1.98682e-7, 1, -1, -8.9407e-7, -2.23518e-7, 1.49012e-7, 9.93411e-7, -1, 1, -8.9407e-7, 3.17094e-7, -3.23093e-7, .707106, .707107, -.707107, .707107, -1.99296e-7, 1.88898e-7, .707106, -.707107, .707107, .707107, 3.73699e-7, -7.99489e-9, 1, -7.04653e-8, 1.97373e-14, 1, -6.62274e-8, 3.26671e-14, 1, -6.62274e-8, .404274, .820442, .404274, .707107, -.707107, 0, -5.33516e-8, -.707107, .707107, 1, 119209e-11, 2.83626e-7, -2.83626e-7, -139078e-11, 1, .707107, .707107, 3.42339e-7, -3.4234e-7, .707106, .707107, 4.32857e-14, 1, -9.30438e-8, .931883, 1.09251e-7, .362758, .931883, 1.09251e-7, .362758, .404274, .820442, .404274, .816333, -.422303, .39403, .39403, .422304, .816333, .816333, -.422304, .39403, -2.81861e-7, 1.98682e-7, 1, -1, -8.9407e-7, -2.23518e-7, 1.49012e-7, 9.93411e-7, -1, 1, -8.9407e-7, 3.17094e-7, -.707107, .707107, -1.54238e-7, .707107, .707107, 4.24304e-7, 0, 1, 0, 0, 1, 0, .39403, -.422304, .816333, -3.1908e-7, -149012e-11, 1, .707107, .707107, 3.95691e-7, -3.69016e-7, .707106, .707107, .816333, .422304, .39403, .404275, -.820441, .404275, .816333, .422304, .39403, .39403, -.422304, .816333, .931883, 1.09251e-7, .362758, -8.80397e-15, -1, 6.24704e-8, -1.53512e-14, -1, 6.62274e-8, 4.23782e-9, -1, 7.04653e-8, -9.73172e-8, -.707107, .707107, -.707107, -.707107, -1.33442e-7, 9.87818e-8, -.707106, -.707107, .707107, -.707107, 5.0605e-8, -2.81861e-7, 3.97364e-7, 1, -1, -8.94069e-7, -2.23518e-7, 1.49012e-7, 7.94728e-7, -1, 1, -8.9407e-7, 3.17094e-7, -3.23093e-7, .707107, .707107, -.707106, .707107, -1.54238e-7, 1.88898e-7, .707107, -.707107, .707106, .707107, 4.24304e-7, .39403, .422303, .816334, -8.65715e-15, -1, 9.30438e-8, .707107, -.707107, 5.77976e-8, -5.77976e-8, -.707107, .707107, 1, 119209e-11, 2.83626e-7, -3.1908e-7, -129143e-11, 1, .707106, .707107, 3.95691e-7, -3.73462e-7, .707107, .707107, .362758, 8.19382e-8, .931883, .362758, 1.91189e-7, .931883, -.658143, -.747564, .089422, -.83356, -8.94333e-7, .552428, -.658143, .747564, .089422, .39403, .422303, .816334, .816333, .422304, .39403, .404274, -.820441, .404275, .362758, 8.19382e-8, .931883, -.388484, -.83556, -.388484, .0894221, -.747564, -.658142, .55243, 2.03971e-7, -.833559, .0894227, .747565, -.658141, -.388484, .83556, -.388484, -.658143, .747564, .0894215, -.83356, -8.23727e-7, .552428, -.658142, -.747564, .0894221, -.388484, -.83556, -.388484, .0894221, -.747564, -.658142, .55243, 1.96126e-7, -.833559, -.388484, .83556, -.388484, .0894224, .747565, -.658141, .0894229, .747565, -.658141, .55243, 1.88281e-7, -.833559, .0894221, -.747564, -.658142, -.83356, -8.94333e-7, .552429, -.658143, .747564, .0894217, -.388484, .83556, -.388484],
            uvs: []
        },
        mapreduce: {
            id: "mapreduce",
            primaryColorFaces: [82, 83, 63, 62, 227, 226, 206, 207, 130, 131, 110, 111, 129, 128, 225, 224, 81, 80],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            vertices: [1, .866, 2.49544, 1, .866, 3.49544, .5, 2.38419e-7, 3.49544, .5, 1.78814e-7, 2.49544, -.5, 2.38419e-7, 2.49544, -1, .866, 2.49544, -.8, .866, 2.49544, -.4, .1732, 2.49544, .4, .1732, 2.49544, .8, .866, 2.49544, .4, 1.5588, 2.49544, -.4, 1.5588, 2.49544, -.5, 1.732, 2.49544, .5, 1.732, 2.49544, .5, 1.732, 3.49544, -.5, 1.732, 3.49544, -1, .866, 3.49544, -.8, .866, 3.49544, -.4, 1.5588, 3.49544, .4, 1.5588, 3.49544, .8, .866, 3.49544, .4, .1732, 3.49544, -.4, .1732, 3.49544, -.5, 2.98023e-7, 3.49544, -2, .866, -.504564, -2, .866, .495436, -2.5, 5.96046e-8, .495436, -2.5, 5.96046e-8, -.504564, -3.5, 1.78814e-7, -.504564, -4, .866, -.504565, -3.8, .866, -.504565, -3.4, .1732, -.504564, -2.6, .1732, -.504564, -2.2, .866, -.504564, -2.6, 1.5588, -.504564, -3.4, 1.5588, -.504565, -3.5, 1.732, -.504565, -2.5, 1.732, -.504564, -2.5, 1.732, .495436, -3.5, 1.732, .495436, -4, .866, .495436, -3.8, .866, .495436, -3.4, 1.5588, .495436, -2.6, 1.5588, .495436, -2.2, .866, .495436, -2.6, .1732, .495436, -3.4, .1732, .495436, -3.5, 1.78814e-7, .495436, 4, .866, -.504565, 4, .866, .495435, 3.5, 0, .495435, 3.5, 0, -.504565, 2.5, 1.19209e-7, -.504565, 2, .866, -.504565, 2.2, .866, -.504565, 2.6, .1732, -.504565, 3.4, .1732, -.504565, 3.8, .866, -.504565, 3.4, 1.5588, -.504565, 2.6, 1.5588, -.504565, 2.5, 1.732, -.504565, 3.5, 1.732, -.504565, 3.5, 1.732, .495435, 2.5, 1.732, .495435, 2, .866, .495435, 2.2, .866, .495435, 2.6, 1.5588, .495435, 3.4, 1.5588, .495435, 3.8, .866, .495435, 3.4, .1732, .495435, 2.6, .1732, .495435, 2.5, 1.19209e-7, .495435, 1, .866, -3.50456, 1, .866, -2.50456, .5, -1.19209e-7, -2.50456, .5, -1.78814e-7, -3.50456, -.5, -1.19209e-7, -3.50456, -1, .866, -3.50456, -.8, .866, -3.50456, -.4, .1732, -3.50456, .4, .1732, -3.50456, .8, .866, -3.50456, .4, 1.5588, -3.50456, -.4, 1.5588, -3.50456, -.5, 1.732, -3.50456, .5, 1.732, -3.50456, .5, 1.732, -2.50456, -.5, 1.732, -2.50456, -1, .866, -2.50456, -.8, .866, -2.50456, -.4, 1.5588, -2.50456, .4, 1.5588, -2.50456, .8, .866, -2.50456, .4, .1732, -2.50456, -.4, .1732, -2.50456, -.5, -5.96046e-8, -2.50456, 1, .866, -.504565, 1, .866, .495435, .5, 5.96046e-8, .495436, .5, 5.96046e-8, -.504565, -.5, 1.19209e-7, -.504565, -1, .866, -.504565, -.8, .866, -.504565, -.4, .1732, -.504565, .4, .1732, -.504565, .8, .866, -.504565, .4, 1.5588, -.504565, -.4, 1.5588, -.504565, -.5, 1.732, -.504565, .5, 1.732, -.504565, .5, 1.732, .495435, -.5, 1.732, .495435, -1, .866, .495435, -.8, .866, .495435, -.4, 1.5588, .495435, .4, 1.5588, .495435, .8, .866, .495435, .4, .1732, .495436, -.4, .1732, .495435, -.5, 1.19209e-7, .495435, .1, .866, -3.50456, .1, .866, 3.49544, -.1, .866, -3.50456, -.1, .866, 3.49544, -2.9, .866, -.504564, -2.9, .866, .495436, -3.1, .866, -.504564, -3.1, .866, .495436, 3.1, .866, -.504565, 3.1, .866, .495435, 2.9, .866, -.504565, 2.9, .866, .495435, -.1, .866, 2.20853, .1, .866, 2.2, -.1, .866, -2, .1, .866, -2, -.1, .866, 2.2, .1, .866, 2.08719, -.1, .866, 2.08719, -.1, .866, -1.90395, .1, .866, -1.90395],
            normals: [.866019, -.500011, 5.9606e-8, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, .866019, .500011, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -5.96046e-8, -1, 5.96046e-8, -.866019, -.500011, 1.49015e-8, -.866019, .500011, -4.47045e-8, 0, 1, -1.19209e-7, -.866019, .500011, -7.45075e-8, -.866019, -.500011, -3.72537e-8, 7.45058e-8, 1, -5.96046e-8, 0, -1, 0, .866019, .500011, 0, .866019, -.500011, 5.58806e-8, .866019, -.500011, 1.49015e-8, 2.98023e-7, -1.72069e-7, -1, -2.05122e-14, -6.88275e-8, -1, -7.45059e-8, -4.30172e-8, -1, 7.45058e-8, -4.30172e-8, -1, 5.96047e-8, 3.44137e-8, -1, 7.45058e-8, -4.30172e-8, -1, 2.98023e-7, 1.03241e-7, -1, 7.45058e-8, -4.30173e-8, -1, 5.96046e-8, 3.44138e-8, -1, .866019, .500011, -1.49015e-8, 0, 6.88275e-8, 1, -7.45058e-8, 4.30172e-8, 1, -2.98023e-8, 1.72069e-8, 1, -3.72529e-8, -2.15086e-8, 1, 0, 3.44138e-8, 1, 2.56403e-14, 8.60344e-8, 1, -1.49012e-7, 8.60344e-8, 1, -5.96047e-8, 3.44137e-8, 1, -3.72529e-8, 1.5056e-7, 1, -5.96046e-8, 3.44137e-8, 1, -1.19209e-7, -1, 0, -.866019, -.500011, 1.49015e-8, -.866019, .500011, -1.49015e-8, 0, 1, 0, -.866019, .500011, -1.86269e-8, -.866019, -.500011, 1.86269e-8, 7.45058e-8, 1, 0, 0, -1, 0, .866019, .500011, 0, .866019, -.500011, 1.86269e-8, 2.98023e-7, 1.03241e-7, -1, 5.96047e-8, 3.44137e-8, -1, 7.45058e-8, -4.30172e-8, -1, -2.05122e-14, -6.88275e-8, -1, 2.98023e-7, -2.58103e-7, -1, 7.45057e-8, -4.30172e-8, -1, 7.45058e-8, -4.30173e-8, -1, 5.96047e-8, 3.44138e-8, -1, 0, 3.44138e-8, 1, -7.45057e-8, 4.30172e-8, 1, -1.49011e-7, 8.60343e-8, 1, -5.96046e-8, 3.44138e-8, 1, -3.72529e-8, 1.5056e-7, 1, 0, 8.60344e-8, 1, -5.96047e-8, 3.44137e-8, 1, -3.72529e-8, -2.15086e-8, 1, -2.98023e-8, 1.72069e-8, 1, -.866019, -.500011, 1.49015e-8, -.866019, .500011, -1.49015e-8, 1.19209e-7, 1, 0, -.866019, .500011, 0, -.866019, -.500011, 0, 7.45058e-8, 1, 0, .866019, .500011, 0, .866019, -.500011, 1.34113e-7, .866019, .500011, 8.94089e-8, -.866019, .500011, -5.58806e-8, -.866019, -.500011, 0, 0, -1, 1.19209e-7, .866019, .500011, 1.86269e-8, .866019, -.500011, 7.45075e-8, .866019, -.500011, 0, -2.05122e-14, -6.88275e-8, -1, 7.45058e-8, -4.30172e-8, -1, 5.96046e-8, 3.44138e-8, -1, 7.45058e-8, -4.30172e-8, -1, 0, -6.88275e-8, -1, 7.45058e-8, -4.30172e-8, -1, 7.45058e-8, -4.30172e-8, -1, 2.05122e-14, 6.88275e-8, 1, 1.11759e-7, 1.07543e-7, 1, 3.72529e-8, 2.15086e-8, 1, -2.98023e-8, 1.89276e-7, 1, -7.45058e-8, -4.30172e-8, 1, 1.02561e-14, 3.44138e-8, 1, 0, 4.30172e-8, 1, 3.72529e-8, 2.15086e-8, 1, 8.9407e-8, 1.20448e-7, 1, -7.45058e-8, -4.30172e-8, 1, -2.98023e-8, 1.89276e-7, 1, -5.96046e-8, -1, 0, -.866019, -.500011, 0, -.866019, .500011, 0, -.866019, .500011, -3.72537e-8, -.866019, -.500011, -1.86269e-8, 7.45058e-8, 1, 4.44089e-15, .866019, .500011, 1.86269e-8, .866019, -.500011, 3.72537e-8, -1.49012e-7, -1, 2.98023e-8, 1.49012e-7, 1, -5.94238e-8, 0, -1, 5.96046e-8, 2.98023e-7, 1, -4.48028e-8, 2.98023e-7, 1, -4.60113e-8, 2.98023e-7, 1, 0, 2.96047e-7, 1, -4.63163e-8, 2.98023e-7, 1, 1.96825e-14, 2.98023e-7, 1, 3.93649e-14, 0, -1, 0, 1.0238e-8, 1, -1.81503e-8, -1.28436e-7, -1, 2.79512e-7, 2.98023e-7, 1, 4.62338e-14, 1.0079e-8, -1, 2.09862e-8, -1.0079e-8, -1, 2.09863e-8],
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 32, 9, 0, 3, 1, 1, 1, 32, 4, 5, 6, 2, 2, 2, 32, 8, 9, 3, 3, 3, 3, 32, 4, 6, 7, 2, 2, 2, 32, 8, 3, 4, 4, 4, 4, 32, 4, 7, 8, 3, 3, 3, 32, 13, 0, 9, 4, 4, 4, 32, 11, 6, 5, 4, 4, 4, 32, 13, 9, 10, 4, 4, 4, 32, 11, 5, 12, 5, 5, 5, 32, 13, 10, 11, 4, 4, 4, 32, 11, 12, 13, 6, 6, 6, 33, 1, 0, 13, 14, 7, 7, 7, 7, 32, 20, 1, 14, 8, 8, 8, 32, 15, 16, 17, 9, 9, 9, 32, 19, 20, 14, 8, 8, 8, 32, 15, 17, 18, 9, 9, 9, 32, 19, 14, 15, 10, 10, 10, 32, 15, 18, 19, 8, 8, 8, 32, 2, 1, 20, 11, 11, 11, 32, 22, 17, 16, 8, 8, 8, 32, 2, 20, 21, 10, 10, 10, 32, 22, 16, 23, 12, 12, 12, 32, 2, 21, 22, 8, 8, 8, 32, 22, 23, 2, 9, 9, 9, 33, 3, 2, 23, 4, 13, 13, 13, 13, 33, 4, 23, 16, 5, 14, 14, 14, 14, 33, 5, 16, 15, 12, 15, 15, 15, 15, 33, 12, 15, 14, 13, 16, 16, 16, 16, 33, 9, 8, 21, 20, 17, 17, 17, 17, 33, 10, 9, 20, 19, 18, 18, 18, 18, 33, 8, 7, 22, 21, 19, 19, 19, 19, 33, 11, 10, 19, 18, 20, 20, 20, 20, 33, 7, 6, 17, 22, 21, 21, 21, 21, 33, 6, 11, 18, 17, 22, 22, 22, 22, 33, 24, 25, 26, 27, 23, 23, 23, 23, 32, 33, 24, 27, 24, 24, 24, 32, 28, 29, 30, 25, 25, 25, 32, 32, 33, 27, 26, 26, 26, 32, 28, 30, 31, 27, 27, 27, 32, 32, 27, 28, 28, 28, 28, 32, 28, 31, 32, 29, 29, 29, 32, 37, 24, 33, 30, 30, 30, 32, 35, 30, 29, 4, 4, 4, 32, 37, 33, 34, 4, 4, 4, 32, 35, 29, 36, 5, 5, 5, 32, 37, 34, 35, 31, 31, 31, 32, 35, 36, 37, 32, 32, 32, 33, 37, 38, 25, 24, 33, 33, 33, 33, 32, 44, 25, 38, 34, 34, 34, 32, 39, 40, 41, 9, 9, 9, 32, 43, 44, 38, 35, 35, 35, 32, 39, 41, 42, 9, 9, 9, 32, 43, 38, 39, 36, 36, 36, 32, 39, 42, 43, 37, 37, 37, 32, 26, 25, 44, 38, 38, 38, 32, 46, 41, 40, 39, 39, 39, 32, 26, 44, 45, 40, 40, 40, 32, 46, 40, 47, 41, 41, 41, 32, 26, 45, 46, 42, 42, 42, 32, 46, 47, 26, 43, 43, 43, 33, 27, 26, 47, 28, 44, 44, 44, 44, 33, 28, 47, 40, 29, 45, 45, 45, 45, 33, 29, 40, 39, 36, 46, 46, 46, 46, 33, 36, 39, 38, 37, 47, 47, 47, 47, 33, 33, 32, 45, 44, 48, 48, 48, 48, 33, 34, 33, 44, 43, 49, 49, 49, 49, 33, 32, 31, 46, 45, 50, 50, 50, 50, 33, 35, 34, 43, 42, 51, 51, 51, 51, 33, 31, 30, 41, 46, 52, 52, 52, 52, 33, 30, 35, 42, 41, 53, 53, 53, 53, 33, 48, 49, 50, 51, 23, 23, 23, 23, 32, 57, 48, 51, 4, 4, 4, 32, 52, 53, 54, 54, 54, 54, 32, 56, 57, 51, 3, 3, 3, 32, 52, 54, 55, 2, 2, 2, 32, 56, 51, 52, 55, 55, 55, 32, 52, 55, 56, 56, 56, 56, 32, 61, 48, 57, 57, 57, 57, 32, 59, 54, 53, 58, 58, 58, 32, 61, 57, 58, 59, 59, 59, 32, 59, 53, 60, 5, 5, 5, 32, 61, 58, 59, 60, 60, 60, 32, 59, 60, 61, 61, 61, 61, 33, 61, 62, 49, 48, 33, 33, 33, 33, 32, 68, 49, 62, 34, 34, 34, 32, 63, 64, 65, 62, 62, 62, 32, 67, 68, 62, 63, 63, 63, 32, 63, 65, 66, 64, 64, 64, 32, 67, 62, 63, 65, 65, 65, 32, 63, 66, 67, 66, 66, 66, 32, 50, 49, 68, 10, 10, 10, 32, 70, 65, 64, 67, 67, 67, 32, 50, 68, 69, 10, 10, 10, 32, 70, 64, 71, 68, 68, 68, 32, 50, 69, 70, 69, 69, 69, 32, 70, 71, 50, 70, 70, 70, 33, 51, 50, 71, 52, 44, 44, 44, 44, 33, 52, 71, 64, 53, 71, 71, 71, 71, 33, 53, 64, 63, 60, 72, 72, 72, 72, 33, 60, 63, 62, 61, 73, 73, 73, 73, 33, 57, 56, 69, 68, 74, 74, 74, 74, 33, 58, 57, 68, 67, 75, 75, 75, 75, 33, 56, 55, 70, 69, 76, 76, 76, 76, 33, 59, 58, 67, 66, 51, 51, 51, 51, 33, 55, 54, 65, 70, 77, 77, 77, 77, 33, 54, 59, 66, 65, 53, 53, 53, 53, 33, 72, 73, 74, 75, 78, 78, 78, 78, 32, 81, 72, 75, 4, 4, 4, 32, 76, 77, 78, 2, 2, 2, 32, 80, 81, 75, 3, 3, 3, 32, 76, 78, 79, 2, 2, 2, 32, 80, 75, 76, 4, 4, 4, 32, 76, 79, 80, 3, 3, 3, 32, 85, 72, 81, 4, 4, 4, 32, 83, 78, 77, 4, 4, 4, 32, 85, 81, 82, 4, 4, 4, 32, 83, 77, 84, 5, 5, 5, 32, 85, 82, 83, 4, 4, 4, 32, 83, 84, 85, 2, 2, 2, 33, 85, 86, 73, 72, 79, 79, 79, 79, 32, 92, 73, 86, 8, 8, 8, 32, 87, 88, 89, 9, 9, 9, 32, 91, 92, 86, 8, 8, 8, 32, 87, 89, 90, 9, 9, 9, 32, 91, 86, 87, 10, 10, 10, 32, 87, 90, 91, 8, 8, 8, 32, 74, 73, 92, 11, 11, 11, 32, 94, 89, 88, 10, 10, 10, 32, 74, 92, 93, 10, 10, 10, 32, 94, 88, 95, 12, 12, 12, 32, 74, 93, 94, 8, 8, 8, 32, 94, 95, 74, 9, 9, 9, 33, 75, 74, 95, 76, 13, 13, 13, 13, 33, 76, 95, 88, 77, 14, 14, 14, 14, 33, 77, 88, 87, 84, 72, 72, 72, 72, 33, 84, 87, 86, 85, 47, 47, 47, 47, 33, 81, 80, 93, 92, 80, 80, 80, 80, 33, 82, 81, 92, 91, 81, 81, 81, 81, 33, 80, 79, 94, 93, 19, 19, 19, 19, 33, 83, 82, 91, 90, 82, 82, 82, 82, 33, 79, 78, 89, 94, 83, 83, 83, 83, 33, 78, 83, 90, 89, 84, 84, 84, 84, 33, 96, 97, 98, 99, 85, 85, 85, 85, 32, 105, 96, 99, 1, 1, 1, 32, 100, 101, 102, 86, 86, 86, 32, 104, 105, 99, 3, 3, 3, 32, 100, 102, 103, 87, 87, 87, 32, 104, 99, 100, 88, 88, 88, 32, 100, 103, 104, 89, 89, 89, 32, 109, 96, 105, 90, 90, 90, 32, 107, 102, 101, 4, 4, 4, 32, 109, 105, 106, 91, 91, 91, 32, 107, 101, 108, 5, 5, 5, 32, 109, 106, 107, 92, 92, 92, 32, 107, 108, 109, 28, 28, 28, 33, 109, 110, 97, 96, 7, 7, 7, 7, 32, 116, 97, 110, 93, 93, 93, 32, 111, 112, 113, 62, 62, 62, 32, 115, 116, 110, 94, 94, 94, 32, 111, 113, 114, 95, 95, 95, 32, 115, 110, 111, 96, 96, 96, 32, 111, 114, 115, 97, 97, 97, 32, 98, 97, 116, 98, 98, 98, 32, 118, 113, 112, 99, 99, 99, 32, 98, 116, 117, 100, 100, 100, 32, 118, 112, 119, 101, 101, 101, 32, 98, 117, 118, 102, 102, 102, 32, 118, 119, 98, 103, 103, 103, 33, 99, 98, 119, 100, 104, 104, 104, 104, 33, 100, 119, 112, 101, 105, 105, 105, 105, 33, 101, 112, 111, 108, 106, 106, 106, 106, 33, 108, 111, 110, 109, 47, 47, 47, 47, 33, 105, 104, 117, 116, 107, 107, 107, 107, 33, 106, 105, 116, 115, 108, 108, 108, 108, 33, 104, 103, 118, 117, 109, 109, 109, 109, 33, 107, 106, 115, 114, 51, 51, 51, 51, 33, 103, 102, 113, 118, 110, 110, 110, 110, 33, 102, 107, 114, 113, 111, 111, 111, 111, 33, 125, 127, 126, 124, 112, 112, 112, 112, 33, 134, 135, 120, 122, 113, 113, 113, 113, 33, 129, 131, 130, 128, 114, 114, 114, 114, 33, 140, 139, 138, 137, 115, 115, 115, 115, 32, 123, 121, 133, 116, 116, 116, 32, 133, 136, 132, 117, 117, 117, 32, 133, 132, 123, 118, 118, 118, 32, 133, 137, 138, 119, 119, 119, 32, 136, 133, 138, 120, 120, 120, 32, 138, 132, 136, 121, 121, 121, 33, 137, 133, 129, 131, 122, 122, 122, 122, 33, 125, 138, 132, 127, 123, 123, 123, 123, 33, 135, 134, 139, 140, 124, 124, 124, 124, 33, 130, 140, 135, 128, 125, 125, 125, 125, 33, 126, 134, 139, 124, 126, 126, 126, 126],
            metadata: {
                vertices: 141,
                faces: 195,
                generator: "io_three",
                normals: 127,
                type: "Geometry",
                uvs: 0,
                version: 3
            },
            uvs: []
        },
        "message-queue": {
            id: "message-queue",
            primaryColorFaces: [0, 1, 2, 3, 5, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            disableImagePlane: true,
            metadata: {
                normals: 73,
                type: "Geometry",
                version: 3,
                uvs: 0,
                vertices: 122,
                generator: "io_three",
                faces: 193
            },
            normals: [0, 0, 1, -.894427, 0, -.447214, .894427, 9.02467e-8, -.447214, -1.14577e-7, -.894427, -.447214, 0, .894427, -.447214, 1.05123e-7, 1, -2.98023e-8, .500011, .866019, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -.500011, .866019, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, 0, -.500011, -.866019, 0, -1, 0, 0, -1, 0, 0, .500011, .866019, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, .500011, -.866019, 0, 1, 0, 0, .500011, .866019, -8.76558e-9, -.500011, -.866019, 0, 0, 0, 1, -.500011, .866019, 0, .500011, -.866019, 0, 0, 0, 1, 4.5885e-7, 1, -3.44536e-8, 0, 1, -3.44536e-8, .500011, .866019, 0, -.500011, .866019, 0, 1, -1.19209e-7, 0, 1, -1.87731e-7, 0, 1, -1.87731e-7, 2.53785e-7, 1, -1.19209e-7, -1.61153e-7, -.500011, .866019, -8.76558e-9, -1, 7.01231e-8, 0, -1, 1.06437e-7, -1.14321e-7, -1, 1.06437e-7, 1.14321e-7, -.500011, -.866019, 0, .500011, .866019, 0, 0, 0, 1, .500011, -.866019, 0, 1, 0, 0, .500011, .866019, -4.38279e-9, 2.29425e-7, 1, -2.58402e-8, -.881375, -.472417, 1.64169e-8, 1.37655e-7, 1, 0, .881375, -.472417, 1.64169e-8, -.894427, 0, -.447214, .894427, 0, -.447214, 0, -.894427, -.447214, -.894427, 0, -.447214, .894427, 9.02467e-8, -.447214, -1.5277e-7, -.894427, -.447214, 1.90962e-7, .894427, -.447214, .894427, 3.43732e-7, .447214, -.894427, -1.80493e-7, .447214, -1.14577e-7, -.894427, .447214, 0, .894427, .447214, .894427, 0, .447214, -1.90962e-7, -.894427, .447214, 1.90962e-7, .894427, .447214, -.894427, -1.80493e-7, .447214, -2.67347e-7, -.894427, .447214, 1.90962e-7, .894427, .447214],
            vertices: [-1.16137, .720424, 1.29537, -1.16137, 1.31116, 1.29537, -.866, 1.01579, .704632, -.570632, .720424, 1.29537, -.570632, 1.31116, 1.29537, -2, 2.38419e-7, 2, 2, -2.38419e-7, 2, -2, 0, -2, 2, -4.76837e-7, -2, .866, 2, -2, .866, 2, -1.73, 1.732, 1.5, -1.73, 1.732, 1.5, -2, 1.732, .5, -2, .866, -2.38419e-7, -2, .866, .15, -2, 1.6021, .575, -2, 1.6021, 1.425, -2, .866, 1.85, -2, 2.38419e-7, 1.5, -2, 2.38419e-7, 1.5, -1.73, 1.732, .865, -1.73, 1.732, .865, 1.73, 1.732, 1.5, 1.73, 1.732, 1.5, 2, 1.732, .5, 2, .1299, 1.425, -2, .1299, .575, -2, 2.38419e-7, .5, -2, .866, -2.38419e-7, 2, .866, .15, 2, 1.6021, .575, 2, 1.6021, 1.425, 2, 1.6021, 1.425, 1.73, 1.6021, .865, 1.73, 1.6021, .865, -1.73, 1.6021, 1.425, -1.73, .866, 1.85, -1.73, 2.38419e-7, .5, 2, 2.38419e-7, 1.5, 2, 2.38419e-7, 1.5, 1.73, 2.38419e-7, .865, 1.73, 2.38419e-7, .865, -1.73, .866, 2, 1.73, .866, 2, 2, .866, 1.85, 2, .1299, 1.425, -1.73, .1299, .865, -1.73, .1299, .865, 1.73, .1299, 1.425, 1.73, .1299, 1.425, 2, .1299, .575, 2, .866, 1.85, 1.73, -.866, 2, -2, -.866, 2, -1.73, 1.78814e-7, 1.5, -1.73, 1.78814e-7, 1.5, -2, 5.96046e-8, .5, -2, -.866, 0, -2, -.866, .15, -2, -.1299, .575, -2, -.1299, 1.425, -2, -.866, 1.85, -2, -1.732, 1.5, -2, -1.732, 1.5, -1.73, 5.96046e-8, .865, -1.73, 5.96046e-8, .865, 1.73, 1.78814e-7, 1.5, 1.73, 1.78814e-7, 1.5, 2, 5.96046e-8, .5, 2, -1.6021, 1.425, -2, -1.6021, .575, -2, -1.732, .5, -2, -.866, 0, 2, -.866, .15, 2, -.1299, .575, 2, -.1299, 1.425, 2, -.1299, 1.425, 1.73, -.1299, .865, 1.73, -.1299, .865, -1.73, -.1299, 1.425, -1.73, -.866, 1.85, -1.73, -1.732, .5, 2, -1.732, 1.5, 2, -1.732, 1.5, 1.73, -1.732, .865, 1.73, -1.732, .865, -1.73, -.866, 2, 1.73, -.866, 2, 2, -.866, 1.85, 2, -1.6021, 1.425, -1.73, -1.6021, .865, -1.73, -1.6021, .865, 1.73, -1.6021, 1.425, 1.73, -1.6021, 1.425, 2, -1.6021, .575, 2, -.866, 1.85, 1.73, -1.16137, .720424, -.704632, -1.16137, 1.31116, -.704632, -.866, 1.01579, -1.29537, -.570632, .720424, -.704632, -.570632, 1.31116, -.704632, -1.16137, .720424, .295368, -1.16137, 1.31116, .295368, -.866, 1.01579, -.295368, -.570632, .720424, .295368, -.570632, 1.31116, .295368, 1.16137, .720424, -1.30045, 1.16137, 1.31116, -1.30045, .866, 1.01579, -.709714, .570632, .720424, -1.30045, .570632, 1.31116, -1.30045, 1.16137, .720424, .69955, 1.16137, 1.31116, .69955, .866, 1.01579, 1.29029, .570632, .720424, .69955, .570632, 1.31116, .69955, 1.16137, .720424, -.30045, 1.16137, 1.31116, -.30045, .866, 1.01579, .290287, .570632, .720424, -.30045, .570632, 1.31116, -.30045],
            faces: [33, 0, 3, 4, 1, 0, 0, 0, 0, 32, 1, 2, 0, 1, 1, 1, 32, 2, 4, 3, 2, 2, 2, 32, 0, 2, 3, 3, 3, 3, 32, 4, 2, 1, 4, 4, 4, 33, 5, 73, 58, 7, 5, 5, 5, 5, 33, 9, 10, 11, 12, 6, 6, 6, 6, 32, 18, 9, 12, 7, 7, 7, 32, 13, 14, 15, 8, 8, 8, 32, 17, 18, 12, 7, 7, 7, 32, 13, 15, 16, 9, 9, 9, 32, 17, 12, 13, 10, 10, 10, 32, 13, 16, 17, 8, 8, 8, 33, 19, 20, 10, 9, 11, 11, 11, 11, 32, 13, 12, 11, 12, 12, 12, 32, 22, 23, 24, 13, 13, 13, 32, 13, 11, 21, 14, 14, 14, 32, 22, 24, 25, 14, 14, 14, 32, 13, 21, 22, 12, 12, 12, 32, 22, 25, 13, 14, 14, 14, 32, 19, 9, 18, 10, 10, 10, 32, 27, 15, 14, 8, 8, 8, 32, 19, 18, 26, 15, 15, 15, 32, 27, 14, 28, 8, 8, 8, 32, 19, 26, 27, 16, 16, 16, 32, 27, 28, 19, 8, 8, 8, 33, 16, 15, 30, 31, 11, 11, 11, 11, 32, 36, 17, 16, 17, 17, 17, 32, 31, 32, 33, 17, 17, 17, 32, 35, 36, 16, 18, 18, 18, 32, 31, 33, 34, 18, 18, 18, 32, 35, 16, 31, 18, 18, 18, 32, 31, 34, 35, 18, 18, 18, 33, 18, 17, 36, 37, 19, 19, 19, 19, 32, 38, 39, 40, 18, 18, 18, 32, 20, 19, 28, 18, 18, 18, 32, 38, 40, 41, 18, 18, 18, 32, 42, 20, 28, 17, 17, 17, 32, 28, 38, 41, 20, 20, 20, 32, 28, 41, 42, 21, 21, 21, 33, 43, 44, 24, 23, 22, 22, 22, 22, 32, 24, 44, 45, 23, 23, 23, 32, 31, 30, 29, 0, 0, 0, 32, 24, 45, 32, 24, 24, 24, 32, 31, 29, 25, 25, 25, 25, 32, 24, 32, 31, 0, 0, 0, 32, 31, 25, 24, 0, 0, 0, 33, 26, 18, 37, 46, 26, 26, 26, 26, 32, 27, 26, 46, 12, 12, 12, 32, 49, 50, 51, 14, 14, 14, 32, 27, 46, 47, 14, 14, 14, 32, 48, 49, 51, 12, 12, 12, 32, 51, 27, 47, 27, 27, 27, 32, 47, 48, 51, 12, 12, 12, 33, 15, 27, 51, 30, 28, 28, 28, 28, 33, 33, 32, 45, 52, 29, 29, 29, 29, 32, 45, 44, 39, 23, 23, 23, 32, 38, 29, 30, 0, 0, 0, 32, 50, 45, 39, 30, 30, 30, 32, 38, 30, 51, 0, 0, 0, 32, 50, 39, 38, 23, 23, 23, 32, 38, 51, 50, 0, 0, 0, 33, 40, 39, 44, 43, 31, 31, 31, 31, 33, 52, 45, 50, 49, 32, 32, 32, 32, 32, 35, 21, 11, 0, 0, 0, 32, 20, 42, 47, 33, 33, 33, 32, 36, 35, 11, 25, 25, 25, 32, 20, 47, 46, 0, 0, 0, 32, 36, 11, 10, 0, 0, 0, 32, 10, 20, 46, 25, 25, 25, 32, 37, 36, 10, 0, 0, 0, 32, 10, 46, 37, 25, 25, 25, 33, 35, 34, 22, 21, 34, 34, 34, 34, 33, 42, 41, 48, 47, 35, 35, 35, 35, 32, 48, 41, 40, 8, 8, 8, 32, 23, 22, 34, 8, 8, 8, 32, 49, 48, 40, 8, 8, 8, 32, 23, 34, 33, 8, 8, 8, 32, 49, 40, 43, 9, 9, 9, 32, 43, 23, 33, 8, 8, 8, 32, 52, 49, 43, 9, 9, 9, 32, 43, 33, 52, 8, 8, 8, 33, 53, 54, 55, 56, 36, 36, 36, 36, 32, 62, 53, 56, 7, 7, 7, 32, 57, 58, 59, 8, 8, 8, 32, 61, 62, 56, 7, 7, 7, 32, 57, 59, 60, 9, 9, 9, 32, 61, 56, 57, 10, 10, 10, 32, 57, 60, 61, 9, 9, 9, 33, 63, 64, 54, 53, 37, 37, 37, 37, 32, 57, 56, 55, 38, 38, 38, 32, 66, 67, 68, 39, 39, 39, 32, 57, 55, 65, 40, 40, 40, 32, 66, 68, 69, 41, 41, 41, 32, 57, 65, 66, 12, 12, 12, 32, 66, 69, 57, 14, 14, 14, 32, 63, 53, 62, 10, 10, 10, 32, 71, 59, 58, 8, 8, 8, 32, 63, 62, 70, 10, 10, 10, 32, 71, 58, 72, 8, 8, 8, 32, 63, 70, 71, 16, 16, 16, 32, 71, 72, 63, 8, 8, 8, 33, 60, 59, 74, 75, 42, 42, 42, 42, 32, 80, 61, 60, 43, 43, 43, 32, 75, 76, 77, 43, 43, 43, 32, 79, 80, 60, 44, 44, 44, 32, 75, 77, 78, 45, 45, 45, 32, 79, 60, 75, 18, 18, 18, 32, 75, 78, 79, 18, 18, 18, 33, 62, 61, 80, 81, 46, 46, 46, 46, 32, 82, 83, 84, 18, 18, 18, 32, 64, 63, 72, 18, 18, 18, 32, 82, 84, 85, 18, 18, 18, 32, 86, 64, 72, 18, 18, 18, 32, 72, 82, 85, 21, 21, 21, 32, 72, 85, 86, 21, 21, 21, 33, 87, 88, 68, 67, 47, 47, 47, 47, 32, 68, 88, 89, 24, 24, 24, 32, 75, 74, 73, 0, 0, 0, 32, 68, 89, 76, 24, 24, 24, 32, 75, 73, 69, 25, 25, 25, 32, 68, 76, 75, 48, 48, 48, 32, 75, 69, 68, 0, 0, 0, 33, 70, 62, 81, 90, 49, 49, 49, 49, 32, 71, 70, 90, 13, 13, 13, 32, 93, 94, 95, 50, 50, 50, 32, 71, 90, 91, 50, 50, 50, 32, 92, 93, 95, 12, 12, 12, 32, 95, 71, 91, 27, 27, 27, 32, 91, 92, 95, 12, 12, 12, 33, 59, 71, 95, 74, 51, 51, 51, 51, 33, 77, 76, 89, 96, 46, 46, 46, 46, 32, 89, 88, 83, 23, 23, 23, 32, 82, 73, 74, 0, 0, 0, 32, 94, 89, 83, 23, 23, 23, 32, 82, 74, 95, 0, 0, 0, 32, 94, 83, 82, 23, 23, 23, 32, 82, 95, 94, 48, 48, 48, 33, 84, 83, 88, 87, 37, 37, 37, 37, 33, 96, 89, 94, 93, 49, 49, 49, 49, 32, 79, 65, 55, 0, 0, 0, 32, 64, 86, 91, 25, 25, 25, 32, 80, 79, 55, 25, 25, 25, 32, 64, 91, 90, 48, 48, 48, 32, 80, 55, 54, 0, 0, 0, 32, 54, 64, 90, 25, 25, 25, 32, 81, 80, 54, 0, 0, 0, 32, 54, 90, 81, 25, 25, 25, 33, 79, 78, 66, 65, 35, 35, 35, 35, 33, 86, 85, 92, 91, 52, 52, 52, 52, 32, 92, 85, 84, 8, 8, 8, 32, 67, 66, 78, 8, 8, 8, 32, 93, 92, 84, 8, 8, 8, 32, 67, 78, 77, 9, 9, 9, 32, 93, 84, 87, 9, 9, 9, 32, 87, 67, 77, 8, 8, 8, 32, 96, 93, 87, 9, 9, 9, 32, 87, 77, 96, 8, 8, 8, 33, 29, 6, 8, 14, 5, 5, 5, 5, 33, 6, 25, 13, 8, 53, 53, 53, 53, 32, 13, 8, 14, 8, 8, 8, 32, 25, 29, 6, 25, 25, 25, 33, 73, 29, 14, 58, 54, 54, 54, 54, 33, 5, 7, 72, 82, 55, 55, 55, 55, 32, 73, 82, 5, 23, 23, 23, 32, 72, 58, 7, 8, 8, 8, 32, 58, 57, 14, 10, 10, 10, 32, 69, 73, 29, 25, 25, 25, 33, 101, 98, 97, 100, 25, 25, 25, 25, 32, 98, 99, 97, 56, 56, 56, 32, 99, 101, 100, 57, 57, 57, 32, 97, 99, 100, 58, 58, 58, 32, 101, 99, 98, 4, 4, 4, 33, 106, 103, 102, 105, 25, 25, 25, 25, 32, 103, 104, 102, 59, 59, 59, 32, 104, 106, 105, 60, 60, 60, 32, 102, 104, 105, 61, 61, 61, 32, 106, 104, 103, 62, 62, 62, 33, 111, 108, 107, 110, 16, 16, 16, 16, 32, 108, 109, 107, 63, 63, 63, 32, 109, 111, 110, 64, 64, 64, 32, 107, 109, 110, 65, 65, 65, 32, 111, 109, 108, 66, 66, 66, 33, 116, 113, 112, 115, 16, 16, 16, 16, 32, 113, 114, 112, 67, 67, 67, 32, 114, 116, 115, 64, 64, 64, 32, 112, 114, 115, 68, 68, 68, 32, 116, 114, 113, 69, 69, 69, 33, 121, 118, 117, 120, 16, 16, 16, 16, 32, 118, 119, 117, 63, 63, 63, 32, 119, 121, 120, 70, 70, 70, 32, 117, 119, 120, 71, 71, 71, 32, 121, 119, 118, 72, 72, 72],
            uvs: []
        },
        monitoring: {
            id: "monitoring",
            primaryColorFaces: [10, 11, 14, 15, 26, 27, 30, 31, 42, 43, 48, 49, 54, 55, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 177, 178, 179, 180, 181, 182],
            imagePlanePosition: {
                x: -2.5,
                y: 2,
                z: 3.8
            },
            imagePlaneRotation: {
                x: 0
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .35,
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 6, 2, 9, 11, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 4, 5, 1, 3, 3, 3, 3, 33, 0, 2, 6, 4, 4, 4, 4, 4, 33, 5, 7, 3, 1, 5, 5, 5, 5, 33, 10, 11, 15, 14, 6, 6, 6, 6, 33, 3, 7, 10, 8, 7, 7, 7, 7, 33, 2, 3, 8, 9, 8, 8, 8, 8, 33, 7, 6, 11, 10, 9, 9, 9, 9, 33, 15, 13, 17, 19, 10, 10, 10, 10, 33, 9, 8, 12, 13, 11, 11, 11, 11, 33, 11, 9, 13, 15, 12, 12, 12, 12, 33, 8, 10, 14, 12, 13, 13, 13, 13, 33, 18, 19, 23, 22, 14, 14, 14, 14, 33, 12, 14, 18, 16, 15, 15, 15, 15, 33, 14, 15, 19, 18, 16, 16, 16, 16, 33, 13, 12, 16, 17, 17, 17, 17, 17, 33, 21, 20, 24, 25, 18, 18, 18, 18, 33, 17, 16, 20, 21, 19, 19, 19, 19, 33, 19, 17, 21, 23, 20, 20, 20, 20, 33, 16, 18, 22, 20, 21, 21, 21, 21, 33, 27, 25, 29, 31, 22, 22, 22, 22, 33, 23, 21, 25, 27, 23, 23, 23, 23, 33, 20, 22, 26, 24, 24, 24, 24, 24, 33, 22, 23, 27, 26, 25, 25, 25, 25, 33, 28, 30, 31, 29, 26, 26, 26, 26, 33, 24, 26, 30, 28, 27, 27, 27, 27, 33, 26, 27, 31, 30, 28, 28, 28, 28, 33, 25, 24, 28, 29, 29, 29, 29, 29, 33, 34, 35, 39, 38, 30, 30, 30, 30, 33, 33, 32, 36, 37, 31, 31, 31, 31, 33, 40, 41, 39, 37, 32, 32, 32, 32, 33, 36, 38, 41, 40, 33, 33, 33, 33, 32, 40, 37, 36, 34, 34, 34, 32, 39, 41, 38, 26, 26, 26, 33, 44, 45, 49, 48, 35, 35, 35, 35, 33, 43, 42, 46, 47, 36, 36, 36, 36, 33, 50, 51, 49, 47, 37, 37, 37, 37, 33, 46, 48, 51, 50, 38, 38, 38, 38, 32, 50, 47, 46, 39, 39, 39, 32, 49, 51, 48, 40, 40, 40, 33, 34, 44, 45, 35, 41, 41, 41, 41, 33, 32, 33, 43, 42, 34, 34, 34, 34, 33, 45, 43, 33, 35, 42, 42, 42, 42, 33, 53, 55, 54, 52, 43, 43, 43, 43, 33, 55, 59, 58, 54, 44, 44, 44, 44, 33, 59, 57, 56, 58, 45, 45, 45, 45, 33, 57, 53, 52, 56, 46, 46, 46, 46, 33, 52, 54, 58, 56, 47, 47, 47, 47, 33, 57, 59, 55, 53, 48, 48, 48, 48, 32, 62, 61, 65, 49, 49, 49, 32, 65, 69, 66, 50, 50, 50, 32, 65, 66, 62, 51, 51, 51, 33, 68, 67, 66, 69, 52, 52, 52, 52, 33, 60, 64, 65, 61, 53, 53, 53, 53, 33, 62, 66, 67, 63, 54, 54, 54, 54, 33, 60, 61, 62, 63, 55, 55, 55, 55, 33, 64, 68, 69, 65, 56, 56, 56, 56, 33, 72, 73, 77, 76, 57, 57, 57, 57, 33, 71, 70, 74, 75, 58, 58, 58, 58, 33, 78, 79, 77, 75, 59, 59, 59, 59, 33, 74, 76, 79, 78, 60, 60, 60, 60, 32, 78, 75, 74, 61, 61, 61, 32, 77, 79, 76, 62, 62, 62, 33, 82, 83, 87, 86, 63, 63, 63, 63, 33, 81, 80, 84, 85, 64, 64, 64, 64, 33, 88, 89, 87, 85, 65, 65, 65, 65, 33, 84, 86, 89, 88, 66, 66, 66, 66, 32, 88, 85, 84, 67, 67, 67, 32, 87, 89, 86, 68, 68, 68, 33, 72, 82, 83, 73, 69, 69, 69, 69, 33, 70, 71, 81, 80, 70, 70, 70, 70, 33, 83, 81, 71, 73, 71, 71, 71, 71, 33, 92, 93, 97, 96, 72, 72, 72, 72, 33, 91, 90, 94, 95, 73, 73, 73, 73, 33, 98, 99, 97, 95, 74, 74, 74, 74, 33, 94, 96, 99, 98, 33, 33, 33, 33, 32, 98, 95, 94, 75, 75, 75, 32, 97, 99, 96, 76, 76, 76, 33, 102, 103, 107, 106, 77, 77, 77, 77, 33, 101, 100, 104, 105, 78, 78, 78, 78, 33, 108, 109, 107, 105, 79, 79, 79, 79, 33, 104, 106, 109, 108, 80, 80, 80, 80, 32, 108, 105, 104, 81, 81, 81, 32, 107, 109, 106, 82, 82, 82, 33, 92, 102, 103, 93, 83, 83, 83, 83, 33, 90, 91, 101, 100, 84, 84, 84, 84, 33, 103, 101, 91, 93, 85, 85, 85, 85, 33, 111, 113, 112, 110, 86, 86, 86, 86, 33, 113, 117, 116, 112, 26, 26, 26, 26, 33, 117, 115, 114, 116, 87, 87, 87, 87, 33, 115, 111, 110, 114, 88, 88, 88, 88, 33, 110, 112, 116, 114, 89, 89, 89, 89, 33, 115, 117, 120, 121, 90, 90, 90, 90, 33, 121, 120, 124, 125, 91, 91, 91, 91, 33, 113, 111, 118, 119, 92, 92, 92, 92, 33, 111, 115, 121, 118, 93, 93, 93, 93, 33, 117, 113, 119, 120, 94, 94, 94, 94, 33, 125, 124, 123, 122, 95, 95, 95, 95, 33, 119, 118, 122, 123, 96, 96, 96, 96, 33, 118, 121, 125, 122, 26, 26, 26, 26, 33, 120, 119, 123, 124, 88, 88, 88, 88, 32, 68, 64, 60, 97, 97, 97, 32, 60, 63, 67, 98, 98, 98, 32, 60, 67, 68, 99, 99, 99],
            vertices: [.716504, .664986, .651785, .730501, .686538, .651785, .716504, .664986, .574692, .730501, .686538, .574692, .78116, .622998, .651785, .795156, .64455, .651785, .78116, .622998, .574692, .795156, .64455, .574692, .578279, .785392, .401828, .564283, .76384, .401828, .642935, .743404, .401828, .628939, .721852, .401828, .873588, .593616, .195494, .859592, .572064, .195494, .938244, .551628, .195494, .924248, .530076, .195494, .666995, .727779, -.049737, .652999, .706227, -.049737, .731651, .685791, -.049737, .717655, .664239, -.049737, .730501, .686538, -.202818, .716504, .664986, -.202818, .795156, .64455, -.202818, .78116, .622998, -.202818, .465573, .858584, -.5393, .451576, .837032, -.5393, .530228, .816596, -.5393, .516232, .795044, -.5393, .730501, .686538, -.675826, .716504, .664986, -.675826, .795156, .64455, -.675826, .78116, .622998, -.675826, -.220143, .825965, -.3, -.220143, .890776, -.3, -.220143, .825965, -.7, -.220143, .890776, -.7, -.220143, .825965, -.44, -.220143, .890776, -.44, -.220143, .825965, -.56, -.220143, .890776, -.56, -.107874, .825965, -.44, -.107874, .825965, -.56, -.830826, .825965, -.3, -.830826, .890776, -.3, -.830826, .825965, -.7, -.830826, .890776, -.7, -.830826, .825965, -.44, -.830826, .890776, -.44, -.830826, .825965, -.56, -.830826, .890776, -.56, -.943095, .825965, -.44, -.943095, .825965, -.56, .283679, .442887, .145795, .526791, .745181, .160258, .283679, .442887, -.174721, .526791, .745181, -.160258, .489565, .30713, .145795, .732677, .609424, .160258, .489565, .30713, -.174721, .732677, .609424, -.160258, 1.05308, .0055145, -.799999, 1.05308, .00551462, .8, -.946919, .0055145, .799999, -.946919, .00551456, -.8, 1.05308, .105596, -.799999, 1.05308, .105596, .8, -.946919, .824084, .799999, -.946919, .824084, -.8, -.106162, .824084, -.799999, -.106163, .824084, .8, -.220143, .825965, .7, -.220143, .890776, .7, -.220143, .825965, .3, -.220143, .890776, .3, -.220143, .825965, .56, -.220143, .890776, .56, -.220143, .825965, .44, -.220143, .890776, .44, -.107874, .825965, .56, -.107874, .825965, .44, -.830826, .825965, .7, -.830826, .890776, .7, -.830826, .825965, .3, -.830826, .890776, .3, -.830826, .825965, .56, -.830826, .890776, .56, -.830826, .825965, .44, -.830826, .890776, .44, -.943095, .825965, .56, -.943095, .825965, .44, -.220143, .825965, .2, -.220143, .890776, .2, -.220143, .825965, -.2, -.220143, .890776, -.2, -.220143, .825965, .06, -.220143, .890776, .06, -.220143, .825965, -.0600001, -.220143, .890776, -.0600001, -.107874, .825965, .06, -.107874, .825965, -.06, -.830826, .825965, .2, -.830826, .890776, .2, -.830826, .825965, -.2, -.830826, .890776, -.2, -.830826, .825965, .06, -.830826, .890776, .06, -.830826, .825965, -.06, -.830826, .890776, -.06, -.943095, .825965, .06, -.943095, .825965, -.06, .0576403, .965378, .8, .145865, 1.09918, .8, .0576403, .965377, -.8, .145865, 1.09918, -.8, 1.08707, .286594, .8, 1.1753, .420395, .8, 1.08707, .286594, -.8, 1.1753, .420394, -.8, .232176, 1.05609, .675726, .232176, 1.05609, -.675726, 1.10169, .482752, -.675726, 1.10169, .482752, .675726, .203115, 1.01202, .675726, .203115, 1.01202, -.675726, 1.07263, .438678, -.675726, 1.07263, .438678, .675726],
            metadata: {
                faces: 106,
                generator: "io_three",
                type: "Geometry",
                normals: 100,
                uvs: 0,
                version: 3,
                vertices: 126
            },
            normals: [-.83867, .544641, 0, -.544639, -.838671, -1.39768e-7, .838671, -.544638, 0, 0, 0, 1, -.544639, -.838671, 0, .544639, .838671, 0, .424011, -.275355, .862783, .544639, .838671, 0, -.5784, .375618, .724131, .5784, -.375617, -.724131, -.544639, -.83867, 0, -.424011, .275356, -.862783, -.544639, -.838671, 4.68385e-7, .544639, .838671, 2.34193e-7, .751731, -.488179, .443375, .544639, .838671, -4.92614e-8, .591698, -.384252, -.708692, -.591697, .384253, .708692, -.611443, .397077, .684447, -.75173, .48818, -.443375, -.544639, -.83867, -1.20223e-7, .544639, .83867, 9.86442e-9, -.544639, -.838671, 3.53938e-7, -.544639, -.83867, 2.87217e-7, .544639, .838671, -1.43609e-7, .611444, -.397076, -.684447, 0, 0, -1, .544639, .83867, 8.84845e-7, .332723, -.216073, .917937, -.332723, .216073, -.917937, 1, 0, -2.12874e-7, 1, 0, 2.12874e-7, .499958, .86605, -2.09541e-7, -5.30908e-7, -1, 0, 0, 0, 1, 1, 4.59832e-7, 2.12873e-7, 1, -4.59832e-7, 6.38622e-7, .499957, -.86605, 2.09541e-7, 0, 1, 0, -2.65454e-7, 0, -1, 0, 0, 1, -9.76034e-8, -8.97623e-14, -1, -1.46405e-7, 1, -2.23517e-7, -.77926, .626701, 0, .0206005, .0312423, -.9993, .77926, -.626701, 0, -.0206005, -.0312423, .9993, -.550481, -.834848, 0, .550481, .834848, 0, -8.94066e-8, -536005e-11, 1, -4.96258e-7, -5.4061e-8, 1, -3.72203e-7, 2.91262e-7, 1, 1.32051e-14, 1, -3.72529e-8, 1, 119112e-11, 3.72529e-7, -1, -2.18447e-7, -2.98023e-7, 1.49012e-8, -1, 1.86265e-8, .526811, .849982, 2.59489e-7, 1, 0, -2.12874e-7, 1, 0, 2.12874e-7, .499958, .86605, 0, -5.30908e-7, -1, 0, -5.30908e-7, 2.44129e-13, 1, 2.65454e-7, -1.22065e-13, -1, 1, 4.59832e-7, 2.12873e-7, 1, -4.59833e-7, 6.38622e-7, .499957, -.86605, 2.09541e-7, -2.65454e-7, 1, -2.48353e-7, 0, 0, -1, 5.30908e-7, 0, 1, -4.88017e-8, -4.48812e-14, -1, 9.76034e-8, -4.48812e-14, 1, -2.44008e-7, 1, -2.23517e-7, 1, 0, -2.12874e-7, 1, 2.44716e-14, 2.12874e-7, .499958, .86605, 0, -6.63635e-8, 1.14958e-7, 1, 1.32727e-7, -6.10322e-14, -1, 1, 4.59832e-7, 2.12873e-7, 1, -4.59832e-7, 6.38621e-7, .499957, -.86605, 4.34049e-7, -2.65454e-7, 1, -2.48353e-7, -1.32727e-7, 0, -1, 1.32727e-7, 0, 1, -1.22004e-7, -1.34643e-13, -1, 7.32025e-8, -4.48812e-14, 1, -1.46405e-7, 1, -2.23517e-7, -.834848, .55048, -4.17664e-8, .834848, -.550481, 4.17664e-8, 0, 0, 1, -.550481, -.834848, 6.04228e-8, .646405, .762994, -4.74297e-8, -.834847, .550482, -2.44751e-8, .446648, .89471, -7.19623e-8, .548122, .831271, .0924698, .548122, .831271, -.0924701, .550481, .834848, -2.11729e-8, .834848, -.550481, 2.44752e-8, 289235e-11, 416891e-11, -1, 2.08616e-7, 3.64078e-7, -1, 2.12682e-7, 3.74012e-7, -1],
            uvs: []
        },
        "network-router": {
            id: "network-router",
            primaryColorFaces: [32, 33, 62, 63, 64, 65, 68, 69, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107],
            imagePlanePosition: {
                y: 1.2,
                z: .6
            },
            imagePlaneRotation: {
                x: -1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .6,
            vertices: [-2.37576, .0549852, -2.06356, -2.37576, .319678, -2.06356, -2.37576, .0549852, -2.20866, -2.37576, .319678, -2.20866, -1.99834, .0549852, -2.06356, -1.99834, .319678, -2.06356, -1.99834, .0549852, -2.20866, -1.99834, .319678, -2.20866, 2.5685, -8.9407e-8, -2.09631, 2.5685, .386098, -2.09631, 2.92898, .386098, -1.947, 2.92898, -8.9407e-8, -1.947, -2.81063, -8.9407e-8, -2.09631, 3.20488, -5.96046e-8, -1.6711, 3.3542, -5.96046e-8, -1.31062, 3.35419, 8.9407e-8, 2.16809, 3.20488, 1.19209e-7, 2.52857, 2.92898, 1.19209e-7, 2.80448, 2.5685, 1.19209e-7, 2.95379, -2.81063, 1.19209e-7, 2.95379, -3.17111, 1.19209e-7, 2.80448, -3.44701, 1.19209e-7, 2.52857, -3.59633, 8.9407e-8, 2.16809, -3.59633, -5.96046e-8, -1.31062, -3.44701, -5.96046e-8, -1.6711, -3.17111, -8.9407e-8, -1.947, 1.81714, .319678, -2.09631, 2.50598, .621883, -2.03762, 2.85808, .621883, -1.89177, 3.20488, .386098, -1.6711, -3.17111, .386098, -1.947, -2.81063, .386098, -2.09631, 1.43972, .0549852, -2.09631, 3.3542, .386098, -1.31062, 3.35419, .386098, 2.16809, 3.20488, .386098, 2.52857, 2.92898, .386098, 2.80448, 2.5685, .386098, 2.95379, -2.81063, .386098, 2.95379, -3.17111, .386098, 2.80448, -3.44701, .386098, 2.52857, -3.59633, .386098, 2.16809, -3.59633, .386098, -1.31062, -3.44701, .386098, -1.6711, 1.81714, .0549852, -2.09631, 1.11715, .319678, -2.09631, 3.12756, .621883, -1.62229, -2.74811, .621883, -2.03762, 2.50598, .633483, -2.03762, 2.85808, .633483, -1.89177, -3.10021, .621883, -1.89177, -1.36027, .319678, -2.09631, -1.36027, .0549852, -2.09631, .739728, .319678, -2.09631, .417148, .319678, -2.09631, .0397288, .319678, -2.09631, -.282853, .319678, -2.09631, -.660271, .319678, -2.09631, -.982853, .319678, -2.09631, -.982853, .0549852, -2.09631, -.660271, .0549852, -2.09631, .739728, .0549852, -2.09631, 3.2734, .621883, -1.27019, 3.2734, .621883, 2.12766, 3.12756, .621883, 2.47976, 2.85807, .621883, 2.74925, 2.50598, .621883, 2.89509, -2.74811, .621883, 2.89509, -3.10021, .621883, 2.74925, -3.3697, .621883, 2.47976, -3.51554, .621883, 2.12766, -3.51554, .621883, -1.27019, -3.3697, .621883, -1.62229, 1.81715, .0549852, -1.83791, 1.81715, .319678, -1.83791, 1.43972, .319678, -2.09631, 3.12756, .633483, -1.62229, -2.74811, .633483, -2.03762, 2.54963, .633483, -2.0786, 2.90758, .633483, -1.93033, -3.10021, .633483, -1.89177, -.282853, .319678, -1.83791, -.660271, .319678, -1.83791, -.660271, .0549852, -1.83791, .0397288, .0549852, -2.09631, 1.11715, .319678, -1.83791, .739729, .319678, -1.83791, .417148, .0549852, -2.09631, .417148, .319678, -1.83791, .0397294, .319678, -1.83791, -.282853, .0549852, -2.09631, 1.11715, .0549852, -2.09631, 1.43973, .0549852, -1.83791, 3.2734, .633483, -1.27019, 3.2734, .633483, 2.12766, 3.12756, .633483, 2.47976, 2.85807, .633483, 2.74925, 2.50598, .633483, 2.89509, -2.74811, .633483, 2.89509, -3.10021, .633483, 2.74925, -3.3697, .633483, 2.47976, -3.51554, .633483, 2.12766, -3.51554, .633483, -1.27019, -3.3697, .633483, -1.62229, 1.43973, .319678, -1.83791, 3.18155, .633483, -1.65637, -2.79176, .633483, -2.0786, 2.54963, .732942, -2.0786, 2.90758, .732942, -1.93033, -3.14971, .633483, -1.93033, -.282853, .0549852, -1.83791, .739729, .0549852, -1.83791, 1.11715, .0549852, -1.83791, .417148, .0549852, -1.83791, .0397294, .0549852, -1.83791, 3.32981, .633483, -1.29842, 3.32981, .633483, 2.15589, 3.18155, .633483, 2.51385, 2.90758, .633483, 2.78781, 2.54963, .633483, 2.93608, -2.79176, .633483, 2.93608, -3.14971, .633483, 2.78781, -3.42368, .633483, 2.51384, -3.57195, .633483, 2.15589, -3.57195, .633483, -1.29842, -3.42368, .633483, -1.65637, 3.18155, .732942, -1.65637, -2.79176, .732942, -2.0786, 2.44326, .817546, -1.97874, 2.78696, .817546, -1.83638, -3.14971, .732942, -1.93033, 3.32981, .732942, -1.29842, 3.32981, .732942, 2.15589, 3.18155, .732942, 2.51385, 2.90758, .732942, 2.78781, 2.54963, .732942, 2.93608, -2.79176, .732942, 2.93608, -3.14971, .732942, 2.78781, -3.42368, .732942, 2.51384, -3.57195, .732942, 2.15589, -3.57195, .732942, -1.29842, -3.42368, .732942, -1.65637, 3.05001, .817546, -1.57332, -2.6854, .817546, -1.97874, -3.02909, .817546, -1.83638, -3.29215, .817546, -1.57333, -3.43451, .817546, -1.22963, -3.43451, .817546, 2.08711, -3.29215, .817546, 2.4308, -3.02909, .817546, 2.69385, -2.6854, .817546, 2.83622, 2.44326, .817546, 2.83622, 2.78696, .817546, 2.69385, 3.05001, .817546, 2.4308, 3.19238, .817546, 2.0871, 3.19237, .817546, -1.22963, -1.36027, .319678, -1.83791, -1.36027, .0549852, -1.83791, -.982853, .0549852, -1.83791, -.982853, .319678, -1.83791, -.32426, .182696, 3.01955, -.32426, .312166, 3.01955, -.32426, .182696, 2.94978, -.32426, .312166, 2.94978, 1.56027, .182696, 3.01955, 1.56027, .312166, 3.01955, 1.56027, .182696, 2.94978, 1.56027, .312166, 2.94978, 1.88671, .182696, 3.01955, 1.88671, .312166, 3.01955, 1.88671, .182696, 2.94978, 1.88671, .312166, 2.94978, 2.35692, .182696, 3.01955, 2.35692, .312166, 3.01955, 2.35692, .182696, 2.94978, 2.35692, .312166, 2.94978],
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 3, 7, 6, 2, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 4, 5, 1, 3, 3, 3, 3, 33, 0, 2, 6, 4, 4, 4, 4, 4, 33, 5, 7, 3, 1, 5, 5, 5, 5, 33, 8, 9, 10, 11, 6, 6, 6, 6, 32, 25, 12, 8, 4, 4, 4, 32, 8, 11, 13, 7, 7, 7, 32, 13, 14, 15, 8, 8, 8, 32, 15, 16, 17, 9, 9, 9, 32, 17, 18, 19, 10, 10, 10, 32, 19, 20, 21, 11, 11, 11, 32, 21, 22, 23, 12, 12, 12, 32, 23, 24, 25, 13, 13, 13, 32, 25, 8, 13, 14, 14, 14, 32, 13, 15, 17, 15, 15, 15, 32, 17, 19, 21, 10, 10, 10, 32, 21, 23, 25, 16, 16, 16, 32, 25, 13, 17, 17, 17, 17, 32, 17, 21, 25, 18, 18, 18, 32, 26, 9, 8, 19, 19, 19, 32, 8, 12, 32, 20, 20, 20, 32, 44, 26, 8, 19, 19, 19, 32, 8, 32, 44, 21, 21, 21, 33, 10, 9, 27, 28, 22, 22, 22, 22, 33, 11, 10, 29, 13, 23, 23, 23, 23, 33, 25, 30, 31, 12, 24, 24, 24, 24, 33, 13, 29, 33, 14, 25, 25, 25, 25, 33, 14, 33, 34, 15, 26, 26, 26, 26, 33, 15, 34, 35, 16, 27, 27, 27, 27, 33, 16, 35, 36, 17, 28, 28, 28, 28, 33, 17, 36, 37, 18, 29, 29, 29, 29, 33, 18, 37, 38, 19, 30, 30, 30, 30, 33, 19, 38, 39, 20, 31, 31, 31, 31, 33, 20, 39, 40, 21, 32, 32, 32, 32, 33, 21, 40, 41, 22, 33, 33, 33, 33, 33, 22, 41, 42, 23, 34, 34, 34, 34, 33, 23, 42, 43, 24, 35, 35, 35, 35, 33, 24, 43, 30, 25, 36, 36, 36, 36, 33, 29, 10, 28, 46, 37, 37, 37, 37, 33, 9, 31, 47, 27, 38, 38, 38, 38, 33, 28, 27, 48, 49, 39, 39, 39, 39, 33, 31, 30, 50, 47, 40, 40, 40, 40, 32, 51, 52, 12, 41, 41, 41, 32, 57, 58, 51, 5, 5, 5, 32, 55, 56, 57, 10, 10, 10, 32, 53, 54, 55, 10, 10, 10, 32, 9, 45, 53, 42, 42, 42, 32, 51, 12, 31, 43, 43, 43, 32, 31, 9, 53, 44, 44, 44, 32, 53, 55, 57, 45, 45, 45, 32, 57, 51, 31, 46, 46, 46, 32, 31, 53, 57, 47, 47, 47, 32, 12, 52, 59, 48, 48, 48, 32, 59, 58, 57, 49, 49, 49, 32, 60, 12, 59, 50, 50, 50, 32, 59, 57, 60, 51, 51, 51, 33, 33, 29, 46, 62, 52, 52, 52, 52, 33, 34, 33, 62, 63, 53, 53, 53, 53, 33, 35, 34, 63, 64, 54, 54, 54, 54, 33, 36, 35, 64, 65, 55, 55, 55, 55, 33, 37, 36, 65, 66, 56, 56, 56, 56, 33, 38, 37, 66, 67, 57, 57, 57, 57, 33, 39, 38, 67, 68, 58, 58, 58, 58, 33, 40, 39, 68, 69, 59, 59, 59, 59, 33, 41, 40, 69, 70, 60, 60, 60, 60, 33, 42, 41, 70, 71, 61, 61, 61, 61, 33, 43, 42, 71, 72, 62, 62, 62, 62, 33, 30, 43, 72, 50, 63, 63, 63, 63, 33, 26, 44, 73, 74, 64, 64, 64, 64, 32, 9, 26, 75, 65, 65, 65, 32, 12, 61, 91, 66, 66, 66, 32, 45, 9, 75, 67, 67, 67, 32, 32, 12, 91, 68, 68, 68, 32, 45, 75, 32, 1, 1, 1, 32, 32, 91, 45, 1, 1, 1, 33, 46, 28, 49, 76, 69, 69, 69, 69, 33, 27, 47, 77, 48, 70, 70, 70, 70, 33, 49, 48, 78, 79, 4, 4, 4, 4, 33, 47, 50, 80, 77, 71, 71, 71, 71, 33, 57, 56, 81, 82, 72, 72, 72, 72, 33, 60, 57, 82, 83, 73, 73, 73, 73, 32, 12, 60, 90, 74, 74, 74, 32, 56, 55, 84, 75, 75, 75, 32, 84, 12, 90, 76, 76, 76, 32, 90, 56, 84, 77, 77, 77, 33, 53, 45, 85, 86, 72, 72, 72, 72, 32, 87, 54, 53, 78, 78, 78, 32, 12, 84, 87, 79, 79, 79, 32, 87, 53, 61, 48, 48, 48, 32, 61, 12, 87, 80, 80, 80, 33, 55, 54, 88, 89, 81, 81, 81, 81, 33, 44, 32, 92, 73, 82, 82, 82, 82, 33, 62, 46, 76, 93, 83, 83, 83, 83, 33, 63, 62, 93, 94, 84, 84, 84, 84, 33, 64, 63, 94, 95, 85, 85, 85, 85, 33, 65, 64, 95, 96, 86, 86, 86, 86, 33, 66, 65, 96, 97, 87, 87, 87, 87, 33, 67, 66, 97, 98, 88, 88, 88, 88, 33, 68, 67, 98, 99, 89, 89, 89, 89, 33, 69, 68, 99, 100, 90, 90, 90, 90, 33, 70, 69, 100, 101, 91, 91, 91, 91, 33, 71, 70, 101, 102, 92, 92, 92, 92, 33, 72, 71, 102, 103, 93, 93, 93, 93, 33, 50, 72, 103, 80, 94, 94, 94, 94, 33, 75, 26, 74, 104, 81, 81, 81, 81, 33, 74, 73, 92, 104, 1, 1, 1, 1, 33, 76, 49, 79, 105, 95, 95, 95, 95, 33, 48, 77, 106, 78, 10, 10, 10, 10, 33, 79, 78, 107, 108, 96, 96, 96, 96, 33, 77, 80, 109, 106, 10, 10, 10, 10, 33, 56, 90, 110, 81, 97, 97, 97, 97, 33, 81, 110, 83, 82, 98, 98, 98, 98, 33, 90, 60, 83, 110, 45, 45, 45, 45, 33, 61, 53, 86, 111, 99, 99, 99, 99, 33, 45, 91, 112, 85, 100, 100, 100, 100, 33, 85, 112, 111, 86, 1, 1, 1, 1, 33, 54, 87, 113, 88, 101, 101, 101, 101, 33, 84, 55, 89, 114, 102, 102, 102, 102, 33, 88, 113, 114, 89, 103, 103, 103, 103, 33, 91, 61, 111, 112, 45, 45, 45, 45, 33, 32, 75, 104, 92, 104, 104, 104, 104, 33, 93, 76, 105, 115, 4, 4, 4, 4, 33, 94, 93, 115, 116, 105, 105, 105, 105, 33, 95, 94, 116, 117, 106, 106, 106, 106, 33, 96, 95, 117, 118, 107, 107, 107, 107, 33, 97, 96, 118, 119, 106, 106, 106, 106, 33, 98, 97, 119, 120, 72, 72, 72, 72, 33, 99, 98, 120, 121, 81, 81, 81, 81, 33, 100, 99, 121, 122, 72, 72, 72, 72, 33, 101, 100, 122, 123, 72, 72, 72, 72, 33, 102, 101, 123, 124, 108, 108, 108, 108, 33, 103, 102, 124, 125, 11, 11, 11, 11, 33, 80, 103, 125, 109, 109, 109, 109, 109, 33, 105, 79, 108, 126, 110, 110, 110, 110, 33, 78, 106, 127, 107, 111, 111, 111, 111, 33, 108, 107, 128, 129, 112, 112, 112, 112, 33, 106, 109, 130, 127, 113, 113, 113, 113, 33, 87, 84, 114, 113, 82, 82, 82, 82, 33, 115, 105, 126, 131, 114, 114, 114, 114, 33, 116, 115, 131, 132, 115, 115, 115, 115, 33, 117, 116, 132, 133, 116, 116, 116, 116, 33, 118, 117, 133, 134, 117, 117, 117, 117, 33, 119, 118, 134, 135, 118, 118, 118, 118, 33, 120, 119, 135, 136, 119, 119, 119, 119, 33, 121, 120, 136, 137, 120, 120, 120, 120, 33, 122, 121, 137, 138, 121, 121, 121, 121, 33, 123, 122, 138, 139, 122, 122, 122, 122, 33, 124, 123, 139, 140, 123, 123, 123, 123, 33, 125, 124, 140, 141, 124, 124, 124, 124, 33, 109, 125, 141, 130, 125, 125, 125, 125, 33, 126, 108, 129, 142, 126, 126, 126, 126, 33, 107, 127, 143, 128, 127, 127, 127, 127, 32, 129, 128, 143, 45, 45, 45, 32, 143, 144, 145, 128, 128, 128, 32, 145, 146, 147, 129, 129, 129, 32, 147, 148, 149, 82, 82, 82, 32, 149, 150, 151, 82, 82, 82, 32, 151, 152, 153, 45, 45, 45, 32, 153, 154, 155, 130, 130, 130, 32, 155, 142, 129, 131, 131, 131, 32, 129, 143, 145, 132, 132, 132, 32, 145, 147, 149, 133, 133, 133, 32, 149, 151, 153, 45, 45, 45, 32, 153, 155, 129, 134, 134, 134, 32, 129, 145, 149, 135, 135, 135, 32, 149, 153, 129, 136, 136, 136, 33, 127, 130, 144, 143, 137, 137, 137, 137, 33, 131, 126, 142, 155, 138, 138, 138, 138, 33, 132, 131, 155, 154, 139, 139, 139, 139, 33, 133, 132, 154, 153, 140, 140, 140, 140, 33, 134, 133, 153, 152, 141, 141, 141, 141, 33, 135, 134, 152, 151, 142, 142, 142, 142, 33, 136, 135, 151, 150, 143, 143, 143, 143, 33, 137, 136, 150, 149, 144, 144, 144, 144, 33, 138, 137, 149, 148, 145, 145, 145, 145, 33, 139, 138, 148, 147, 146, 146, 146, 146, 33, 140, 139, 147, 146, 147, 147, 147, 147, 33, 141, 140, 146, 145, 148, 148, 148, 148, 33, 130, 141, 145, 144, 149, 149, 149, 149, 33, 52, 51, 156, 157, 150, 150, 150, 150, 33, 59, 52, 157, 158, 45, 45, 45, 45, 33, 159, 158, 157, 156, 151, 151, 151, 151, 33, 51, 58, 159, 156, 72, 72, 72, 72, 33, 58, 59, 158, 159, 152, 152, 152, 152, 33, 161, 163, 162, 160, 153, 153, 153, 153, 33, 163, 167, 166, 162, 154, 154, 154, 154, 33, 167, 165, 164, 166, 155, 155, 155, 155, 33, 165, 161, 160, 164, 156, 156, 156, 156, 33, 160, 162, 166, 164, 4, 4, 4, 4, 33, 165, 167, 163, 161, 5, 5, 5, 5, 33, 169, 171, 170, 168, 157, 157, 157, 157, 33, 171, 175, 174, 170, 1, 1, 1, 1, 33, 175, 173, 172, 174, 158, 158, 158, 158, 33, 173, 169, 168, 172, 159, 159, 159, 159, 33, 168, 170, 174, 172, 4, 4, 4, 4, 33, 173, 175, 171, 169, 5, 5, 5, 5],
            uvs: [],
            metadata: {
                vertices: 176,
                uvs: 0,
                version: 3,
                faces: 198,
                generator: "io_three",
                type: "Geometry",
                normals: 160
            },
            normals: [-1, 0, 164311e-11, 0, 0, -1, 1, 0, 8.21556e-7, 0, 0, 1, 0, -1, 0, 0, 1, 0, .382681, 0, -.923881, -7.63804e-8, -1, 1.844e-7, -1.03413e-7, -1, 4.28352e-8, 1.41134e-7, -1, 1.41134e-7, 0, -1, 0, 0, -1, 0, 9.61792e-8, -1, 4.28353e-8, -1.844e-7, -1, -7.63809e-8, 1.75498e-9, -1, 6.74613e-8, -1.13393e-8, -1, 3.92543e-8, -3.60831e-10, -1, 4.65899e-8, 2.93746e-9, -1, 4.01344e-8, -2.01163e-9, -1, 4.64882e-8, 126927e-11, 0, -1, 1.77292e-7, -936858e-11, -1, -6.31708e-7, -259762e-10, -1, .363247, .314636, -.876958, .707103, 0, -.70711, -.382682, 0, -.92388, .92388, 0, -.382683, 1, 0, 7.53901e-7, .923879, 0, .382684, .707107, 0, .707106, .382686, 0, .923878, -3.98906e-7, 0, 1, -.38268, 0, .923881, -.707108, 0, .707105, -.92388, 0, .382682, -1, 0, 0, -.92388, 0, -.382684, -.707107, 0, -.707107, .661371, .353794, -.661376, 1.52476e-7, .241571, -.970383, .382685, 0, -.923879, -.363247, .314636, -.876958, -3.41482e-8, 9.00736e-7, -1, 0, 107688e-10, -1, 1.64386e-7, 0, -1, 1.77292e-7, 588729e-11, -1, 0, 1, 0, -3.40598e-7, -11027e-9, -1, 1.70299e-7, 551351e-11, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, .863001, .357, -.357463, .946008, .324142, 2.8256e-7, .863004, .356991, .357466, .661375, .353789, .661375, .36325, .314636, .876957, -1.0886e-7, .241573, .970383, -.363248, .314637, .876958, -.661375, .353793, .661373, -.863004, .35699, .357467, -.946013, .32413, 2.06487e-8, -.863004, .356989, -.357468, -.661374, .35379, -.661375, -1, 0, 691993e-11, -6.31708e-7, 215044e-10, -1, 0, 433605e-11, -1, 0, 107688e-10, -1, 0, 433605e-11, -1, .707104, 0, -.707109, 1.36133e-7, 0, -1, -.382684, 0, -.923879, 0, -1, 0, 1, 0, -6.91993e-7, 6.3171e-7, -247049e-10, -1, -7.39095e-7, 0, -1, -7.39094e-7, 383137e-10, -1, -7.39095e-7, 0, -1, 0, 0, -1, 6.31708e-7, -327469e-10, -1, 0, 433605e-11, -1, 0, -1, 0, 0, 1, 0, .923882, 0, -.382677, 1, 0, -1.40335e-7, .923881, 0, .38268, .707106, 0, .707107, .382685, 0, .923879, 1.81511e-7, 0, 1, -.382688, 0, .923878, -.707107, 0, .707107, -.92388, 0, .382683, -1, 0, 7.01675e-8, -.923879, 0, -.382684, -.707106, 0, -.707107, 9.04688e-8, -1, 1.28887e-7, .382683, 0, -.92388, -1, 0, 9.22658e-7, 6.31709e-7, 0, -1, 1, 0, -9.22658e-7, -1, 0, 138399e-11, -1, 0, -103799e-11, 1, 0, -253731e-11, 3.15855e-7, 0, -1, 1, 0, -184532e-11, 5.8827e-13, -1, 5.2192e-8, 0, -1, 0, 0, -1, 0, 4.41219e-13, -1, 5.2192e-8, -9.04706e-8, -1, 1.28886e-7, .707103, 0, -.70711, 8.92721e-8, 0, -1, .205438, .843685, -.495974, -.382683, 0, -.92388, .923883, 0, -.382675, 1, 0, -2.76083e-7, .923882, 0, .382678, .707102, 0, .707111, .382686, 0, .923879, 1.78544e-7, 0, 1, -.382686, 0, .923879, -.707106, 0, .707107, -.92388, 0, .382683, -1, 0, 6.90206e-8, -.92388, 0, -.382683, -.707106, 0, -.707108, .344367, .873397, -.344367, 7.34007e-8, .762982, -.64642, -1.60222e-7, 1, -3.86811e-7, -1.30156e-7, 1, -5.39126e-8, -1.30156e-7, 1, -5.39126e-8, -3.86813e-7, 1, 1.60222e-7, 3.68142e-9, 1, -1.41511e-7, 6.90885e-8, 1, -4.61635e-8, -6.98459e-8, 1, -5.1567e-8, 7.9703e-9, 1, -4.23958e-8, -2.41127e-9, 1, -5.5724e-8, -.205439, .843686, -.495973, .446405, .875519, -.184904, .524219, .851583, -1.67041e-7, .446403, .87552, .184905, .344363, .8734, .344365, .20544, .843687, .495971, -1.42723e-8, .762981, .646421, -.205438, .843688, .495969, -.344366, .873398, .344367, -.446406, .875517, .184907, -.524218, .851584, -8.52249e-10, -.446405, .875518, -.184907, -.344366, .873397, -.344367, 1, -2.07768e-13, 4.61329e-7, 3.15854e-7, 0, -1, -1, 0, 0, -1, 0, -170852e-11, -1.26513e-7, 0, -1, 1, 0, 170851e-11, 0, 0, 1, -1, 0, 0, 1, 0, 0, -5.07045e-7, 0, 1]
        },
        "network-switch": {
            id: "network-switch",
            primaryColorFaces: [166, 167, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 426, 427],
            imagePlanePosition: {
                y: 1.2,
                z: .3
            },
            imagePlaneRotation: {
                x: -1.5707963,
                z: -1.5707963
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .5,
            vertices: [-1.01884, .199483, 1.20552, -1.01884, .251283, 1.20552, -1.01884, .199482, .336678, -1.01884, .251283, .336678, -.955038, .199483, 1.20552, -.955038, .251283, 1.20552, -.955038, .199482, .336678, -.955038, .251283, .336678, 1.01884, .0508118, -1.73923, 1.01884, .0508119, 1.73923, -.981156, .0508119, 1.73923, -.981156, .0508118, -1.73923, 1.01884, .368736, -1.73923, -.981156, .368736, -1.73923, 1.01884, .116363, -.435324, 1.01884, .208247, -.435324, 1.01884, .229565, -.435324, 1.01884, .321449, -.3982, 1.01884, .229565, -.3982, 1.01884, .229565, -.28532, 1.01884, .208247, -.28532, 1.01884, .208247, -.3982, 1.01884, .116363, -.3982, 1.01884, .116363, .164683, 1.01884, .208247, .164683, 1.01884, .229565, .164683, 1.01884, .321449, .164683, 1.01884, .321449, .0518029, 1.01884, .229565, .0146792, 1.01884, .321449, .0146792, 1.01884, .321449, -.0982006, 1.01884, .229565, -.0982006, 1.01884, .208247, .0146792, 1.01884, .208247, -.0982006, 1.01884, .116363, -.0982006, 1.01884, .116363, -.13601, 1.01884, .208247, -.13601, 1.01884, .229565, -.13601, 1.01884, .321449, -.13601, 1.01884, .368736, 1.73923, 1.01884, .116363, .0518029, 1.01884, .116363, .0146792, 1.01884, .229565, .0518029, 1.01884, .208247, .0518029, 1.01884, .321449, -.24889, 1.01884, .229565, -.24889, 1.01884, .208247, -.24889, 1.01884, .116363, -.24889, 1.01884, .116363, -.28532, 1.01884, .321449, -.28532, 1.01884, .321449, -.435324, 1.01884, .321449, -.548204, 1.01884, .229565, -.548204, 1.01884, .208247, -.548204, 1.01884, .116363, -.548204, 1.01884, .116363, -.586013, 1.01884, .208247, -.586013, 1.01884, .229565, -.586013, 1.01884, .321449, -.586013, 1.01884, .321449, -1.67449, 1.01884, .229565, -1.67449, 1.01884, .229565, -1.56161, 1.01884, .208247, -1.56161, 1.01884, .208247, -1.67449, 1.01884, .116363, -1.67449, 1.01884, .116363, -1.56161, 1.01884, .116363, -1.5238, 1.01884, .116363, -1.41092, 1.01884, .116363, -1.3738, 1.01884, .116363, -1.26092, 1.01884, .116363, -1.22449, 1.01884, .116363, -1.11161, 1.01884, .116363, -1.0738, 1.01884, .116363, -.960918, 1.01884, .116363, -.923794, 1.01884, .116363, -.810914, 1.01884, .116363, -.698893, 1.01884, .321449, -1.22449, 1.01884, .229565, -1.22449, 1.01884, .229565, -1.11161, 1.01884, .208247, -1.11161, 1.01884, .208247, -1.22449, 1.01884, .208247, -1.26092, 1.01884, .229565, -1.26092, 1.01884, .321449, -1.26092, 1.01884, .321449, -1.3738, 1.01884, .321449, -1.41092, 1.01884, .321449, -1.5238, 1.01884, .229565, -1.5238, 1.01884, .229565, -1.41092, 1.01884, .208247, -1.41092, 1.01884, .208247, -1.5238, 1.01884, .321449, -1.56161, 1.01884, .208247, -1.3738, 1.01884, .229565, -1.3738, 1.01884, .321449, -.698893, 1.01884, .229565, -.698893, 1.01884, .208247, -.698893, 1.01884, .208247, -.810914, 1.01884, .229565, -.810914, 1.01884, .321449, -.810914, 1.01884, .321449, -.923794, 1.01884, .321449, -.960918, 1.01884, .321449, -1.0738, 1.01884, .229565, -1.0738, 1.01884, .229565, -.960918, 1.01884, .208247, -.960918, 1.01884, .208247, -1.0738, 1.01884, .321449, -1.11161, 1.01884, .229565, -.923794, 1.01884, .208247, -.923794, -.981156, .368736, 1.73923, .916659, .321449, -1.11161, .916659, .229565, -1.11161, .916659, .229565, -1.22449, .916659, .321449, -1.22449, .916659, .321449, -.960918, .916659, .229565, -.960918, .916659, .229565, -1.0738, .916659, .321449, -1.0738, .916659, .321449, -.810914, .916659, .229565, -.810914, .916659, .229565, -.923794, .916659, .321449, -.923794, .916659, .321449, -1.56161, .916659, .229565, -1.56161, .916659, .229565, -1.67449, .916659, .321449, -1.67449, .916659, .321449, -1.41092, .916659, .229565, -1.41092, .916659, .229565, -1.5238, .916659, .321449, -1.5238, .916659, .321449, -1.26092, .916659, .229565, -1.26092, .916659, .229565, -1.3738, .916659, .321449, -1.3738, .916659, .208247, -1.11161, .916659, .116363, -1.11161, .916659, .116363, -1.22449, .916659, .208247, -1.22449, .916659, .208247, -.960918, .916659, .116363, -.960918, .916659, .116363, -1.0738, .916659, .208247, -1.0738, .916659, .208247, -.810914, .916659, .116363, -.810914, .916659, .116363, -.923794, .916659, .208247, -.923794, .916659, .208247, -1.56161, .916659, .116363, -1.56161, .916659, .116363, -1.67449, .916659, .208247, -1.67449, .916659, .208247, -1.41092, .916659, .116363, -1.41092, .916659, .116363, -1.5238, .916659, .208247, -1.5238, .916659, .208247, -1.26092, .916659, .116363, -1.26092, .916659, .116363, -1.3738, .916659, .208247, -1.3738, .916659, .208247, -.13601, .916659, .116363, -.13601, .916659, .116363, -.24889, .916659, .208247, -.24889, .916659, .208247, .0146792, .916659, .116363, .0146792, .916659, .116363, -.0982006, .916659, .208247, -.0982006, .916659, .208247, .164683, .916659, .116363, .164683, .916659, .116363, .0518029, .916659, .208247, .0518029, .916659, .208247, -.586013, .916659, .116363, -.586013, .916659, .116363, -.698893, .916659, .208247, -.698893, .916659, .208247, -.435324, .916659, .116363, -.435324, .916659, .116363, -.548204, .916659, .208247, -.548204, .916659, .208247, -.28532, .916659, .116363, -.28532, .916659, .116363, -.3982, .916659, .208247, -.3982, .916659, .321449, -.13601, .916659, .229565, -.13601, .916659, .229565, -.24889, .916659, .321449, -.24889, .916659, .321449, .0146792, .916659, .229565, .0146792, .916659, .229565, -.0982006, .916659, .321449, -.0982006, .916659, .321449, .164683, .916659, .229565, .164683, .916659, .229565, .0518029, .916659, .321449, .0518029, .916659, .321449, -.586013, .916659, .229565, -.586013, .916659, .229565, -.698893, .916659, .321449, -.698893, .916659, .321449, -.435324, .916659, .229565, -.435324, .916659, .229565, -.548204, .916659, .321449, -.548204, .916659, .321449, -.28532, .916659, .229565, -.28532, .916659, .229565, -.3982, .916659, .321449, -.3982, .99194, .407254, 1.69244, -.954253, .407254, 1.69244, .991941, .407254, -1.69244, -.954253, .407254, -1.69244, -1.01884, .199483, 1.45138, -1.01884, .251283, 1.45138, -1.01884, .199483, 1.30125, -1.01884, .251283, 1.30125, -.955038, .199483, 1.45138, -.955038, .251283, 1.45138, -.955038, .199483, 1.30125, -.955038, .251283, 1.30125],
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 3, 7, 6, 2, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 4, 5, 1, 3, 3, 3, 3, 33, 0, 2, 6, 4, 4, 4, 4, 4, 33, 5, 7, 3, 1, 5, 5, 5, 5, 33, 8, 9, 10, 11, 6, 6, 6, 6, 33, 12, 8, 11, 13, 7, 7, 7, 7, 32, 22, 14, 15, 8, 8, 8, 32, 15, 16, 17, 9, 9, 9, 32, 18, 19, 20, 2, 2, 2, 32, 15, 17, 18, 10, 10, 10, 32, 21, 22, 15, 8, 8, 8, 32, 18, 20, 21, 2, 2, 2, 32, 15, 18, 21, 2, 2, 2, 32, 39, 9, 23, 11, 11, 11, 32, 23, 24, 25, 12, 12, 12, 32, 27, 28, 29, 8, 8, 8, 32, 23, 25, 26, 3, 3, 3, 32, 26, 27, 29, 13, 13, 13, 32, 31, 28, 32, 9, 9, 9, 32, 39, 23, 26, 14, 14, 14, 32, 31, 32, 33, 2, 2, 2, 32, 39, 26, 29, 15, 15, 15, 32, 30, 31, 33, 2, 2, 2, 32, 39, 29, 30, 16, 16, 16, 32, 38, 12, 39, 17, 17, 17, 32, 36, 37, 38, 12, 12, 12, 32, 34, 35, 36, 18, 18, 18, 32, 38, 39, 30, 19, 19, 19, 32, 33, 34, 36, 20, 20, 20, 32, 38, 30, 33, 9, 9, 9, 32, 33, 36, 38, 8, 8, 8, 32, 43, 40, 41, 2, 2, 2, 32, 32, 28, 27, 9, 9, 9, 32, 43, 41, 32, 8, 8, 8, 32, 25, 24, 43, 21, 21, 21, 32, 32, 27, 42, 9, 9, 9, 32, 42, 25, 43, 10, 10, 10, 32, 32, 42, 43, 2, 2, 2, 32, 12, 38, 44, 22, 22, 22, 32, 56, 57, 58, 12, 12, 12, 32, 45, 37, 36, 2, 2, 2, 32, 55, 56, 58, 1, 1, 1, 32, 45, 36, 46, 2, 2, 2, 32, 54, 55, 58, 23, 23, 23, 32, 44, 45, 46, 12, 12, 12, 32, 53, 54, 58, 24, 24, 24, 32, 44, 46, 47, 12, 12, 12, 32, 16, 15, 53, 9, 9, 9, 32, 44, 47, 48, 9, 9, 9, 32, 52, 16, 53, 2, 2, 2, 32, 44, 48, 20, 8, 8, 8, 32, 52, 53, 58, 8, 8, 8, 32, 44, 20, 19, 8, 8, 8, 32, 51, 52, 58, 8, 8, 8, 32, 44, 19, 49, 8, 8, 8, 32, 51, 58, 12, 25, 25, 25, 32, 12, 44, 49, 22, 22, 22, 32, 17, 16, 50, 18, 18, 18, 32, 12, 49, 17, 26, 26, 26, 32, 50, 51, 12, 27, 27, 27, 32, 12, 17, 50, 28, 28, 28, 32, 8, 12, 59, 29, 29, 29, 32, 23, 9, 8, 10, 10, 10, 32, 41, 40, 23, 30, 30, 30, 32, 35, 34, 41, 9, 9, 9, 32, 48, 47, 35, 21, 21, 21, 32, 14, 22, 48, 21, 21, 21, 32, 55, 54, 14, 31, 31, 31, 32, 74, 75, 76, 9, 9, 9, 32, 76, 55, 14, 32, 32, 32, 32, 14, 48, 35, 33, 33, 33, 32, 35, 41, 23, 9, 9, 9, 32, 8, 59, 60, 34, 34, 34, 32, 35, 23, 8, 2, 2, 2, 32, 76, 14, 35, 35, 35, 35, 32, 73, 74, 76, 9, 9, 9, 32, 71, 72, 73, 9, 9, 9, 32, 67, 68, 69, 36, 36, 36, 32, 71, 73, 76, 21, 21, 21, 32, 67, 69, 70, 9, 9, 9, 32, 70, 71, 76, 37, 37, 37, 32, 76, 35, 8, 38, 38, 38, 32, 60, 61, 62, 2, 2, 2, 32, 70, 76, 8, 39, 39, 39, 32, 60, 62, 63, 2, 2, 2, 32, 67, 70, 8, 40, 40, 40, 32, 8, 60, 63, 34, 34, 34, 32, 65, 66, 67, 9, 9, 9, 32, 8, 63, 64, 34, 34, 34, 32, 64, 65, 67, 41, 41, 41, 32, 8, 64, 67, 42, 42, 42, 32, 78, 79, 80, 10, 10, 10, 32, 92, 59, 12, 43, 43, 43, 32, 78, 80, 81, 10, 10, 10, 32, 62, 61, 92, 44, 44, 44, 32, 77, 78, 81, 12, 12, 12, 32, 65, 62, 92, 3, 3, 3, 32, 77, 81, 70, 45, 45, 45, 32, 66, 65, 92, 46, 46, 46, 32, 77, 70, 69, 47, 47, 47, 32, 91, 66, 92, 48, 48, 48, 32, 77, 69, 82, 49, 49, 49, 32, 89, 90, 91, 21, 21, 21, 32, 77, 82, 83, 8, 8, 8, 32, 88, 89, 91, 10, 10, 10, 32, 77, 83, 84, 8, 8, 8, 32, 88, 91, 92, 48, 48, 48, 32, 12, 77, 84, 50, 50, 50, 32, 87, 88, 92, 51, 51, 51, 32, 12, 84, 85, 52, 52, 52, 32, 87, 92, 12, 53, 53, 53, 32, 85, 86, 87, 12, 12, 12, 32, 12, 85, 87, 53, 53, 53, 32, 93, 68, 67, 21, 21, 21, 32, 83, 82, 93, 54, 54, 54, 32, 86, 85, 94, 2, 2, 2, 32, 94, 83, 93, 55, 55, 55, 32, 93, 67, 90, 18, 18, 18, 32, 90, 89, 86, 44, 44, 44, 32, 86, 94, 93, 56, 56, 56, 32, 93, 90, 86, 57, 57, 57, 32, 12, 58, 95, 58, 58, 58, 32, 108, 77, 12, 52, 52, 52, 32, 80, 79, 108, 12, 12, 12, 32, 72, 71, 80, 8, 8, 8, 32, 105, 106, 107, 9, 9, 9, 32, 107, 72, 80, 8, 8, 8, 32, 96, 57, 56, 59, 59, 59, 32, 107, 80, 108, 8, 8, 8, 32, 96, 56, 97, 60, 60, 60, 32, 104, 105, 107, 2, 2, 2, 32, 95, 96, 97, 1, 1, 1, 32, 104, 107, 108, 8, 8, 8, 32, 95, 97, 76, 61, 61, 61, 32, 103, 104, 108, 8, 8, 8, 32, 95, 76, 75, 62, 62, 62, 32, 103, 108, 12, 63, 63, 63, 32, 95, 75, 98, 64, 64, 64, 32, 102, 103, 12, 65, 65, 65, 32, 95, 98, 99, 66, 66, 66, 32, 101, 102, 12, 67, 67, 67, 32, 95, 99, 100, 68, 68, 68, 32, 100, 101, 12, 69, 69, 69, 32, 12, 95, 100, 70, 70, 70, 32, 74, 73, 106, 8, 8, 8, 32, 106, 105, 102, 12, 12, 12, 32, 102, 101, 109, 2, 2, 2, 32, 109, 99, 98, 2, 2, 2, 32, 110, 74, 106, 8, 8, 8, 32, 109, 98, 110, 2, 2, 2, 32, 106, 102, 109, 9, 9, 9, 32, 106, 109, 110, 2, 2, 2, 33, 9, 39, 111, 10, 71, 71, 71, 71, 33, 10, 111, 13, 11, 72, 72, 72, 72, 33, 13, 111, 209, 211, 73, 73, 73, 73, 33, 112, 113, 114, 115, 8, 8, 8, 8, 33, 108, 79, 113, 112, 1, 1, 1, 1, 33, 77, 108, 112, 115, 74, 74, 74, 74, 33, 78, 77, 115, 114, 75, 75, 75, 75, 33, 79, 78, 114, 113, 76, 76, 76, 76, 33, 116, 117, 118, 119, 8, 8, 8, 8, 33, 102, 105, 117, 116, 1, 1, 1, 1, 33, 103, 102, 116, 119, 74, 74, 74, 74, 33, 104, 103, 119, 118, 75, 75, 75, 75, 33, 105, 104, 118, 117, 77, 77, 77, 77, 33, 120, 121, 122, 123, 18, 18, 18, 18, 33, 100, 99, 121, 120, 78, 78, 78, 78, 33, 101, 100, 120, 123, 74, 74, 74, 74, 33, 109, 101, 123, 122, 79, 79, 79, 79, 33, 99, 109, 122, 121, 76, 76, 76, 76, 33, 124, 125, 126, 127, 18, 18, 18, 18, 33, 92, 61, 125, 124, 1, 1, 1, 1, 33, 59, 92, 124, 127, 80, 80, 80, 80, 33, 60, 59, 127, 126, 75, 75, 75, 75, 33, 61, 60, 126, 125, 76, 76, 76, 76, 33, 128, 129, 130, 131, 8, 8, 8, 8, 33, 86, 89, 129, 128, 1, 1, 1, 1, 33, 87, 86, 128, 131, 74, 74, 74, 74, 33, 88, 87, 131, 130, 75, 75, 75, 75, 33, 89, 88, 130, 129, 81, 81, 81, 81, 33, 132, 133, 134, 135, 8, 8, 8, 8, 33, 84, 83, 133, 132, 1, 1, 1, 1, 33, 85, 84, 132, 135, 74, 74, 74, 74, 33, 94, 85, 135, 134, 75, 75, 75, 75, 33, 83, 94, 134, 133, 77, 77, 77, 77, 33, 136, 137, 138, 139, 8, 8, 8, 8, 33, 80, 71, 137, 136, 1, 1, 1, 1, 33, 81, 80, 136, 139, 74, 74, 74, 74, 33, 70, 81, 139, 138, 75, 75, 75, 75, 33, 71, 70, 138, 137, 82, 82, 82, 82, 33, 140, 141, 142, 143, 8, 8, 8, 8, 33, 106, 73, 141, 140, 61, 61, 61, 61, 33, 107, 106, 140, 143, 83, 83, 83, 83, 33, 72, 107, 143, 142, 75, 75, 75, 75, 33, 73, 72, 142, 141, 84, 84, 84, 84, 33, 144, 145, 146, 147, 8, 8, 8, 8, 33, 98, 75, 145, 144, 85, 85, 85, 85, 33, 110, 98, 144, 147, 86, 86, 86, 86, 33, 74, 110, 147, 146, 75, 75, 75, 75, 33, 75, 74, 146, 145, 84, 84, 84, 84, 33, 148, 149, 150, 151, 8, 8, 8, 8, 33, 62, 65, 149, 148, 1, 1, 1, 1, 33, 63, 62, 148, 151, 87, 87, 87, 87, 33, 64, 63, 151, 150, 75, 75, 75, 75, 33, 65, 64, 150, 149, 88, 88, 88, 88, 33, 152, 153, 154, 155, 8, 8, 8, 8, 33, 90, 67, 153, 152, 1, 1, 1, 1, 33, 91, 90, 152, 155, 87, 87, 87, 87, 33, 66, 91, 155, 154, 75, 75, 75, 75, 33, 67, 66, 154, 153, 89, 89, 89, 89, 33, 156, 157, 158, 159, 8, 8, 8, 8, 33, 82, 69, 157, 156, 1, 1, 1, 1, 33, 93, 82, 156, 159, 90, 90, 90, 90, 33, 68, 93, 159, 158, 75, 75, 75, 75, 33, 69, 68, 158, 157, 89, 89, 89, 89, 33, 160, 161, 162, 163, 8, 8, 8, 8, 33, 36, 35, 161, 160, 1, 1, 1, 1, 33, 46, 36, 160, 163, 74, 74, 74, 74, 33, 47, 46, 163, 162, 91, 91, 91, 91, 33, 35, 47, 162, 161, 92, 92, 92, 92, 33, 164, 165, 166, 167, 8, 8, 8, 8, 33, 32, 41, 165, 164, 93, 93, 93, 93, 33, 33, 32, 164, 167, 94, 94, 94, 94, 33, 34, 33, 167, 166, 95, 95, 95, 95, 33, 41, 34, 166, 165, 96, 96, 96, 96, 33, 168, 169, 170, 171, 8, 8, 8, 8, 33, 24, 23, 169, 168, 97, 97, 97, 97, 33, 43, 24, 168, 171, 98, 98, 98, 98, 33, 40, 43, 171, 170, 99, 99, 99, 99, 33, 23, 40, 170, 169, 100, 100, 100, 100, 33, 172, 173, 174, 175, 8, 8, 8, 8, 33, 56, 55, 173, 172, 1, 1, 1, 1, 33, 97, 56, 172, 175, 74, 74, 74, 74, 33, 76, 97, 175, 174, 75, 75, 75, 75, 33, 55, 76, 174, 173, 101, 101, 101, 101, 33, 176, 177, 178, 179, 8, 8, 8, 8, 33, 15, 14, 177, 176, 102, 102, 102, 102, 33, 53, 15, 176, 179, 74, 74, 74, 74, 33, 54, 53, 179, 178, 75, 75, 75, 75, 33, 14, 54, 178, 177, 103, 103, 103, 103, 33, 180, 181, 182, 183, 18, 18, 18, 18, 33, 20, 48, 181, 180, 104, 104, 104, 104, 33, 21, 20, 180, 183, 105, 105, 105, 105, 33, 22, 21, 183, 182, 106, 106, 106, 106, 33, 48, 22, 182, 181, 92, 92, 92, 92, 33, 184, 185, 186, 187, 8, 8, 8, 8, 33, 38, 37, 185, 184, 1, 1, 1, 1, 33, 44, 38, 184, 187, 74, 74, 74, 74, 33, 45, 44, 187, 186, 106, 106, 106, 106, 33, 37, 45, 186, 185, 76, 76, 76, 76, 33, 188, 189, 190, 191, 8, 8, 8, 8, 33, 29, 28, 189, 188, 107, 107, 107, 107, 33, 30, 29, 188, 191, 108, 108, 108, 108, 33, 31, 30, 191, 190, 109, 109, 109, 109, 33, 28, 31, 190, 189, 110, 110, 110, 110, 33, 192, 193, 194, 195, 8, 8, 8, 8, 33, 26, 25, 193, 192, 111, 111, 111, 111, 33, 27, 26, 192, 195, 87, 87, 87, 87, 33, 42, 27, 195, 194, 112, 112, 112, 112, 33, 25, 42, 194, 193, 113, 113, 113, 113, 33, 196, 197, 198, 199, 8, 8, 8, 8, 33, 58, 57, 197, 196, 1, 1, 1, 1, 33, 95, 58, 196, 199, 87, 87, 87, 87, 33, 96, 95, 199, 198, 75, 75, 75, 75, 33, 57, 96, 198, 197, 114, 114, 114, 114, 33, 200, 201, 202, 203, 8, 8, 8, 8, 33, 50, 16, 201, 200, 115, 115, 115, 115, 33, 51, 50, 200, 203, 74, 74, 74, 74, 33, 52, 51, 203, 202, 79, 79, 79, 79, 33, 16, 52, 202, 201, 76, 76, 76, 76, 33, 204, 205, 206, 207, 8, 8, 8, 8, 33, 49, 19, 205, 204, 116, 116, 116, 116, 33, 17, 49, 204, 207, 74, 74, 74, 74, 33, 18, 17, 207, 206, 117, 117, 117, 117, 33, 19, 18, 206, 205, 118, 118, 118, 118, 33, 210, 211, 209, 208, 119, 119, 119, 119, 33, 111, 39, 208, 209, 120, 120, 120, 120, 33, 39, 12, 210, 208, 121, 121, 121, 121, 33, 12, 13, 211, 210, 122, 122, 122, 122, 33, 213, 215, 214, 212, 41, 41, 41, 41, 33, 215, 219, 218, 214, 61, 61, 61, 61, 33, 219, 217, 216, 218, 2, 2, 2, 2, 33, 217, 213, 212, 216, 45, 45, 45, 45, 33, 212, 214, 218, 216, 123, 123, 123, 123, 33, 217, 219, 215, 213, 76, 76, 76, 76],
            uvs: [],
            metadata: {
                vertices: 220,
                uvs: 0,
                version: 3,
                faces: 287,
                generator: "io_three",
                type: "Geometry",
                normals: 124
            },
            normals: [-1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, -1, 5.1452e-8, 0, 1, -3.43013e-8, -4.08539e-15, -1, 4.28385e-8, 2.08616e-7, 131237e-11, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 224977e-11, 9.36617e-8, 0, 0, 0, 0, 1, 0, 1, 5.81265e-7, 3.61095e-7, 1, -138571e-10, 7.94709e-7, 1, 15126e-9, -3.99354e-12, 1, 153525e-11, 3.42708e-7, 1, 0, 0, 1, 151258e-10, 0, 1, 0, 0, 1, 0, 0, 1, -100839e-10, 0, 1, 5.81265e-7, -1.14542e-13, 1, 129739e-11, 38844e-10, 1, -100837e-10, 7.94824e-12, 1, -100839e-10, 0, 1, -100839e-10, 0, 1, -100839e-10, 0, 1, -149985e-11, 258734e-11, -1, 0, 0, .183427, -.983033, 1.93712e-7, .02093, -.999781, 6.59901e-8, -1, 0, 0, 1, 0, -368289e-11, .0149261, .999889, -4.97789e-8, -1, 0, 0, -.0341683, .999416, -3.60842e-8, 1, -517971e-11, 2.11784e-7, 1, -541817e-11, 2.26809e-7, 1, -363715e-11, 1.45354e-13, -1, 0, 0, 1, -363715e-11, 3.08445e-13, 1, -359618e-11, 105607e-11, 0, 0, 1, 0, 0, 1, 1, 5.81265e-7, -1.14541e-13, 1, 5.81265e-7, 0, 1, 0, -315288e-11, 1, 129739e-11, -403148e-11, 1, -756294e-11, 0, 1, 129739e-11, 0, 1, -756294e-11, 0, 1, -756294e-11, 0, 1, 0, 105607e-11, 1, 559191e-11, -7.38183e-13, 1, 559191e-11, 138404e-10, 1, 105307e-11, 0, 1, -100839e-10, 0, 1, 0, 105607e-11, 1, 0, 105607e-11, 0, 0, -1, 1, 5.81265e-7, 7.73205e-14, 1, -756286e-11, 5.96121e-12, 1, 0, 106417e-11, 1, -756295e-11, 0, 1, 0, 106417e-11, 1, -756285e-11, 6.07131e-12, 1, 129739e-11, 3.45161e-13, 1, 106484e-10, 105607e-11, 1, -10084e-9, -2.68277e-12, -2.98023e-7, -112489e-11, 1, -1, -9.37404e-7, -1.19948e-7, -.81983, .572606, -1.15165e-7, 0, -1, 0, 0, 0, 1, 0, 1, 0, 0, 1, -1.32009e-7, 5.83301e-7, 3.78384e-13, -1, 0, 0, 1, 0, -1, 2.64018e-7, 0, 1, 0, -7.29125e-8, 1, -3.85004e-14, 1.45825e-7, -1, 1.32009e-7, -7.29125e-8, 1, 0, 5.833e-7, 0, -1, 1.45825e-7, -1, 0, 0, -1, 0, 0, 1, -6.60046e-8, -7.29124e-8, 1, -6.60045e-8, 0, -1, 1.32009e-7, -2.9165e-7, 0, 1, -7.29126e-8, 1, 0, 1.47806e-15, -4.05434e-8, -1, 7.29126e-8, -1, 6.60045e-8, -8.86838e-15, 8.10868e-8, 1, -7.29126e-8, 1, -6.60045e-8, 5.83301e-7, 0, -1, 1.45825e-7, -1, 0, -5.83301e-7, 4.05434e-8, 1, -7.29126e-8, 1, -6.60045e-8, 0, 1, -6.60045e-8, 2.9165e-7, 0, -1, -7.29126e-8, 1, -3.85005e-14, 2.9165e-7, 0, -1, -3.85005e-14, -1, 1.32009e-7, -2.9165e-7, 0, 1, 2.95613e-15, -4.05434e-8, -1, 0, -1, 2.64018e-7, -5.91226e-15, 8.10869e-8, 1, -1.45825e-7, 1, -1.32009e-7, 5.83301e-7, 3.78385e-13, -1, -5.83301e-7, 4.05434e-8, 1, -1.45825e-7, 1, 0, 0, 1, -1.32009e-7, 2.9165e-7, 0, -1, 2.9165e-7, 0, -1, -2.9165e-7, 0, 1, 3.85005e-14, 1, -1.32009e-7, 2.15721e-14, 1, -5.28274e-8, -3.07149e-7, .772051, .63556, .81983, .572607, 2.4802e-7, 1.72801e-7, .772052, -.63556, 0, -1, 9.92575e-8]
        },
        orchestrator: {
            id: "orchestrator",
            primaryColorFaces: [20, 21, 82, 83, 88, 89, 90, 91, 104, 105, 106, 107, 120, 121, 122, 123, 140, 141, 152, 153, 164, 165, 176, 177],
            imagePlanePosition: {
                y: 5.9
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .6,
            normals: [-1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, -1, 5.04539e-8, 0, 1, -5.04539e-8, 0, .457607, -.889154, 0, -1, 4.37114e-8, 0, .463944, -.885864, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, -5.21002e-8, 1, -5.76425e-8, 0, 1, -4.36359e-8, 1.79579e-7, 1, 0, 0, 0, 0, -1, 0, 0, 0, 1, -4.46798e-8, -4.36359e-8, 1, 0, 0, 1, -3.5778e-8, 7.39291e-9, 1, -4.18395e-8, -3.89172e-9, 1, -3.97442e-8, 0, 1, -3.93182e-8, 0, 1, -1.07167e-7, .892424, .451197, -3.37881e-8, 0, -1, 4.37114e-8, -.885863, .463947, 0, .892425, .451197, -6.3343e-8, 0, -1, 4.37114e-8, 0, -1, 4.37114e-8, -1, 0, 0, 0, -1, 4.37114e-8, 2.9853e-15, -1, 4.37114e-8, 2.33888e-15, -1, 4.37114e-8, -3.35514e-15, -1, 4.37114e-8, 0, -1, 4.37114e-8, 0, .499535, .866294, 0, .499535, .866294, -.885862, .463948, -100619e-11, .885865, .463944, 0, -.885864, .463944, -9.43161e-8, 0, -1, 4.37114e-8, 0, .457607, -.889154, -1, -231522e-11, 0, -1, 218643e-11, 388315e-11, 0, .463944, .885864, 0, -1, 4.37114e-8, 0, 1, 0, 0, -1, 4.37114e-8, -.885863, .463947, 0, -.885865, .463944, 0, .885865, .463944, 0, .892424, .451197, 0, 0, -1, 4.37114e-8, 0, .457607, -.889154, .892424, .451197, -3.37881e-8, 0, .463944, -.885865, .885865, .463944, 0, -.885865, .463944, 0, -.88586, .463952, -107327e-11, 0, .463944, -.885865, -1, -1.15761e-7, -8.91722e-7, 0, .463944, .885864, .885865, .463944, 0, -.885865, .463944, 0, 0, -4.83719e-7, -1, 0, 4.83719e-7, 1, 0, -1, 0, -.763942, -.645285, 0, 0, -.645285, -.763942, .763942, -.645285, 0, 0, -.645285, .763942, 0, 1, 0],
            metadata: {
                generator: "io_three",
                faces: 128,
                vertices: 120,
                type: "Geometry",
                normals: 74,
                uvs: 0,
                version: 3
            },
            faces: [33, 2, 0, 1, 3, 0, 0, 0, 0, 33, 3, 7, 6, 2, 1, 1, 1, 1, 33, 7, 5, 4, 6, 2, 2, 2, 2, 33, 0, 4, 5, 1, 3, 3, 3, 3, 33, 0, 2, 6, 4, 4, 4, 4, 4, 33, 5, 7, 3, 1, 5, 5, 5, 5, 33, 11, 10, 44, 43, 6, 6, 6, 6, 33, 14, 35, 55, 52, 7, 7, 7, 7, 33, 19, 18, 58, 62, 8, 8, 8, 8, 33, 22, 9, 37, 30, 9, 9, 9, 9, 33, 39, 25, 31, 34, 10, 10, 10, 10, 32, 36, 13, 18, 11, 11, 11, 32, 67, 29, 15, 12, 12, 12, 32, 36, 18, 64, 13, 13, 13, 32, 67, 15, 32, 14, 14, 14, 32, 36, 64, 67, 15, 15, 15, 32, 90, 88, 36, 16, 16, 16, 32, 9, 22, 90, 16, 16, 16, 32, 81, 16, 9, 12, 12, 12, 32, 11, 26, 82, 17, 17, 17, 32, 81, 9, 90, 18, 18, 18, 32, 20, 11, 82, 14, 14, 14, 32, 82, 81, 90, 19, 19, 19, 32, 90, 36, 67, 20, 20, 20, 32, 67, 32, 74, 14, 14, 14, 32, 74, 73, 20, 16, 16, 16, 32, 20, 82, 90, 21, 21, 21, 32, 90, 67, 74, 22, 22, 22, 32, 74, 20, 90, 23, 23, 23, 33, 13, 36, 25, 39, 24, 24, 24, 24, 33, 64, 18, 19, 65, 25, 25, 25, 25, 33, 10, 28, 47, 44, 26, 26, 26, 26, 33, 9, 8, 38, 37, 27, 27, 27, 27, 33, 12, 13, 39, 34, 28, 28, 28, 28, 32, 14, 27, 66, 16, 16, 16, 32, 66, 65, 19, 16, 16, 16, 32, 19, 12, 33, 29, 29, 29, 32, 33, 89, 91, 16, 16, 16, 32, 91, 23, 8, 16, 16, 16, 32, 8, 17, 80, 29, 29, 29, 32, 80, 83, 28, 30, 30, 30, 32, 28, 10, 21, 29, 29, 29, 32, 21, 72, 75, 16, 16, 16, 32, 75, 35, 14, 16, 16, 16, 32, 14, 66, 19, 31, 31, 31, 32, 19, 33, 91, 32, 32, 32, 32, 91, 8, 80, 26, 26, 26, 32, 80, 28, 21, 33, 33, 33, 32, 21, 75, 14, 16, 16, 16, 32, 14, 19, 91, 34, 34, 34, 32, 91, 80, 21, 35, 35, 35, 32, 91, 21, 14, 36, 36, 36, 33, 90, 22, 23, 91, 37, 37, 37, 37, 33, 11, 20, 54, 48, 11, 11, 11, 11, 33, 33, 12, 34, 31, 30, 30, 30, 30, 33, 13, 12, 60, 59, 38, 38, 38, 38, 33, 82, 26, 28, 83, 39, 39, 39, 39, 33, 23, 22, 30, 24, 40, 40, 40, 40, 33, 36, 33, 31, 25, 41, 41, 41, 41, 33, 30, 37, 38, 24, 10, 10, 10, 10, 33, 8, 23, 24, 38, 42, 42, 42, 42, 33, 74, 32, 35, 75, 43, 43, 43, 43, 33, 42, 43, 44, 47, 44, 44, 44, 44, 33, 41, 46, 45, 40, 45, 45, 45, 45, 33, 8, 9, 41, 40, 38, 38, 38, 38, 33, 16, 17, 45, 46, 8, 8, 8, 8, 33, 28, 26, 42, 47, 46, 46, 46, 46, 33, 17, 8, 40, 45, 47, 47, 47, 47, 33, 9, 16, 46, 41, 48, 48, 48, 48, 33, 26, 11, 43, 42, 48, 48, 48, 48, 33, 50, 51, 52, 55, 1, 1, 1, 1, 33, 48, 54, 53, 49, 1, 1, 1, 1, 33, 21, 10, 49, 53, 49, 49, 49, 49, 33, 32, 15, 51, 50, 11, 11, 11, 11, 33, 10, 11, 48, 49, 50, 50, 50, 50, 33, 35, 32, 50, 55, 51, 51, 51, 51, 33, 20, 21, 53, 54, 52, 52, 52, 52, 33, 15, 14, 52, 51, 53, 53, 53, 53, 33, 58, 59, 60, 62, 2, 2, 2, 2, 33, 56, 63, 61, 57, 2, 2, 2, 2, 33, 12, 19, 62, 60, 54, 54, 54, 54, 33, 15, 29, 63, 56, 9, 9, 9, 9, 33, 27, 14, 57, 61, 54, 54, 54, 54, 33, 18, 13, 59, 58, 9, 9, 9, 9, 33, 14, 15, 56, 57, 55, 55, 55, 55, 33, 29, 27, 61, 63, 46, 46, 46, 46, 33, 64, 65, 70, 69, 46, 46, 46, 46, 33, 29, 67, 66, 27, 56, 56, 56, 56, 33, 68, 69, 70, 71, 2, 2, 2, 2, 33, 67, 64, 69, 68, 9, 9, 9, 9, 33, 66, 67, 68, 71, 57, 57, 57, 57, 33, 65, 66, 71, 70, 29, 29, 29, 29, 33, 20, 73, 72, 21, 43, 43, 43, 43, 33, 74, 75, 76, 79, 58, 58, 58, 58, 33, 78, 79, 76, 77, 1, 1, 1, 1, 33, 73, 74, 79, 78, 11, 11, 11, 11, 33, 72, 73, 78, 77, 59, 59, 59, 59, 33, 75, 72, 77, 76, 49, 49, 49, 49, 33, 16, 81, 80, 17, 60, 60, 60, 60, 33, 82, 83, 84, 87, 61, 61, 61, 61, 33, 86, 87, 84, 85, 62, 62, 62, 62, 33, 81, 82, 87, 86, 48, 48, 48, 48, 33, 80, 81, 86, 85, 63, 63, 63, 63, 33, 83, 80, 85, 84, 36, 36, 36, 36, 33, 36, 88, 89, 33, 37, 37, 37, 37, 33, 89, 88, 94, 93, 64, 64, 64, 64, 33, 94, 95, 92, 93, 10, 10, 10, 10, 33, 90, 91, 92, 95, 65, 65, 65, 65, 33, 88, 90, 95, 94, 9, 9, 9, 9, 33, 91, 89, 93, 92, 49, 49, 49, 49, 33, 97, 99, 98, 96, 31, 31, 31, 31, 33, 99, 103, 102, 98, 66, 66, 66, 66, 33, 103, 101, 100, 102, 2, 2, 2, 2, 33, 101, 97, 96, 100, 67, 67, 67, 67, 33, 96, 98, 102, 100, 68, 68, 68, 68, 33, 101, 103, 99, 97, 48, 48, 48, 48, 33, 105, 107, 106, 104, 31, 31, 31, 31, 33, 107, 111, 110, 106, 1, 1, 1, 1, 33, 111, 109, 108, 110, 2, 2, 2, 2, 33, 109, 105, 104, 108, 10, 10, 10, 10, 33, 104, 106, 110, 108, 68, 68, 68, 68, 33, 109, 111, 107, 105, 48, 48, 48, 48, 33, 113, 115, 114, 112, 69, 69, 69, 69, 33, 115, 119, 118, 114, 70, 70, 70, 70, 33, 119, 117, 116, 118, 71, 71, 71, 71, 33, 117, 113, 112, 116, 72, 72, 72, 72, 33, 112, 114, 118, 116, 68, 68, 68, 68, 33, 117, 119, 115, 113, 73, 73, 73, 73],
            uvs: [],
            vertices: [-.590684, .335809, .590684, -.590684, .45903, .590684, -.590684, .335809, -.590684, -.590684, .45903, -.590684, .590684, .335809, .590684, .590684, .45903, .590684, .590684, .335809, -.590684, .590684, .45903, -.590684, -.900788, 3.92726e-8, .898453, -.765956, .257447, .75, -.900788, -3.92726e-8, -.898453, -.765956, .257447, -.765956, .896118, 3.92726e-8, .898453, .765956, .257447, .75, .896118, -3.92726e-8, -.898453, .765956, .257447, -.765956, -.765956, .257447, .6, -.90079, 2.03332e-8, .46517, .765956, .257447, .6, .896118, 2.03332e-8, .46517, -.6, .257447, -.765956, -.46517, -3.92726e-8, -.898453, -.6, .257447, .75, -.46517, 3.92726e-8, .898453, -.46517, 4.24834e-8, .971908, .6, .257447, 1.02809, -.765956, .257447, -.6, .896118, -2.03332e-8, -.46517, -.900788, -2.03332e-8, -.46517, .765956, .257447, -.6, -.6, .257447, .971908, .46517, 4.49393e-8, 1.02809, .6, .257447, -.765956, .46517, 3.92726e-8, .898453, .896118, 4.49393e-8, 1.02809, .46517, -3.92726e-8, -.898453, .6, .257447, .75, -.765956, .257447, .971908, -.900788, 4.24834e-8, .971908, .765956, .257447, 1.02809, -.999999, 3.92726e-8, .898453, -1, .257447, .75, -1, .257447, -.6, -1, .257447, -.765956, -.999999, -3.92726e-8, -.898453, -1, 2.03332e-8, .46517, -1, .257447, .6, -.999999, -2.03332e-8, -.46517, -.765956, .257447, -1, -.900788, -4.37114e-8, -1, .6, .257447, -1, .765956, .257447, -1, .896118, -4.37114e-8, -1, -.46517, -4.37114e-8, -1, -.6, .257447, -1, .46517, -4.37114e-8, -1, 1, .257447, -.765956, 1, -3.92726e-8, -.898453, 1, .257447, .6, 1, .257447, .75, 1, 3.92726e-8, .898453, 1, -2.03332e-8, -.46517, 1, 2.03332e-8, .46517, 1, .257447, -.6, .765956, .257447, .08298, .896118, 9.52078e-9, .21781, .896118, -9.52078e-9, -.21781, .765956, .257447, -.08298, 1, .257447, -.08298, 1, .257447, .08298, 1, 9.52078e-9, .21781, 1, -9.52078e-9, -.21781, -.21781, -3.92726e-8, -.898453, -.08298, .257447, -.765956, .08298, .257447, -.765956, .21781, -3.92726e-8, -.898453, .21781, -4.37114e-8, -1, -.21781, -4.37114e-8, -1, -.08298, .257447, -1, .08298, .257447, -1, -.900789, 9.52078e-9, .21781, -.765956, .257447, .08298, -.765956, .257447, -.08298, -.900789, -9.52078e-9, -.21781, -1, -9.52078e-9, -.21781, -1, 9.52078e-9, .21781, -1, .257447, .08298, -1, .257447, -.08298, .08298, .257447, .75, .21781, 3.92726e-8, .898453, -.08298, .257447, .75, -.21781, 3.92726e-8, .898453, -.21781, 4.37114e-8, 1, .21781, 4.37114e-8, 1, .08298, .257447, 1, -.08298, .257447, 1, -.590684, .574986, .590684, -.590684, .698208, .590684, -.590684, .574986, -.590684, -.590684, .698208, -.590684, .590684, .574986, .590684, .590684, .698208, .590684, .590684, .574986, -.590684, .590684, .698208, -.590684, -.590684, .814167, .590684, -.590684, .937388, .590684, -.590684, .814167, -.590684, -.590684, .937388, -.590684, .590684, .814167, .590684, .590684, .937388, .590684, .590684, .814167, -.590684, .590684, .937388, -.590684, -.590684, 1.05335, .590684, -.694766, 1.17657, .694766, -.590684, 1.05335, -.590684, -.694766, 1.17657, -.694767, .590684, 1.05335, .590684, .694766, 1.17657, .694766, .590684, 1.05335, -.590684, .694766, 1.17657, -.694767]
        },
        objectdb: {
            id: "objectdb",
            primaryColorFaces: [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231],
            imagePlanePosition: {
                y: 6.4
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .8,
            faces: [32, 1, 3, 2, 0, 0, 0, 32, 3, 5, 4, 1, 1, 1, 32, 5, 7, 6, 2, 2, 2, 32, 9, 11, 10, 3, 3, 3, 32, 11, 13, 12, 4, 4, 4, 32, 13, 15, 14, 5, 5, 5, 32, 17, 19, 18, 6, 6, 6, 32, 19, 21, 20, 7, 7, 7, 32, 21, 23, 22, 8, 8, 8, 32, 25, 27, 26, 9, 9, 9, 32, 27, 29, 28, 10, 10, 10, 32, 29, 31, 30, 11, 11, 11, 32, 14, 15, 1, 12, 12, 12, 32, 30, 31, 9, 13, 13, 13, 32, 23, 25, 24, 14, 14, 14, 32, 7, 17, 16, 15, 15, 15, 32, 25, 9, 31, 16, 16, 16, 32, 24, 8, 0, 17, 17, 17, 32, 33, 35, 34, 18, 18, 18, 32, 35, 37, 36, 19, 19, 19, 32, 37, 39, 38, 20, 20, 20, 32, 41, 43, 42, 21, 21, 21, 32, 43, 45, 44, 22, 22, 22, 32, 45, 47, 46, 23, 23, 23, 32, 49, 51, 50, 24, 24, 24, 32, 51, 53, 52, 25, 25, 25, 32, 53, 55, 54, 26, 26, 26, 32, 57, 59, 58, 27, 27, 27, 32, 59, 61, 60, 28, 28, 28, 32, 61, 63, 62, 29, 29, 29, 32, 46, 47, 33, 30, 30, 30, 32, 62, 63, 41, 31, 31, 31, 32, 55, 57, 56, 32, 32, 32, 32, 39, 49, 48, 33, 33, 33, 32, 57, 41, 63, 34, 34, 34, 32, 56, 40, 32, 35, 35, 35, 32, 65, 67, 66, 0, 0, 0, 32, 67, 69, 68, 36, 36, 36, 32, 69, 71, 70, 37, 37, 37, 32, 73, 75, 74, 3, 3, 3, 32, 75, 77, 76, 38, 38, 38, 32, 77, 79, 78, 39, 39, 39, 32, 81, 83, 82, 40, 40, 40, 32, 83, 85, 84, 41, 41, 41, 32, 85, 87, 86, 42, 42, 42, 32, 89, 91, 90, 43, 43, 43, 32, 91, 93, 92, 44, 44, 44, 32, 93, 95, 94, 45, 45, 45, 32, 78, 79, 65, 46, 46, 46, 32, 94, 95, 73, 13, 13, 13, 32, 87, 89, 88, 47, 47, 47, 32, 71, 81, 80, 15, 15, 15, 32, 89, 73, 95, 34, 34, 34, 32, 88, 72, 64, 48, 48, 48, 32, 97, 99, 98, 18, 18, 18, 32, 99, 101, 100, 19, 19, 19, 32, 101, 103, 102, 2, 2, 2, 32, 105, 107, 106, 49, 49, 49, 32, 107, 109, 108, 50, 50, 50, 32, 109, 111, 110, 23, 23, 23, 32, 113, 115, 114, 51, 51, 51, 32, 115, 117, 116, 52, 52, 52, 32, 117, 119, 118, 53, 53, 53, 32, 121, 123, 122, 27, 27, 27, 32, 123, 125, 124, 54, 54, 54, 32, 125, 127, 126, 55, 55, 55, 32, 110, 111, 97, 30, 30, 30, 32, 126, 127, 105, 56, 56, 56, 32, 119, 121, 120, 32, 32, 32, 32, 103, 113, 112, 57, 57, 57, 32, 121, 105, 127, 58, 58, 58, 32, 120, 104, 96, 59, 59, 59, 32, 129, 131, 130, 60, 60, 60, 32, 131, 133, 132, 61, 61, 61, 32, 133, 135, 134, 37, 37, 37, 32, 137, 139, 138, 3, 3, 3, 32, 139, 141, 140, 38, 38, 38, 32, 141, 143, 142, 62, 62, 62, 32, 145, 147, 146, 6, 6, 6, 32, 147, 149, 148, 63, 63, 63, 32, 149, 151, 150, 64, 64, 64, 32, 153, 155, 154, 65, 65, 65, 32, 155, 157, 156, 44, 44, 44, 32, 157, 159, 158, 45, 45, 45, 32, 142, 143, 129, 66, 66, 66, 32, 158, 159, 137, 13, 13, 13, 32, 151, 153, 152, 67, 67, 67, 32, 135, 145, 144, 15, 15, 15, 32, 153, 137, 159, 34, 34, 34, 32, 152, 136, 128, 68, 68, 68, 32, 0, 1, 2, 69, 69, 69, 32, 2, 3, 4, 70, 70, 70, 32, 4, 5, 6, 71, 71, 71, 32, 8, 9, 10, 3, 3, 3, 32, 10, 11, 12, 4, 4, 4, 32, 12, 13, 14, 72, 72, 72, 32, 16, 17, 18, 6, 6, 6, 32, 18, 19, 20, 7, 7, 7, 32, 20, 21, 22, 73, 73, 73, 32, 24, 25, 26, 74, 74, 74, 32, 26, 27, 28, 75, 75, 75, 32, 28, 29, 30, 76, 76, 76, 32, 0, 14, 1, 77, 77, 77, 32, 8, 30, 9, 13, 13, 13, 32, 22, 23, 24, 67, 67, 67, 32, 6, 7, 16, 78, 78, 78, 32, 5, 3, 1, 79, 79, 79, 32, 1, 15, 9, 80, 80, 80, 32, 13, 11, 9, 34, 34, 34, 32, 9, 25, 17, 81, 81, 81, 32, 29, 27, 25, 82, 82, 82, 32, 25, 23, 17, 83, 83, 83, 32, 21, 19, 17, 84, 84, 84, 32, 17, 1, 9, 85, 85, 85, 32, 5, 1, 7, 86, 86, 86, 32, 13, 9, 15, 87, 87, 87, 32, 29, 25, 31, 88, 88, 88, 32, 21, 17, 23, 89, 89, 89, 32, 1, 17, 7, 90, 90, 90, 32, 14, 0, 8, 91, 91, 91, 32, 2, 4, 6, 92, 92, 92, 32, 6, 16, 0, 93, 93, 93, 32, 18, 20, 22, 94, 94, 94, 32, 22, 24, 16, 95, 95, 95, 32, 26, 28, 30, 94, 94, 94, 32, 30, 8, 24, 92, 92, 92, 32, 10, 12, 14, 92, 92, 92, 32, 0, 2, 6, 92, 92, 92, 32, 16, 18, 22, 92, 92, 92, 32, 24, 26, 30, 92, 92, 92, 32, 8, 10, 14, 94, 94, 94, 32, 0, 16, 24, 96, 96, 96, 32, 32, 33, 34, 97, 97, 97, 32, 34, 35, 36, 98, 98, 98, 32, 36, 37, 38, 99, 99, 99, 32, 40, 41, 42, 21, 21, 21, 32, 42, 43, 44, 100, 100, 100, 32, 44, 45, 46, 23, 23, 23, 32, 48, 49, 50, 24, 24, 24, 32, 50, 51, 52, 101, 101, 101, 32, 52, 53, 54, 26, 26, 26, 32, 56, 57, 58, 102, 102, 102, 32, 58, 59, 60, 103, 103, 103, 32, 60, 61, 62, 104, 104, 104, 32, 32, 46, 33, 30, 30, 30, 32, 40, 62, 41, 31, 31, 31, 32, 54, 55, 56, 32, 32, 32, 32, 38, 39, 48, 105, 105, 105, 32, 37, 35, 33, 34, 34, 34, 32, 33, 47, 41, 106, 106, 106, 32, 45, 43, 41, 34, 34, 34, 32, 41, 57, 49, 107, 107, 107, 32, 61, 59, 57, 34, 34, 34, 32, 57, 55, 49, 108, 108, 108, 32, 53, 51, 49, 34, 34, 34, 32, 49, 33, 41, 109, 109, 109, 32, 37, 33, 39, 34, 34, 34, 32, 45, 41, 47, 110, 110, 110, 32, 61, 57, 63, 111, 111, 111, 32, 53, 49, 55, 112, 112, 112, 32, 33, 49, 39, 111, 111, 111, 32, 46, 32, 40, 113, 113, 113, 32, 34, 36, 38, 114, 114, 114, 32, 38, 48, 32, 115, 115, 115, 32, 50, 52, 54, 116, 116, 116, 32, 54, 56, 48, 117, 117, 117, 32, 58, 60, 62, 118, 118, 118, 32, 62, 40, 56, 119, 119, 119, 32, 42, 44, 46, 116, 116, 116, 32, 32, 34, 38, 120, 120, 120, 32, 48, 50, 54, 121, 121, 121, 32, 56, 58, 62, 122, 122, 122, 32, 40, 42, 46, 123, 123, 123, 32, 32, 48, 56, 124, 124, 124, 32, 64, 65, 66, 125, 125, 125, 32, 66, 67, 68, 126, 126, 126, 32, 68, 69, 70, 127, 127, 127, 32, 72, 73, 74, 3, 3, 3, 32, 74, 75, 76, 38, 38, 38, 32, 76, 77, 78, 39, 39, 39, 32, 80, 81, 82, 6, 6, 6, 32, 82, 83, 84, 41, 41, 41, 32, 84, 85, 86, 42, 42, 42, 32, 88, 89, 90, 128, 128, 128, 32, 90, 91, 92, 129, 129, 129, 32, 92, 93, 94, 130, 130, 130, 32, 64, 78, 65, 131, 131, 131, 32, 72, 94, 73, 13, 13, 13, 32, 86, 87, 88, 132, 132, 132, 32, 70, 71, 80, 78, 78, 78, 32, 69, 67, 65, 34, 34, 34, 32, 65, 79, 73, 133, 133, 133, 32, 77, 75, 73, 34, 34, 34, 32, 73, 89, 81, 134, 134, 134, 32, 93, 91, 89, 34, 34, 34, 32, 89, 87, 81, 135, 135, 135, 32, 85, 83, 81, 84, 84, 84, 32, 81, 65, 73, 136, 136, 136, 32, 69, 65, 71, 84, 84, 84, 32, 77, 73, 79, 110, 110, 110, 32, 93, 89, 95, 111, 111, 111, 32, 85, 81, 87, 112, 112, 112, 32, 65, 81, 71, 111, 111, 111, 32, 78, 64, 72, 137, 137, 137, 32, 66, 68, 70, 138, 138, 138, 32, 70, 80, 64, 139, 139, 139, 32, 82, 84, 86, 92, 92, 92, 32, 86, 88, 80, 140, 140, 140, 32, 90, 92, 94, 94, 94, 94, 32, 94, 72, 88, 92, 92, 92, 32, 74, 76, 78, 92, 92, 92, 32, 64, 66, 70, 141, 141, 141, 32, 80, 82, 86, 142, 142, 142, 32, 88, 90, 94, 92, 92, 92, 32, 72, 74, 78, 92, 92, 92, 32, 64, 80, 88, 143, 143, 143, 32, 96, 97, 98, 97, 97, 97, 32, 98, 99, 100, 144, 144, 144, 32, 100, 101, 102, 71, 71, 71, 32, 104, 105, 106, 49, 49, 49, 32, 106, 107, 108, 100, 100, 100, 32, 108, 109, 110, 23, 23, 23, 32, 112, 113, 114, 51, 51, 51, 32, 114, 115, 116, 101, 101, 101, 32, 116, 117, 118, 53, 53, 53, 32, 120, 121, 122, 102, 102, 102, 32, 122, 123, 124, 103, 103, 103, 32, 124, 125, 126, 145, 145, 145, 32, 96, 110, 97, 146, 146, 146, 32, 104, 126, 105, 56, 56, 56, 32, 118, 119, 120, 147, 147, 147, 32, 102, 103, 112, 148, 148, 148, 32, 101, 99, 97, 149, 149, 149, 32, 97, 111, 105, 150, 150, 150, 32, 109, 107, 105, 151, 151, 151, 32, 105, 121, 113, 152, 152, 152, 32, 125, 123, 121, 153, 153, 153, 32, 121, 119, 113, 154, 154, 154, 32, 117, 115, 113, 155, 155, 155, 32, 113, 97, 105, 156, 156, 156, 32, 101, 97, 103, 157, 157, 157, 32, 109, 105, 111, 158, 158, 158, 32, 125, 121, 127, 159, 159, 159, 32, 117, 113, 119, 160, 160, 160, 32, 97, 113, 103, 161, 161, 161, 32, 110, 96, 104, 162, 162, 162, 32, 98, 100, 102, 92, 92, 92, 32, 102, 112, 96, 93, 93, 93, 32, 114, 116, 118, 92, 92, 92, 32, 118, 120, 112, 163, 163, 163, 32, 122, 124, 126, 92, 92, 92, 32, 126, 104, 120, 92, 92, 92, 32, 106, 108, 110, 92, 92, 92, 32, 96, 98, 102, 92, 92, 92, 32, 112, 114, 118, 92, 92, 92, 32, 120, 122, 126, 92, 92, 92, 32, 104, 106, 110, 92, 92, 92, 32, 96, 112, 120, 164, 164, 164, 32, 128, 129, 130, 165, 165, 165, 32, 130, 131, 132, 70, 70, 70, 32, 132, 133, 134, 166, 166, 166, 32, 136, 137, 138, 3, 3, 3, 32, 138, 139, 140, 38, 38, 38, 32, 140, 141, 142, 39, 39, 39, 32, 144, 145, 146, 6, 6, 6, 32, 146, 147, 148, 63, 63, 63, 32, 148, 149, 150, 42, 42, 42, 32, 152, 153, 154, 167, 167, 167, 32, 154, 155, 156, 129, 129, 129, 32, 156, 157, 158, 130, 130, 130, 32, 128, 142, 129, 77, 77, 77, 32, 136, 158, 137, 13, 13, 13, 32, 150, 151, 152, 67, 67, 67, 32, 134, 135, 144, 78, 78, 78, 32, 133, 131, 129, 34, 34, 34, 32, 129, 143, 137, 168, 168, 168, 32, 141, 139, 137, 34, 34, 34, 32, 137, 153, 145, 169, 169, 169, 32, 157, 155, 153, 34, 34, 34, 32, 153, 151, 145, 170, 170, 170, 32, 149, 147, 145, 84, 84, 84, 32, 145, 129, 137, 134, 134, 134, 32, 133, 129, 135, 34, 34, 34, 32, 141, 137, 143, 110, 110, 110, 32, 157, 153, 159, 111, 111, 111, 32, 149, 145, 151, 112, 112, 112, 32, 129, 145, 135, 111, 111, 111, 32, 142, 128, 136, 91, 91, 91, 32, 130, 132, 134, 92, 92, 92, 32, 134, 144, 128, 93, 93, 93, 32, 146, 148, 150, 92, 92, 92, 32, 150, 152, 144, 95, 95, 95, 32, 154, 156, 158, 94, 94, 94, 32, 158, 136, 152, 92, 92, 92, 32, 138, 140, 142, 92, 92, 92, 32, 128, 130, 134, 92, 92, 92, 32, 144, 146, 150, 94, 94, 94, 32, 152, 154, 158, 92, 92, 92, 32, 136, 138, 142, 92, 92, 92, 32, 128, 144, 152, 171, 171, 171],
            vertices: [-2.48404, 0, -1.67794, -2.48404, .836618, -1.67794, -2.34104, 0, -2.04097, -2.34104, .836618, -2.04097, -2.07, 0, -2.32165, -2.07, .836618, -2.32165, -1.71218, 0, -2.47723, -1.71218, .836618, -2.47723, -1.67794, 2.38419e-7, 2.48404, -1.67794, .836618, 2.48404, -2.04097, 2.38419e-7, 2.34104, -2.04097, .836618, 2.34104, -2.32165, 2.38419e-7, 2.07, -2.32165, .836618, 2.07, -2.47723, 2.38419e-7, 1.71218, -2.47723, .836618, 1.71218, 1.67794, 0, -2.48404, 1.67794, .836618, -2.48404, 2.04097, 0, -2.34104, 2.04097, .836618, -2.34104, 2.32165, 0, -2.07, 2.32165, .836618, -2.07, 2.47723, 0, -1.71218, 2.47723, .836618, -1.71218, 2.48404, 2.38419e-7, 1.67794, 2.48404, .836618, 1.67794, 2.34104, 2.38419e-7, 2.04097, 2.34104, .836618, 2.04097, 2.07, 2.38419e-7, 2.32165, 2.07, .836618, 2.32165, 1.71218, 2.38419e-7, 2.47723, 1.71218, .836618, 2.47723, -2.23564, .837191, -1.51015, -2.23564, 1.16989, -1.51015, -2.10694, .837191, -1.83688, -2.10694, 1.16989, -1.83688, -1.863, .837191, -2.08948, -1.863, 1.16989, -2.08948, -1.54096, .837191, -2.22951, -1.54096, 1.16989, -2.22951, -1.51015, .837191, 2.23564, -1.51015, 1.16989, 2.23564, -1.83688, .837191, 2.10694, -1.83688, 1.16989, 2.10694, -2.08948, .837191, 1.863, -2.08948, 1.16989, 1.863, -2.22951, .837191, 1.54096, -2.22951, 1.16989, 1.54096, 1.51015, .837191, -2.23564, 1.51015, 1.16989, -2.23564, 1.83688, .837191, -2.10693, 1.83688, 1.16989, -2.10693, 2.08948, .837191, -1.863, 2.08948, 1.16989, -1.863, 2.22951, .837191, -1.54096, 2.22951, 1.16989, -1.54096, 2.23564, .837191, 1.51015, 2.23564, 1.16989, 1.51015, 2.10694, .837191, 1.83688, 2.10694, 1.16989, 1.83688, 1.863, .837191, 2.08948, 1.863, 1.16989, 2.08948, 1.54096, .837191, 2.22951, 1.54096, 1.16989, 2.22951, -2.48404, 1.17019, -1.67794, -2.48404, 2.00681, -1.67794, -2.34104, 1.17019, -2.04097, -2.34104, 2.00681, -2.04097, -2.07, 1.17019, -2.32165, -2.07, 2.00681, -2.32165, -1.71218, 1.17019, -2.47723, -1.71218, 2.00681, -2.47723, -1.67794, 1.17019, 2.48404, -1.67794, 2.00681, 2.48404, -2.04097, 1.17019, 2.34104, -2.04097, 2.00681, 2.34104, -2.32165, 1.17019, 2.07, -2.32165, 2.00681, 2.07, -2.47723, 1.17019, 1.71218, -2.47723, 2.00681, 1.71218, 1.67794, 1.17019, -2.48404, 1.67794, 2.00681, -2.48404, 2.04097, 1.17019, -2.34104, 2.04097, 2.00681, -2.34104, 2.32165, 1.17019, -2.07, 2.32165, 2.00681, -2.07, 2.47723, 1.17019, -1.71218, 2.47723, 2.00681, -1.71218, 2.48404, 1.17019, 1.67794, 2.48404, 2.00681, 1.67794, 2.34104, 1.17019, 2.04097, 2.34104, 2.00681, 2.04097, 2.07, 1.17019, 2.32165, 2.07, 2.00681, 2.32165, 1.71218, 1.17019, 2.47723, 1.71218, 2.00681, 2.47723, -2.23564, 2.00715, -1.51015, -2.23564, 2.33985, -1.51015, -2.10694, 2.00715, -1.83688, -2.10694, 2.33985, -1.83688, -1.863, 2.00715, -2.08948, -1.863, 2.33985, -2.08948, -1.54096, 2.00715, -2.22951, -1.54096, 2.33985, -2.22951, -1.51015, 2.00715, 2.23564, -1.51015, 2.33985, 2.23564, -1.83688, 2.00715, 2.10694, -1.83688, 2.33985, 2.10694, -2.08948, 2.00715, 1.863, -2.08948, 2.33985, 1.863, -2.22951, 2.00715, 1.54096, -2.22951, 2.33985, 1.54096, 1.51015, 2.00715, -2.23564, 1.51015, 2.33985, -2.23564, 1.83688, 2.00715, -2.10693, 1.83688, 2.33985, -2.10693, 2.08948, 2.00715, -1.863, 2.08948, 2.33985, -1.863, 2.22951, 2.00715, -1.54096, 2.22951, 2.33985, -1.54096, 2.23564, 2.00715, 1.51015, 2.23564, 2.33985, 1.51015, 2.10694, 2.00715, 1.83688, 2.10694, 2.33985, 1.83688, 1.863, 2.00715, 2.08948, 1.863, 2.33985, 2.08948, 1.54096, 2.00715, 2.22951, 1.54096, 2.33985, 2.22951, -2.48404, 2.33969, -1.67794, -2.48404, 3.17631, -1.67794, -2.34104, 2.33969, -2.04097, -2.34104, 3.17631, -2.04097, -2.07, 2.33969, -2.32165, -2.07, 3.17631, -2.32165, -1.71218, 2.33969, -2.47723, -1.71218, 3.17631, -2.47723, -1.67794, 2.33969, 2.48404, -1.67794, 3.17631, 2.48404, -2.04097, 2.33969, 2.34104, -2.04097, 3.17631, 2.34104, -2.32165, 2.33969, 2.07, -2.32165, 3.17631, 2.07, -2.47723, 2.33969, 1.71218, -2.47723, 3.17631, 1.71218, 1.67794, 2.33969, -2.48404, 1.67794, 3.17631, -2.48404, 2.04097, 2.33969, -2.34104, 2.04097, 3.17631, -2.34104, 2.32165, 2.33969, -2.07, 2.32165, 3.17631, -2.07, 2.47723, 2.33969, -1.71218, 2.47723, 3.17631, -1.71218, 2.48404, 2.33969, 1.67794, 2.48404, 3.17631, 1.67794, 2.34104, 2.33969, 2.04097, 2.34104, 3.17631, 2.04097, 2.07, 2.33969, 2.32165, 2.07, 3.17631, 2.32165, 1.71218, 2.33969, 2.47723, 1.71218, 3.17631, 2.47723],
            uvs: [],
            normals: [-.930418, 0, -.366501, -.71934, 0, -.694658, -.398749, 0, -.91706, -.366501, 0, .930418, -.694658, 0, .71934, -.91706, 5.68176e-8, .398749, .366502, 0, -.930417, .694658, 0, -.71934, .91706, -5.68176e-8, -.398749, .930417, 0, .366502, .71934, 0, .694658, .398749, 0, .91706, -.999998, 2.86217e-10, .00200869, .00200869, 0, .999998, .999998, -2.86217e-10, -.00200869, -.00200869, 0, -.999998, -1.50084e-10, 1, -7.47172e-8, 1.06938e-8, -1, 5.52136e-8, -.930417, 0, -.366502, -.71934, 0, -.694658, -.398749, 0, -.91706, -.366501, 0, .930418, -.694659, 0, .71934, -.91706, 0, .398749, .366502, 0, -.930417, .694659, 0, -.71934, .91706, 0, -.398749, .930417, 0, .366502, .71934, 0, .694658, .398749, 0, .91706, -.999998, 0, .0020087, .0020087, 0, .999998, .999998, 0, -.0020087, -.0020087, 0, -.999998, 0, 1, 0, -6.4256e-9, -1, 4.89819e-8, -.71934, 0, -.694658, -.398749, 0, -.91706, -.694658, 0, .71934, -.91706, 0, .398749, .366502, 0, -.930417, .694658, 0, -.71934, .91706, 0, -.398749, .930417, 0, .366502, .71934, 0, .694658, .398749, 0, .91706, -.999998, 0, .00200869, .999998, 0, -.00200869, 5.34692e-9, -1, 2.76068e-8, -.366501, 0, .930418, -.694658, 0, .71934, .366502, 0, -.930417, .694659, 0, -.71934, .91706, 0, -.398749, .71934, 0, .694658, .398749, 0, .91706, .0020087, 0, .999998, -.0020087, 0, -.999998, -6.67045e-10, 1, -3.32076e-7, 1.1882e-8, -1, 6.13485e-8, -.930418, 0, -.366501, -.71934, 0, -.694658, -.91706, 5.68175e-8, .398749, .694658, 0, -.71934, .91706, -5.68176e-8, -.398749, .930417, 0, .366502, -.999998, 2.86217e-10, .00200869, .999998, -2.86217e-10, -.00200869, 1.06938e-8, -1, 5.52136e-8, -.930418, -5.22226e-8, -.366501, -.71934, 0, -.694658, -.398749, 0, -.91706, -.91706, 0, .398749, .91706, 0, -.398749, .930417, 5.22227e-8, .366502, .71934, 0, .694658, .398749, 0, .91706, -.999998, 6.5673e-10, .00200869, -.00200869, 0, -.999998, 3.71409e-7, 1, 1.46302e-7, -4.06939e-8, 1, -3.5082e-8, 5.78304e-9, 1, -4.40837e-8, 3.71409e-7, 1, 1.46302e-7, -4.06939e-8, 1, -3.5082e-8, 0, 1, 0, 5.78303e-9, 1, -4.40837e-8, -5.58949e-8, 1, -1.28549e-7, 1.48748e-7, 1, -2.31255e-7, -5.58948e-8, 1, -1.28549e-7, 1.48749e-7, 1, -2.31255e-7, -1.50084e-10, 1, -7.47172e-8, -6.80464e-8, -1, 7.04641e-8, 0, -1, 0, 0, -1, 0, 0, -1, 0, -6.80465e-8, -1, 7.04641e-8, 1.06938e-8, -1, 5.52136e-8, -.930417, 0, -.366502, -.71934, 0, -.694658, -.398749, 0, -.91706, -.694659, 0, .71934, .694658, 0, -.71934, .930417, 0, .366502, .71934, 0, .694658, .398749, 0, .91706, -.0020087, 0, -.999998, 3.78036e-8, 1, -3.91467e-8, -5.94102e-9, 1, -3.06742e-8, 3.78036e-8, 1, -3.91467e-8, -5.94102e-9, 1, -3.06742e-8, 0, 1, 0, 0, 1, 0, 0, 1, 0, 4.52155e-8, -1, 3.898e-8, 1.76861e-7, -1, 4.06752e-7, 1.66761e-10, -1, 8.30191e-8, 4.06753e-7, -1, -1.76861e-7, 4.52155e-8, -1, 3.898e-8, 1.7686e-7, -1, 4.06751e-7, 1.66761e-10, -1, 8.30191e-8, -1.44913e-7, -1, -5.70827e-8, -5.7083e-8, -1, 1.44913e-7, -1.44913e-7, -1, -5.70829e-8, -5.70827e-8, -1, 1.44913e-7, -6.4256e-9, -1, 4.89819e-8, -.930418, 0, -.366501, -.71934, 0, -.694658, -.398749, 0, -.91706, .930417, 0, .366502, .71934, 0, .694658, .398749, 0, .91706, -.999998, 0, .00200869, .999998, 0, -.00200869, 6.80464e-8, 1, -7.04641e-8, -1.06938e-8, 1, -5.52136e-8, 6.80465e-8, 1, -7.04641e-8, -1.06938e-8, 1, -5.52136e-8, -3.40232e-8, -1, 3.52321e-8, -5.743e-7, -1, -5.54595e-7, 3.00168e-10, -1, 1.49434e-7, 1.15411e-7, -1, 3.49319e-8, -2.60843e-7, -1, -1.02749e-7, 4.51847e-7, -1, -3.13457e-7, -1.6913e-8, -1, 6.05606e-8, -.71934, 0, -.694658, .398749, 0, .91706, -.999998, 0, .0020087, .999998, 0, -.0020087, -.0020087, 0, -.999998, 165071e-11, 1, 6.50231e-7, -3.32076e-7, 1, 6.67044e-10, 6.5023e-7, 1, -165071e-11, 4.94665e-8, 1, -7.32305e-8, 165071e-11, 1, 6.50234e-7, -3.32076e-7, 1, 6.67044e-10, 6.50235e-7, 1, -165071e-11, 4.94665e-8, 1, -7.32305e-8, -2.48422e-7, 1, -5.7133e-7, -5.7133e-7, 1, 2.48422e-7, -2.48421e-7, 1, -5.7133e-7, -5.7133e-7, 1, 2.48422e-7, -6.67044e-10, 1, -3.32076e-7, -7.56071e-8, -1, 7.82935e-8, -7.56072e-8, -1, 7.82935e-8, 1.1882e-8, -1, 6.13485e-8, -.930418, -5.22226e-8, -.366501, -.398749, 0, -.91706, .930417, 5.22226e-8, .366502, 6.80464e-8, 1, -7.04641e-8, -1.06938e-8, 1, -5.52136e-8, 6.80465e-8, 1, -7.04641e-8, 1.06938e-8, -1, 5.52136e-8],
            metadata: {
                faces: 300,
                generator: "io_three",
                type: "Geometry",
                version: 3,
                vertices: 160,
                uvs: 0,
                normals: 172
            }
        },
        scheduler: {
            id: "scheduler",
            primaryColorFaces: [10, 11, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 178, 179, 192, 193],
            imagePlanePosition: {
                y: 1.7
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .6,
            vertices: [-.900788, 3.92726e-8, .898453, -.765956, .257447, .75, -.900788, -3.92726e-8, -.898453, -.765956, .257447, -.765956, .896118, 3.92726e-8, .898453, .765956, .257447, .75, .896118, -3.92726e-8, -.898453, .765956, .257447, -.765956, -.765956, .257447, .6, -.90079, 2.03332e-8, .46517, .765956, .257447, .6, .896118, 2.03332e-8, .46517, -.6, .257447, -.765956, -.46517, -3.92726e-8, -.898453, -.6, .257447, .75, -.46517, 3.92726e-8, .898453, -.397284, .0169008, .679286, .503014, .200416, .746751, -.765956, .257447, -.6, .896118, -2.03332e-8, -.46517, -.900788, -2.03332e-8, -.46517, .765956, .257447, -.6, -.501724, .19906, .695688, .398247, .0152728, .731578, .6, .257447, -.765956, .46517, 3.92726e-8, .898453, .748837, .00894927, .782116, .46517, -3.92726e-8, -.898453, .6, .257447, .75, -.637195, .201845, .716732, -.752198, .00973154, .733454, .638302, .2029, .766607, -.757477, .0092823, .72998, -.713094, .201568, .600264, -.693938, .199037, -.500615, -.714943, .201812, -.635908, -.757318, .00930255, -.752264, -.705283, .0159779, .377186, -.694104, .199059, .478235, -.705134, .0159968, -.399613, -.637309, .202404, -.742144, -.752184, .00927381, -.758538, .502949, .199658, -.720822, .638161, .202294, -.74129, .748798, .00945185, -.757156, -.397101, .0160642, -.705822, -.501806, .199766, -.721662, .3985, .0161632, -.705053, .741907, .202281, -.637706, .758074, .00942076, -.750453, .721536, .19965, .505685, .740094, .202047, .62775, .758233, .00940028, .753851, .705519, .0162094, -.397859, .705667, .0161902, .401113, .721374, .199629, -.502382, .765956, .257447, .08298, .896118, 9.52078e-9, .21781, .896118, -9.52078e-9, -.21781, .765956, .257447, -.08298, .676659, .193853, -.0562719, .676694, .193857, .0558434, .682983, .0191204, .14831, .682896, .0191316, -.148714, -.21781, -3.92726e-8, -.898453, -.08298, .257447, -.765956, .08298, .257447, -.765956, .21781, -3.92726e-8, -.898453, .149742, .0190473, -.682663, -.147647, .0189894, -.683112, -.0550214, .193981, -.676748, .0572416, .193957, -.676567, -.900789, 9.52078e-9, .21781, -.765956, .257447, .08298, -.765956, .257447, -.08298, -.900789, -9.52078e-9, -.21781, -.682764, .0188664, -.149161, -.682851, .0188554, .148759, -.647678, .192925, .0552377, -.647642, .19292, -.0556756, .08298, .257447, .75, .21781, 3.92726e-8, .898453, -.08298, .257447, .75, -.21781, 3.92726e-8, .898453, -.147735, .0189386, .683086, .149827, .0189962, .682638, .057275, .194012, .676557, -.0550577, .194035, .676738, -.799547, .32865, -.799197, .799547, .32865, -.799197, .799547, .32865, .78324, -.799547, .32865, .78324, .66573, .29388, -.666774, -.66573, .29388, -.666774, -.66573, .29388, .650818, .66573, .29388, .650818, -.66573, .32865, .650818, -.66573, .32865, -.666774, .66573, .32865, .650818, .66573, .32865, -.666774],
            uvs: [],
            metadata: {
                type: "Geometry",
                uvs: 0,
                vertices: 100,
                version: 3,
                normals: 98,
                generator: "io_three",
                faces: 119
            },
            normals: [-.817408, .00333035, .57605, .00363173, .997252, -.0739999, -.414696, -.514884, .750281, .0537106, -.538906, .840652, -.143392, -.00130668, .989665, 0, 0, -1, -.0657512, .24809, .966503, .892424, .451197, -3.37881e-8, -.0720921, .997391, -.0037086, .57896, -.0222832, .815051, -.358454, .143904, .92239, 0, 0, 0, 0, -1, 4.37114e-8, 0, -1, 4.37114e-8, -1, 0, 0, 0, -1, 4.37114e-8, 0, -1, 4.37114e-8, 2.9853e-15, -1, 4.37114e-8, 2.33888e-15, -1, 4.37114e-8, -3.35514e-15, -1, 4.37114e-8, 0, -1, 4.37114e-8, 0, .499535, .866294, .0574943, -.428975, -.901485, .002683, .996529, .0831999, .854467, -.0346528, -.518349, -.885862, .463948, -100619e-11, -.759116, -.527676, -.381183, .67456, -.522282, -.521718, .151629, -.00343319, .988431, -.00448218, .997767, .0666446, 0, .457607, -.889154, -.980194, .133858, .145948, -.980208, .133957, -.145767, -.850284, .013392, -.526154, .468467, -.532675, .704838, .381773, -.531424, -.7562, -.0715262, .997432, .00374688, -.725628, -.686659, -.0443217, -.722039, -.690453, .0439841, -.14785, -.00217635, -.989007, .147592, -.00252832, -.989045, -.00365719, .997281, -.073604, -.0570476, -.440223, -.896074, .508798, .00250181, -.860882, .745521, -.516173, .42162, -.741151, -.515997, .429467, -.517191, .00541179, -.855853, .988959, -.00251288, -.148167, .98896, -.00241818, .148163, .0754499, .997143, .00356787, .900155, -.431751, .0575465, .0754267, .997145, -.00356947, .893406, -.445617, -.0570149, .862172, .00426646, .506598, -.429533, -.51435, -.742257, .331542, -.35503, -.87409, .892424, .451197, -3.37881e-8, .999358, .0358191, -297584e-9, .580156, -.814505, -601011e-10, .329283, -.35599, .874554, .0893591, .996, 461173e-11, -.876656, -.357855, -.321582, .0015347, .035585, -.999366, 309255e-9, -.815054, -.579385, .874321, -.352877, -.333228, -247648e-10, .996131, -.0878839, -.88586, .463952, -107327e-11, -.300641, -.350843, .886862, -.980216, .19793, -29184e-8, -.478849, -.877898, -480033e-10, -.302744, -.349866, -.886532, -.0862034, .996278, 472638e-11, -.877649, -.341148, .336675, .00153004, .035475, .999369, .875103, -.335449, .34881, 361749e-9, -.75644, .654063, -247361e-10, .996152, .0876397, 0, 1, -4.11062e-8, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, -.423016, .906122, 0, -.423016, .906122, 0, -.423016, .906122, 1, 0, 0, -.904411, -.426661, 1.60708e-8, -.904412, -.426661, 0, -1, 0, 0, -.904412, -.426661, 2.45938e-8, -.904411, -.426661, 1.42015e-8, 0, 1, 0, .904412, -.426661, 0, .904411, -.426661, 1.60708e-8, .904411, -.426661, 1.86177e-8, .904411, -.426661, 1.90631e-8, 0, -.423015, -.906123, 0, -.423015, -.906123, 0, 1, -4.52376e-8],
            faces: [33, 3, 2, 36, 35, 0, 0, 0, 0, 33, 6, 27, 47, 44, 1, 1, 1, 1, 33, 11, 10, 50, 54, 2, 2, 2, 2, 33, 14, 1, 29, 22, 3, 3, 3, 3, 33, 31, 17, 23, 26, 4, 4, 4, 4, 33, 96, 98, 95, 94, 5, 5, 5, 5, 33, 5, 28, 17, 31, 6, 6, 6, 6, 33, 56, 10, 11, 57, 7, 7, 7, 7, 33, 2, 20, 39, 36, 8, 8, 8, 8, 33, 1, 0, 30, 29, 9, 9, 9, 9, 33, 4, 5, 31, 26, 10, 10, 10, 10, 32, 6, 19, 58, 11, 11, 11, 32, 58, 57, 11, 11, 11, 11, 32, 11, 4, 25, 12, 12, 12, 32, 25, 81, 83, 11, 11, 11, 32, 83, 15, 0, 11, 11, 11, 32, 0, 9, 72, 12, 12, 12, 32, 72, 75, 20, 13, 13, 13, 32, 20, 2, 13, 12, 12, 12, 32, 13, 64, 67, 11, 11, 11, 32, 67, 27, 6, 11, 11, 11, 32, 6, 58, 11, 14, 14, 14, 32, 11, 25, 83, 15, 15, 15, 32, 83, 0, 72, 16, 16, 16, 32, 72, 20, 13, 17, 17, 17, 32, 13, 67, 6, 11, 11, 11, 32, 6, 11, 83, 18, 18, 18, 32, 83, 72, 13, 19, 19, 19, 32, 83, 13, 6, 20, 20, 20, 33, 82, 14, 15, 83, 21, 21, 21, 21, 33, 3, 12, 46, 40, 22, 22, 22, 22, 33, 25, 4, 26, 23, 23, 23, 23, 23, 33, 5, 4, 52, 51, 24, 24, 24, 24, 33, 74, 18, 20, 75, 25, 25, 25, 25, 33, 15, 14, 22, 16, 26, 26, 26, 26, 33, 28, 25, 23, 17, 27, 27, 27, 27, 33, 22, 29, 30, 16, 28, 28, 28, 28, 33, 0, 15, 16, 30, 29, 29, 29, 29, 33, 66, 24, 27, 67, 30, 30, 30, 30, 33, 34, 35, 36, 39, 31, 31, 31, 31, 33, 33, 38, 37, 32, 32, 32, 32, 32, 33, 0, 1, 33, 32, 33, 33, 33, 33, 33, 8, 9, 37, 38, 34, 34, 34, 34, 33, 20, 18, 34, 39, 35, 35, 35, 35, 33, 9, 0, 32, 37, 36, 36, 36, 36, 33, 1, 8, 38, 33, 37, 37, 37, 37, 33, 18, 3, 35, 34, 38, 38, 38, 38, 33, 42, 43, 44, 47, 39, 39, 39, 39, 33, 40, 46, 45, 41, 40, 40, 40, 40, 33, 13, 2, 41, 45, 41, 41, 41, 41, 33, 24, 7, 43, 42, 42, 42, 42, 42, 33, 2, 3, 40, 41, 43, 43, 43, 43, 33, 27, 24, 42, 47, 44, 44, 44, 44, 33, 12, 13, 45, 46, 45, 45, 45, 45, 33, 7, 6, 44, 43, 46, 46, 46, 46, 33, 50, 51, 52, 54, 47, 47, 47, 47, 33, 48, 55, 53, 49, 48, 48, 48, 48, 33, 4, 11, 54, 52, 49, 49, 49, 49, 33, 7, 21, 55, 48, 50, 50, 50, 50, 33, 19, 6, 49, 53, 51, 51, 51, 51, 33, 10, 5, 51, 50, 52, 52, 52, 52, 33, 6, 7, 48, 49, 53, 53, 53, 53, 33, 21, 19, 53, 55, 54, 54, 54, 54, 33, 56, 57, 62, 61, 55, 55, 55, 55, 33, 21, 59, 58, 19, 56, 56, 56, 56, 33, 60, 61, 62, 63, 57, 57, 57, 57, 33, 59, 56, 61, 60, 58, 58, 58, 58, 33, 58, 59, 60, 63, 59, 59, 59, 59, 33, 57, 58, 63, 62, 60, 60, 60, 60, 33, 12, 65, 64, 13, 30, 30, 30, 30, 33, 66, 67, 68, 71, 61, 61, 61, 61, 33, 70, 71, 68, 69, 62, 62, 62, 62, 33, 65, 66, 71, 70, 63, 63, 63, 63, 33, 64, 65, 70, 69, 64, 64, 64, 64, 33, 67, 64, 69, 68, 65, 65, 65, 65, 33, 8, 73, 72, 9, 66, 66, 66, 66, 33, 74, 75, 76, 79, 67, 67, 67, 67, 33, 78, 79, 76, 77, 68, 68, 68, 68, 33, 73, 74, 79, 78, 69, 69, 69, 69, 33, 72, 73, 78, 77, 70, 70, 70, 70, 33, 75, 72, 77, 76, 71, 71, 71, 71, 33, 28, 80, 81, 25, 21, 21, 21, 21, 33, 81, 80, 86, 85, 72, 72, 72, 72, 33, 86, 87, 84, 85, 73, 73, 73, 73, 33, 82, 83, 84, 87, 74, 74, 74, 74, 33, 80, 82, 87, 86, 75, 75, 75, 75, 33, 83, 81, 85, 84, 76, 76, 76, 76, 33, 88, 91, 96, 97, 77, 77, 77, 77, 33, 99, 97, 93, 92, 78, 78, 78, 78, 33, 90, 89, 99, 98, 77, 77, 77, 77, 33, 89, 88, 97, 99, 79, 79, 79, 79, 33, 97, 96, 94, 93, 80, 80, 80, 80, 32, 82, 80, 28, 11, 11, 11, 32, 28, 5, 90, 81, 81, 81, 32, 90, 91, 1, 82, 82, 82, 32, 1, 14, 82, 11, 11, 11, 32, 82, 28, 90, 82, 82, 82, 32, 90, 1, 82, 83, 83, 83, 32, 73, 8, 1, 84, 84, 84, 32, 1, 91, 88, 85, 85, 85, 32, 88, 3, 18, 86, 86, 86, 32, 74, 73, 1, 87, 87, 87, 32, 88, 18, 74, 88, 88, 88, 32, 1, 88, 74, 89, 89, 89, 33, 91, 90, 98, 96, 90, 90, 90, 90, 32, 56, 59, 21, 14, 14, 14, 32, 21, 7, 89, 91, 91, 91, 32, 89, 90, 5, 92, 92, 92, 32, 5, 10, 56, 14, 14, 14, 32, 56, 21, 89, 93, 93, 93, 32, 89, 5, 56, 94, 94, 94, 32, 7, 24, 66, 11, 11, 11, 32, 66, 65, 12, 11, 11, 11, 32, 12, 3, 88, 95, 95, 95, 32, 88, 89, 7, 96, 96, 96, 32, 7, 66, 12, 11, 11, 11, 32, 12, 88, 7, 95, 95, 95, 33, 98, 99, 92, 95, 14, 14, 14, 14, 33, 95, 92, 93, 94, 97, 97, 97, 97]
        },
        smartphone: {
            id: "smartphone",
            primaryColorFaces: [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95],
            imagePlanePosition: {
                x: 0,
                y: 9,
                z: -.32
            },
            imagePlaneRotation: {
                x: 3.141592653,
                z: 3.1415926535
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .9,
            normals: [.84361, -.226045, -.487059, .84361, -.226045, -.487059, .843611, -.226045, .487057, .84361, -.226045, .487057, .617566, -.617564, -.48706, .617566, -.617564, -.487059, .617567, -.617564, .487058, .617567, -.617565, .487057, .226044, -.84361, -.487059, .226045, -.843609, -.48706, .226045, -.843611, .487057, .226044, -.84361, .487058, -.226044, -.843609, -.48706, -.226045, -.84361, -.487059, -.226045, -.84361, .487058, -.226045, -.843611, .487057, -.617565, -.617564, -.487061, -.617566, -.617564, -.48706, -.617566, -.617564, .487059, -.617566, -.617565, .487058, -.84361, -.226044, -.487059, -.843608, -.226045, -.487061, -.84361, -.226045, .487057, -.84361, -.226044, .48706, -5.93719e-9, -.866025, -.500001, -5.58794e-9, -.866025, -.500001, 5.58792e-9, -.866026, .499999, 5.93717e-9, -.866026, .499999, -.84361, .226045, -.487059, -.84361, .226045, -.487059, -.843611, .226045, .487057, -.843611, .226046, .487057, -.617566, .617564, -.48706, -.617566, .617564, -.487059, -.617567, .617565, .487058, -.617567, .617565, .487057, -.226045, .843608, -.487062, -.226045, .843609, -.48706, -.226045, .843609, .48706, -.226046, .84361, .487058, .226046, .843612, -.487054, .226042, .843609, -.487062, .226043, .843614, .487052, .226045, .843609, .48706, .617566, .617565, -.487059, .617568, .617565, -.487055, .617568, .617564, .487057, .617568, .617567, .487054, .84361, .226044, -.487059, .84361, .226044, -.487059, .843611, .226044, .487057, .843611, .226045, .487057, -5.93722e-9, .866023, -.500004, -5.58793e-9, .866023, -.500004, 5.58795e-9, .866024, .500002, 5.9372e-9, .866024, .500002, -.866025, -4.37025e-8, -.500001, -.866025, -4.31801e-8, -.500001, -.866026, 4.318e-8, .499999, -.866026, 4.37023e-8, .499999, .866025, -4.31801e-8, -.500001, .866025, -4.3746e-8, -.500001, .866026, 4.37458e-8, .499999, .866026, 4.318e-8, .499999, -1.11759e-8, -7.02266e-8, -1, -1.45736e-8, -9.1577e-8, -1, 7.31608e-8, 8.63602e-8, 1, 4.58847e-8, 1.18259e-7, 1, 1.11759e-8, 4.17094e-8, 1, -3.54907e-9, 1.12111e-7, 1, 7.31609e-8, 8.63602e-8, 1, 9.69633e-9, 8.20708e-8, 1, 1.11759e-8, 1.40574e-7, 1, 4.58837e-8, 2.6491e-8, 1, -7.49521e-9, 8.74397e-8, 1, 1.25788e-8, 8.41766e-8, 1, 1.83954e-8, 8.70932e-8, 1, 9.48954e-9, 8.95273e-8, 1, 1.22866e-8, 8.81055e-8, 1, 9.69235e-9, 8.68003e-8, 1, -7.31608e-8, -8.63602e-8, -1, -4.58837e-8, -2.6491e-8, -1, -1.11759e-8, -1.40574e-7, -1, -9.69633e-9, -8.20708e-8, -1, -7.31609e-8, -8.63602e-8, -1, 3.54907e-9, -1.12111e-7, -1, -1.03351e-8, -8.80627e-8, -1, -1.83954e-8, -8.70932e-8, -1, -9.48954e-9, -8.95273e-8, -1, 6.62004e-8, -8.82255e-8, -1, -2.64903e-8, -9.88643e-8, -1, -1.45736e-8, 420323e-10, -1, -1.03511e-8, -7.09105e-8, -1, -9.58635e-9, -8.82255e-8, -1, -1.32192e-8, -8.6919e-8, -1, -1.03528e-8, -8.78786e-8, -1],
            vertices: [3.25, 1.01354, .00866016, 3.08253, .388537, .00866022, 2.97428, .451037, -.207846, 3.125, 1.01354, -.207846, 3.125, 1.01354, .225167, 2.97428, .451037, .225167, 3.08253, .388537, .00866022, 3.25, 1.01354, .00866016, 3.08253, .388537, .00866022, 2.625, -.0689955, .00866026, 2.5625, .039258, -.207846, 3.08253, .388537, .00866022, 2.5625, .039258, -.207846, 2.97428, .451037, -.207846, 2.97428, .451037, .225167, 2.5625, .039258, .225167, 2.625, -.0689955, .00866026, 2.97428, .451037, .225167, 2.625, -.0689955, .00866026, 3.08253, .388537, .00866022, 2.625, -.0689955, .00866026, 2, -.236464, .00866028, 2, -.111464, -.207846, 2.625, -.0689955, .00866026, 2, -.111464, -.207846, 2.5625, .039258, -.207846, 2.5625, .039258, .225167, 2, -.111464, .225167, 2, -.236464, .00866028, 2.5625, .039258, .225167, 2, -.236464, .00866028, 2.625, -.0689955, .00866026, -2, -.236464, .00866033, -2.625, -.0689955, .00866032, -2.5625, .039258, -.207846, -2, -.111464, -.207846, -2, -.111464, .225167, -2.5625, .039258, .225167, -2.625, -.0689955, .00866032, -2, -.236464, .00866033, -2.625, -.0689955, .00866032, -3.08253, .388537, .00866029, -2.97428, .451037, -.207846, -2.625, -.0689955, .00866032, -2.97428, .451037, -.207846, -2.5625, .039258, -.207846, -2.5625, .039258, .225167, -2.97428, .451037, .225167, -3.08253, .388537, .00866029, -2.5625, .039258, .225167, -3.08253, .388537, .00866029, -2.625, -.0689955, .00866032, -3.08253, .388537, .00866029, -3.25, 1.01354, .00866024, -3.125, 1.01354, -.207846, -3.08253, .388537, .00866029, -3.125, 1.01354, -.207846, -2.97428, .451037, -.207846, -2.97428, .451037, .225167, -3.125, 1.01354, .225167, -3.25, 1.01354, .00866024, -2.97428, .451037, .225167, -3.25, 1.01354, .00866024, -3.08253, .388537, .00866029, 2, -.111464, -.207846, 2, -.236464, .00866028, -2, -.236464, .00866033, -2, -.111464, -.207846, 2, -.111464, .225167, -2, -.111464, .225167, -2, -.236464, .00866033, 2, -.236464, .00866028, -3.25, 11.7114, .0086593, -3.08253, 12.3364, .00865925, -2.97428, 12.2739, -.207847, -3.125, 11.7114, -.207847, -3.125, 11.7114, .225166, -2.97428, 12.2739, .225166, -3.08253, 12.3364, .00865925, -3.25, 11.7114, .0086593, -3.08253, 12.3364, .00865925, -2.625, 12.794, .0086592, -2.5625, 12.6857, -.207847, -3.08253, 12.3364, .00865925, -2.5625, 12.6857, -.207847, -2.97428, 12.2739, -.207847, -2.97428, 12.2739, .225166, -2.5625, 12.6857, .225166, -2.625, 12.794, .0086592, -2.97428, 12.2739, .225166, -2.625, 12.794, .0086592, -3.08253, 12.3364, .00865925, -2.625, 12.794, .0086592, -2, 12.9614, .00865918, -2, 12.8364, -.207847, -2.625, 12.794, .0086592, -2, 12.8364, -.207847, -2.5625, 12.6857, -.207847, -2.5625, 12.6857, .225166, -2, 12.8364, .225166, -2, 12.9614, .00865918, -2.5625, 12.6857, .225166, -2, 12.9614, .00865918, -2.625, 12.794, .0086592, 2, 12.9614, .00865913, 2.625, 12.794, .00865914, 2.5625, 12.6857, -.207847, 2, 12.9614, .00865913, 2.5625, 12.6857, -.207847, 2, 12.8364, -.207847, 2, 12.8364, .225166, 2.5625, 12.6857, .225166, 2.625, 12.794, .00865914, 2, 12.8364, .225166, 2.625, 12.794, .00865914, 2, 12.9614, .00865913, 2.625, 12.794, .00865914, 3.08253, 12.3364, .00865917, 2.97428, 12.2739, -.207847, 2.625, 12.794, .00865914, 2.97428, 12.2739, -.207847, 2.5625, 12.6857, -.207847, 2.5625, 12.6857, .225166, 2.97428, 12.2739, .225166, 3.08253, 12.3364, .00865917, 2.5625, 12.6857, .225166, 3.08253, 12.3364, .00865917, 2.625, 12.794, .00865914, 3.08253, 12.3364, .00865917, 3.25, 11.7114, .00865922, 3.125, 11.7114, -.207847, 3.08253, 12.3364, .00865917, 3.125, 11.7114, -.207847, 2.97428, 12.2739, -.207847, 2.97428, 12.2739, .225166, 3.125, 11.7114, .225166, 3.25, 11.7114, .00865922, 2.97428, 12.2739, .225166, 3.25, 11.7114, .00865922, 3.08253, 12.3364, .00865917, -2, 12.8364, -.207847, -2, 12.9614, .00865918, 2, 12.9614, .00865913, 2, 12.8364, -.207847, -2, 12.8364, .225166, 2, 12.8364, .225166, 2, 12.9614, .00865913, -2, 12.9614, .00865918, -3.125, 1.01354, -.207846, -3.25, 1.01354, .00866024, -3.25, 11.7114, .0086593, -3.125, 11.7114, -.207847, -3.125, 1.01354, .225167, -3.125, 11.7114, .225166, -3.25, 11.7114, .0086593, -3.25, 1.01354, .00866024, 3.125, 1.01354, -.207846, 3.125, 11.7114, -.207847, 3.25, 11.7114, .00865922, 3.25, 1.01354, .00866016, 3.125, 1.01354, .225167, 3.25, 1.01354, .00866016, 3.25, 11.7114, .00865922, 3.125, 11.7114, .225166, -2, 12.8364, -.207847, 2, 12.8364, -.207847, 1.53372, 12.2741, -.207847, -1.53372, 12.2741, -.207847, 2.97428, .451037, .225167, 3.125, 1.01354, .225167, 3.125, 11.7114, .225166, 2.97428, 12.2739, .225166, 2.5625, 12.6857, .225166, 2, 12.8364, .225166, -2, 12.8364, .225166, -2.5625, 12.6857, .225166, -2.97428, 12.2739, .225166, -3.125, 11.7114, .225166, -3.125, 1.01354, .225167, -2.97428, .451037, .225167, -2.5625, .039258, .225167, -2, -.111464, .225167, 2, -.111464, .225167, 2.5625, .039258, .225167, 3.125, 11.7114, -.207847, 3.125, 1.01354, -.207846, 2.97428, .451037, -.207846, 2.5625, .039258, -.207846, 2, -.111464, -.207846, -2, -.111464, -.207846, -2.5625, .039258, -.207846, -2.97428, .451037, -.207846, -3.125, 1.01354, -.207846, -3.125, 11.7114, -.207847, -2.97428, 12.2739, -.207847, -2.5625, 12.6857, -.207847, -2, 12.8364, -.207847, -1.53372, 12.2741, -.207847, 2.97428, 12.2739, -.207847, 2, 12.8364, -.207847, 2.5625, 12.6857, -.207847, -2.97428, 12.2739, -.207847, -1.53372, 12.2741, -.207847, 1.53372, 12.2741, -.207847, 1.53372, 12.2741, -.207847],
            faces: [32, 0, 1, 2, 0, 0, 0, 32, 0, 2, 3, 1, 1, 1, 32, 4, 5, 6, 2, 2, 2, 32, 4, 6, 7, 3, 3, 3, 32, 8, 9, 10, 4, 4, 4, 32, 11, 12, 13, 5, 5, 5, 32, 14, 15, 16, 6, 6, 6, 32, 17, 18, 19, 7, 7, 7, 32, 20, 21, 22, 8, 8, 8, 32, 23, 24, 25, 9, 9, 9, 32, 26, 27, 28, 10, 10, 10, 32, 29, 30, 31, 11, 11, 11, 32, 32, 33, 34, 12, 12, 12, 32, 32, 34, 35, 13, 13, 13, 32, 36, 37, 38, 14, 14, 14, 32, 36, 38, 39, 15, 15, 15, 32, 40, 41, 42, 16, 16, 16, 32, 43, 44, 45, 17, 17, 17, 32, 46, 47, 48, 18, 18, 18, 32, 49, 50, 51, 19, 19, 19, 32, 52, 53, 54, 20, 20, 20, 32, 55, 56, 57, 21, 21, 21, 32, 58, 59, 60, 22, 22, 22, 32, 61, 62, 63, 23, 23, 23, 32, 64, 65, 66, 24, 24, 24, 32, 64, 66, 67, 25, 25, 25, 32, 68, 69, 70, 26, 26, 26, 32, 68, 70, 71, 27, 27, 27, 32, 72, 73, 74, 28, 28, 28, 32, 72, 74, 75, 29, 29, 29, 32, 76, 77, 78, 30, 30, 30, 32, 76, 78, 79, 31, 31, 31, 32, 80, 81, 82, 32, 32, 32, 32, 83, 84, 85, 33, 33, 33, 32, 86, 87, 88, 34, 34, 34, 32, 89, 90, 91, 35, 35, 35, 32, 92, 93, 94, 36, 36, 36, 32, 95, 96, 97, 37, 37, 37, 32, 98, 99, 100, 38, 38, 38, 32, 101, 102, 103, 39, 39, 39, 32, 104, 105, 106, 40, 40, 40, 32, 107, 108, 109, 41, 41, 41, 32, 110, 111, 112, 42, 42, 42, 32, 113, 114, 115, 43, 43, 43, 32, 116, 117, 118, 44, 44, 44, 32, 119, 120, 121, 45, 45, 45, 32, 122, 123, 124, 46, 46, 46, 32, 125, 126, 127, 47, 47, 47, 32, 128, 129, 130, 48, 48, 48, 32, 131, 132, 133, 49, 49, 49, 32, 134, 135, 136, 50, 50, 50, 32, 137, 138, 139, 51, 51, 51, 32, 140, 141, 142, 52, 52, 52, 32, 140, 142, 143, 53, 53, 53, 32, 144, 145, 146, 54, 54, 54, 32, 144, 146, 147, 55, 55, 55, 32, 148, 149, 150, 56, 56, 56, 32, 148, 150, 151, 57, 57, 57, 32, 152, 153, 154, 58, 58, 58, 32, 152, 154, 155, 59, 59, 59, 32, 156, 157, 158, 60, 60, 60, 32, 156, 158, 159, 61, 61, 61, 32, 160, 161, 162, 62, 62, 62, 32, 160, 162, 163, 63, 63, 63, 32, 164, 165, 166, 64, 64, 64, 32, 164, 166, 167, 65, 65, 65, 32, 168, 169, 170, 66, 66, 66, 32, 170, 171, 172, 67, 67, 67, 32, 172, 173, 174, 68, 68, 68, 32, 174, 175, 176, 69, 69, 69, 32, 176, 177, 178, 70, 70, 70, 32, 178, 179, 180, 71, 71, 71, 32, 180, 181, 182, 72, 72, 72, 32, 182, 183, 168, 73, 73, 73, 32, 168, 170, 172, 74, 74, 74, 32, 172, 174, 176, 75, 75, 75, 32, 176, 178, 180, 76, 76, 76, 32, 180, 182, 168, 77, 77, 77, 32, 168, 172, 176, 78, 78, 78, 32, 176, 180, 168, 79, 79, 79, 32, 184, 185, 186, 80, 80, 80, 32, 186, 187, 188, 81, 81, 81, 32, 188, 189, 190, 82, 82, 82, 32, 190, 191, 192, 83, 83, 83, 32, 192, 193, 194, 84, 84, 84, 32, 194, 195, 196, 85, 85, 85, 32, 194, 196, 197, 86, 86, 86, 32, 190, 192, 194, 87, 87, 87, 32, 186, 188, 190, 88, 88, 88, 32, 198, 184, 186, 89, 89, 89, 32, 199, 200, 198, 90, 90, 90, 32, 201, 202, 203, 91, 91, 91, 32, 204, 199, 198, 92, 92, 92, 32, 198, 186, 190, 93, 93, 93, 32, 190, 194, 204, 94, 94, 94, 32, 190, 204, 198, 95, 95, 95],
            metadata: {
                type: "Geometry",
                generator: "io_three",
                vertices: 205,
                version: 3,
                faces: 96,
                normals: 96
            }
        },
        "event-processing-engine": {
            id: "event-processing-engine",
            primaryColorFaces: [302, 303, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436],
            imagePlanePosition: {
                y: 8.2
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlaneScale: .42,
            metadata: {
                version: 3,
                generator: "io_three",
                vertices: 246,
                uvs: 0,
                normals: 255,
                faces: 278,
                type: "Geometry"
            },
            uvs: [],
            vertices: [-1.65263, .3345, -.257662, 1.68612, .3345, -.257662, -1.65263, .100576, -.122606, 1.68612, .100575, -.122606, -1.65263, .100576, .147507, 1.68612, .100575, .147507, -1.65263, .3345, .282563, 1.68612, .3345, .282563, -1.65263, .568425, .147507, 1.68612, .568425, .147507, -1.65263, .568425, -.122606, 1.68612, .568425, -.122606, -.924802, 2.26029, -.257662, -1.31587, 2.26029, -.257662, -.924802, 2.49422, -.122606, -1.31587, 2.49422, -.122606, -.924802, 2.49422, .147507, -1.31587, 2.49422, .147507, -.924802, 2.26029, .282563, -1.31587, 2.26029, .282563, -.924802, 2.02637, .147507, -1.31587, 2.02637, .147507, -.924802, 2.02637, -.122606, -1.31587, 2.02637, -.122606, -1.54987, 2.26029, -.257662, -1.65263, 2.35259, -.122606, -1.65263, 2.35259, .147507, -1.54987, 2.26029, .282563, -.924802, 1.28577, .282564, -1.31587, 1.28577, .282564, -.924802, 1.05184, .147507, -1.31587, 1.05184, .147507, -.924802, 1.05184, -.122606, -1.31587, 1.05184, -.122606, -.924802, 1.28577, -.257662, -1.31587, 1.28577, -.257662, -.924802, 1.51969, -.122606, -1.31587, 1.51969, -.122606, -.924802, 1.51969, .147507, -1.31587, 1.51969, .147507, -1.54987, 1.28577, .282564, -1.65263, 1.19347, .147507, -1.65263, 1.19347, -.122606, -1.54987, 1.28577, -.257662, .958292, 2.26029, .282563, 1.34936, 2.26029, .282563, .958292, 2.49422, .147507, 1.34936, 2.49422, .147507, .958292, 2.49422, -.122606, 1.34936, 2.49422, -.122606, .958292, 2.26029, -.257663, 1.34936, 2.26029, -.257663, .958292, 2.02637, -.122606, 1.34936, 2.02637, -.122606, .958292, 2.02637, .147507, 1.34936, 2.02637, .147507, 1.58336, 2.26029, .282563, 1.68612, 2.35259, .147507, 1.68612, 2.35259, -.122606, 1.58336, 2.26029, -.257663, .958293, 1.28577, -.257663, 1.34936, 1.28577, -.257663, .958293, 1.05184, -.122606, 1.34936, 1.05184, -.122606, .958293, 1.05184, .147507, 1.34936, 1.05184, .147507, .958293, 1.28577, .282563, 1.34936, 1.28577, .282563, .958293, 1.51969, .147507, 1.34936, 1.51969, .147507, .958293, 1.51969, -.122606, 1.34936, 1.51969, -.122606, 1.58336, 1.28577, -.257663, 1.68612, 1.19347, -.122606, 1.68612, 1.19347, .147507, 1.58336, 1.28577, .282563, -1.00273, 0, .608107, -1.00273, .668584, .608107, -1.00273, 0, -.544674, -1.00273, .668584, -.544674, -.0043884, 0, -1.12106, -.0043884, .668584, -1.12106, .993949, 0, -.544674, .993949, .668584, -.544674, .993949, 0, .608106, .993949, .668584, .608106, -.00438802, 0, 1.1845, -.00438815, .668584, 1.1845, .205209, 1.30902, .934975, .400743, 1.30902, 1.27365, .322172, 1.54295, .867447, .517705, 1.54295, 1.20612, .556096, 1.54295, .732391, .75163, 1.54295, 1.07107, .673059, 1.30902, .664862, .868593, 1.30902, 1.00354, .556096, 1.0751, .732391, .75163, 1.0751, 1.07107, .322172, 1.0751, .867447, .517705, 1.0751, 1.20612, .517743, 1.30902, 1.4763, .686088, 1.40132, 1.49777, .920012, 1.40132, 1.36271, .985592, 1.30902, 1.20619, .673059, .3345, .664863, .868593, .3345, 1.00354, .556096, .100576, .732391, .75163, .100575, 1.07107, .322172, .100576, .867447, .517706, .100576, 1.20612, .205209, .3345, .934976, .400743, .3345, 1.27365, .322172, .568425, .867447, .517706, .568425, 1.20612, .556096, .568425, .732391, .75163, .568425, 1.07107, .985593, .3345, 1.20619, .920012, .242199, 1.36271, .686088, .242199, 1.49777, .517743, .3345, 1.4763, -1.00273, .955204, .608107, -1.00273, 1.62379, .608107, -1.00273, .955204, -.544674, -1.00273, 1.62379, -.544674, -.00438853, .955204, -1.12106, -.00438853, 1.62379, -1.12106, .993949, .955204, -.544674, .993949, 1.62379, -.544674, .993949, .955204, .608106, .993949, 1.62379, .608106, -.00438815, .955204, 1.1845, -.00438815, 1.62379, 1.1845, -.268489, 1.30902, -.965945, -.464023, 1.30902, -1.30462, -.385451, 1.54295, -.898416, -.580985, 1.54295, -1.23709, -.619376, 1.54295, -.76336, -.81491, 1.54295, -1.10203, -.736338, 1.30902, -.695832, -.931872, 1.30902, -1.03451, -.619376, 1.0751, -.76336, -.81491, 1.0751, -1.10203, -.385451, 1.0751, -.898417, -.580985, 1.0751, -1.23709, -.581023, 1.30902, -1.50727, -.749367, 1.40132, -1.52874, -.983292, 1.40132, -1.39368, -1.04887, 1.30902, -1.23716, -.736338, .3345, -.695832, -.931872, .3345, -1.03451, -.619376, .100576, -.76336, -.814909, .100576, -1.10203, -.385451, .100576, -.898417, -.580985, .100576, -1.23709, -.268489, .3345, -.965945, -.464023, .3345, -1.30462, -.385451, .568425, -.898417, -.580985, .568425, -1.23709, -.619376, .568425, -.76336, -.81491, .568425, -1.10203, -1.04887, .3345, -1.23716, -.983292, .242199, -1.39368, -.749367, .242199, -1.52874, -.581023, .3345, -1.50727, -1.00273, 1.91042, .608107, -1.00273, 2.579, .608107, -1.00273, 1.91042, -.544674, -1.00273, 2.579, -.544674, -.00438853, 1.91042, -1.12106, -.00438853, 2.579, -1.12106, .993949, 1.91042, -.544674, .993949, 2.579, -.544674, .993949, 1.91042, .608106, .993949, 2.579, .608106, -.00438815, 1.91042, 1.1845, -.00438828, 2.579, 1.1845, -.681835, 1.30902, .664863, -.877369, 1.30902, 1.00354, -.564873, 1.54295, .732391, -.760406, 1.54295, 1.07107, -.330948, 1.54295, .867447, -.526482, 1.54295, 1.20612, -.213986, 1.30902, .934975, -.409519, 1.30902, 1.27365, -.330948, 1.0751, .867447, -.526482, 1.0751, 1.20612, -.564872, 1.0751, .732391, -.760406, 1.0751, 1.07107, -.994369, 1.30902, 1.20619, -.928788, 1.40132, 1.36271, -.694864, 1.40132, 1.49777, -.526519, 1.30902, 1.4763, -.213986, .3345, .934976, -.40952, .3345, 1.27365, -.330948, .100575, .867447, -.526482, .100576, 1.20612, -.564873, .100576, .732391, -.760406, .100576, 1.07107, -.681835, .3345, .664863, -.877369, .3345, 1.00354, -.564873, .568425, .732391, -.760406, .568425, 1.07107, -.330948, .568425, .867448, -.526482, .568425, 1.20612, -.526519, .3345, 1.4763, -.694864, .242199, 1.49777, -.928788, .242199, 1.36271, -.994369, .3345, 1.20619, .727561, 1.30902, -.695832, .923095, 1.30902, -1.03451, .610599, 1.54295, -.76336, .806132, 1.54295, -1.10203, .376674, 1.54295, -.898417, .572208, 1.54295, -1.23709, .259712, 1.30902, -.965945, .455246, 1.30902, -1.30462, .376674, 1.0751, -.898417, .572208, 1.0751, -1.23709, .610599, 1.0751, -.76336, .806133, 1.0751, -1.10203, 1.04009, 1.30902, -1.23716, .974514, 1.40132, -1.39368, .74059, 1.40132, -1.52874, .572246, 1.30902, -1.50727, .259712, .3345, -.965945, .455246, .3345, -1.30462, .376674, .100575, -.898417, .572208, .100575, -1.23709, .610599, .100575, -.76336, .806133, .100576, -1.10203, .727561, .3345, -.695832, .923095, .3345, -1.03451, .610599, .568425, -.76336, .806133, .568425, -1.10203, .376674, .568425, -.898417, .572208, .568425, -1.23709, .572246, .3345, -1.50727, .74059, .242198, -1.52874, .974515, .242198, -1.39368, 1.0401, .3345, -1.23716, -.909826, 2.73639, -.491038, -.909826, 2.73639, .554471, -.00438866, 2.73639, -1.01379, .901049, 2.73639, -.491038, .901049, 2.73639, .55447, -.00438828, 2.73639, 1.07722],
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 2, 3, 5, 4, 1, 1, 1, 1, 33, 4, 5, 7, 6, 2, 2, 2, 2, 33, 6, 7, 9, 8, 3, 3, 3, 3, 32, 5, 3, 1, 4, 4, 4, 32, 1, 11, 9, 5, 5, 5, 32, 9, 7, 5, 6, 6, 6, 32, 1, 9, 5, 5, 5, 5, 33, 1, 0, 10, 11, 7, 7, 7, 7, 33, 8, 9, 11, 10, 8, 8, 8, 8, 32, 10, 0, 2, 9, 9, 9, 32, 2, 4, 6, 10, 10, 10, 32, 6, 8, 10, 9, 9, 9, 32, 2, 6, 10, 11, 11, 11, 33, 12, 13, 15, 14, 12, 12, 12, 12, 33, 14, 15, 17, 16, 13, 13, 13, 13, 33, 16, 17, 19, 18, 14, 14, 14, 14, 33, 18, 19, 21, 20, 15, 15, 15, 15, 33, 17, 26, 27, 19, 16, 16, 16, 16, 33, 22, 23, 13, 12, 17, 17, 17, 17, 33, 20, 21, 23, 22, 18, 18, 18, 18, 32, 22, 12, 14, 5, 5, 5, 32, 14, 16, 18, 5, 5, 5, 32, 18, 20, 22, 5, 5, 5, 32, 14, 18, 22, 6, 6, 6, 33, 13, 24, 25, 15, 19, 19, 19, 19, 33, 15, 25, 26, 17, 20, 20, 20, 20, 32, 19, 27, 21, 21, 21, 21, 32, 23, 24, 13, 22, 22, 22, 33, 28, 29, 31, 30, 23, 23, 23, 23, 33, 30, 31, 33, 32, 24, 24, 24, 24, 33, 32, 33, 35, 34, 25, 25, 25, 25, 33, 34, 35, 37, 36, 26, 26, 26, 26, 33, 33, 42, 43, 35, 27, 27, 27, 27, 33, 38, 39, 29, 28, 28, 28, 28, 28, 33, 36, 37, 39, 38, 29, 29, 29, 29, 32, 38, 28, 30, 6, 6, 6, 32, 30, 32, 34, 4, 4, 4, 32, 34, 36, 38, 5, 5, 5, 32, 30, 34, 38, 5, 5, 5, 33, 29, 40, 41, 31, 30, 30, 30, 30, 33, 31, 41, 42, 33, 31, 31, 31, 31, 32, 35, 43, 37, 32, 32, 32, 32, 39, 40, 29, 33, 33, 33, 33, 24, 23, 37, 43, 34, 34, 34, 34, 33, 25, 24, 43, 42, 35, 35, 35, 35, 33, 26, 25, 42, 41, 36, 36, 36, 36, 33, 27, 26, 41, 40, 37, 37, 37, 37, 33, 27, 40, 39, 21, 38, 38, 38, 38, 33, 23, 21, 39, 37, 39, 39, 39, 39, 33, 44, 45, 47, 46, 40, 40, 40, 40, 33, 46, 47, 49, 48, 41, 41, 41, 41, 33, 48, 49, 51, 50, 42, 42, 42, 42, 33, 50, 51, 53, 52, 43, 43, 43, 43, 33, 49, 58, 59, 51, 44, 44, 44, 44, 33, 54, 55, 45, 44, 45, 45, 45, 45, 33, 52, 53, 55, 54, 46, 46, 46, 46, 32, 54, 44, 46, 47, 47, 47, 32, 46, 48, 50, 48, 48, 48, 32, 50, 52, 54, 49, 49, 49, 32, 46, 50, 54, 50, 50, 50, 33, 45, 56, 57, 47, 51, 51, 51, 51, 33, 47, 57, 58, 49, 52, 52, 52, 52, 32, 51, 59, 53, 53, 53, 53, 32, 55, 56, 45, 54, 54, 54, 33, 60, 61, 63, 62, 55, 55, 55, 55, 33, 62, 63, 65, 64, 56, 56, 56, 56, 33, 64, 65, 67, 66, 57, 57, 57, 57, 33, 66, 67, 69, 68, 58, 58, 58, 58, 33, 65, 74, 75, 67, 59, 59, 59, 59, 33, 70, 71, 61, 60, 60, 60, 60, 60, 33, 68, 69, 71, 70, 61, 61, 61, 61, 32, 70, 60, 62, 62, 62, 62, 32, 62, 64, 66, 49, 49, 49, 32, 66, 68, 70, 9, 9, 9, 32, 62, 66, 70, 63, 63, 63, 33, 61, 72, 73, 63, 64, 64, 64, 64, 33, 63, 73, 74, 65, 65, 65, 65, 65, 32, 67, 75, 69, 66, 66, 66, 32, 71, 72, 61, 67, 67, 67, 33, 56, 55, 69, 75, 68, 68, 68, 68, 33, 57, 56, 75, 74, 69, 69, 69, 69, 33, 58, 57, 74, 73, 70, 70, 70, 70, 33, 55, 53, 71, 69, 71, 71, 71, 71, 33, 59, 58, 73, 72, 72, 72, 72, 72, 33, 59, 72, 71, 53, 73, 73, 73, 73, 33, 76, 77, 79, 78, 9, 9, 9, 9, 33, 78, 79, 81, 80, 74, 74, 74, 74, 33, 80, 81, 83, 82, 75, 75, 75, 75, 33, 82, 83, 85, 84, 76, 76, 76, 76, 32, 81, 79, 77, 77, 77, 77, 32, 77, 87, 85, 78, 78, 78, 32, 85, 83, 81, 79, 79, 79, 32, 77, 85, 81, 80, 80, 80, 33, 86, 87, 77, 76, 81, 81, 81, 81, 33, 84, 85, 87, 86, 82, 82, 82, 82, 32, 86, 76, 78, 24, 24, 24, 32, 78, 80, 82, 83, 83, 83, 32, 82, 84, 86, 84, 84, 84, 32, 78, 82, 86, 85, 85, 85, 33, 88, 89, 91, 90, 86, 86, 86, 86, 33, 90, 91, 93, 92, 87, 87, 87, 87, 33, 92, 93, 95, 94, 88, 88, 88, 88, 33, 94, 95, 97, 96, 89, 89, 89, 89, 33, 93, 102, 103, 95, 90, 90, 90, 90, 33, 98, 99, 89, 88, 91, 91, 91, 91, 33, 96, 97, 99, 98, 92, 92, 92, 92, 32, 98, 88, 90, 93, 93, 93, 32, 90, 92, 94, 94, 94, 94, 32, 94, 96, 98, 95, 95, 95, 32, 90, 94, 98, 96, 96, 96, 33, 89, 100, 101, 91, 97, 97, 97, 97, 33, 91, 101, 102, 93, 98, 98, 98, 98, 32, 95, 103, 97, 99, 99, 99, 32, 99, 100, 89, 100, 100, 100, 33, 104, 105, 107, 106, 101, 101, 101, 101, 33, 106, 107, 109, 108, 102, 102, 102, 102, 33, 108, 109, 111, 110, 103, 103, 103, 103, 33, 110, 111, 113, 112, 104, 104, 104, 104, 33, 109, 118, 119, 111, 105, 105, 105, 105, 33, 114, 115, 105, 104, 106, 106, 106, 106, 33, 112, 113, 115, 114, 107, 107, 107, 107, 32, 114, 104, 106, 108, 108, 108, 32, 106, 108, 110, 109, 109, 109, 32, 110, 112, 114, 110, 110, 110, 32, 106, 110, 114, 111, 111, 111, 33, 105, 116, 117, 107, 112, 112, 112, 112, 33, 107, 117, 118, 109, 113, 113, 113, 113, 32, 111, 119, 113, 114, 114, 114, 32, 115, 116, 105, 115, 115, 115, 33, 99, 97, 115, 113, 116, 116, 116, 116, 33, 101, 100, 119, 118, 117, 117, 117, 117, 33, 100, 99, 113, 119, 118, 118, 118, 118, 33, 120, 121, 123, 122, 119, 119, 119, 119, 33, 122, 123, 125, 124, 120, 120, 120, 120, 33, 124, 125, 127, 126, 121, 121, 121, 121, 33, 126, 127, 129, 128, 122, 122, 122, 122, 32, 125, 123, 121, 123, 123, 123, 32, 121, 131, 129, 124, 124, 124, 32, 129, 127, 125, 29, 29, 29, 32, 121, 129, 125, 125, 125, 125, 33, 130, 131, 121, 120, 126, 126, 126, 126, 33, 128, 129, 131, 130, 127, 127, 127, 127, 32, 130, 120, 122, 128, 128, 128, 32, 122, 124, 126, 129, 129, 129, 32, 126, 128, 130, 130, 130, 130, 32, 122, 126, 130, 131, 131, 131, 33, 132, 133, 135, 134, 132, 132, 132, 132, 33, 134, 135, 137, 136, 133, 133, 133, 133, 33, 136, 137, 139, 138, 134, 134, 134, 134, 33, 138, 139, 141, 140, 135, 135, 135, 135, 33, 137, 146, 147, 139, 136, 136, 136, 136, 33, 142, 143, 133, 132, 137, 137, 137, 137, 33, 140, 141, 143, 142, 138, 138, 138, 138, 32, 142, 132, 134, 139, 139, 139, 32, 134, 136, 138, 140, 140, 140, 32, 138, 140, 142, 141, 141, 141, 32, 134, 138, 142, 142, 142, 142, 33, 133, 144, 145, 135, 143, 143, 143, 143, 33, 135, 145, 146, 137, 144, 144, 144, 144, 32, 139, 147, 141, 145, 145, 145, 32, 143, 144, 133, 146, 146, 146, 33, 148, 149, 151, 150, 147, 147, 147, 147, 33, 150, 151, 153, 152, 138, 138, 138, 138, 33, 152, 153, 155, 154, 148, 148, 148, 148, 33, 154, 155, 157, 156, 149, 149, 149, 149, 33, 153, 162, 163, 155, 150, 150, 150, 150, 33, 158, 159, 149, 148, 151, 151, 151, 151, 33, 156, 157, 159, 158, 152, 152, 152, 152, 32, 158, 148, 150, 153, 153, 153, 32, 150, 152, 154, 154, 154, 154, 32, 154, 156, 158, 154, 154, 154, 32, 150, 154, 158, 155, 155, 155, 33, 149, 160, 161, 151, 156, 156, 156, 156, 33, 151, 161, 162, 153, 157, 157, 157, 157, 32, 155, 163, 157, 158, 158, 158, 32, 159, 160, 149, 159, 159, 159, 33, 147, 160, 159, 141, 160, 160, 160, 160, 33, 147, 146, 161, 160, 161, 161, 161, 161, 33, 146, 145, 162, 161, 162, 162, 162, 162, 33, 143, 141, 159, 157, 163, 163, 163, 163, 33, 145, 144, 163, 162, 164, 164, 164, 164, 33, 144, 143, 157, 163, 165, 165, 165, 165, 33, 164, 165, 167, 166, 166, 166, 166, 166, 33, 166, 167, 169, 168, 167, 167, 167, 167, 33, 168, 169, 171, 170, 168, 168, 168, 168, 33, 170, 171, 173, 172, 169, 169, 169, 169, 33, 171, 169, 242, 243, 170, 170, 170, 170, 33, 174, 175, 165, 164, 171, 171, 171, 171, 33, 172, 173, 175, 174, 172, 172, 172, 172, 32, 174, 164, 166, 24, 24, 24, 32, 166, 168, 170, 173, 173, 173, 32, 170, 172, 174, 84, 84, 84, 32, 166, 170, 174, 85, 85, 85, 33, 176, 177, 179, 178, 174, 174, 174, 174, 33, 178, 179, 181, 180, 175, 175, 175, 175, 33, 180, 181, 183, 182, 176, 176, 176, 176, 33, 182, 183, 185, 184, 177, 177, 177, 177, 33, 181, 190, 191, 183, 178, 178, 178, 178, 33, 186, 187, 177, 176, 179, 179, 179, 179, 33, 184, 185, 187, 186, 24, 24, 24, 24, 32, 186, 176, 178, 180, 180, 180, 32, 178, 180, 182, 181, 181, 181, 32, 182, 184, 186, 182, 182, 182, 32, 178, 182, 186, 183, 183, 183, 33, 177, 188, 189, 179, 184, 184, 184, 184, 33, 179, 189, 190, 181, 185, 185, 185, 185, 32, 183, 191, 185, 186, 186, 186, 32, 187, 188, 177, 187, 187, 187, 33, 192, 193, 195, 194, 188, 188, 188, 188, 33, 194, 195, 197, 196, 189, 189, 189, 189, 33, 196, 197, 199, 198, 190, 190, 190, 190, 33, 198, 199, 201, 200, 191, 191, 191, 191, 33, 197, 206, 207, 199, 192, 192, 192, 192, 33, 202, 203, 193, 192, 193, 193, 193, 193, 33, 200, 201, 203, 202, 29, 29, 29, 29, 32, 202, 192, 194, 194, 194, 194, 32, 194, 196, 198, 195, 195, 195, 32, 198, 200, 202, 196, 196, 196, 32, 194, 198, 202, 197, 197, 197, 33, 193, 204, 205, 195, 198, 198, 198, 198, 33, 195, 205, 206, 197, 199, 199, 199, 199, 32, 199, 207, 201, 200, 200, 200, 32, 203, 204, 193, 201, 201, 201, 33, 191, 190, 205, 204, 202, 202, 202, 202, 33, 190, 189, 206, 205, 203, 203, 203, 203, 33, 191, 204, 203, 185, 204, 204, 204, 204, 33, 187, 185, 203, 201, 205, 205, 205, 205, 33, 188, 187, 201, 207, 206, 206, 206, 206, 33, 189, 188, 207, 206, 207, 207, 207, 207, 33, 208, 209, 211, 210, 208, 208, 208, 208, 33, 210, 211, 213, 212, 209, 209, 209, 209, 33, 212, 213, 215, 214, 210, 210, 210, 210, 33, 214, 215, 217, 216, 211, 211, 211, 211, 33, 213, 222, 223, 215, 212, 212, 212, 212, 33, 218, 219, 209, 208, 213, 213, 213, 213, 33, 216, 217, 219, 218, 138, 138, 138, 138, 32, 218, 208, 210, 214, 214, 214, 32, 210, 212, 214, 215, 215, 215, 32, 214, 216, 218, 216, 216, 216, 32, 210, 214, 218, 217, 217, 217, 33, 209, 220, 221, 211, 218, 218, 218, 218, 33, 211, 221, 222, 213, 219, 219, 219, 219, 32, 215, 223, 217, 220, 220, 220, 33, 224, 225, 227, 226, 221, 221, 221, 221, 33, 226, 227, 229, 228, 222, 222, 222, 222, 33, 228, 229, 231, 230, 223, 223, 223, 223, 33, 230, 231, 233, 232, 224, 224, 224, 224, 33, 229, 238, 239, 231, 225, 225, 225, 225, 33, 234, 235, 225, 224, 226, 226, 226, 226, 33, 232, 233, 235, 234, 227, 227, 227, 227, 32, 234, 224, 226, 228, 228, 228, 32, 226, 228, 230, 229, 229, 229, 32, 230, 232, 234, 230, 230, 230, 32, 226, 230, 234, 231, 231, 231, 33, 225, 236, 237, 227, 232, 232, 232, 232, 33, 227, 237, 238, 229, 233, 233, 233, 233, 32, 231, 239, 233, 234, 234, 234, 32, 235, 236, 225, 235, 235, 235, 33, 219, 217, 235, 233, 236, 236, 236, 236, 33, 223, 236, 235, 217, 237, 237, 237, 237, 32, 242, 240, 241, 238, 238, 238, 32, 241, 245, 244, 239, 239, 239, 32, 244, 243, 242, 240, 240, 240, 32, 241, 244, 242, 241, 241, 241, 33, 165, 175, 245, 241, 242, 242, 242, 242, 33, 173, 171, 243, 244, 243, 243, 243, 243, 33, 169, 167, 240, 242, 244, 244, 244, 244, 33, 175, 173, 244, 245, 245, 245, 245, 245, 33, 167, 165, 241, 240, 246, 246, 246, 246, 33, 102, 101, 118, 117, 247, 247, 247, 247, 33, 103, 102, 117, 116, 248, 248, 248, 248, 33, 103, 116, 115, 97, 249, 249, 249, 249, 33, 223, 222, 237, 236, 250, 250, 250, 250, 33, 222, 221, 238, 237, 251, 251, 251, 251, 33, 221, 220, 239, 238, 252, 252, 252, 252, 32, 219, 220, 209, 253, 253, 253, 33, 239, 220, 219, 233, 254, 254, 254, 254],
            normals: [-5.37e-8, -.5, -.866025, -1.24967e-7, -1, 2.20666e-7, -4.54385e-8, -.5, .866026, 3.92423e-8, .5, .866025, 1, 0, 0, 1, 0, 0, 1, 0, 0, 3.92423e-8, .5, -.866025, 8.92619e-8, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 2.11599e-7, .5, -.866025, 9.14491e-7, 1, 4.41331e-7, 2.29233e-7, .5, .866025, -8.81664e-8, -.5, .866025, -.149434, .602242, .784203, -2.46866e-7, -.5, -.866025, -6.09661e-7, -1, 0, -.149434, .602242, -.784203, -.387659, .921803, 4.15264e-7, 0, -.5, .866025, 0, -.5, -.866025, -1.76333e-8, -.5, .866025, 0, -1, 0, -1.41066e-7, -.5, -.866025, 0, .5, -.866025, -.149434, -.602242, -.784203, 1.41066e-7, .5, .866025, 0, 1, 0, -.149434, -.602242, .784203, -.387659, -.921803, 2.07632e-7, -3.65019e-7, .5, -.866025, 0, .5, .866025, .499879, -1.76869e-7, -.866095, -.795827, 1.15743e-7, -.605524, -1, 3.08532e-7, -9.07767e-14, -.795827, 1.59468e-7, .605524, .499879, -6.51622e-8, .866095, 1, -7.05835e-7, 0, -2.99766e-7, .5, .866025, -6.09661e-7, 1, -8.82663e-7, 0, .5, -.866025, 0, -.5, -.866025, .149433, .602242, -.784203, 0, -.5, .866025, 0, -1, 0, -1, -1.27401e-7, 6.61997e-7, -1, -5.09606e-7, 0, -1, 2.54803e-7, 0, -1, -1.27401e-7, -2.20666e-7, .149433, .602241, .784204, .387655, .921804, -8.11645e-7, 0, -.5, -.866025, 0, -.5, .866025, -7.05331e-8, -.5, -.866025, -1.52415e-7, -1, 2.20666e-7, 0, -.5, .866026, 0, .5, .866025, .149433, -.602242, .784203, 0, .5, -.866025, 0, 1, 0, -1, 1.27401e-7, -2.20666e-7, -1, 1.27401e-7, 7.35552e-8, .149433, -.602242, -.784203, .387656, -.921804, 1.88755e-7, 2.54721e-7, .5, .866025, 0, .5, -.866026, -.499879, -1.21015e-7, .866095, .795818, 2.70063e-7, .605536, 1, 2.05688e-7, 0, -1, -2.35279e-7, 0, .795818, 1.80042e-7, -.605536, -.499879, -2.04795e-7, -.866095, -.5, -3.86676e-8, -.866025, .5, 0, -.866025, 1, 8.91506e-8, -1.0341e-7, 2.9852e-8, 1, -5.17051e-8, 5.97039e-8, 1, -1.0341e-7, 1.79112e-7, 1, -1.0341e-7, 5.97039e-8, 1, -3.44701e-8, -.5, 0, .866026, .5, 7.73353e-8, .866025, 0, -1, 0, 0, -1, 0, 0, -1, 0, -.75, .5, .433013, 4.97098e-7, 1, -4.62994e-7, .75, .5, -.433013, .75, -.500001, -.433013, .753856, .602242, -.262689, -.75, -.5, .433013, 0, -1, 0, -.500001, 0, -.866025, -.5, -1.17915e-7, -.866025, -.5, -3.53745e-7, -.866025, -.5, 0, -.866025, -.604423, .602242, .521515, .193828, .921804, .33572, .75, -.500001, -.433012, -.75, -.5, .433013, .75, -.5, -.433013, -8.01929e-7, -1, -6.49876e-8, -.75, -.5, .433013, -.75, .5, .433013, -.604424, -.602242, .521514, .75, .5, -.433013, 3.82204e-7, 1, -2.20666e-7, -.5, -1.76872e-7, -.866026, -.500001, -3.24266e-7, -.866025, -.5, -2.3583e-7, -.866025, -.5, -1.5722e-7, -.866025, .753857, -.602241, -.262689, .193828, -.921804, .33572, -.75, .5, .433012, .75, .5, -.433013, -.5, -4.76349e-7, -.866025, -.126499, 3.15074e-7, .991967, -1, -3.21904e-7, 139648e-9, -1, -1.78301e-7, 1.0341e-7, -.5, -1.16003e-7, -.866025, .5, 0, -.866025, 1, 8.91506e-8, -1.0341e-7, 5.97039e-8, 1, -1.0341e-7, 1.19408e-7, 1, -4.9392e-14, 1.19408e-7, 1, -6.89401e-8, -.5, 0, .866026, .5, 3.86677e-8, .866025, -8.95558e-8, -1, 5.17051e-8, -8.95559e-8, -1, 5.17051e-8, -8.95559e-8, -1, 5.17051e-8, -8.95559e-8, -1, 5.17051e-8, .75, .5, -.433013, -4.97099e-7, 1, 4.62994e-7, -.75, .5, .433013, -.75, -.5, .433013, -.753857, .602242, .262688, .75, -.5, -.433013, 0, -1, 0, .500001, -2.06351e-7, .866025, .5, -3.24266e-7, .866025, .5, 5.89575e-7, .866025, .5, -1.96525e-7, .866025, .604423, .602242, -.521515, -.193829, .921804, -.33572, -.75, -.5, .433012, .75, -.5, -.433013, -.75, -.5, .433012, .75, -.5, -.433013, .75, .5, -.433013, .604423, -.602242, -.521515, -.75, .5, .433013, 0, 1, 0, .500001, 2.2109e-7, .866025, .5, 2.3583e-7, .866025, .5, 2.3583e-7, .866025, -.753856, -.602242, .262689, -.193828, -.921804, -.33572, .75, .5, -.433012, -.75, .5, .433013, -.500121, -1.30324e-7, .865956, -.922318, 1.67182e-7, -.386431, -.5, 1.78474e-7, -.866026, .5, -4.76349e-7, .866025, .126499, 2.21837e-7, -.991967, 1, -8.04368e-8, -139427e-9, -1, 0, 2.0682e-7, -.5, -7.73353e-8, -.866025, .5, -3.86677e-8, -.866025, 1, 8.91507e-8, -1.0341e-7, .430584, .508321, -.745793, -.5, 3.86676e-8, .866026, .5, 1.16003e-7, .866025, 1.2348e-14, -1, 2.0682e-7, -.75, .5, -.433013, 5.34619e-7, 1, -4.33252e-8, .75, .5, .433013, .75, -.500001, .433012, .604424, .602242, .521514, -.75, -.5, -.433013, .499998, 1.32654e-7, -.866027, .5, -2.65309e-7, -.866026, .5, 4.42182e-7, -.866026, .5, 1.17915e-7, -.866025, -.753857, .602241, -.262688, -.193827, .921804, .33572, .749999, -.500001, .433013, -.75, -.499999, -.433013, .75, -.5, .433013, -8.01929e-7, -1, 6.49879e-8, -.75, -.5, -.433013, -.75, .5, -.433013, -.753857, -.602242, -.262688, .75, .5, .433013, .499999, 3.39005e-7, -.866026, .5, 114967e-11, -.866025, .5, -8.84362e-8, -.866025, .5, 3.1444e-7, -.866026, .604423, -.602242, .521515, -.193828, -.921804, .33572, -.75, .5, -.433012, .75, .5, .433012, .1265, 1.04167e-7, .991967, -.5, 2.55813e-7, .866026, 1, 2.27267e-11, 138986e-9, .5, -4.08299e-7, -.866025, -.500121, -1.39633e-7, -.865955, -.922318, 1.46606e-7, .386431, .75, .5, .433013, -5.34619e-7, 1, 4.33253e-8, -.75, .5, -.433013, -.75, -.5, -.433013, -.604423, .602242, -.521515, .75, -.5, .433013, -.499999, -2.3583e-7, .866026, -.5, -5.89575e-7, .866025, -.5, 3.53745e-7, .866025, -.5, -2.75135e-7, .866025, .753856, .602242, .262688, .193827, .921804, -.33572, -.75, -.5, -.433013, -.75, -.5, -.433013, 5.34619e-7, -1, -4.33253e-8, .75, -.5, .433013, .75, .5, .433013, .753856, -.602242, .262688, -.75, .5, -.433013, 4.00965e-7, 1, -3.24939e-8, -.5, 1.03176e-7, .866025, -.5, -1.76872e-7, .866025, -.5, 2.94788e-8, .866025, -.5, 7.86099e-8, .866025, -.604423, -.602242, -.521515, .193828, -.921804, -.33572, .75, .5, .433012, -.75, .5, -.433013, -.5, -2.58589e-7, .866026, -1, -1.6093e-7, -139648e-9, 2.63319e-7, 1, 0, 2.63319e-7, 1, -1.20095e-13, 2.63319e-7, 1, -4.50355e-14, 2.63319e-7, 1, -3.00237e-14, -.430584, .508321, .745794, .861168, .50832, -1.15906e-7, -.430584, .508321, -.745793, .430584, .508321, .745793, -.861168, .50832, 9.27249e-8, .5, 2.7366e-7, .866025, .922318, 3.18932e-7, .386431, .50012, -1.30324e-7, -.865956, -.1265, 2.00618e-7, -.991966, .5, 2.26067e-7, -.866026, .922318, 2.72635e-7, -.386431, .75, -.5, .433013, .500121, -1.11707e-7, .865956]
        },
        "identity-provider": {
            id: "identity-provider",
            primaryColorFaces: [16, 109, 110, 111, 112, 117, 118, 119, 120, 122, 125, 126, 150, 151, 152, 153, 155, 156, 157, 174, 175, 176, 178, 179, 180, 225, 226, 227, 228, 229, 230, 231, 232, 239, 240, 241, 242, 247, 248, 249, 250, 251, 252, 255, 256, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 363, 372, 373, 374, 375, 377, 378, 379],
            imagePlanePosition: {
                y: 7.3,
                z: -1.7
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            doubleSided: true,
            imagePlaneScale: .45,
            metadata: {
                generator: "io_three",
                faces: 318,
                uvs: 0,
                vertices: 328,
                normals: 175,
                version: 3,
                type: "Geometry"
            },
            vertices: [.240526, .77689, .461398, .222217, .684845, .461398, .170078, .606813, .461398, .0920454, .554673, .461398, 9.4461e-8, .536364, .461398, -.0920452, .554673, .461398, -.170077, .606813, .461398, -.222217, .684845, .461398, -.240526, .77689, .461398, -.222217, .868935, .461398, -.170077, .946968, .461398, -.0920452, .999107, .461398, 1.07843e-7, 1.01742, .461398, .0920454, .999107, .461398, .170078, .946968, .461398, .222217, .868935, .461398, .397536, .177982, .461398, .367276, .149371, .461398, -.367275, .149371, .461398, -.397536, .177982, .461398, -.367275, .330113, .461398, -.2811, .459083, .461398, -.15213, .545258, .461398, 1.12403e-7, .492231, .461398, .152131, .545258, .461398, .281101, .459083, .461398, .367276, .330113, .461398, .683536, .0372738, .505803, -.683536, .0372738, .505803, -.683535, .0372736, -1.41965, .683536, .0372736, -1.41965, .683535, 1.96273, .505804, .683536, 1.96273, -1.41965, -.62, .115075, .505803, -.62, 1.8901, .505803, .62, 1.8901, .505803, -.683536, 1.96273, .505802, .62, .115075, .505803, -.683535, 1.96273, -1.41965, .62, .115075, -1.33234, -.62, .115075, -1.33234, -.62, 1.8901, -1.33234, .62, 1.8901, -1.33234, .62, .115086, .749734, -.62, .115086, .749734, -.62, .115086, -1.09822, .62, .115086, -1.09822, .62, .985471, .749734, .62, .985471, -1.09822, -.62, .985471, .749733, -.62, .985471, -1.09822, -.584779, .985471, -1.04816, .58478, .985471, -1.04816, .58478, .985471, .692927, -.58478, .985471, .692926, .58478, .165355, .692927, .58478, .165355, -1.04816, -.58478, .165355, -1.04816, -.58478, .165355, .692927, .58478, .5, .692927, .58478, .5, -1.04816, .62, .5, .749734, .62, .5, -1.09822, -.584779, .5, -1.04816, -.62, .5, -1.09822, -.62, .5, .749733, -.58478, .5, .692927, -.177509, .676205, .759924, -.148307, .699772, .759924, .148307, .699772, .759924, .148307, .848283, .759924, .177509, .871223, .759924, .177509, .676205, .759924, -.177509, .871223, .759924, -.148307, .848283, .759924, .177509, .3944, .739393, .14159, .3944, .742582, -.141594, .3944, .742582, -.141594, .3944, .82026, -.177509, .3944, .845921, -.177509, .3944, .739393, .177509, .3944, .845921, .14159, .3944, .82026, .177509, .459791, .845921, .177509, .459791, .739393, -.177509, .459791, .845921, -.177509, .459791, .739393, .14159, .459791, .742582, .14159, .459791, .82026, -.141594, .459791, .82026, -.141594, .459791, .742582, .240526, .77689, .258123, .222217, .684845, .258123, .170078, .606813, .258123, .0920454, .554673, .258123, 1.03346e-7, .536364, .258123, -.0920452, .554673, .258123, -.170077, .606813, .258123, -.222217, .684845, .258123, -.240526, .77689, .258123, -.222217, .868935, .258123, -.170077, .946968, .258123, -.0920452, .999107, .258123, 1.16728e-7, 1.01742, .258123, .0920454, .999107, .258123, .170078, .946968, .258123, .222217, .868935, .258123, .397536, .177982, .258123, .367276, .149371, .258123, -.367275, .149371, .258123, -.397536, .177982, .258123, -.367275, .330113, .258123, -.2811, .459083, .258123, -.15213, .545258, .258123, 1.21289e-7, .492231, .258123, .152131, .545258, .258123, .281101, .459083, .258123, .367276, .330113, .258123, .240526, .77689, .0727548, .222217, .684845, .0727548, .170078, .606813, .0727548, .0920454, .554673, .0727548, 1.11449e-7, .536364, .0727548, -.0920452, .554673, .0727548, -.170077, .606813, .0727548, -.222217, .684845, .0727548, -.240526, .77689, .0727548, -.222217, .868935, .0727548, -.170077, .946968, .0727548, -.0920452, .999107, .0727548, 1.24831e-7, 1.01742, .0727548, .0920454, .999107, .0727548, .170078, .946968, .0727548, .222217, .868935, .0727548, .397536, .177982, .0727548, .367276, .149371, .0727548, -.367275, .149371, .0727548, -.397536, .177982, .0727548, -.367275, .330113, .0727548, -.2811, .459083, .0727548, -.15213, .545258, .0727548, 1.29391e-7, .492231, .0727548, .152131, .545258, .0727548, .281101, .459083, .0727548, .367276, .330113, .0727548, .62, 1.02837, 1.20681, -.62, 1.02837, 1.20681, -.62, 1.02837, -.641139, .62, 1.02837, -.641139, .62, 1.89876, 1.20681, .62, 1.89876, -.641139, -.62, 1.89876, 1.20681, -.62, 1.89876, -.64114, -.584779, 1.89876, -.59108, .58478, 1.89876, -.59108, .58478, 1.89876, 1.15, -.58478, 1.89876, 1.15, .58478, 1.07864, 1.15, .58478, 1.07864, -.591079, -.58478, 1.07864, -.59108, -.58478, 1.07864, 1.15, .58478, 1.41329, 1.15, .58478, 1.41329, -.59108, .62, 1.41329, 1.20681, .62, 1.41329, -.641139, -.58478, 1.41329, -.59108, -.62, 1.41329, -.641139, -.62, 1.41329, 1.20681, -.58478, 1.41329, 1.15, -.177509, 1.58949, 1.217, -.148307, 1.61306, 1.217, .148307, 1.61306, 1.217, .148307, 1.76157, 1.217, .177509, 1.78451, 1.217, .177509, 1.58949, 1.217, -.177509, 1.78451, 1.217, -.148307, 1.76157, 1.217, .177509, 1.30769, 1.19647, .14159, 1.30769, 1.19966, -.141594, 1.30769, 1.19966, -.141594, 1.30769, 1.27734, -.177509, 1.30769, 1.303, -.177509, 1.30769, 1.19647, .177509, 1.30769, 1.303, .14159, 1.30769, 1.27734, .177509, 1.37308, 1.303, .177509, 1.37308, 1.19647, -.177509, 1.37308, 1.303, -.177509, 1.37308, 1.19647, .14159, 1.37308, 1.19966, .14159, 1.37308, 1.27734, -.141594, 1.37308, 1.27734, -.141594, 1.37308, 1.19966, .240526, 1.69018, .918476, .222217, 1.59813, .918476, .170078, 1.5201, .918476, .0920454, 1.46796, .918476, 7.44815e-8, 1.44965, .918476, -.0920452, 1.46796, .918476, -.170077, 1.5201, .918476, -.222217, 1.59813, .918476, -.240526, 1.69018, .918476, -.222217, 1.78222, .918476, -.170077, 1.86025, .918476, -.0920452, 1.91239, .918476, 8.78635e-8, 1.9307, .918476, .0920454, 1.91239, .918476, .170078, 1.86025, .918476, .222217, 1.78222, .918476, .397536, 1.09127, .918476, .367276, 1.06266, .918476, -.367275, 1.06266, .918476, -.397536, 1.09127, .918476, -.367275, 1.2434, .918476, -.2811, 1.37237, .918476, -.15213, 1.45854, .918476, 9.24239e-8, 1.40552, .918476, .152131, 1.45854, .918476, .281101, 1.37237, .918476, .367276, 1.2434, .918476, .240526, 1.69018, .715201, .222217, 1.59813, .715201, .170078, 1.5201, .715201, .0920454, 1.46796, .715201, 8.33669e-8, 1.44965, .715201, -.0920452, 1.46796, .715201, -.170077, 1.5201, .715201, -.222217, 1.59813, .715201, -.240526, 1.69018, .715201, -.222217, 1.78222, .715201, -.170077, 1.86025, .715201, -.0920452, 1.91239, .715201, 9.67489e-8, 1.9307, .715201, .0920454, 1.91239, .715201, .170078, 1.86025, .715201, .222217, 1.78222, .715201, .397536, 1.09127, .715201, .367276, 1.06266, .715201, -.367275, 1.06266, .715201, -.397536, 1.09127, .715201, -.367275, 1.2434, .715201, -.2811, 1.37237, .715201, -.15213, 1.45854, .715201, 1.01309e-7, 1.40552, .715201, .152131, 1.45854, .715201, .281101, 1.37237, .715201, .367276, 1.2434, .715201, .240526, 1.69018, .353032, .222217, 1.59813, .353032, .170078, 1.5201, .353032, .0920454, 1.46796, .353032, 9.91978e-8, 1.44965, .353032, -.0920452, 1.46796, .353032, -.170077, 1.5201, .353032, -.222217, 1.59813, .353032, -.240526, 1.69018, .353032, -.222217, 1.78222, .353032, -.170077, 1.86025, .353032, -.0920452, 1.91239, .353032, 1.1258e-7, 1.9307, .353032, .0920454, 1.91239, .353032, .170078, 1.86025, .353032, .222217, 1.78222, .353032, .397536, 1.09127, .353032, .367276, 1.06266, .353032, -.367275, 1.06266, .353032, -.397536, 1.09127, .353032, -.367275, 1.2434, .353032, -.2811, 1.37237, .353032, -.15213, 1.45854, .353032, 1.1714e-7, 1.40552, .353032, .152131, 1.45854, .353032, .281101, 1.37237, .353032, .367276, 1.2434, .353032, .240526, 1.69018, .529832, .222217, 1.59813, .529832, .170078, 1.5201, .529832, .0920454, 1.46796, .529832, 9.14696e-8, 1.44965, .529832, -.0920452, 1.46796, .529832, -.170077, 1.5201, .529832, -.222217, 1.59813, .529832, -.240526, 1.69018, .529832, -.222217, 1.78222, .529832, -.170077, 1.86025, .529832, -.0920452, 1.91239, .529832, 1.04852e-7, 1.9307, .529832, .0920454, 1.91239, .529832, .170078, 1.86025, .529832, .222217, 1.78222, .529832, .397536, 1.09127, .529832, .367276, 1.06266, .529832, -.367275, 1.06266, .529832, -.397536, 1.09127, .529832, -.367275, 1.2434, .529832, -.2811, 1.37237, .529832, -.15213, 1.45854, .529832, 1.09412e-7, 1.40552, .529832, .152131, 1.45854, .529832, .281101, 1.37237, .529832, .367276, 1.2434, .529832, .240526, 1.69018, .0903439, .222217, 1.59813, .0903439, .170078, 1.5201, .0903439, .0920454, 1.46796, .0903439, 1.1068e-7, 1.44965, .0903439, -.0920452, 1.46796, .0903439, -.170077, 1.5201, .0903439, -.222217, 1.59813, .0903439, -.240526, 1.69018, .0903439, -.222217, 1.78222, .0903439, -.170077, 1.86025, .0903439, -.0920452, 1.91239, .0903439, 1.24062e-7, 1.9307, .0903439, .0920454, 1.91239, .0903439, .170078, 1.86025, .0903439, .222217, 1.78222, .0903439, .397536, 1.09127, .0903439, .367276, 1.06266, .0903439, -.367275, 1.06266, .0903438, -.397536, 1.09127, .0903438, -.367275, 1.2434, .0903438, -.2811, 1.37237, .0903439, -.15213, 1.45854, .0903439, 1.28623e-7, 1.40552, .0903439, .152131, 1.45854, .0903439, .281101, 1.37237, .0903439, .367276, 1.2434, .0903439],
            normals: [0, 0, -1, 1.61889e-7, 8.13873e-7, -1, 0, 0, -1, 0, 0, -1, 6.89969e-7, 4.61022e-7, -1, 1.61889e-7, 1.61889e-7, -1, 0, -2.28946e-7, -1, 8.09447e-8, -3.35284e-8, -1, 8.09447e-8, -3.35284e-8, -1, 4.05722e-8, 4.29114e-8, -1, 1.28741e-7, 1.92674e-7, -1, 3.83723e-8, -1.58943e-8, -1, 5.30101e-8, -4.49529e-7, -1, 5.30101e-8, 1.47496e-8, -1, -1.3497e-14, -1, 6.19123e-8, 1, 1.39303e-7, 2.01215e-7, 329763e-11, 3.71475e-7, 1, -5.28751e-7, -282013e-11, 1, -457546e-11, 1.00739e-7, 1, -8.72005e-7, 334052e-11, 1, -350482e-11, -2.16694e-7, 1, -4.36002e-8, 310008e-11, 1, 379364e-11, 3.358e-8, 1, -4.32614e-7, -341777e-11, 1, -1, -7.73905e-8, -2.32171e-7, 3.48802e-7, -1.23825e-7, -1, 3.77915e-14, 1, -6.19123e-8, 1.09108e-14, 1, -3.24266e-8, 1, 2.17775e-14, 1.29706e-7, -2.8841e-7, 2.01478e-7, 1, -1, -1.17529e-7, -1.4592e-7, -2.80564e-14, -1, 6.48532e-8, -7.75208e-15, -1, 3.22545e-8, -4.80683e-8, -9.2911e-7, 1, -10575e-10, -2.45554e-7, 1, -6.24887e-7, 9.2911e-7, 1, -6.24887e-7, 8.59439e-7, 1, 3.84546e-7, -6.19407e-7, -1, 3.84546e-7, -4.91108e-7, -1, 3.84546e-7, -6.19407e-7, -1, 8.72345e-15, 1, -3.42342e-8, 9.1734e-7, -3.68331e-7, -1, 5.09633e-8, 3.56226e-7, -1, 4.5867e-7, 7.36662e-7, -1, 4.5867e-7, -106868e-11, -1, -4.07707e-7, 4.91108e-7, 1, -4.07707e-7, 7.12452e-7, 1, -4.07707e-7, 4.91108e-7, 1, -4.07707e-7, 7.12452e-7, 1, 3.18177e-9, 1, -3.32149e-8, 1, 4.64555e-7, 1.61272e-7, -1, -3.56226e-7, -2.05405e-7, .817859, 3.83943e-7, .575419, .849904, 4.16173e-7, -.526938, 0, 1, 0, 0, 1, 0, -3.18166e-9, 1, -3.32149e-8, -.849902, -7.92883e-7, -.526941, -.817858, 3.33012e-7, .57542, -1, 7.74258e-8, -1.45145e-7, 1, 8.90566e-8, 1.54054e-7, 0, 0, 1, -2.40099e-7, 3.05637e-7, 1, 0, 0, 1, 3.23908e-7, 4.01349e-7, 1, -2.46665e-7, 3.05637e-7, 1, 0, 0, 1, 3.15289e-7, 4.01349e-7, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 125333e-11, -6.99398e-8, -1, -159515e-11, 0, 0, -1, 0, 1, 125333e-11, -2.87749e-7, -4.2096e-7, -5.75567e-13, -1, 0, 1, 0, -1, -125333e-11, 2.87749e-7, 0, -1, 0, 0, 0, 1, 4.61022e-7, 6.89968e-7, 1, 0, 0, 1, 4.61022e-7, -6.89968e-7, 1, -2.28946e-7, 9.26601e-14, 1, 0, -2.28946e-7, 1, -3.35284e-8, 8.09448e-8, 1, -8.09447e-8, -3.35284e-8, 1, -4.1746e-7, -2.78938e-7, 1, -3.58036e-8, 1.02718e-7, 1, -4.05722e-8, 2.00697e-14, 1, -5.50937e-8, 5.9017e-8, 1, 8.13873e-7, 1.61889e-7, 1, -8.13874e-7, 1.61889e-7, 1, 1.6189e-7, 1.6189e-7, 1, 1.6189e-7, 1.6189e-7, 1, -3.35284e-8, 8.09448e-8, 1, -3.35284e-8, 8.09448e-8, 1, -8.11443e-8, 4.01395e-14, 1, 5.9161e-8, -5.01689e-7, 1, -5.21012e-8, -1.18034e-7, 1, -1.62289e-7, -8.02789e-14, 1, -1.24033e-14, -1, 6.45089e-8, 0, -123881e-11, 1, -9.61365e-7, -2.36067e-13, 1, -5.76819e-7, 6.19407e-7, 1, -5.76819e-7, 9.82216e-7, 1, 3.84546e-7, -6.19407e-7, -1, 3.84546e-7, -4.91108e-7, -1, 3.84546e-7, -6.19407e-7, -1, 1.39575e-14, 1, -6.84684e-8, 8.15413e-7, -4.91108e-7, -1, 0, 7.12452e-7, -1, 4.07707e-7, 4.91108e-7, -1, 4.07707e-7, -7.12451e-7, -1, -4.07707e-7, 4.91108e-7, 1, -.970142, 0, -.242536, -4.07707e-7, 7.12451e-7, 1, -3.70216e-7, 5.81426e-7, 1, 6.36354e-9, 1, -6.64297e-8, 1, 4.64555e-7, 1.93527e-7, -1, -3.56226e-7, -2.39639e-7, .817859, 3.33012e-7, .575419, .849903, 2.87016e-7, -.526938, -6.36331e-9, 1, -6.64297e-8, -.849902, -8.57461e-7, -.526941, -.817858, 3.33011e-7, .57542, -1, 7.74258e-8, -1.774e-7, 1, 8.90566e-8, 1.88288e-7, 1, 125333e-11, 6.99398e-8, -1, -136727e-11, -1.3988e-7, 1, 148121e-11, -9.59163e-8, -4.2096e-7, -5.75567e-13, -1, -1, -136727e-11, 1.91833e-7, 9.22039e-7, 137993e-11, 1, -9.22044e-7, 137994e-11, 1, -4.57892e-7, 1.8532e-13, 1, 0, 4.57893e-7, 1, 9.48327e-8, 2.28946e-7, 1, -9.22039e-7, -137993e-11, 1, 9.22044e-7, -137994e-11, 1, 0, 325551e-11, 1, 4.57892e-7, -1.8532e-13, 1, 0, -4.57893e-7, 1, -9.48327e-8, -2.28946e-7, 1, 3.11802e-7, -3.29779e-7, 1, -2.77044e-7, 2.77044e-7, 1, -9.90439e-8, 8.39899e-7, 1, 1.47318e-7, 7.01405e-7, 1, -8.11443e-8, -3.29779e-7, 1, 5.9161e-8, -5.01689e-7, 1, -1.62289e-7, -5.74668e-14, 1, -1.62289e-7, -8.0279e-14, 1, 2.78937e-7, 4.17459e-7, 1, -3.58035e-8, 1.02718e-7, 1, -4.05722e-8, 2.00698e-14, 1, -8.28954e-7, 1.64889e-7, 1, 2.95805e-8, -2.50844e-7, 1, -5.50937e-8, 5.9017e-8, 1, -1.53928e-7, 1.64889e-7, 1, -3.23779e-7, 162773e-11, 1, 325549e-11, 1.05406e-12, 1, -3.23779e-7, 162775e-11, 1, -3.23779e-7, 3.23779e-7, 1, -3.23779e-7, 3.23779e-7, 1, -1.61889e-7, -6.70568e-8, 1, -1.6189e-7, -6.70568e-8, 1, -2.57482e-7, 3.85349e-7, 1, -8.11443e-8, 4.01395e-14, 1, -2.30177e-7, 1.53799e-7, 1, -5.21012e-8, -1.18034e-7, 1, 0, 162775e-11, 1, -4.17459e-7, -2.78937e-7, 1, -4.9522e-8, 4.19949e-7, 1, 1.09462e-7, 2.47984e-7, 1],
            faces: [32, 15, 0, 1, 0, 0, 0, 32, 1, 2, 3, 0, 0, 0, 32, 3, 4, 5, 1, 1, 1, 32, 5, 6, 7, 0, 0, 0, 32, 7, 8, 9, 2, 2, 2, 32, 9, 10, 11, 0, 0, 0, 32, 11, 12, 13, 3, 3, 3, 32, 13, 14, 15, 4, 4, 4, 32, 15, 1, 3, 0, 0, 0, 32, 3, 5, 7, 5, 5, 5, 32, 7, 9, 11, 2, 2, 2, 32, 11, 13, 15, 6, 6, 6, 32, 15, 3, 7, 7, 7, 7, 32, 7, 11, 15, 8, 8, 8, 32, 26, 16, 17, 0, 0, 0, 32, 17, 18, 19, 9, 9, 9, 32, 19, 20, 21, 0, 0, 0, 32, 21, 22, 23, 3, 3, 3, 32, 23, 24, 25, 10, 10, 10, 32, 25, 26, 17, 0, 0, 0, 32, 17, 19, 21, 11, 11, 11, 32, 21, 23, 25, 12, 12, 12, 32, 17, 21, 25, 13, 13, 13, 33, 27, 28, 29, 30, 14, 14, 14, 14, 33, 31, 27, 30, 32, 15, 15, 15, 15, 32, 36, 28, 33, 16, 16, 16, 32, 34, 35, 31, 17, 17, 17, 32, 36, 33, 34, 18, 18, 18, 32, 34, 31, 36, 19, 19, 19, 32, 27, 31, 35, 20, 20, 20, 32, 33, 28, 27, 21, 21, 21, 32, 27, 35, 37, 22, 22, 22, 32, 27, 37, 33, 23, 23, 23, 33, 28, 36, 38, 29, 24, 24, 24, 24, 33, 29, 38, 32, 30, 25, 25, 25, 25, 33, 31, 32, 38, 36, 26, 26, 26, 26, 33, 33, 37, 39, 40, 27, 27, 27, 27, 33, 34, 33, 40, 41, 28, 28, 28, 28, 33, 40, 39, 42, 41, 29, 29, 29, 29, 33, 37, 35, 42, 39, 30, 30, 30, 30, 33, 35, 34, 41, 42, 31, 31, 31, 31, 33, 43, 44, 45, 46, 32, 32, 32, 32, 32, 44, 43, 61, 33, 33, 33, 32, 61, 47, 49, 34, 34, 34, 32, 65, 44, 61, 35, 35, 35, 32, 61, 49, 65, 36, 36, 36, 32, 46, 45, 64, 37, 37, 37, 32, 64, 50, 48, 38, 38, 38, 32, 62, 46, 64, 39, 39, 39, 32, 64, 48, 62, 38, 38, 38, 33, 55, 56, 57, 58, 40, 40, 40, 40, 32, 66, 54, 53, 41, 41, 41, 32, 59, 55, 58, 42, 42, 42, 32, 66, 53, 59, 43, 43, 43, 32, 59, 58, 66, 44, 44, 44, 32, 60, 52, 51, 45, 45, 45, 32, 63, 57, 56, 46, 46, 46, 32, 60, 51, 63, 47, 47, 47, 32, 63, 56, 60, 48, 48, 48, 33, 60, 59, 61, 62, 49, 49, 49, 49, 33, 46, 62, 61, 43, 50, 50, 50, 50, 33, 60, 56, 55, 59, 51, 51, 51, 51, 33, 62, 48, 52, 60, 52, 52, 52, 52, 33, 59, 53, 47, 61, 53, 53, 53, 53, 33, 47, 53, 54, 49, 54, 54, 54, 54, 33, 50, 51, 52, 48, 55, 55, 55, 55, 33, 66, 63, 64, 65, 56, 56, 56, 56, 33, 49, 54, 66, 65, 57, 57, 57, 57, 33, 63, 51, 50, 64, 58, 58, 58, 58, 33, 44, 65, 64, 45, 59, 59, 59, 59, 33, 58, 57, 63, 66, 60, 60, 60, 60, 32, 68, 67, 72, 61, 61, 61, 32, 72, 71, 70, 62, 62, 62, 32, 69, 68, 72, 63, 63, 63, 32, 72, 70, 69, 64, 64, 64, 32, 73, 67, 68, 65, 65, 65, 32, 74, 70, 71, 66, 66, 66, 32, 73, 68, 74, 67, 67, 67, 32, 74, 71, 73, 68, 68, 68, 33, 88, 83, 85, 89, 69, 69, 69, 69, 32, 76, 75, 81, 70, 70, 70, 32, 81, 79, 78, 69, 69, 69, 32, 82, 76, 81, 71, 71, 71, 32, 81, 78, 82, 69, 69, 69, 33, 83, 81, 75, 84, 72, 72, 72, 72, 33, 83, 85, 79, 81, 63, 63, 63, 63, 33, 79, 85, 86, 80, 73, 73, 73, 73, 33, 87, 84, 83, 88, 74, 74, 74, 74, 32, 83, 84, 87, 54, 54, 54, 32, 88, 89, 85, 55, 55, 55, 32, 83, 87, 88, 54, 54, 54, 32, 88, 85, 83, 55, 55, 55, 33, 78, 77, 90, 89, 75, 75, 75, 75, 33, 89, 88, 82, 78, 76, 76, 76, 76, 33, 85, 89, 90, 86, 77, 77, 77, 77, 33, 88, 87, 76, 82, 78, 78, 78, 78, 33, 78, 79, 80, 77, 79, 79, 79, 79, 33, 81, 79, 78, 82, 69, 69, 69, 69, 33, 75, 81, 82, 76, 69, 69, 69, 69, 32, 92, 91, 106, 80, 80, 80, 32, 106, 105, 104, 81, 81, 81, 32, 104, 103, 102, 82, 82, 82, 32, 102, 101, 100, 80, 80, 80, 32, 100, 99, 98, 61, 61, 61, 32, 98, 97, 96, 66, 66, 66, 32, 96, 95, 94, 66, 66, 66, 32, 94, 93, 92, 83, 83, 83, 32, 92, 106, 104, 84, 84, 84, 32, 104, 102, 100, 80, 80, 80, 32, 100, 98, 96, 80, 80, 80, 32, 96, 94, 92, 85, 85, 85, 32, 92, 104, 100, 86, 86, 86, 32, 100, 96, 92, 87, 87, 87, 32, 108, 107, 117, 80, 80, 80, 32, 117, 116, 115, 88, 88, 88, 32, 114, 113, 112, 68, 68, 68, 32, 117, 115, 114, 89, 89, 89, 32, 109, 108, 117, 90, 90, 90, 32, 111, 110, 109, 61, 61, 61, 32, 114, 112, 111, 80, 80, 80, 32, 109, 117, 114, 91, 91, 91, 32, 114, 111, 109, 61, 61, 61, 32, 119, 118, 133, 92, 92, 92, 32, 133, 132, 131, 80, 80, 80, 32, 131, 130, 129, 68, 68, 68, 32, 129, 128, 127, 80, 80, 80, 32, 127, 126, 125, 93, 93, 93, 32, 125, 124, 123, 80, 80, 80, 32, 123, 122, 121, 66, 66, 66, 32, 121, 120, 119, 80, 80, 80, 32, 119, 133, 131, 94, 94, 94, 32, 131, 129, 127, 80, 80, 80, 32, 127, 125, 123, 95, 95, 95, 32, 123, 121, 119, 66, 66, 66, 32, 119, 131, 127, 96, 96, 96, 32, 127, 123, 119, 97, 97, 97, 32, 135, 134, 144, 80, 80, 80, 32, 144, 143, 142, 80, 80, 80, 32, 141, 140, 139, 68, 68, 68, 32, 144, 142, 141, 68, 68, 68, 32, 136, 135, 144, 98, 98, 98, 32, 138, 137, 136, 61, 61, 61, 32, 141, 139, 138, 99, 99, 99, 32, 136, 144, 141, 100, 100, 100, 32, 141, 138, 136, 101, 101, 101, 33, 145, 146, 147, 148, 102, 102, 102, 102, 32, 146, 145, 163, 103, 103, 103, 32, 163, 149, 151, 104, 104, 104, 32, 167, 146, 163, 105, 105, 105, 32, 163, 151, 167, 106, 106, 106, 32, 148, 147, 166, 107, 107, 107, 32, 166, 152, 150, 108, 108, 108, 32, 164, 148, 166, 109, 109, 109, 32, 166, 150, 164, 108, 108, 108, 33, 157, 158, 159, 160, 110, 110, 110, 110, 32, 168, 156, 155, 111, 111, 111, 32, 161, 157, 160, 112, 112, 112, 32, 168, 155, 161, 113, 113, 113, 32, 161, 160, 168, 114, 114, 114, 32, 162, 154, 153, 115, 115, 115, 32, 153, 165, 159, 116, 116, 116, 32, 159, 158, 162, 117, 117, 117, 32, 153, 159, 162, 118, 118, 118, 33, 162, 161, 163, 164, 119, 119, 119, 119, 33, 148, 164, 163, 145, 120, 120, 120, 120, 33, 162, 158, 157, 161, 121, 121, 121, 121, 33, 164, 150, 154, 162, 122, 122, 122, 122, 33, 161, 155, 149, 163, 123, 123, 123, 123, 33, 149, 155, 156, 151, 54, 54, 54, 54, 33, 152, 153, 154, 150, 55, 55, 55, 55, 33, 168, 165, 166, 167, 124, 124, 124, 124, 33, 151, 156, 168, 167, 125, 125, 125, 125, 33, 165, 153, 152, 166, 126, 126, 126, 126, 33, 146, 167, 166, 147, 127, 127, 127, 127, 33, 160, 159, 165, 168, 128, 128, 128, 128, 32, 170, 169, 174, 61, 61, 61, 32, 174, 173, 172, 82, 82, 82, 32, 171, 170, 174, 61, 61, 61, 32, 174, 172, 171, 68, 68, 68, 32, 175, 169, 170, 61, 61, 61, 32, 176, 172, 173, 66, 66, 66, 32, 175, 170, 176, 80, 80, 80, 32, 176, 173, 175, 68, 68, 68, 33, 190, 185, 187, 191, 69, 69, 69, 69, 32, 178, 177, 183, 70, 70, 70, 32, 183, 181, 180, 69, 69, 69, 32, 184, 178, 183, 71, 71, 71, 32, 183, 180, 184, 69, 69, 69, 33, 185, 183, 177, 186, 129, 129, 129, 129, 33, 185, 187, 181, 183, 61, 61, 61, 61, 33, 181, 187, 188, 182, 130, 130, 130, 130, 33, 189, 186, 185, 190, 74, 74, 74, 74, 32, 185, 186, 189, 54, 54, 54, 32, 190, 191, 187, 55, 55, 55, 32, 185, 189, 190, 54, 54, 54, 32, 190, 187, 185, 55, 55, 55, 33, 180, 179, 192, 191, 131, 131, 131, 131, 33, 191, 190, 184, 180, 132, 132, 132, 132, 33, 187, 191, 192, 188, 77, 77, 77, 77, 33, 190, 189, 178, 184, 133, 133, 133, 133, 33, 180, 181, 182, 179, 69, 69, 69, 69, 33, 183, 181, 180, 184, 69, 69, 69, 69, 33, 177, 183, 184, 178, 69, 69, 69, 69, 32, 194, 193, 208, 80, 80, 80, 32, 208, 207, 206, 134, 134, 134, 32, 206, 205, 204, 68, 68, 68, 32, 204, 203, 202, 135, 135, 135, 32, 202, 201, 200, 61, 61, 61, 32, 200, 199, 198, 80, 80, 80, 32, 198, 197, 196, 80, 80, 80, 32, 196, 195, 194, 80, 80, 80, 32, 194, 208, 206, 136, 136, 136, 32, 206, 204, 202, 137, 137, 137, 32, 202, 200, 198, 80, 80, 80, 32, 198, 196, 194, 80, 80, 80, 32, 194, 206, 202, 138, 138, 138, 32, 202, 198, 194, 80, 80, 80, 32, 210, 209, 219, 80, 80, 80, 32, 219, 218, 217, 80, 80, 80, 32, 216, 215, 214, 68, 68, 68, 32, 219, 217, 216, 68, 68, 68, 32, 211, 210, 219, 80, 80, 80, 32, 213, 212, 211, 61, 61, 61, 32, 216, 214, 213, 80, 80, 80, 32, 211, 219, 216, 80, 80, 80, 32, 216, 213, 211, 61, 61, 61, 32, 221, 220, 235, 80, 80, 80, 32, 235, 234, 233, 139, 139, 139, 32, 233, 232, 231, 68, 68, 68, 32, 231, 230, 229, 140, 140, 140, 32, 229, 228, 227, 61, 61, 61, 32, 227, 226, 225, 80, 80, 80, 32, 225, 224, 223, 141, 141, 141, 32, 223, 222, 221, 80, 80, 80, 32, 221, 235, 233, 142, 142, 142, 32, 233, 231, 229, 143, 143, 143, 32, 229, 227, 225, 80, 80, 80, 32, 225, 223, 221, 66, 66, 66, 32, 221, 233, 229, 144, 144, 144, 32, 229, 225, 221, 80, 80, 80, 32, 237, 236, 246, 145, 145, 145, 32, 246, 245, 244, 146, 146, 146, 32, 243, 242, 241, 147, 147, 147, 32, 246, 244, 243, 148, 148, 148, 32, 238, 237, 246, 149, 149, 149, 32, 240, 239, 238, 61, 61, 61, 32, 243, 241, 240, 150, 150, 150, 32, 238, 246, 243, 151, 151, 151, 32, 243, 240, 238, 152, 152, 152, 32, 248, 247, 262, 80, 80, 80, 32, 262, 261, 260, 80, 80, 80, 32, 260, 259, 258, 68, 68, 68, 32, 258, 257, 256, 80, 80, 80, 32, 256, 255, 254, 61, 61, 61, 32, 254, 253, 252, 80, 80, 80, 32, 252, 251, 250, 80, 80, 80, 32, 250, 249, 248, 80, 80, 80, 32, 248, 262, 260, 80, 80, 80, 32, 260, 258, 256, 80, 80, 80, 32, 256, 254, 252, 80, 80, 80, 32, 252, 250, 248, 66, 66, 66, 32, 248, 260, 256, 68, 68, 68, 32, 256, 252, 248, 80, 80, 80, 32, 264, 263, 273, 80, 80, 80, 32, 273, 272, 271, 153, 153, 153, 32, 270, 269, 268, 68, 68, 68, 32, 273, 271, 270, 154, 154, 154, 32, 265, 264, 273, 155, 155, 155, 32, 267, 266, 265, 156, 156, 156, 32, 270, 268, 267, 157, 157, 157, 32, 265, 273, 270, 158, 158, 158, 32, 270, 267, 265, 159, 159, 159, 32, 275, 274, 289, 80, 80, 80, 32, 289, 288, 287, 66, 66, 66, 32, 287, 286, 285, 160, 160, 160, 32, 285, 284, 283, 80, 80, 80, 32, 283, 282, 281, 161, 161, 161, 32, 281, 280, 279, 80, 80, 80, 32, 279, 278, 277, 162, 162, 162, 32, 277, 276, 275, 80, 80, 80, 32, 275, 289, 287, 80, 80, 80, 32, 287, 285, 283, 163, 163, 163, 32, 283, 281, 279, 80, 80, 80, 32, 279, 277, 275, 164, 164, 164, 32, 275, 287, 283, 165, 165, 165, 32, 283, 279, 275, 166, 166, 166, 32, 291, 290, 300, 80, 80, 80, 32, 300, 299, 298, 80, 80, 80, 32, 297, 296, 295, 167, 167, 167, 32, 300, 298, 297, 68, 68, 68, 32, 292, 291, 300, 168, 168, 168, 32, 294, 293, 292, 61, 61, 61, 32, 297, 295, 294, 169, 169, 169, 32, 292, 300, 297, 170, 170, 170, 32, 297, 294, 292, 101, 101, 101, 32, 302, 301, 316, 80, 80, 80, 32, 316, 315, 314, 80, 80, 80, 32, 314, 313, 312, 68, 68, 68, 32, 312, 311, 310, 80, 80, 80, 32, 310, 309, 308, 61, 61, 61, 32, 308, 307, 306, 80, 80, 80, 32, 306, 305, 304, 171, 171, 171, 32, 304, 303, 302, 80, 80, 80, 32, 302, 316, 314, 80, 80, 80, 32, 314, 312, 310, 80, 80, 80, 32, 310, 308, 306, 80, 80, 80, 32, 306, 304, 302, 66, 66, 66, 32, 302, 314, 310, 68, 68, 68, 32, 310, 306, 302, 80, 80, 80, 32, 318, 317, 327, 80, 80, 80, 32, 327, 326, 325, 172, 172, 172, 32, 324, 323, 322, 173, 173, 173, 32, 327, 325, 324, 174, 174, 174, 32, 319, 318, 327, 168, 168, 168, 32, 321, 320, 319, 61, 61, 61, 32, 324, 322, 321, 99, 99, 99, 32, 319, 327, 324, 170, 170, 170, 32, 324, 321, 319, 101, 101, 101],
            uvs: []
        },
        "neural-net": {
            id: "neural-net",
            primaryColorFaces: [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311],
            disableImagePlane: true,
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            normals: [0, -1, 4.9017e-8, 0, 1, -3.92136e-8, 1, 3.72529e-8, 1.37248e-7, 0, 0, 1, -1, -1.30385e-7, -1.47051e-7, 0, 0, -1, 1.75298e-14, 1, -3.92136e-8, 1, 3.72528e-8, 1.37248e-7, -4.47035e-7, -4.47035e-7, 1, -1.16866e-14, -1, 3.92136e-8, 2.92164e-14, 1, -3.92136e-8, 1, 3.72528e-8, 1.37248e-7, -5.96046e-7, -2.98023e-7, 1, -1, -1.30385e-7, -1.47051e-7, 4.47035e-7, 4.47035e-7, -1, -1.46082e-14, -1, 4.9017e-8, 0, 1, -3.92136e-8, 1, 1.49012e-7, 2.35282e-7, -1, -1.49012e-7, -7.84272e-8, 2.98023e-7, 2.98023e-7, -1, -4.67462e-14, -1, 4.9017e-8, 1.75298e-14, 1, -3.92136e-8, -8.9407e-7, -2.66454e-13, 1, -1, -1.49012e-7, -7.84272e-8, 4.47035e-7, 4.47035e-7, -1, -4.67462e-14, -1, 4.9017e-8, 1.75298e-14, 1, -3.92136e-8, 1, 0, 3.13709e-7, -1, 0, 0, 4.47035e-7, 4.47035e-7, -1, 0, -1, 3.92136e-8, 1, 1.49012e-7, 2.35282e-7, -4.47035e-7, 1.49011e-7, 1, -1, -1.49012e-7, -7.84272e-8, 1, -4.67463e-14, 3.13709e-7, -1.05274e-13, -1, 4.12114e-8, .40281, .208464, .891228, -.402809, .208468, -.891227, 447035e-11, 231353e-11, -1, 0, -30847e-10, 1, 0, -1, 4.12116e-8, .633514, .32786, -.700834, -.633514, .327861, .700834, 0, -1, 4.12116e-8, .888114, .459623, 6.44782e-8, -.888114, .459623, -1.44812e-7, .633514, .327861, .700834, -.633514, .32786, -.700834, .633514, .32786, .700834, -.633514, .32786, -.700834, .40281, .208464, .891228, -.402809, .208468, -.891227, 0, 30847e-10, -1, -447035e-11, -231353e-11, 1, -1.05275e-13, -1, 4.12117e-8, .633514, .327861, -.700834, -.633514, .327858, .700834, -447035e-11, -231353e-11, 1, -1.05274e-13, -1, 4.12116e-8, .888114, .459623, 6.34211e-8, -.888114, .459623, -1.45869e-7, -1.05274e-13, -1, 4.12115e-8, .633514, .327859, .700834, -.633513, .327862, -.700833, -1.05274e-13, -1, 4.12116e-8, .888114, .459623, -2.11404e-8, -.888114, .459623, -2.11404e-8, -447035e-11, -231353e-11, 1, -1.05275e-13, -1, 4.12118e-8, .40281, .208465, -.891228, -.40281, .208462, .891228, -1.05275e-13, -1, 4.12117e-8, .633514, .327861, -.700834, -.633514, .327858, .700834, .633514, .32786, .700834, -7.0183e-14, -1, 4.7099e-8, .633513, .327862, -.700833, -.633514, .327858, .700834, 298024e-11, 154235e-11, -1, 0, -462705e-11, 1, -7.01832e-14, -1, 4.70991e-8, .402809, .208466, -.891227, 298024e-11, 154234e-11, -1, -1.05274e-13, -1, 4.12116e-8, .888114, .459623, 3.59386e-8, -.888114, .459623, -1.10987e-7, 447035e-11, 231352e-11, -1, -3.50914e-14, -1, 4.12116e-8, .888114, .459623, 3.48816e-8, -.888114, .459623, -1.13101e-7, 149012e-11, 7.71175e-7, -1, 0, -462705e-11, 1, 0, -1, 3.92136e-8, 4.67462e-14, 1, -7.84272e-8, 1, 3.72528e-8, 1.37248e-7, -2.98023e-7, -2.98023e-7, 1, -1, -1.30385e-7, -1.47051e-7, 2.98023e-7, 2.98023e-7, -1, -3.50914e-14, -1, 4.70989e-8, .888114, .459623, 3.38246e-8, -.888114, .459623, -1.15215e-7, -149012e-11, -7.71177e-7, 1, 1.46082e-14, -1, 4.9017e-8, -1, 0, 3.13709e-7, 0, 0, 1, 1, -2.98023e-7, -1.56854e-7, -2.98023e-7, 2.98023e-7, -1, 4.67463e-14, -1, 4.9017e-8, -1.75298e-14, 1, -3.92136e-8, 8.9407e-7, -3.9968e-13, 1, 1, -2.98023e-7, -1.56854e-7, -4.47035e-7, 4.47035e-7, -1, 4.67463e-14, -1, 4.9017e-8, -1.75299e-14, 1, -3.92136e-8, 8.9407e-7, -2.66454e-13, 1, 1, 0, 0, -4.47035e-7, 4.47035e-7, -1, 0, -1, 3.92136e-8, -1, -4.67463e-14, 3.13709e-7, 4.47035e-7, 1.49011e-7, 1, 1, -2.98023e-7, -1.56854e-7, 4.47035e-7, 1.49011e-7, 1, 1.05274e-13, -1, 4.12114e-8, -.40281, .208463, .891228, .402809, .208468, -.891227, -447035e-11, 231351e-11, -1, 0, -1, 4.12116e-8, -.633514, .32786, -.700834, .633514, .32786, .700834, 0, 0, 1, 0, 0, -1, -.888115, .459622, 2.21974e-8, .888114, .459623, -6.13071e-8, -.633514, .32786, .700834, .633514, .32786, -.700834, -.633514, .32786, .700834, .633514, .32786, -.700834, -.40281, .208462, .891228, .402809, .208468, -.891227, -447035e-11, 231353e-11, -1, 1.05275e-13, -1, 4.12117e-8, -.633514, .327861, -.700833, .633514, .327858, .700834, -447035e-11, 231353e-11, -1, 1.05274e-13, -1, 4.12116e-8, -.888115, .459622, 2.11404e-8, .888114, .459623, -6.23641e-8, 447035e-11, -231353e-11, 1, 1.05274e-13, -1, 4.12115e-8, -.633514, .327859, .700834, .633513, .327863, -.700833, -.888114, .459623, -2.11404e-8, .888114, .459623, -2.11404e-8, 1.05275e-13, -1, 4.12118e-8, -.40281, .208465, -.891228, .40281, .208462, .891228, 1.05275e-13, -1, 4.12117e-8, -.633514, .327861, -.700834, .633514, .327858, .700834, 1.05274e-13, -1, 4.12115e-8, -.633514, .327859, .700834, .633513, .327862, -.700833, 7.01831e-14, -1, 4.7099e-8, -.633513, .327861, -.700833, .633514, .327858, .700834, 298024e-11, -154235e-11, 1, 0, 462705e-11, -1, 7.01832e-14, -1, 4.70991e-8, -.402809, .208466, -.891227, -298024e-11, 154234e-11, -1],
            faces: [33, 0, 1, 2, 3, 0, 0, 0, 0, 33, 4, 7, 6, 5, 1, 1, 1, 1, 33, 0, 4, 5, 1, 2, 2, 2, 2, 33, 1, 5, 6, 2, 3, 3, 3, 3, 33, 2, 6, 7, 3, 4, 4, 4, 4, 33, 4, 0, 3, 7, 5, 5, 5, 5, 33, 8, 9, 10, 11, 0, 0, 0, 0, 33, 12, 15, 14, 13, 6, 6, 6, 6, 33, 8, 12, 13, 9, 7, 7, 7, 7, 33, 9, 13, 14, 10, 8, 8, 8, 8, 33, 10, 14, 15, 11, 4, 4, 4, 4, 33, 12, 8, 11, 15, 5, 5, 5, 5, 33, 16, 17, 18, 19, 9, 9, 9, 9, 33, 20, 23, 22, 21, 10, 10, 10, 10, 33, 16, 20, 21, 17, 11, 11, 11, 11, 33, 17, 21, 22, 18, 12, 12, 12, 12, 33, 18, 22, 23, 19, 13, 13, 13, 13, 33, 20, 16, 19, 23, 14, 14, 14, 14, 33, 24, 25, 26, 27, 15, 15, 15, 15, 33, 28, 31, 30, 29, 16, 16, 16, 16, 33, 24, 28, 29, 25, 17, 17, 17, 17, 33, 25, 29, 30, 26, 3, 3, 3, 3, 33, 26, 30, 31, 27, 18, 18, 18, 18, 33, 28, 24, 27, 31, 19, 19, 19, 19, 33, 32, 33, 34, 35, 20, 20, 20, 20, 33, 36, 39, 38, 37, 21, 21, 21, 21, 33, 32, 36, 37, 33, 17, 17, 17, 17, 33, 33, 37, 38, 34, 22, 22, 22, 22, 33, 34, 38, 39, 35, 23, 23, 23, 23, 33, 36, 32, 35, 39, 24, 24, 24, 24, 33, 40, 41, 42, 43, 25, 25, 25, 25, 33, 44, 47, 46, 45, 26, 26, 26, 26, 33, 40, 44, 45, 41, 27, 27, 27, 27, 33, 41, 45, 46, 42, 22, 22, 22, 22, 33, 42, 46, 47, 43, 28, 28, 28, 28, 33, 44, 40, 43, 47, 29, 29, 29, 29, 33, 48, 49, 50, 51, 30, 30, 30, 30, 33, 52, 55, 54, 53, 21, 21, 21, 21, 33, 48, 52, 53, 49, 31, 31, 31, 31, 33, 49, 53, 54, 50, 32, 32, 32, 32, 33, 50, 54, 55, 51, 33, 33, 33, 33, 33, 52, 48, 51, 55, 5, 5, 5, 5, 33, 56, 57, 58, 59, 30, 30, 30, 30, 33, 60, 63, 62, 61, 26, 26, 26, 26, 33, 56, 60, 61, 57, 34, 34, 34, 34, 33, 57, 61, 62, 58, 32, 32, 32, 32, 33, 58, 62, 63, 59, 28, 28, 28, 28, 33, 60, 56, 59, 63, 5, 5, 5, 5, 33, 64, 65, 66, 67, 35, 35, 35, 35, 33, 64, 68, 69, 65, 36, 36, 36, 36, 33, 66, 69, 68, 67, 37, 37, 37, 37, 32, 68, 64, 67, 38, 38, 38, 32, 65, 69, 66, 39, 39, 39, 33, 70, 71, 72, 73, 40, 40, 40, 40, 33, 70, 74, 75, 71, 41, 41, 41, 41, 33, 72, 75, 74, 73, 42, 42, 42, 42, 32, 74, 70, 73, 5, 5, 5, 32, 71, 75, 72, 3, 3, 3, 33, 76, 77, 78, 79, 43, 43, 43, 43, 33, 76, 80, 81, 77, 44, 44, 44, 44, 33, 78, 81, 80, 79, 45, 45, 45, 45, 32, 80, 76, 79, 5, 5, 5, 32, 77, 81, 78, 3, 3, 3, 33, 82, 83, 84, 85, 40, 40, 40, 40, 33, 82, 86, 87, 83, 46, 46, 46, 46, 33, 84, 87, 86, 85, 47, 47, 47, 47, 32, 86, 82, 85, 5, 5, 5, 32, 83, 87, 84, 3, 3, 3, 33, 88, 89, 90, 91, 40, 40, 40, 40, 33, 88, 92, 93, 89, 48, 48, 48, 48, 33, 90, 93, 92, 91, 49, 49, 49, 49, 32, 92, 88, 91, 5, 5, 5, 32, 89, 93, 90, 3, 3, 3, 33, 94, 95, 96, 97, 35, 35, 35, 35, 33, 94, 98, 99, 95, 50, 50, 50, 50, 33, 96, 99, 98, 97, 51, 51, 51, 51, 32, 98, 94, 97, 52, 52, 52, 32, 95, 99, 96, 53, 53, 53, 33, 100, 101, 102, 103, 54, 54, 54, 54, 33, 100, 104, 105, 101, 55, 55, 55, 55, 33, 102, 105, 104, 103, 56, 56, 56, 56, 32, 104, 100, 103, 52, 52, 52, 32, 101, 105, 102, 57, 57, 57, 33, 106, 107, 108, 109, 58, 58, 58, 58, 33, 106, 110, 111, 107, 59, 59, 59, 59, 33, 108, 111, 110, 109, 60, 60, 60, 60, 32, 110, 106, 109, 52, 52, 52, 32, 107, 111, 108, 57, 57, 57, 33, 112, 113, 114, 115, 61, 61, 61, 61, 33, 112, 116, 117, 113, 62, 62, 62, 62, 33, 114, 117, 116, 115, 63, 63, 63, 63, 32, 116, 112, 115, 52, 52, 52, 32, 113, 117, 114, 53, 53, 53, 33, 118, 119, 120, 121, 64, 64, 64, 64, 33, 118, 122, 123, 119, 65, 65, 65, 65, 33, 120, 123, 122, 121, 66, 66, 66, 66, 32, 122, 118, 121, 52, 52, 52, 32, 119, 123, 120, 67, 67, 67, 33, 124, 125, 126, 127, 68, 68, 68, 68, 33, 124, 128, 129, 125, 69, 69, 69, 69, 33, 126, 129, 128, 127, 70, 70, 70, 70, 32, 128, 124, 127, 52, 52, 52, 32, 125, 129, 126, 67, 67, 67, 33, 130, 131, 132, 133, 71, 71, 71, 71, 33, 130, 134, 135, 131, 72, 72, 72, 72, 33, 132, 135, 134, 133, 73, 73, 73, 73, 32, 134, 130, 133, 52, 52, 52, 32, 131, 135, 132, 67, 67, 67, 33, 136, 137, 138, 139, 61, 61, 61, 61, 33, 136, 140, 141, 137, 74, 74, 74, 74, 33, 138, 141, 140, 139, 63, 63, 63, 63, 32, 140, 136, 139, 52, 52, 52, 32, 137, 141, 138, 57, 57, 57, 33, 142, 143, 144, 145, 75, 75, 75, 75, 33, 142, 146, 147, 143, 76, 76, 76, 76, 33, 144, 147, 146, 145, 77, 77, 77, 77, 32, 146, 142, 145, 78, 78, 78, 32, 143, 147, 144, 79, 79, 79, 33, 148, 149, 150, 151, 80, 80, 80, 80, 33, 148, 152, 153, 149, 81, 81, 81, 81, 33, 150, 153, 152, 151, 70, 70, 70, 70, 32, 152, 148, 151, 82, 82, 82, 32, 149, 153, 150, 79, 79, 79, 33, 154, 155, 156, 157, 83, 83, 83, 83, 33, 154, 158, 159, 155, 84, 84, 84, 84, 33, 156, 159, 158, 157, 85, 85, 85, 85, 32, 158, 154, 157, 86, 86, 86, 32, 155, 159, 156, 39, 39, 39, 33, 160, 161, 162, 163, 87, 87, 87, 87, 33, 160, 164, 165, 161, 88, 88, 88, 88, 33, 162, 165, 164, 163, 89, 89, 89, 89, 32, 164, 160, 163, 90, 90, 90, 32, 161, 165, 162, 91, 91, 91, 33, 166, 167, 168, 169, 92, 92, 92, 92, 33, 170, 173, 172, 171, 93, 93, 93, 93, 33, 166, 170, 171, 167, 94, 94, 94, 94, 33, 167, 171, 172, 168, 95, 95, 95, 95, 33, 168, 172, 173, 169, 96, 96, 96, 96, 33, 170, 166, 169, 173, 97, 97, 97, 97, 33, 174, 175, 176, 177, 98, 98, 98, 98, 33, 174, 178, 179, 175, 99, 99, 99, 99, 33, 176, 179, 178, 177, 100, 100, 100, 100, 32, 178, 174, 177, 52, 52, 52, 32, 175, 179, 176, 101, 101, 101, 33, 180, 183, 182, 181, 102, 102, 102, 102, 33, 184, 185, 186, 187, 1, 1, 1, 1, 33, 180, 181, 185, 184, 103, 103, 103, 103, 33, 181, 182, 186, 185, 104, 104, 104, 104, 33, 182, 183, 187, 186, 105, 105, 105, 105, 33, 184, 187, 183, 180, 106, 106, 106, 106, 33, 188, 191, 190, 189, 107, 107, 107, 107, 33, 192, 193, 194, 195, 108, 108, 108, 108, 33, 188, 189, 193, 192, 103, 103, 103, 103, 33, 189, 190, 194, 193, 109, 109, 109, 109, 33, 190, 191, 195, 194, 110, 110, 110, 110, 33, 192, 195, 191, 188, 111, 111, 111, 111, 33, 196, 199, 198, 197, 112, 112, 112, 112, 33, 200, 201, 202, 203, 113, 113, 113, 113, 33, 196, 197, 201, 200, 103, 103, 103, 103, 33, 197, 198, 202, 201, 114, 114, 114, 114, 33, 198, 199, 203, 202, 115, 115, 115, 115, 33, 200, 203, 199, 196, 116, 116, 116, 116, 33, 204, 207, 206, 205, 117, 117, 117, 117, 33, 208, 209, 210, 211, 108, 108, 108, 108, 33, 204, 205, 209, 208, 118, 118, 118, 118, 33, 205, 206, 210, 209, 119, 119, 119, 119, 33, 206, 207, 211, 210, 120, 120, 120, 120, 33, 208, 211, 207, 204, 5, 5, 5, 5, 33, 212, 215, 214, 213, 30, 30, 30, 30, 33, 216, 217, 218, 219, 113, 113, 113, 113, 33, 212, 213, 217, 216, 118, 118, 118, 118, 33, 213, 214, 218, 217, 121, 121, 121, 121, 33, 214, 215, 219, 218, 115, 115, 115, 115, 33, 216, 219, 215, 212, 5, 5, 5, 5, 33, 220, 223, 222, 221, 122, 122, 122, 122, 33, 220, 221, 225, 224, 123, 123, 123, 123, 33, 222, 223, 224, 225, 124, 124, 124, 124, 32, 224, 223, 220, 125, 125, 125, 32, 221, 225, 222, 52, 52, 52, 33, 226, 229, 228, 227, 126, 126, 126, 126, 33, 226, 227, 231, 230, 127, 127, 127, 127, 33, 228, 229, 230, 231, 128, 128, 128, 128, 32, 230, 226, 229, 129, 129, 129, 32, 227, 231, 228, 130, 130, 130, 33, 232, 235, 234, 233, 126, 126, 126, 126, 33, 232, 233, 237, 236, 131, 131, 131, 131, 33, 234, 235, 236, 237, 132, 132, 132, 132, 32, 236, 232, 235, 129, 129, 129, 32, 233, 234, 237, 104, 104, 104, 33, 238, 241, 240, 239, 126, 126, 126, 126, 33, 238, 239, 243, 242, 133, 133, 133, 133, 33, 240, 241, 242, 243, 134, 134, 134, 134, 32, 242, 241, 238, 5, 5, 5, 32, 239, 243, 240, 130, 130, 130, 33, 244, 247, 246, 245, 40, 40, 40, 40, 33, 244, 245, 249, 248, 135, 135, 135, 135, 33, 246, 247, 248, 249, 136, 136, 136, 136, 32, 248, 247, 244, 5, 5, 5, 32, 245, 249, 246, 130, 130, 130, 33, 250, 253, 252, 251, 122, 122, 122, 122, 33, 250, 251, 255, 254, 137, 137, 137, 137, 33, 252, 253, 254, 255, 138, 138, 138, 138, 32, 254, 253, 250, 52, 52, 52, 32, 251, 255, 252, 139, 139, 139, 33, 256, 259, 258, 257, 140, 140, 140, 140, 33, 256, 257, 261, 260, 141, 141, 141, 141, 33, 258, 259, 260, 261, 142, 142, 142, 142, 32, 260, 256, 259, 39, 39, 39, 32, 257, 261, 258, 143, 143, 143, 33, 262, 265, 264, 263, 144, 144, 144, 144, 33, 262, 263, 267, 266, 145, 145, 145, 145, 33, 264, 265, 266, 267, 146, 146, 146, 146, 32, 266, 262, 265, 39, 39, 39, 32, 263, 264, 267, 147, 147, 147, 33, 268, 271, 270, 269, 148, 148, 148, 148, 33, 268, 269, 273, 272, 149, 149, 149, 149, 33, 270, 271, 272, 273, 150, 150, 150, 150, 32, 272, 271, 268, 52, 52, 52, 32, 269, 273, 270, 139, 139, 139, 33, 274, 277, 276, 275, 144, 144, 144, 144, 33, 274, 275, 279, 278, 151, 151, 151, 151, 33, 276, 277, 278, 279, 152, 152, 152, 152, 32, 278, 274, 277, 39, 39, 39, 32, 275, 276, 279, 147, 147, 147, 33, 280, 283, 282, 281, 153, 153, 153, 153, 33, 280, 281, 285, 284, 154, 154, 154, 154, 33, 282, 283, 284, 285, 155, 155, 155, 155, 32, 284, 283, 280, 52, 52, 52, 32, 281, 285, 282, 143, 143, 143, 33, 286, 289, 288, 287, 156, 156, 156, 156, 33, 286, 287, 291, 290, 157, 157, 157, 157, 33, 288, 289, 290, 291, 158, 158, 158, 158, 32, 290, 286, 289, 39, 39, 39, 32, 287, 291, 288, 143, 143, 143, 33, 292, 295, 294, 293, 159, 159, 159, 159, 33, 292, 293, 297, 296, 160, 160, 160, 160, 33, 294, 295, 296, 297, 161, 161, 161, 161, 32, 296, 295, 292, 52, 52, 52, 32, 293, 297, 294, 143, 143, 143, 33, 298, 301, 300, 299, 162, 162, 162, 162, 33, 298, 299, 303, 302, 163, 163, 163, 163, 33, 300, 301, 302, 303, 164, 164, 164, 164, 32, 302, 298, 301, 165, 165, 165, 32, 299, 303, 300, 166, 166, 166, 33, 304, 307, 306, 305, 167, 167, 167, 167, 33, 304, 305, 309, 308, 168, 168, 168, 168, 33, 306, 307, 308, 309, 155, 155, 155, 155, 32, 308, 307, 304, 169, 169, 169, 32, 305, 309, 306, 166, 166, 166],
            vertices: [.0999999, .0130989, 1.36657, .0999999, .013099, 1.74657, -.1, .013099, 1.74657, -.1, .0130989, 1.36657, .1, .213099, 1.36657, .0999999, .213099, 1.74657, -.1, .213099, 1.74657, -.1, .213099, 1.36657, .0999999, .0130989, .353236, .0999999, .0130989, .733236, -.1, .0130989, .733236, -.1, .0130989, .353236, .1, .213099, .353236, .0999999, .213099, .733237, -.1, .213099, .733236, -.1, .213099, .353236, .0999999, .0130989, -.660097, .0999999, .0130989, -.280097, -.1, .0130989, -.280097, -.1, .0130989, -.660097, .1, .213099, -.660097, .0999999, .213099, -.280097, -.1, .213099, -.280097, -.1, .213099, -.660097, .8, .0130989, 1.36657, .8, .013099, 1.74657, .6, .013099, 1.74657, .6, .0130989, 1.36657, .8, .213099, 1.36657, .8, .213099, 1.74657, .6, .213099, 1.74657, .6, .213099, 1.36657, .8, .0130989, .353236, .8, .0130989, .733236, .6, .0130989, .733236, .6, .0130989, .353236, .8, .213099, .353236, .8, .213099, .733236, .6, .213099, .733236, .6, .213099, .353236, 1.5, .0130989, .353236, 1.5, .0130989, .733236, 1.3, .0130989, .733236, 1.3, .0130989, .353236, 1.5, .213099, .353236, 1.5, .213099, .733236, 1.3, .213099, .733236, 1.3, .213099, .353236, .8, .0130989, -.660097, .8, .0130989, -.280097, .6, .0130989, -.280097, .6, .0130989, -.660097, .8, .213099, -.660097, .8, .213099, -.280097, .6, .213099, -.280097, .6, .213099, -.660097, 1.5, .0130989, -.660097, 1.5, .0130989, -.280097, 1.3, .0130989, -.280097, 1.3, .0130989, -.660097, 1.5, .213099, -.660097, 1.5, .213099, -.280097, 1.3, .213099, -.280097, 1.3, .213099, -.660097, 1.42, .0130989, .733523, .0199999, .013099, 1.36628, -.0200001, .013099, 1.36628, 1.38, .0130989, .733523, 1.4, .0517443, .733523, -1.2219e-7, .0517443, 1.36628, .02, .0130989, .733523, .72, .013099, 1.36628, .68, .013099, 1.36628, -.02, .0130989, .733523, 6.65585e-8, .0517443, .733523, .7, .0517443, 1.36628, .72, .0130989, .733523, .72, .013099, 1.36628, .68, .013099, 1.36628, .68, .0130989, .733523, .7, .0517443, .733523, .7, .0517443, 1.36628, 1.42, .0130989, .733523, .72, .013099, 1.36628, .68, .013099, 1.36628, 1.38, .0130989, .733523, 1.4, .0517443, .733523, .7, .0517443, 1.36628, .72, .0130989, .733523, .0199999, .013099, 1.36628, -.0200001, .013099, 1.36628, .68, .0130989, .733523, .7, .0517443, .733523, -1.2219e-7, .0517443, 1.36628, 1.42, .0130989, -.27981, .0199999, .0130989, .35295, -.0200001, .0130989, .35295, 1.38, .0130989, -.27981, 1.4, .0517442, -.27981, -1.2219e-7, .0517443, .35295, .02, .0130989, -.27981, .72, .0130989, .35295, .68, .0130989, .35295, -.02, .0130989, -.27981, 6.65585e-8, .0517442, -.27981, .7, .0517443, .35295, .72, .0130989, -.27981, .72, .0130989, .35295, .68, .0130989, .35295, .68, .0130989, -.27981, .7, .0517442, -.27981, .7, .0517443, .35295, .72, .0130989, -.27981, .0199999, .0130989, .35295, -.0200001, .0130989, .35295, .68, .0130989, -.27981, .7, .0517442, -.27981, -1.2219e-7, .0517443, .35295, 1.42, .0130989, -.27981, 1.42, .0130989, .35295, 1.38, .0130989, .35295, 1.38, .0130989, -.27981, 1.4, .0517442, -.27981, 1.4, .0517443, .35295, .02, .0130989, -.27981, 1.42, .0130989, .35295, 1.38, .0130989, .35295, -.02, .0130989, -.27981, 1.14242e-7, .0517442, -.27981, 1.4, .0517443, .35295, .72, .0130989, -.27981, 1.42, .0130989, .35295, 1.38, .0130989, .35295, .68, .0130989, -.27981, .7, .0517442, -.27981, 1.4, .0517443, .35295, 1.42, .0130989, -.27981, .72, .0130989, .35295, .68, .0130989, .35295, 1.38, .0130989, -.27981, 1.4, .0517442, -.27981, .7, .0517443, .35295, .02, .0130988, -1.29314, .72, .0130989, -.660384, .68, .0130989, -.660384, -.02, .0130988, -1.29314, 6.65585e-8, .0517442, -1.29314, .7, .0517442, -.660384, .02, .0130988, -1.29314, 1.42, .0130989, -.660384, 1.38, .0130989, -.660384, -.02, .0130988, -1.29314, 1.14242e-7, .0517442, -1.29314, 1.4, .0517442, -.660384, .0199999, .0130989, .733523, .0199999, .013099, 1.36628, -.0200001, .013099, 1.36628, -.02, .0130989, .733523, -4.47035e-8, .0517443, .733523, -1.2219e-7, .0517443, 1.36628, .0199999, .0130989, -.27981, .0199999, .0130989, .35295, -.0200001, .0130989, .35295, -.02, .0130989, -.27981, -4.47035e-8, .0517442, -.27981, -1.2219e-7, .0517443, .35295, .0999999, .0130988, -1.67343, .0999999, .0130988, -1.29343, -.1, .0130988, -1.29343, -.1, .0130988, -1.67343, .1, .213099, -1.67343, .0999999, .213099, -1.29343, -.1, .213099, -1.29343, -.1, .213099, -1.67343, .0199999, .0130988, -1.29314, .0199999, .0130989, -.660384, -.0200001, .0130989, -.660384, -.02, .0130988, -1.29314, -4.47035e-8, .0517442, -1.29314, -1.2219e-7, .0517442, -.660384, -.8, .0130989, 1.36657, -.8, .013099, 1.74657, -.6, .013099, 1.74657, -.6, .0130989, 1.36657, -.8, .213099, 1.36657, -.8, .213099, 1.74657, -.6, .213099, 1.74657, -.6, .213099, 1.36657, -.8, .0130989, .353236, -.8, .0130989, .733236, -.6, .0130989, .733236, -.6, .0130989, .353236, -.8, .213099, .353236, -.8, .213099, .733236, -.6, .213099, .733236, -.6, .213099, .353236, -1.5, .0130989, .353236, -1.5, .0130989, .733236, -1.3, .0130989, .733236, -1.3, .0130989, .353236, -1.5, .213099, .353236, -1.5, .213099, .733236, -1.3, .213099, .733236, -1.3, .213099, .353236, -.8, .0130989, -.660097, -.8, .0130989, -.280097, -.6, .0130989, -.280097, -.6, .0130989, -.660097, -.8, .213099, -.660097, -.8, .213099, -.280097, -.6, .213099, -.280097, -.6, .213099, -.660097, -1.5, .0130989, -.660097, -1.5, .0130989, -.280097, -1.3, .0130989, -.280097, -1.3, .0130989, -.660097, -1.5, .213099, -.660097, -1.5, .213099, -.280097, -1.3, .213099, -.280097, -1.3, .213099, -.660097, -1.42, .0130989, .733523, -.02, .013099, 1.36628, .02, .013099, 1.36628, -1.38, .0130989, .733523, -1.4, .0517443, .733523, 4.56969e-8, .0517443, 1.36628, -.0200001, .0130989, .733523, -.72, .013099, 1.36628, -.68, .013099, 1.36628, .0199999, .0130989, .733523, -1.43051e-7, .0517443, .733523, -.7, .0517443, 1.36628, -.72, .0130989, .733523, -.72, .013099, 1.36628, -.68, .013099, 1.36628, -.68, .0130989, .733523, -.7, .0517443, .733523, -.7, .0517443, 1.36628, -1.42, .0130989, .733523, -.72, .013099, 1.36628, -.68, .013099, 1.36628, -1.38, .0130989, .733523, -1.4, .0517443, .733523, -.7, .0517443, 1.36628, -.72, .0130989, .733523, -.02, .013099, 1.36628, .02, .013099, 1.36628, -.68, .0130989, .733523, -.7, .0517443, .733523, 4.56969e-8, .0517443, 1.36628, -1.42, .0130989, -.27981, -.02, .0130989, .35295, .02, .0130989, .35295, -1.38, .0130989, -.27981, -1.4, .0517442, -.27981, 4.56969e-8, .0517443, .35295, -.0200001, .0130989, -.27981, -.72, .0130989, .35295, -.68, .0130989, .35295, .0199999, .0130989, -.27981, -1.43051e-7, .0517442, -.27981, -.7, .0517443, .35295, -.72, .0130989, -.27981, -.72, .0130989, .35295, -.68, .0130989, .35295, -.68, .0130989, -.27981, -.7, .0517442, -.27981, -.7, .0517443, .35295, -.72, .0130989, -.27981, -.02, .0130989, .35295, .02, .0130989, .35295, -.68, .0130989, -.27981, -.7, .0517442, -.27981, 4.56969e-8, .0517443, .35295, -1.42, .0130989, -.27981, -1.42, .0130989, .35295, -1.38, .0130989, .35295, -1.38, .0130989, -.27981, -1.4, .0517442, -.27981, -1.4, .0517443, .35295, -.0200001, .0130989, -.27981, -1.42, .0130989, .35295, -1.38, .0130989, .35295, .0199999, .0130989, -.27981, -1.90735e-7, .0517442, -.27981, -1.4, .0517443, .35295, -.72, .0130989, -.27981, -1.42, .0130989, .35295, -1.38, .0130989, .35295, -.68, .0130989, -.27981, -.7, .0517442, -.27981, -1.4, .0517443, .35295, -1.42, .0130989, -.27981, -.72, .0130989, .35295, -.68, .0130989, .35295, -1.38, .0130989, -.27981, -1.4, .0517442, -.27981, -.7, .0517443, .35295, -.0200001, .0130988, -1.29314, -.72, .0130989, -.660384, -.68, .0130989, -.660384, .0199999, .0130988, -1.29314, -1.43051e-7, .0517442, -1.29314, -.7, .0517442, -.660384, -.0200001, .0130988, -1.29314, -1.42, .0130989, -.660384, -1.38, .0130989, -.660384, .0199999, .0130988, -1.29314, -1.90735e-7, .0517442, -1.29314, -1.4, .0517442, -.660384],
            metadata: {
                version: 3,
                generator: "io_three",
                vertices: 310,
                normals: 170,
                uvs: 0,
                type: "Geometry",
                faces: 249
            },
            uvs: []
        },
        vault: {
            id: "vault",
            primaryColorFaces: [86, 87, 110, 111, 112, 113, 114, 115],
            sizeOnGrid: {
                width: 1,
                height: 1
            },
            imagePlanePosition: {
                y: 8.1
            },
            imagePlaneRotation: {
                x: -1.57079632
            },
            imagePlaneScale: .7,
            faces: [33, 0, 1, 3, 2, 0, 0, 0, 0, 33, 2, 3, 5, 4, 1, 1, 1, 1, 33, 4, 5, 7, 6, 2, 2, 2, 2, 33, 6, 7, 9, 8, 3, 3, 3, 3, 32, 5, 3, 1, 4, 4, 4, 32, 1, 11, 9, 5, 5, 5, 32, 9, 7, 5, 5, 5, 5, 32, 1, 9, 5, 5, 5, 5, 33, 1, 0, 10, 11, 6, 6, 6, 6, 33, 8, 9, 11, 10, 7, 7, 7, 7, 32, 10, 0, 2, 8, 8, 8, 32, 2, 4, 6, 9, 9, 9, 32, 6, 8, 10, 9, 9, 9, 32, 2, 6, 10, 9, 9, 9, 33, 12, 13, 15, 14, 10, 10, 10, 10, 33, 14, 15, 17, 16, 11, 11, 11, 11, 33, 16, 17, 19, 18, 12, 12, 12, 12, 33, 18, 19, 21, 20, 13, 13, 13, 13, 32, 17, 15, 13, 14, 14, 14, 32, 13, 23, 21, 15, 15, 15, 32, 21, 19, 17, 16, 16, 16, 32, 13, 21, 17, 17, 17, 17, 33, 22, 23, 13, 12, 18, 18, 18, 18, 33, 20, 21, 23, 22, 4, 4, 4, 4, 32, 22, 12, 14, 19, 19, 19, 32, 14, 16, 18, 20, 20, 20, 32, 18, 20, 22, 21, 21, 21, 32, 14, 18, 22, 22, 22, 22, 33, 24, 25, 27, 26, 23, 23, 23, 23, 33, 26, 27, 29, 28, 24, 24, 24, 24, 33, 28, 29, 31, 30, 25, 25, 25, 25, 33, 30, 31, 33, 32, 26, 26, 26, 26, 32, 29, 27, 25, 27, 27, 27, 32, 25, 35, 33, 28, 28, 28, 32, 33, 31, 29, 29, 29, 29, 32, 25, 33, 29, 30, 30, 30, 33, 34, 35, 25, 24, 31, 31, 31, 31, 33, 32, 33, 35, 34, 32, 32, 32, 32, 32, 34, 24, 26, 33, 33, 33, 32, 26, 28, 30, 34, 34, 34, 32, 30, 32, 34, 35, 35, 35, 32, 26, 30, 34, 36, 36, 36, 33, 36, 37, 39, 38, 37, 37, 37, 37, 33, 38, 39, 41, 40, 11, 11, 11, 11, 33, 40, 41, 43, 42, 38, 38, 38, 38, 33, 42, 43, 45, 44, 39, 39, 39, 39, 32, 41, 39, 37, 40, 40, 40, 32, 37, 47, 45, 41, 41, 41, 32, 45, 43, 41, 42, 42, 42, 32, 37, 45, 41, 30, 30, 30, 33, 46, 47, 37, 36, 43, 43, 43, 43, 33, 44, 45, 47, 46, 4, 4, 4, 4, 32, 46, 36, 38, 44, 44, 44, 32, 38, 40, 42, 34, 34, 34, 32, 42, 44, 46, 45, 45, 45, 32, 38, 42, 46, 46, 46, 46, 33, 49, 51, 50, 48, 47, 47, 47, 47, 33, 51, 55, 58, 56, 48, 48, 48, 48, 33, 55, 53, 52, 54, 49, 49, 49, 49, 33, 49, 48, 64, 65, 50, 50, 50, 50, 33, 48, 50, 54, 52, 9, 9, 9, 9, 33, 53, 55, 51, 49, 51, 51, 51, 51, 33, 59, 57, 61, 63, 52, 52, 52, 52, 33, 50, 51, 56, 57, 53, 53, 53, 53, 33, 55, 54, 59, 58, 54, 54, 54, 54, 33, 54, 50, 57, 59, 55, 55, 55, 55, 33, 60, 62, 63, 61, 56, 56, 56, 56, 33, 56, 58, 62, 60, 57, 57, 57, 57, 33, 58, 59, 63, 62, 58, 58, 58, 58, 33, 57, 56, 60, 61, 59, 59, 59, 59, 33, 64, 67, 71, 68, 11, 11, 11, 11, 33, 48, 52, 67, 64, 60, 60, 60, 60, 33, 53, 49, 65, 66, 61, 61, 61, 61, 33, 52, 53, 66, 67, 62, 62, 62, 62, 33, 70, 69, 73, 74, 63, 63, 63, 63, 33, 67, 66, 70, 71, 64, 64, 64, 64, 33, 66, 65, 69, 70, 65, 65, 65, 65, 33, 65, 64, 68, 69, 66, 66, 66, 66, 33, 74, 73, 77, 78, 8, 8, 8, 8, 33, 69, 68, 72, 73, 67, 67, 67, 67, 33, 68, 71, 75, 72, 68, 68, 68, 68, 33, 71, 70, 74, 75, 69, 69, 69, 69, 33, 78, 77, 76, 79, 70, 70, 70, 70, 33, 73, 72, 76, 77, 71, 71, 71, 71, 33, 72, 75, 79, 76, 4, 4, 4, 4, 33, 75, 74, 78, 79, 72, 72, 72, 72, 33, 80, 81, 83, 82, 73, 73, 73, 73, 33, 82, 83, 85, 84, 74, 74, 74, 74, 33, 84, 85, 87, 86, 75, 75, 75, 75, 33, 86, 87, 89, 88, 76, 76, 76, 76, 33, 89, 87, 95, 96, 77, 77, 77, 77, 33, 90, 91, 81, 80, 78, 78, 78, 78, 33, 88, 89, 91, 90, 79, 79, 79, 79, 32, 90, 80, 82, 80, 80, 80, 32, 82, 84, 86, 81, 81, 81, 32, 86, 88, 90, 82, 82, 82, 32, 82, 86, 90, 83, 83, 83, 33, 97, 96, 102, 103, 84, 84, 84, 84, 33, 85, 83, 92, 94, 85, 85, 85, 85, 33, 91, 89, 96, 97, 86, 86, 86, 86, 33, 83, 81, 93, 92, 87, 87, 87, 87, 33, 87, 85, 94, 95, 88, 88, 88, 88, 33, 81, 91, 97, 93, 89, 89, 89, 89, 33, 103, 102, 108, 109, 90, 90, 90, 90, 33, 95, 94, 100, 101, 91, 91, 91, 91, 33, 92, 93, 99, 98, 92, 92, 92, 92, 33, 93, 97, 103, 99, 93, 93, 93, 93, 33, 96, 95, 101, 102, 94, 94, 94, 94, 33, 94, 92, 98, 100, 95, 95, 95, 95, 33, 108, 107, 113, 114, 96, 96, 96, 96, 33, 101, 100, 106, 107, 97, 97, 97, 97, 33, 98, 99, 105, 104, 98, 98, 98, 98, 33, 99, 103, 109, 105, 99, 99, 99, 99, 33, 102, 101, 107, 108, 100, 100, 100, 100, 33, 100, 98, 104, 106, 101, 101, 101, 101, 32, 112, 110, 111, 102, 102, 102, 32, 111, 115, 114, 103, 103, 103, 32, 114, 113, 112, 104, 104, 104, 32, 111, 114, 112, 105, 105, 105, 33, 106, 104, 110, 112, 106, 106, 106, 106, 33, 109, 108, 114, 115, 107, 107, 107, 107, 33, 107, 106, 112, 113, 108, 108, 108, 108, 33, 104, 105, 111, 110, 109, 109, 109, 109, 33, 105, 109, 115, 111, 110, 110, 110, 110, 33, 116, 117, 119, 118, 111, 111, 111, 111, 33, 118, 119, 121, 120, 112, 112, 112, 112, 33, 120, 121, 123, 122, 113, 113, 113, 113, 33, 122, 123, 125, 124, 114, 114, 114, 114, 32, 121, 119, 117, 115, 115, 115, 32, 117, 127, 125, 116, 116, 116, 32, 125, 123, 121, 117, 117, 117, 32, 117, 125, 121, 118, 118, 118, 33, 126, 127, 117, 116, 119, 119, 119, 119, 33, 124, 125, 127, 126, 120, 120, 120, 120, 32, 126, 116, 118, 121, 121, 121, 32, 118, 120, 122, 122, 122, 122, 32, 122, 124, 126, 123, 123, 123, 32, 118, 122, 126, 124, 124, 124, 33, 128, 129, 131, 130, 125, 125, 125, 125, 33, 130, 131, 133, 132, 126, 126, 126, 126, 33, 132, 133, 135, 134, 127, 127, 127, 127, 33, 134, 135, 137, 136, 128, 128, 128, 128, 32, 133, 131, 129, 129, 129, 129, 32, 129, 139, 137, 130, 130, 130, 32, 137, 135, 133, 131, 131, 131, 32, 129, 137, 133, 132, 132, 132, 33, 138, 139, 129, 128, 133, 133, 133, 133, 33, 136, 137, 139, 138, 134, 134, 134, 134, 32, 138, 128, 130, 135, 135, 135, 32, 130, 132, 134, 136, 136, 136, 32, 134, 136, 138, 137, 137, 137, 32, 130, 134, 138, 138, 138, 138, 33, 140, 141, 143, 142, 139, 139, 139, 139, 33, 142, 143, 145, 144, 140, 140, 140, 140, 33, 144, 145, 147, 146, 141, 141, 141, 141, 33, 146, 147, 149, 148, 142, 142, 142, 142, 32, 145, 143, 141, 143, 143, 143, 32, 141, 151, 149, 144, 144, 144, 32, 149, 147, 145, 145, 145, 145, 32, 141, 149, 145, 146, 146, 146, 33, 150, 151, 141, 140, 147, 147, 147, 147, 33, 148, 149, 151, 150, 148, 148, 148, 148, 32, 150, 140, 142, 149, 149, 149, 32, 142, 144, 146, 150, 150, 150, 32, 146, 148, 150, 151, 151, 151, 32, 142, 146, 150, 152, 152, 152, 33, 152, 153, 155, 154, 0, 0, 0, 0, 33, 154, 155, 157, 156, 153, 153, 153, 153, 33, 156, 157, 159, 158, 154, 154, 154, 154, 33, 158, 159, 161, 160, 155, 155, 155, 155, 32, 157, 155, 153, 4, 4, 4, 32, 153, 163, 161, 5, 5, 5, 32, 161, 159, 157, 5, 5, 5, 32, 153, 161, 157, 5, 5, 5, 33, 162, 163, 153, 152, 6, 6, 6, 6, 33, 160, 161, 163, 162, 156, 156, 156, 156, 32, 162, 152, 154, 8, 8, 8, 32, 154, 156, 158, 157, 157, 157, 32, 158, 160, 162, 158, 158, 158, 32, 154, 158, 162, 159, 159, 159, 33, 164, 165, 166, 167, 11, 11, 11, 11, 32, 173, 168, 169, 160, 160, 160, 32, 169, 170, 164, 161, 161, 161, 32, 164, 167, 171, 162, 162, 162, 32, 172, 173, 169, 163, 163, 163, 32, 169, 164, 171, 164, 164, 164, 32, 169, 171, 172, 165, 165, 165, 33, 174, 165, 164, 175, 9, 9, 9, 9, 32, 209, 178, 177, 166, 166, 166, 32, 166, 165, 196, 167, 167, 167, 32, 209, 177, 194, 168, 168, 168, 32, 176, 166, 196, 169, 169, 169, 32, 196, 209, 194, 170, 170, 170, 32, 196, 194, 176, 171, 171, 171, 33, 171, 167, 166, 176, 172, 172, 172, 172, 33, 177, 178, 168, 173, 9, 9, 9, 9, 32, 179, 168, 180, 173, 173, 173, 32, 184, 185, 186, 174, 174, 174, 32, 179, 180, 181, 175, 175, 175, 32, 183, 184, 186, 176, 176, 176, 32, 186, 179, 181, 177, 177, 177, 32, 182, 183, 186, 178, 178, 178, 32, 181, 182, 186, 179, 179, 179, 32, 188, 186, 185, 180, 180, 180, 32, 168, 179, 187, 181, 181, 181, 32, 187, 188, 185, 182, 182, 182, 32, 169, 168, 187, 183, 183, 183, 32, 187, 185, 169, 184, 184, 184, 33, 189, 170, 169, 185, 185, 185, 185, 185, 32, 170, 189, 190, 186, 186, 186, 32, 190, 191, 192, 187, 187, 187, 32, 193, 175, 164, 187, 187, 187, 32, 170, 190, 192, 188, 188, 188, 32, 193, 164, 170, 189, 189, 189, 32, 192, 193, 170, 190, 190, 190, 33, 176, 194, 172, 171, 191, 191, 191, 191, 33, 194, 177, 173, 172, 188, 188, 188, 188, 33, 195, 174, 175, 193, 192, 192, 192, 192, 32, 165, 174, 195, 193, 193, 193, 32, 208, 207, 206, 194, 194, 194, 32, 196, 165, 195, 195, 195, 195, 32, 208, 206, 215, 196, 196, 196, 32, 196, 195, 208, 197, 197, 197, 32, 208, 215, 196, 198, 198, 198, 33, 168, 178, 197, 180, 8, 8, 8, 8, 33, 198, 199, 184, 183, 199, 199, 199, 199, 32, 203, 190, 189, 200, 200, 200, 32, 189, 185, 184, 201, 201, 201, 32, 184, 200, 201, 202, 202, 202, 32, 202, 203, 189, 203, 203, 203, 32, 189, 184, 201, 204, 204, 204, 32, 189, 201, 202, 205, 205, 205, 33, 181, 180, 197, 204, 206, 206, 206, 206, 33, 204, 205, 182, 181, 11, 11, 11, 11, 33, 205, 198, 183, 182, 207, 207, 207, 207, 33, 190, 206, 207, 191, 9, 9, 9, 9, 33, 192, 191, 207, 208, 207, 207, 207, 207, 33, 193, 192, 208, 195, 11, 11, 11, 11, 33, 184, 199, 210, 200, 9, 9, 9, 9, 33, 211, 206, 190, 203, 208, 208, 208, 208, 33, 201, 200, 210, 212, 188, 188, 188, 188, 33, 202, 201, 212, 213, 191, 191, 191, 191, 33, 213, 211, 203, 202, 196, 196, 196, 196, 33, 215, 214, 209, 196, 209, 209, 209, 209, 32, 210, 199, 214, 210, 210, 210, 32, 215, 206, 211, 211, 211, 211, 32, 212, 210, 214, 207, 207, 207, 32, 215, 211, 213, 210, 210, 210, 32, 212, 214, 215, 212, 212, 212, 32, 215, 213, 212, 207, 207, 207, 32, 214, 199, 198, 187, 187, 187, 32, 197, 178, 209, 188, 188, 188, 32, 214, 198, 205, 187, 187, 187, 32, 204, 197, 209, 188, 188, 188, 32, 209, 214, 205, 213, 213, 213, 32, 205, 204, 209, 214, 214, 214, 33, 187, 179, 216, 217, 192, 192, 192, 192, 33, 188, 187, 217, 218, 215, 215, 215, 215, 33, 217, 216, 219, 218, 216, 216, 216, 216, 33, 179, 186, 219, 216, 217, 217, 217, 217, 33, 186, 188, 218, 219, 211, 211, 211, 211],
            vertices: [-.851857, .447475, .985255, -.851857, .640033, .985255, -.837327, .447475, .999092, -.837327, .640033, .999092, -.842045, .447475, 1.01859, -.842045, .640033, 1.01859, -.861293, .447475, 1.02426, -.861293, .640033, 1.02426, -.875823, .447475, 1.01042, -.875823, .640033, 1.01042, -.871105, .447475, .99092, -.871105, .640033, .99092, .621752, .69506, 1.15352, .787749, .69506, 1.19368, .614538, .641919, 1.18334, .780535, .641919, 1.2235, .600109, .641919, 1.24298, .766106, .641919, 1.28314, .592894, .69506, 1.2728, .758892, .69506, 1.31296, .600109, .748201, 1.24298, .766106, .748201, 1.28314, .614538, .748201, 1.18334, .780535, .748201, 1.2235, .621752, 1.4692, 1.15352, .787749, 1.4692, 1.19368, .614538, 1.41606, 1.18334, .780535, 1.41606, 1.2235, .600109, 1.41606, 1.24298, .766106, 1.41606, 1.28314, .592894, 1.4692, 1.2728, .758892, 1.4692, 1.31296, .600109, 1.52234, 1.24298, .766106, 1.52234, 1.28314, .614538, 1.52234, 1.18334, .780535, 1.52234, 1.2235, .621752, 1.08213, 1.15352, .787749, 1.08213, 1.19368, .614538, 1.02899, 1.18334, .780535, 1.02899, 1.2235, .600109, 1.02899, 1.24298, .766106, 1.02899, 1.28314, .592894, 1.08213, 1.2728, .758892, 1.08213, 1.31296, .600109, 1.13527, 1.24298, .766106, 1.13527, 1.28314, .614538, 1.13527, 1.18334, .780535, 1.13527, 1.2235, -.857133, .317834, 1.05766, -.857133, 1.84642, 1.05766, -.830507, .317834, .947601, -.830507, 1.84642, .947601, .788251, .317834, 1.45572, .788251, 1.84642, 1.45572, .814876, .317834, 1.34566, .814876, 1.84642, 1.34566, -.69291, 1.71859, .980889, -.69291, .445664, .980889, .67728, 1.71859, 1.31237, .67728, .445664, 1.31237, -.57443, 1.64515, .837059, -.57443, .519109, .837059, .637646, 1.64515, 1.13029, .637646, .519109, 1.13029, -.778204, .391161, 1.07675, -.778204, 1.7731, 1.07675, .709321, 1.7731, 1.43662, .709321, .391161, 1.43662, -.787034, .391161, 1.11325, -.787034, 1.7731, 1.11325, .700491, 1.7731, 1.47312, .700491, .391161, 1.47312, -.748159, .427276, 1.12266, -.748159, 1.73698, 1.12266, .661617, 1.73698, 1.46372, .661617, .427276, 1.46372, -.741152, .427276, 1.09369, -.741152, 1.73698, 1.09369, .668623, 1.73698, 1.43476, .668623, .427276, 1.43476, .01336, 1.28996, 1.27293, -.0126008, 1.28996, 1.38024, .163866, 1.1425, 1.30934, .137905, 1.1425, 1.41665, .114996, .934671, 1.29752, .0890349, .934671, 1.40483, -.0843798, .874299, 1.24928, -.110341, .874298, 1.35659, -.234885, 1.02176, 1.21287, -.260846, 1.02176, 1.32018, -.186016, 1.22959, 1.2247, -.211976, 1.22959, 1.332, .104357, 1.13234, 1.40853, -.0208239, 1.25499, 1.37825, .0637102, .959483, 1.3987, -.102118, .909269, 1.35858, -.227298, 1.03192, 1.3283, -.186652, 1.20478, 1.33813, .107508, 1.13234, 1.39551, -.0176725, 1.25499, 1.36522, .0668615, .959483, 1.38567, -.0989662, .909269, 1.34556, -.224147, 1.03192, 1.31527, -.1835, 1.20478, 1.3251, -.012256, 1.09608, 1.36653, -.0470285, 1.13015, 1.35812, -.0235468, 1.04806, 1.3638, -.0696102, 1.03411, 1.35266, -.104383, 1.06818, 1.34425, -.0930919, 1.1162, 1.34698, -.0159018, 1.09608, 1.3816, -.0506743, 1.13015, 1.37319, -.0271926, 1.04806, 1.37887, -.073256, 1.03411, 1.36773, -.108028, 1.06818, 1.35932, -.0967377, 1.1162, 1.36205, -.45817, .699409, 1.21565, .303043, 1.52182, 1.39981, -.435222, .685166, 1.1844, .325991, 1.50758, 1.36855, -.406149, .656681, 1.19143, .355065, 1.47909, 1.37559, -.400023, .642439, 1.22972, .36119, 1.46485, 1.41387, -.422972, .656681, 1.26097, .338242, 1.47909, 1.44512, -.452045, .685166, 1.25393, .309168, 1.50758, 1.43809, -.575483, 1.2558, 1.18727, .497384, .988756, 1.44682, -.571792, 1.23572, 1.15136, .501075, .968683, 1.41091, -.581232, 1.19558, 1.14907, .491635, .928535, 1.40863, -.594364, 1.1755, 1.1827, .478503, .908462, 1.44225, -.598055, 1.19558, 1.21861, .474812, .928535, 1.47816, -.588615, 1.23572, 1.22089, .484252, .968683, 1.48045, -.165803, 1.63852, 1.28638, .14585, .549065, 1.36178, -.176648, 1.63269, 1.24695, .135005, .543234, 1.32235, -.215162, 1.62103, 1.23764, .0964907, .531572, 1.31303, -.242831, 1.61519, 1.26775, .0688224, .525741, 1.34314, -.231985, 1.62103, 1.30717, .0796679, .531572, 1.38257, -.193471, 1.63269, 1.31649, .118182, .543234, 1.39189, -.851857, 1.5296, .985255, -.851857, 1.72216, .985255, -.837327, 1.5296, .999092, -.837327, 1.72216, .999092, -.842045, 1.5296, 1.01859, -.842045, 1.72216, 1.01859, -.861293, 1.5296, 1.02426, -.861293, 1.72216, 1.02426, -.875823, 1.5296, 1.01042, -.875823, 1.72216, 1.01042, -.871105, 1.5296, .99092, -.871105, 1.72216, .99092, -1, -1.19209e-7, -1, -.916003, -1.19209e-7, -.916003, -.916003, -1.19209e-7, -.79, -1, -1.19209e-7, -.79, -1, 0, 1, -1, 2, 1, -1, 2, -1, -1, .174934, -.79, -1, .174934, .79, -1, 0, .79, -.758308, -1.19209e-7, -.916003, -.758308, -1.19209e-7, -1, -.916003, .174934, -.79, -.916003, 0, .79, -.916003, 0, .916003, -.846425, .317834, 1, -.758307, 0, 1, -.758307, .174934, 1, .821693, .174934, 1, .821693, 0, 1, 1, 0, 1, .999999, 2, 1, .846425, .317834, 1, -.846425, 1.84642, 1, .846425, 1.84642, 1, 1, 2, -1, 1, -1.19209e-7, -1, .821692, -1.19209e-7, -1, .821692, .174934, -1, -.758308, .174934, -1, -.916003, .174934, .79, -.758308, .174934, -.916003, -.916003, .247942, -.916003, -.758307, 0, .916003, .821693, 0, .916003, .916003, 0, .916003, 1, 0, .79, 1, .174934, .79, 1, .174934, -.79, 1, -1.19209e-7, -.79, -.758307, .174934, .916003, .821693, .174934, .916003, .916003, -1.19209e-7, -.916003, .821692, -1.19209e-7, -.916003, .821692, .174934, -.916003, -.916003, .247942, .916003, .916003, 0, .79, .916003, -1.19209e-7, -.79, .916003, .174934, .79, .916003, .174934, -.79, .916003, .247942, .916003, .916003, .247942, -.916003, -.846425, .317834, -.912855, -.846425, 1.84642, -.912855, .846425, 1.84642, -.912855, .846425, .317834, -.912855],
            metadata: {
                faces: 261,
                generator: "io_three",
                type: "Geometry",
                normals: 218,
                uvs: 0,
                version: 3,
                vertices: 220
            },
            normals: [.68962, 0, -.724172, .971961, 0, .235142, .282342, 0, .959314, -.689618, 0, .724173, 0, 1, 0, 0, 1, 0, -.282342, 0, -.959314, -.971961, 0, -.235141, 0, -1, 0, 0, -1, 0, .203639, -.5, -.841743, 0, -1, 0, -.203639, -.5, .841743, -.203639, .500001, .841742, .971961, 2.67761e-7, .235141, .971961, -2.67761e-7, .235141, .971962, 0, .23514, .971961, 0, .235141, .203639, .5, -.841743, -.971961, 0, -.235141, -.97196, 244555e-11, -.235145, -.97196, -244555e-11, -.235145, -.971961, 0, -.235143, .203639, -.499999, -.841743, -5.67626e-7, -1, 8.62064e-7, -.203639, -.5, .841743, -.203638, .499999, .841743, .97196, 165119e-11, .235144, .971961, -165119e-11, .235144, .971961, 0, .235142, .971961, 0, .235143, .203639, .499999, -.841743, 6.78433e-7, 1, 1.64132e-7, -.971961, 0, -.235141, -.971961, 217779e-11, -.235144, -.97196, -217779e-11, -.235144, -.971961, 0, -.235143, .203639, -.500001, -.841742, -.203639, -.500001, .841743, -.203639, .500001, .841743, .97196, 244556e-11, .235145, .97196, -244556e-11, .235145, .971961, 0, .235141, .203639, .500001, -.841742, -.971961, 0, -.235141, -.971961, -217779e-11, -.235144, -.971961, 0, -.235143, -.971961, -4.70809e-9, -.235142, .235142, 0, -.971961, .971961, 1.81598e-8, .235141, -.235142, 0, .971961, 0, 1, 0, .0943524, -.915966, -.390006, .235142, -4.10946e-8, -.971961, .235142, -8.21893e-8, -.971961, .235142, 0, -.971961, .235142, -7.42819e-8, -.971961, .0943523, .915966, -.390006, .97712, -2.18749e-8, -.212689, -.771846, -2.91666e-8, -.63581, -.235142, 0, .971961, -.235142, 0, .971961, -.235142, 7.97927e-8, .971961, -.235142, 166098e-11, .971961, .971962, 1.00947e-8, .235139, 0, 1, 0, -.971961, -1.03751e-8, -.235142, -.235141, 4.29846e-8, .971961, -.235142, 0, .971961, -.23514, 0, .971962, -.235142, 4.70648e-8, .971961, .971961, 0, .235142, -.971962, -1.08129e-8, -.235138, .670283, .724172, .162158, .944708, -.235142, .228549, .274425, -.959314, .0663902, -.670283, -.724172, -.162159, -.235143, -8.01271e-7, .971961, -.274425, .959314, -.0663904, -.944708, .235142, -.228549, .235142, 7.40893e-7, -.971961, .235142, -9.99617e-8, -.971961, .235142, -2.26384e-7, -.971961, .235142, -1.88163e-7, -.971961, .944709, -.235142, .228547, -.235142, 3.33863e-8, .971961, -.235142, 5.24642e-8, .971961, -.235143, -8.0127e-7, .971961, -.235142, -9.15739e-7, .971961, -.235142, -6.86804e-7, .971961, -.235142, 1.4737e-7, .971961, -.274425, .959314, -.0663898, -.670283, -.724172, -.162158, .274425, -.959314, .06639, .670283, .724172, .162158, -.944708, .235142, -.228548, -.670284, -.724172, -.162159, -.235142, -4.14477e-7, .971961, -.235142, 4.62833e-7, .971961, -.235142, 5.43426e-7, .971961, -.235142, -2.65956e-7, .971961, -.235142, -3.96056e-7, .971961, -.235143, -5.09483e-7, .971961, -.235142, -5.921e-7, .971961, -.235142, -2.75396e-7, .971961, -.235143, -4.58994e-7, .971961, .944708, -.235142, .228549, -.944708, .235142, -.228549, .274426, -.959314, .0663905, .670282, .724173, .162158, -.274423, .959314, -.06639, -.491997, .597229, -.633448, .235142, 1.5883e-7, -.971961, .727137, -.597227, -.338513, .491995, -.597228, .633451, .670282, .724174, .162154, .670281, .724174, .162162, .670281, .724174, .162158, .670283, .724172, .162159, -.727138, .597229, .338508, -.235142, -1.5883e-7, .971961, -.670283, -.724172, -.162158, -.670284, -.724171, -.16216, -.670284, -.724172, -.162157, -.670284, -.724171, -.162159, .3155, .841743, -.438096, .235142, 3.17661e-7, -.971961, -.0803581, -.841743, -.533865, -.3155, -.841742, .438097, .94471, -.235138, .228545, .944708, -.235138, .228552, .944708, -.235145, .228548, .944709, -.235141, .228549, .0803583, .841743, .533864, -.235142, 9.52984e-7, .971961, -.944709, .235139, -.228549, -.944708, .235145, -.228547, -.944708, .235144, -.22855, -.944708, .235144, -.228549, .925066, .244515, -.290628, .235142, 1.19123e-7, -.971961, -.689926, -.244515, -.681333, -.925067, -.244515, .290625, .274424, -.959314, .0663896, .274424, -.959314, .0663905, .274425, -.959314, .0663904, .274424, -.959314, .06639, .689924, .244515, .681335, -.235141, 3.37515e-7, .971961, -.274425, .959314, -.0663904, -.274425, .959314, -.0663898, -.274425, .959314, -.0663906, -.274425, .959314, -.0663904, .971961, 0, .235141, .282342, 0, .959314, -.689622, 0, .72417, -.971961, 0, -.235142, 666805e-11, -1, 161317e-11, -666805e-11, -1, -161317e-11, 9.31365e-7, -1, -38498e-10, -1, -1.19209e-7, 0, -1, -1.49012e-7, -2.08616e-7, -1, 0, -2.83831e-7, -1, 0, -113533e-11, -1, -4.41941e-7, 8.43135e-8, -1, -1.0025e-7, -2.64071e-7, 1, 0, 4.73042e-7, 1, 0, 4.7304e-7, 1, 0, 4.73042e-7, 1, 0, 4.7304e-7, 1, 3.11047e-7, 2.92817e-7, 1, -3.60656e-7, 2.64071e-7, 0, 0, 1, 0, 5.62602e-7, 1, 138547e-11, -2.6822e-7, 1, 4.2869e-7, 6.81453e-7, 1, 0, -9.3767e-7, 1, -3.87306e-7, 1.78281e-7, 1, 108605e-11, -102218e-11, 1, -3.01796e-7, -7.81982e-7, 1, -155246e-11, 0, 1, 132574e-11, -7.79864e-8, 1, -3.16887e-7, -123557e-11, 1, -104513e-11, 1.19209e-7, 1, -4.76837e-7, 6.87502e-7, 1, 1.95399e-14, 1, -5.96046e-8, 2.38419e-7, 2.38419e-7, -1, 0, 0, -1, 0, 0, -1, -1.72565e-7, 2.38419e-7, -1, 3.01796e-7, 3.01238e-7, -1, 0, -1, 7.54489e-8, 1, 0, 0, -7.55948e-7, 0, 1, 0, 0, 1, -7.55948e-7, 0, 1, 0, 0, 1, -1.50898e-7, 130689e-11, 1, -1.95211e-7, 2.5217e-7, 1, 0, -1, 0, 1, -2.68221e-7, 0, 1, 2.98023e-7, 5.66244e-7, 1, 136291e-11, 0, 1, -170363e-11, -136706e-10, 1, -840541e-11, -813719e-11, 1, -9.1569e-8, 3.3952e-7, 1, 0, 0, -1, 0, 0, 0, -1, 0, -8.4683e-15, -1, 6.50704e-8, -1, 0, 0, -1, 0, 0, -1, 0, 0, 9.76055e-8, -1.26085e-7, -1, 1.13173e-7, 2.44452e-7, -1, -1.09713e-14, -1, 6.23201e-8, 0, 7.79864e-8, 1, 1.31656e-14, 1, -6.23201e-8],
            uvs: []
        }
    }
}, function(module, exports) {
    module.exports = {
        generic: {
            title: "Generic & Customizable Components",
            desc: "Editable components that let you set colors and logos",
            components: {
                "generic.analytics": {
                    id: "generic.analytics",
                    name: "Analytics",
                    nameShort: "Analytics",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-analytics-logo.png",
                    model: "analytics-surface",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.api-gateway": {
                    id: "generic.api-gateway",
                    name: "API Gateway",
                    nameShort: "API Gateway",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-api-gateway-logo.png",
                    model: "api-gateway",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.billboard": {
                    id: "generic.billboard",
                    name: "Billboard",
                    nameShort: "Billboard",
                    desc: "A billboard to display vertical icons and images",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "billboard-logo.png",
                    model: "billboard",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.billboard-large": {
                    id: "generic.billboard-large",
                    name: "Billboard Large",
                    nameShort: "Billboard Large",
                    desc: "A double width version of the billboard to display vertical icons and images",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "billboard-large-logo.png",
                    model: "billboard-wide",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.block": {
                    id: "generic.block",
                    name: "Block",
                    nameShort: "Block",
                    desc: "A generic block",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-block-logo.png",
                    model: "generic-block",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.bot": {
                    id: "generic.bot",
                    name: "Bot",
                    nameShort: "Bot",
                    desc: "A generic chat bot service",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-bot-logo.png",
                    model: "bot",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.bucket": {
                    id: "generic.bucket",
                    name: "Bucket",
                    nameShort: "Bucket",
                    desc: "A storage bucket",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-bucket-logo.png",
                    model: "aws-s3",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.cache": {
                    id: "generic.cache",
                    name: "Cache",
                    nameShort: "Cache",
                    desc: "A generic cache icon",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-cache-logo.png",
                    model: "cache",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.cloud": {
                    id: "generic.cloud",
                    name: "Cloud",
                    nameShort: "Cloud",
                    desc: "A fluffy cloud",
                    tags: ["cloud"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-cloud-logo.png",
                    model: "api",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.connection": {
                    id: "generic.connection",
                    name: "Connection",
                    nameShort: "Connection",
                    desc: "A generic connection",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-connection-logo.png",
                    model: "connection",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.data-warehouse": {
                    id: "generic.data-warehouse",
                    name: "Data Warehouse",
                    nameShort: "Data Warehouse",
                    desc: "A generic data warehouse",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-data-warehouse-logo.png",
                    model: "data-warehouse",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.database": {
                    id: "generic.database",
                    name: "Database",
                    nameShort: "Database",
                    desc: "A generic database",
                    tags: ["generic", "database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-database-logo.png",
                    model: "database",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.enterprise-service-bus": {
                    id: "generic.enterprise-service-bus",
                    name: "Enterprise Service Bus",
                    nameShort: "ESB",
                    desc: "A generic enterprise service bus",
                    tags: ["messaging", "esb"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-enterprise-service-bus-logo.png",
                    model: "message-broker",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.funnel": {
                    id: "generic.funnel",
                    name: "Data Processing",
                    nameShort: "Data Processing",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-funnel-logo.png",
                    model: "data-funnel",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.gateway": {
                    id: "generic.gateway",
                    name: "Gateway",
                    nameShort: "Gateway",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-gateway-logo.png",
                    model: "gateway",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-physical-data-transfer-device": {
                    id: "generic.generic-physical-data-transfer-device",
                    name: "Physical Data Transfer Device",
                    nameShort: "Physical Data Transfer Device",
                    desc: "A Physical Data Transfer Device",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-physical-data-transfer-device-logo.png",
                    model: "aws-snowball",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-batch-processor": {
                    id: "generic.generic-batch-processor",
                    name: "Batch Processor",
                    nameShort: "Batch Processor",
                    desc: "Generic Batch Processing",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-batch-processor-logo.png",
                    model: "batch-processor",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-brain": {
                    id: "generic.generic-brain",
                    name: "Artificial Intelligence",
                    nameShort: "Artificial Intelligence",
                    desc: "Generic AI Component",
                    tags: ["generic", "machine-learning"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-brain-logo.png",
                    model: "brain",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-cdn": {
                    id: "generic.generic-cdn",
                    name: "CDN",
                    nameShort: "CDN",
                    desc: "A generic CDN",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-cdn-logo.png",
                    model: "cdn",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-container": {
                    id: "generic.generic-container",
                    name: "Container",
                    nameShort: "Container",
                    desc: "A generic Container",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-container-logo.png",
                    model: "container",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-container-registry": {
                    id: "generic.generic-container-registry",
                    name: "Container Registry",
                    nameShort: "Container Registry",
                    desc: "A generic Container Registry",
                    tags: ["container-registry"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-container-registry-logo.png",
                    model: "container-registry",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-cube": {
                    id: "generic.generic-cube",
                    name: "Cube",
                    nameShort: "Cube",
                    desc: "A generic Cube",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-cube-logo.png",
                    model: "generic-cube",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-disk-storage": {
                    id: "generic.generic-disk-storage",
                    name: "Disk Storage",
                    nameShort: "Disk Storage",
                    desc: "Generic Disk Storage",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-disk-storage-logo.png",
                    model: "disk-storage",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-email": {
                    id: "generic.generic-email",
                    name: "Email Service",
                    nameShort: "Email Service",
                    desc: "A generic Email Service",
                    tags: ["generic", "email"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-email-logo.png",
                    model: "email",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-event-hub": {
                    id: "generic.generic-event-hub",
                    name: "EventHub",
                    nameShort: "EventHub",
                    desc: "A generic EventHub",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-event-hub-logo.png",
                    model: "event-hub",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-event-processing-engine": {
                    id: "generic.generic-event-processing-engine",
                    name: "Event Processor",
                    nameShort: "Event Processor",
                    desc: "A generic Event processor",
                    tags: ["generic", "event-processing", "business-rules-engine", "business-rules", "esb"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-event-processing-engine.png",
                    model: "event-processing-engine",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-firewall": {
                    id: "generic.generic-firewall",
                    name: "Firewall",
                    nameShort: "Firewall",
                    desc: "A generic Firewall",
                    tags: ["firewall", "vpn"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-firewall-logo.png",
                    model: "firewall",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-genetics": {
                    id: "generic.generic-genetics",
                    name: "Genetics",
                    nameShort: "Genetics",
                    desc: "A genome sequencing service",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-genetics-logo.png",
                    model: "genetics",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-identity-provider": {
                    id: "generic.generic-identity-provider",
                    name: "Identity Provider",
                    nameShort: "Identity Provider",
                    desc: "A generic Identity Provider",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-identity-provider-logo.png",
                    model: "identity-provider",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-keyvalue": {
                    id: "generic.generic-keyvalue",
                    name: "Key-Value Store",
                    nameShort: "Key-Value Store",
                    desc: "A generic Key-Value Store",
                    tags: ["generic", "key-value"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-keyvalue-logo.png",
                    model: "keyvalue",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-loadbalancer-alt": {
                    id: "generic.generic-loadbalancer-alt",
                    name: "Loadbalancer",
                    nameShort: "Loadbalancer",
                    desc: "An alternative load balancer model",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-loadbalancer-alt-logo.png",
                    model: "loadbalancer-alt",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-logging": {
                    id: "generic.generic-logging",
                    name: "Log Aggregator",
                    nameShort: "Log Aggregator",
                    desc: "A generic Log Aggregator",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-logging-logo.png",
                    model: "logging",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-media-player": {
                    id: "generic.generic-media-player",
                    name: "Media Player",
                    nameShort: "Media Player",
                    desc: "A generic Media Player",
                    tags: ["media"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-media-player-logo.png",
                    model: "media-player",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-message-bus": {
                    id: "generic.generic-message-bus",
                    name: "Message Bus",
                    nameShort: "Message Bus",
                    desc: "A generic Messsage Bus",
                    tags: ["generic", "message", "message-broker", "messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-message-bus-logo.png",
                    model: "message-bus",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-monitoring": {
                    id: "generic.generic-monitoring",
                    name: "Monitoring Solution",
                    nameShort: "Monitoring",
                    desc: "A generic Monitoring Solution",
                    tags: ["monitoring"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-monitoring-logo.png",
                    model: "monitoring",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-network-router": {
                    id: "generic.generic-network-router",
                    name: "Network Router",
                    nameShort: "Router",
                    desc: "A generic network router",
                    tags: ["physical"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-network-router-logo.png",
                    model: "network-router",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-network-switch": {
                    id: "generic.generic-network-switch",
                    name: "Network Switch",
                    nameShort: "Switch",
                    desc: "A generic Network Switch",
                    tags: ["physical"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-switch-logo.png",
                    model: "network-switch",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-orchestrator": {
                    id: "generic.generic-orchestrator",
                    name: "Orchestration Server",
                    nameShort: "Orchestration Server",
                    desc: "A generic Orchestration Server",
                    tags: ["generic", "orchestration"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-orchestrator-logo.png",
                    model: "orchestrator",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-router": {
                    id: "generic.generic-router",
                    name: "Router",
                    nameShort: "Router",
                    desc: "A generic Router",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-router-logo.png",
                    model: "router",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-scheduler": {
                    id: "generic.generic-scheduler",
                    name: "Scheduler",
                    nameShort: "Scheduler",
                    desc: "A generic Scheduler",
                    tags: ["generic", "scheduler"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-scheduler-logo.png",
                    model: "scheduler",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-triangle": {
                    id: "generic.generic-triangle",
                    name: "Triangle",
                    nameShort: "Triangle",
                    desc: "A generic Triangle",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-triangle-logo.png",
                    model: "generic-triangle",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-vault": {
                    id: "generic.generic-vault",
                    name: "Safe / Vault",
                    nameShort: "Safe / Vault",
                    desc: "A generic Safe or Vault",
                    tags: ["encrypted"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-vault-logo.png",
                    model: "vault",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.generic-vision": {
                    id: "generic.generic-vision",
                    name: "Computer Vision",
                    nameShort: "Computer Vision",
                    desc: "Generic Computer Vision",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-vision-logo.png",
                    model: "vision",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.loadbalancer": {
                    id: "generic.loadbalancer",
                    name: "Loadbalancer",
                    nameShort: "Loadbalancer",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-load-balancer-logo.png",
                    model: "loadbalancer",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.mapreduce": {
                    id: "generic.mapreduce",
                    name: "Map-Reduce",
                    nameShort: "Map-Reduce",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-map-reduce-logo.png",
                    model: "mapreduce",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.message-queue": {
                    id: "generic.message-queue",
                    name: "Message Queue",
                    nameShort: "Message Queue",
                    desc: "A generic message queue",
                    tags: ["generic", "messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-message-queue-logo.png",
                    model: "message-queue",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.neural-net": {
                    id: "generic.neural-net",
                    name: "Neural Net",
                    nameShort: "Neural Net",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-neural-net-logo.png",
                    model: "neural-net",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.objectdb": {
                    id: "generic.objectdb",
                    name: "Object Database",
                    nameShort: "Object Database",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-objectdb-logo.png",
                    model: "objectdb",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.pc": {
                    id: "generic.pc",
                    name: "PC",
                    nameShort: "PC",
                    desc: "A generic personal computer terminal",
                    tags: ["computer", "terminal", "mac"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-pc-logo.png",
                    model: "pc",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.piechart": {
                    id: "generic.piechart",
                    name: "Metrics",
                    nameShort: "Metrics",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-piechart-logo.png",
                    model: "piechart",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.processor": {
                    id: "generic.processor",
                    name: "Processor",
                    nameShort: "Processor",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-processor-logo.png",
                    model: "processor",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.search": {
                    id: "generic.search",
                    name: "Search",
                    nameShort: "Search",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-search-logo.png",
                    model: "analytics-surface-magnifying-glass",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.server": {
                    id: "generic.server",
                    name: "Server",
                    nameShort: "Server",
                    desc: "A generic server",
                    tags: ["generic", "server"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-server-logo.png",
                    model: "server",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.smartphone": {
                    id: "generic.smartphone",
                    name: "Smartphone",
                    nameShort: "Smartphone",
                    desc: "An iPhone/Mobile component",
                    tags: ["mobile", "phone", "iphone"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "1000000",
                    logoTexture: "smartphone-logo.png",
                    model: "smartphone",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.speech": {
                    id: "generic.speech",
                    name: "Speech",
                    nameShort: "Speech",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-speech-logo.png",
                    model: "speech",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.stream-processor": {
                    id: "generic.stream-processor",
                    name: "Stream Processor",
                    nameShort: "Stream Processor",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-stream-processor-logo.png",
                    model: "stream-processor",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "generic.timeseriesdb": {
                    id: "generic.timeseriesdb",
                    name: "Timeseries DB",
                    nameShort: "Timeseries DB",
                    desc: "",
                    tags: ["generic"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "999999",
                    logoTexture: "generic-timeseriesdb-logo.png",
                    model: "timeseriesdb",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        computation: {
            title: "Computation, VM & FaaS",
            desc: "Server instances (EC2, Compute Engine) and managed functions (Lambda, Cloud Functions)",
            components: {
                "computation.aws-amazon-elastic-container-registry": {
                    id: "computation.aws-amazon-elastic-container-registry",
                    name: "Amazon Elastic Container Registry",
                    nameShort: "AWS Elastic Container Registry",
                    desc: "Store and Retrieve Docker Images",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "f58536",
                    logoTexture: "aws-amazon-elastic-container-registry-logo.png",
                    model: "container-registry",
                    links: {
                        website: "https://aws.amazon.com/ecr/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.aws-amazon-elastic-container-service": {
                    id: "computation.aws-amazon-elastic-container-service",
                    name: "Amazon Elastic Container Service",
                    nameShort: "AWS Elastic Container Service",
                    desc: "Run and Manage Docker Containers",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "eb9642",
                    logoTexture: "aws-amazon-elastic-container-service-logo.png",
                    model: "container-registry",
                    links: {
                        website: "https://aws.amazon.com/ecs/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.aws-amazon-elastic-container-service-for-kubernetes": {
                    id: "computation.aws-amazon-elastic-container-service-for-kubernetes",
                    name: "Amazon Elastic Container Service for Kubernetes",
                    nameShort: "AWS Elastic Container Service for Kubernetes",
                    desc: "Run Managed Kubernetes on AWS",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "3b8cf7",
                    logoTexture: "aws-amazon-elastic-container-service-for-kubernetes-logo.png",
                    model: "container-registry",
                    links: {
                        website: "https://aws.amazon.com/eks/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.aws-batch": {
                    id: "computation.aws-batch",
                    name: "AWS Batch",
                    nameShort: "AWS Batch",
                    desc: "Run Batch Jobs at Any Scale",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D86613",
                    logoTexture: "aws-batch-logo.png",
                    model: "batch-processor",
                    links: {
                        website: "https://aws.amazon.com/batch/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.aws-ec2": {
                    id: "computation.aws-ec2",
                    name: "AWS Elastic Compute Cloud",
                    nameShort: "AWS EC2",
                    desc: "An AWS service providing general purpose, low level virtual machines that are useful to run server processes or any other kind of task in the cloud.",
                    tags: ["server", "virtual-machine", "aws", "elastic", "compute", "cloud", "hosting", "vm", "amazon", "web", "services"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "D86613",
                    logoTexture: "aws-ec2-logo.png",
                    model: "server",
                    links: {
                        website: "https://aws.amazon.com/ec2/",
                        wikipedia: "https://en.wikipedia.org/wiki/Amazon_Elastic_Compute_Cloud",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/amazon-ec2"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.aws-fargate": {
                    id: "computation.aws-fargate",
                    name: "AWS Fargate",
                    nameShort: "AWS Fargate",
                    desc: "Run Containers without Managing Servers or Clusters",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D86613",
                    logoTexture: "aws-fargate-logo.png",
                    model: "container-registry",
                    links: {
                        website: "https://aws.amazon.com/fargate/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.aws-lambda": {
                    id: "computation.aws-lambda",
                    name: "AWS Lambda",
                    nameShort: "AWS Lambda",
                    desc: "Lambda functions are serverless functions-as-a-service - independent pieces of code that is run in response to events such as HTTP requests, SQS Messages etc.",
                    tags: ["faas", "function", "aws", "web", "services", "amazon"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "f68536",
                    logoTexture: "aws-lambda-logo.png",
                    model: "processor",
                    links: {
                        website: "https://aws.amazon.com/lambda/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.aws-step-functions": {
                    id: "computation.aws-step-functions",
                    name: "AWS Step Functions",
                    nameShort: "AWS Step Functions",
                    desc: "Coordinate Distributed Applications",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "CC2264",
                    logoTexture: "aws-step-functions-logo.png",
                    model: "processor",
                    links: {
                        website: "https://aws.amazon.com/step-functions/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.aws-vmware-cloud-on-aws": {
                    id: "computation.aws-vmware-cloud-on-aws",
                    name: "VMware Cloud on AWS",
                    nameShort: "VMware Cloud on AWS",
                    desc: "Build a Hybrid Cloud without Custom Hardware",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "eb9642",
                    logoTexture: "aws-vmware-cloud-on-aws-logo.png",
                    model: "server",
                    links: {
                        website: "https://aws.amazon.com/vmware/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.azure-batch": {
                    id: "computation.azure-batch",
                    name: "Azure Batch",
                    nameShort: "Azure Batch",
                    desc: "Cloud-scale job scheduling and compute management",
                    tags: ["azure"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "006dd6",
                    logoTexture: "azure-batch-logo.png",
                    model: "batch-processor",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/batch/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.azure-container-instances": {
                    id: "computation.azure-container-instances",
                    name: "Azure Container Instances",
                    nameShort: "Azure Container Instances",
                    desc: "Easily run containers on Azure without managing servers",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d8",
                    logoTexture: "azure-container-instances-logo.png",
                    model: "container",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.azure-functions": {
                    id: "computation.azure-functions",
                    name: "Azure Functions",
                    nameShort: "Azure Functions",
                    desc: "Process events with serverless code",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-functions-logo.png",
                    model: "processor",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.azure-kubernetes-service-(aks)": {
                    id: "computation.azure-kubernetes-service-(aks)",
                    name: "Azure Kubernetes Service (AKS)",
                    nameShort: "Azure Kubernetes",
                    desc: "Simplify the deployment, management, and operations of Kubernetes",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "kubernetes-logo.png",
                    model: "container-registry",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "computation.azure-linux-virtual-machines": {
                    id: "computation.azure-linux-virtual-machines",
                    name: "Azure Linux Virtual Machines",
                    nameShort: "Azure Linux Virtual Machines",
                    desc: "Provision virtual machines for Ubuntu, Red Hat, and more",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d8",
                    logoTexture: "azure-linux-virtual-machines-logo.png",
                    model: "server",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "computation.azure-sap-hana-on-azure-large-instances": {
                    id: "computation.azure-sap-hana-on-azure-large-instances",
                    name: "Azure SAP HANA on Azure Large Instances",
                    nameShort: "Azure SAP HANA",
                    desc: "Run the largest SAP HANA workloads of any hyperscale cloud provider",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "sap-hana-logo.png",
                    model: "cache",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "computation.azure-sql-server-on-virtual-machines": {
                    id: "computation.azure-sql-server-on-virtual-machines",
                    name: "Azure SQL Server on Virtual Machines",
                    nameShort: "Azure SQL Server",
                    desc: "Host enterprise SQL Server apps in the cloud",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "microsoft-sql-server-logo.png",
                    model: "database",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "computation.azure-virtual-machines": {
                    id: "computation.azure-virtual-machines",
                    name: "Azure Virtual Machines",
                    nameShort: "Azure Virtual Machines",
                    desc: "Provision Windows and Linux virtual machines in seconds",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-virtual-machines-logo.png",
                    model: "server",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "computation.gcc-app-engine": {
                    id: "computation.gcc-app-engine",
                    name: "GCC App Engine",
                    nameShort: "GCC App Engine",
                    desc: "PaaS for apps and backends.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-app-engine-logo.png",
                    model: "server",
                    links: {
                        website: "https://cloud.google.com/appengine/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "computation.gcc-cloud-functions": {
                    id: "computation.gcc-cloud-functions",
                    name: "GCC Cloud Functions",
                    nameShort: "GCC Cloud Functions",
                    desc: "Event-driven serverless compute platform.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-functions-logo.png",
                    model: "processor",
                    links: {
                        website: "https://cloud.google.com/functions/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "computation.gcc-compute-engine": {
                    id: "computation.gcc-compute-engine",
                    name: "GCC Compute Engine",
                    nameShort: "GCC Compute Engine",
                    desc: "Scalable, high performance VMs.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-compute-engine-logo.png",
                    model: "server",
                    links: {
                        website: "https://cloud.google.com/compute/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "computation.gcc-kubernetes-engine": {
                    id: "computation.gcc-kubernetes-engine",
                    name: "GCC Kubernetes Engine",
                    nameShort: "GCC Kubernetes Engine",
                    desc: "Run containerized applications.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-kubernetes-engine-logo.png",
                    model: "container-registry",
                    links: {
                        website: "https://cloud.google.com/kubernetes-engine/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        container: {
            title: "Containers & Virtualisation",
            desc: "Container (Docker, Rkt) and Container Management (Kubernetes, Mesosphere)",
            components: {
                "container.azure-container-registry": {
                    id: "container.azure-container-registry",
                    name: "Azure Container Registry",
                    nameShort: "Azure Container Registry",
                    desc: "Store and manage container images across all types of Azure deployments",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d9",
                    logoTexture: "azure-container-registry-logo.png",
                    model: "container-registry",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "container.docker": {
                    id: "container.docker",
                    name: "Docker Container",
                    nameShort: "Docker",
                    desc: 'Docker is a computer program that performs operating-system-level virtualization also known as containerization. It was first released in 2013 and is developed by Docker, Inc. Docker is used to run software packages called "containers". In a typical example use case, one container runs a web server and web application, while a second container runs a database server that is used by the web application. Containers are isolated from each other and use their own set of tools and libraries; they can communicate through well-defined channels. All containers use the same kernel and are therefore more lightweight than virtual machines. Containers are created from "images" which specify their precise contents. Images are often created by combining and modifying standard images downloaded from repositories.',
                    tags: ["docker", "container", "virtualisation"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "009def",
                    logoTexture: "docker-logo.png",
                    model: "container",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "container.gcc-container-builder": {
                    id: "container.gcc-container-builder",
                    name: "GCC Container Builder",
                    nameShort: "GCC Container Builder",
                    desc: "Fast, consistent, reliable builds.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-container-builder-logo.png",
                    model: "container",
                    links: {
                        website: "https://cloud.google.com/container-builder/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "container.gcc-container-registry": {
                    id: "container.gcc-container-registry",
                    name: "GCC Container Registry",
                    nameShort: "GCC Container Registry",
                    desc: "Fast, private image storage.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-container-registry-logo.png",
                    model: "container-registry",
                    links: {
                        website: "https://cloud.google.com/container-registry/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "container.hashicorp-packer": {
                    id: "container.hashicorp-packer",
                    name: "HashiCorp Packer",
                    nameShort: "HashiCorp Packer",
                    desc: "HashiCorp Packer automates the creation of any type of machine image. It embraces modern configuration management by encouraging you to use automated scripts to install and configure the software within your Packer-made images. Packer brings machine images into the modern age, unlocking untapped potential and opening new opportunities.",
                    tags: ["hashicorp"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "1daeff",
                    logoTexture: "hashicorp-packer-logo.png",
                    model: "container",
                    links: {
                        website: "https://www.packer.io/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "container.kubernetes": {
                    id: "container.kubernetes",
                    name: "Kubernetes",
                    nameShort: "Kubernetes",
                    desc: 'Kubernetes is an open-source container-orchestration system for automating deployment, scaling and management of containerized applications. It was originally designed by Google and is now maintained by the Cloud Native Computing Foundation. It aims to provide a "platform for automating deployment, scaling, and operations of application containers across clusters of hosts." It works with a range of container tools, including Docker.',
                    tags: ["docker", "container", "virtualisation", "orchestration", "container-registry"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "326de6",
                    logoTexture: "kubernetes-logo.png",
                    model: "container-registry",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        database: {
            title: "Databases",
            desc: "SQL (Postgres, MySQL), Object (MongoDB, CouchDB), Column, Timeseries and Graph-databases",
            components: {
                "database.algolia": {
                    id: "database.algolia",
                    name: "Algolia",
                    nameShort: "Algolia",
                    desc: "Algolia Search is an add-on that provides hosted full-text, numerical and faceted search. Algolia’s Search API makes it easy to deliver a great search experience in your apps & websites.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "44aedb",
                    logoTexture: "algolia-logo.png",
                    model: "analytics-surface-magnifying-glass",
                    links: {
                        website: "https://www.algolia.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/Algolia"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.apache-cassandra": {
                    id: "database.apache-cassandra",
                    name: "Apache Cassandra",
                    nameShort: "Cassandra",
                    desc: "Apache Cassandra is a free and open-source distributed NoSQL database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure. Cassandra offers robust support for clusters spanning multiple datacenters, with asynchronous masterless replication allowing low latency operations for all clients.",
                    tags: ["object-oriented", "document-oriented", "database", "distributed", "no-sql", "apache", "open-source", "distributed", "database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "1287b1",
                    logoTexture: "apache-cassandra-logo.png",
                    model: "database",
                    links: {
                        website: "http://cassandra.apache.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/Apache_Cassandra"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.arango-db": {
                    id: "database.arango-db",
                    name: "ArangoDB",
                    nameShort: "ArangoDB",
                    desc: "ArangoDB is a native multi-model database system developed by triAGENS GmbH. The database system supports three important data models (key/value, documents, graphs) with one database core and a unified query language AQL (ArangoDB Query Language). The query language is declarative and allows the combination of different data access patterns in a single query. ArangoDB is a NoSQL database system but AQL is similar in many ways to SQL.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "dde175",
                    logoTexture: "arango-db-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://www.arangodb.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/ArangoDB",
                        github: "https://github.com/arangodb/arangodb",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/arangodb"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.aws-amazon-aurora": {
                    id: "database.aws-amazon-aurora",
                    name: "Amazon Aurora",
                    nameShort: "AWS Aurora",
                    desc: "High Performance Managed Relational Database",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "3B48CC",
                    logoTexture: "aws-amazon-aurora-logo.png",
                    model: "database",
                    links: {
                        website: "https://aws.amazon.com/rds/aurora/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.aws-amazon-rds": {
                    id: "database.aws-amazon-rds",
                    name: "Amazon RDS",
                    nameShort: "AWS RDS",
                    desc: "Managed Relational Database Service for MySQL, PostgreSQL, Oracle, SQL Server, and MariaDB",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "3B48CC",
                    logoTexture: "aws-amazon-rds-logo.png",
                    model: "database",
                    links: {
                        website: "https://aws.amazon.com/rds/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.aws-dynamodb": {
                    id: "database.aws-dynamodb",
                    name: "AWS DynamoDB",
                    nameShort: "AWS DynamoDB",
                    desc: "DynamoDB is a document oriented database-as-a-Service, offered by AWS.",
                    tags: ["object-oriented", "document-oriented", "aws", "amazon", "web", "services", "baas", "service", "serverless", "database", "json"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3B48CC",
                    logoTexture: "aws-dynamodb-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://aws.amazon.com/dynamodb/",
                        wikipedia: "https://en.wikipedia.org/wiki/Amazon_DynamoDB",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/amazon-dynamodb"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.azure-cosmos-db": {
                    id: "database.azure-cosmos-db",
                    name: "Azure Cosmos DB",
                    nameShort: "Azure Cosmos DB",
                    desc: "Globally distributed, multi-model database for any scale",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "59b4d9",
                    logoTexture: "azure-cosmos-db-logo.png",
                    model: "objectdb",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.azure-sql-data-warehouse": {
                    id: "database.azure-sql-data-warehouse",
                    name: "Azure SQL Data Warehouse",
                    nameShort: "Azure SQL Data Warehouse",
                    desc: "Elastic data warehouse as a service with enterprise-class features",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-sql-data-warehouse-logo.png",
                    model: "data-warehouse",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.azure-sql-database": {
                    id: "database.azure-sql-database",
                    name: "Azure SQL Database",
                    nameShort: "Azure SQL Database",
                    desc: "Managed relational SQL Database as a service",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-sql-database-logo.png",
                    model: "database",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.azure-table-storage": {
                    id: "database.azure-table-storage",
                    name: "Azure Table Storage",
                    nameShort: "Azure Table Storage",
                    desc: "NoSQL key-value store using semi-structured datasets",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-azure-table-storage.png",
                    model: "objectdb",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.cockroach-db": {
                    id: "database.cockroach-db",
                    name: "CockroachDB",
                    nameShort: "CockroachDB",
                    desc: "CockroachDB is an open-sourced software project that is designed to store copies of data in multiple locations in order to deliver requested data when needed. It is described as a scalable, consistently-replicated, transactional datastore.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "82cc00",
                    logoTexture: "cockroach-db-logo.png",
                    model: "database",
                    links: {
                        website: "https://www.cockroachlabs.com/product/cockroachdb/",
                        wikipedia: "https://en.wikipedia.org/wiki/Cockroach_Labs",
                        github: "https://github.com/cockroachdb/cockroach",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/cockroachdb"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.couch-db": {
                    id: "database.couch-db",
                    name: "Apache CouchDB",
                    nameShort: "CouchDB",
                    desc: "Apache CouchDB is open source database software that focuses on ease of use and having a scalable architecture. It has a document-oriented NoSQL database architecture and is implemented in the concurrency-oriented language Erlang; it uses JSON to store data, JavaScript as its query language using MapReduce, and HTTP for an API.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "e32428",
                    logoTexture: "couch-db-logo.png",
                    model: "objectdb",
                    links: {
                        website: "http://couchdb.apache.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/Apache_CouchDB",
                        github: "https://github.com/apache/couchdb",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/couchdb"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.couchbase": {
                    id: "database.couchbase",
                    name: "Couchbase",
                    nameShort: "Couchbase",
                    desc: "Couchbase Server, originally known as Membase, is an open-source, distributed (shared-nothing architecture) multi-model NoSQL document-oriented database software package that is optimized for interactive applications.",
                    tags: ["database", "distributed", "document-oriented", "no-sql", "object-oriented", "object-store"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ed2226",
                    logoTexture: "couchbase-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://www.couchbase.com/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.crate-db": {
                    id: "database.crate-db",
                    name: "CrateDB",
                    nameShort: "CrateDB",
                    desc: "CrateDB is a distributed SQL database management system that integrates a fully searchable document oriented data store. It is open source, written in Java, based on a shared nothing architecture, and is designed for high scalability and includes components from Facebook Presto, Apache Lucene, Elasticsearch and Netty.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "55d4f5",
                    logoTexture: "crate-db-logo.png",
                    model: "database",
                    links: {
                        website: "https://crate.io/",
                        wikipedia: "https://en.wikipedia.org/wiki/CrateDB",
                        github: "https://github.com/crate/crate",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/crate"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.elastic-search": {
                    id: "database.elastic-search",
                    name: "Elastic Search",
                    nameShort: "Elastic Search",
                    desc: "Elastic Search is a powerful fulltext search engine that can live besides or even instead of an existing database. It is useful to implement both searching within complex websites as well as for monitoring and analytics as part of the wider ELK Stack (Elastic Search, Logstash, Kibana)",
                    tags: ["database", "search", "elastic", "elk-stack", "fulltext", "analytics", "monitoring", "realtime"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "07a5de",
                    logoTexture: "elastic-search-logo.png",
                    model: "analytics-surface-magnifying-glass",
                    links: {
                        website: "https://www.elastic.co/products/elasticsearch",
                        wikipedia: "https://en.wikipedia.org/wiki/Elasticsearch",
                        github: "https://github.com/elastic/elasticsearch",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/elasticsearch"
                    },
                    brightenLogo: false,
                    secondaryColor: "3ebeb0"
                },
                "database.etcd": {
                    id: "database.etcd",
                    name: "etcd",
                    nameShort: "etcd",
                    desc: "etcd is a distributed key value store that provides a reliable way to store data across a cluster of machines.",
                    tags: ["distributed", "key-value"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "5a9dd4",
                    logoTexture: "etcd-logo.png",
                    model: "keyvalue",
                    links: {
                        website: "https://coreos.com/etcd/",
                        github: "https://github.com/etcd-io/etcd",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/etcd"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.gcc-bigquery": {
                    id: "database.gcc-bigquery",
                    name: "GCC BigQuery",
                    nameShort: "GCC BigQuery",
                    desc: "Fully managed cloud data warehouse.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-bigquery-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://cloud.google.com/bigquery/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.gcc-cloud-bigtable": {
                    id: "database.gcc-cloud-bigtable",
                    name: "GCC Cloud Bigtable",
                    nameShort: "GCC Cloud Bigtable",
                    desc: "NoSQL wide-column database service.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-bigtable-logo.png",
                    model: "database",
                    links: {
                        website: "https://cloud.google.com/bigtable/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.gcc-cloud-datastore": {
                    id: "database.gcc-cloud-datastore",
                    name: "GCC Cloud Datastore",
                    nameShort: "GCC Cloud Datastore",
                    desc: "NoSQL document database service.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-datastore-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://cloud.google.com/datastore/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.gcc-cloud-spanner": {
                    id: "database.gcc-cloud-spanner",
                    name: "GCC Cloud Spanner",
                    nameShort: "GCC Cloud Spanner",
                    desc: "Mission-critical, scalable, relational database service.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-spanner-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://cloud.google.com/spanner/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.gcc-cloud-sql": {
                    id: "database.gcc-cloud-sql",
                    name: "GCC Cloud SQL",
                    nameShort: "GCC Cloud SQL",
                    desc: "MySQL and PostgreSQL database service.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-sql-logo.png",
                    model: "database",
                    links: {
                        website: "https://cloud.google.com/sql/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.gcc-firebase-realtime-database": {
                    id: "database.gcc-firebase-realtime-database",
                    name: "GCC Firebase Realtime Database",
                    nameShort: "GCC Firebase",
                    desc: "Store and sync data in real time.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ffcb2b",
                    logoTexture: "gcc-firebase-realtime-database-logo.png",
                    model: "database",
                    links: {
                        website: "https://firebase.google.com/products/realtime-database/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.graphite": {
                    id: "database.graphite",
                    name: "Graphite",
                    nameShort: "Graphite",
                    desc: "Graphite is a free open-source software (FOSS) tool that monitors and graphs numeric time-series data such as the performance of computer systems.[1] Graphite was developed by Orbitz and released as open source software in 2008. Graphite collects, stores, and displays time-series data in real time.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4daad7",
                    logoTexture: "graphite-logo.png",
                    model: "timeseriesdb",
                    links: {
                        website: "https://graphiteapp.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/Graphite_(software)",
                        github: "https://github.com/graphite-project",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/graphite"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.ibm-db2": {
                    id: "database.ibm-db2",
                    name: "IBM Db2 Database",
                    nameShort: "IBM Db2",
                    desc: "IBM Db2 contains database-server products developed by IBM. These products all support the relational model, but in recent years, some products have been extended to support object-relational features and non-relational structures like JSON and XML.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "009a2c",
                    logoTexture: "ibm-db2-logo.png",
                    model: "database",
                    links: {
                        website: "https://www.ibm.com/analytics/us/en/db2/",
                        wikipedia: "https://en.wikipedia.org/wiki/IBM_Db2",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/db2"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.influxdb": {
                    id: "database.influxdb",
                    name: "InfluxDB",
                    nameShort: "InfluxDB",
                    desc: "InfluxDB is an open-source time series database developed by InfluxData. It is written in Go and optimized for fast, high-availability storage and retrieval of time series data in fields such as operations monitoring, application metrics, Internet of Things sensor data, and real-time analytics. It also has support for processing data from Graphite.",
                    tags: ["database", "open-source", "querying", "timeseries"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3d97ef",
                    logoTexture: "influxdb-logo.png",
                    model: "timeseriesdb",
                    links: {
                        website: "https://www.influxdata.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/InfluxDB",
                        github: "https://github.com/influxdata/influxdb",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/influxdb"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.ingres-db": {
                    id: "database.ingres-db",
                    name: "Ingres",
                    nameShort: "Ingres",
                    desc: "Ingres Database is a commercially supported, open-source SQL relational database management system intended to support large commercial and government applications. Ingres Database is fully open source with a global community of contributors. However, Actian Corporation controls the development of Ingres and makes certified binaries available for download, as well as providing worldwide support.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "0193cf",
                    logoTexture: "ingres-db-logo.png",
                    model: "database",
                    links: {
                        website: "https://www.actian.com/data-management/ingres-sql-rdbms/",
                        wikipedia: "https://en.wikipedia.org/wiki/Ingres_(database)",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/ingres"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.maria-db": {
                    id: "database.maria-db",
                    name: "MariaDB",
                    nameShort: "MariaDB",
                    desc: "MariaDB is a community-developed fork of the MySQL relational database management system intended to remain free under the GNU GPL. MariaDB intends to maintain high compatibility with MySQL, ensuring a drop-in replacement capability with library binary equivalency and exact matching with MySQL APIs and commands. It includes the XtraDB storage engine for replacing InnoDB, as well as a new storage engine, Aria, that intends to be both a transactional and non-transactional engine perhaps even included in future versions of MySQL.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "002b64",
                    logoTexture: "maria-db-logo.png",
                    model: "database",
                    links: {
                        website: "https://mariadb.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/MariaDB",
                        github: "https://github.com/MariaDB",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/mariadb"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.microsoft-access": {
                    id: "database.microsoft-access",
                    name: "Microsoft Access",
                    nameShort: "Microsoft Access",
                    desc: "Microsoft Access is a database management system (DBMS) from Microsoft that combines the relational Microsoft Jet Database Engine with a graphical user interface and software-development tools. It is a member of the Microsoft Office suite of applications, included in the Professional and higher editions or sold separately.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "a4373a",
                    logoTexture: "microsoft-access-logo.png",
                    model: "database",
                    links: {
                        website: "https://products.office.com/en-us/access",
                        wikipedia: "https://en.wikipedia.org/wiki/Microsoft_Access",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/ms-access"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.microsoft-sql-server": {
                    id: "database.microsoft-sql-server",
                    name: "Microsoft SQL Server",
                    nameShort: "Microsoft SQL Server",
                    desc: "Microsoft SQL Server is a relational database management system developed by Microsoft. As a database server, it is a software product with the primary function of storing and retrieving data as requested by other software applications—which may run either on the same computer or on another computer across a network (including the Internet).",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "bc2425",
                    logoTexture: "microsoft-sql-server-logo.png",
                    model: "database",
                    links: {
                        website: "https://www.microsoft.com/en-us/sql-server/",
                        wikipedia: "https://en.wikipedia.org/wiki/Microsoft_SQL_Server",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/sql-server"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.mongodb": {
                    id: "database.mongodb",
                    name: "MongoDB",
                    nameShort: "MongoDB",
                    desc: "MongoDB is one of the most popular object/document oriented databases. It stores JSON documents and supports querying, schema enforcement and a host of other features.",
                    tags: ["document-oriented", "fulltext", "geospatial", "json", "no-sql", "object-store", "object-oriented", "open-source", "querying", "search"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "41a949",
                    logoTexture: "mongodb-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://www.mongodb.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/MongoDB",
                        github: "https://github.com/mongodb/mongo",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/mongodb"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.mysql": {
                    id: "database.mysql",
                    name: "MySQL",
                    nameShort: "MySQL",
                    desc: "A widely used relational database management system, powering the likes of Wordpress or Facebook",
                    tags: ["relational", "sql", "rdbms", "open-source"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "E48E1A",
                    logoTexture: "mysql-logo.png",
                    model: "database",
                    links: {
                        website: "https://www.mysql.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/MySQL",
                        github: "https://github.com/mysql/mysql-server",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/mysql"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.neo4j": {
                    id: "database.neo4j",
                    name: "Neo4j",
                    nameShort: "Neo4j",
                    desc: 'Neo4j is a graph database management system developed by Neo4j, Inc. Neo4j is available in a GPL3-licensed open-source "community edition", with online backup and high availability extensions licensed under the terms of the Affero General Public License. Neo also licenses Neo4j with these extensions under closed-source commercial terms. Neo4j is implemented in Java and accessible from software written in other languages using the Cypher Query Language through a transactional HTTP endpoint, or through the binary "bolt" protocol.',
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "63b345",
                    logoTexture: "neo4j-logo.png",
                    model: "database",
                    links: {
                        website: "https://neo4j.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/Neo4j",
                        github: "https://github.com/neo4j",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/neo4j"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.oracle-db": {
                    id: "database.oracle-db",
                    name: "Oracle Database",
                    nameShort: "OracleDB",
                    desc: "Oracle Database is a multi-model database management system produced and marketed by Oracle Corporation. It is the world's most popular database for running online transaction processing, data warehousing and mixed database workloads.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "f80000",
                    logoTexture: "oracle-db-logo.png",
                    model: "database",
                    links: {
                        website: "https://www.oracle.com/database/index.html",
                        wikipedia: "https://en.wikipedia.org/wiki/Oracle_Database",
                        github: "https://github.com/oracle",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/oracle"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.orient-db": {
                    id: "database.orient-db",
                    name: "OrientDB",
                    nameShort: "OrientDB",
                    desc: "OrientDB is an open source NoSQL database management system written in Java. It is a multi-model database, supporting graph, document, key/value, and object models, but the relationships are managed as in graph databases with direct connections between records. It supports schema-less, schema-full and schema-mixed modes. It has a strong security profiling system based on users and roles and supports querying with Gremlin along with SQL extended for graph traversal.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "f7673a",
                    logoTexture: "orient-db-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://orientdb.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/OrientDB",
                        github: "https://github.com/orientechnologies/orientdb",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/orientdb"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.postgres": {
                    id: "database.postgres",
                    name: "PostgreSQL",
                    nameShort: "Postgres",
                    desc: "One of the most popular, battle hardened, powerful, extensible and programmable relational databases out there.",
                    tags: ["relational", "sql", "programmable", "open-source"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "336791",
                    logoTexture: "postgres-logo.png",
                    model: "database",
                    links: {
                        website: "https://www.postgresql.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/PostgreSQL",
                        github: "https://github.com/postgres/postgres",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/postgresql"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.prometheus": {
                    id: "database.prometheus",
                    name: "Prometheus",
                    nameShort: "Prometheus",
                    desc: "An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "e6522c",
                    logoTexture: "prometheus-logo.png",
                    model: "timeseriesdb",
                    links: {
                        website: "https://prometheus.io/",
                        github: "https://github.com/prometheus",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/prometheus"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.realm": {
                    id: "database.realm",
                    name: "Realm",
                    nameShort: "Realm",
                    desc: "Realm is an open-source object database management system, initially for mobile (Android/iOS), also available for platforms such as Xamarin or React Native, and others, including desktop applications (Windows[6]), and is licensed under the Apache License. In 2016 September, the Realm Mobile Platform was announced, followed by the first stable release in January 2017. It allows two-way synchronization between the Realm Object Server, and the client side databases that belong to the given logged-in user. Both a developer, and a commercial edition was released, along with a business license for integrating with other database management systems such as PostgreSQL.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "59569e",
                    logoTexture: "realm-logo.png",
                    model: "database",
                    links: {
                        website: "https://realm.io/",
                        wikipedia: "https://en.wikipedia.org/wiki/Realm_(database)",
                        github: "https://github.com/realm",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/realm"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.rethink-db": {
                    id: "database.rethink-db",
                    name: "RethinkDB",
                    nameShort: "RethinkDB",
                    desc: "RethinkDB is a free and open-source, distributed document-oriented database originally created by the company of the same name. The database stores JSON documents with dynamic schemas, and is designed to facilitate pushing real-time updates for query results to applications. Initially seed funded by Y Combinator in June 2009, the company announced in October 2016 that it had been unable to build a sustainable business and its products would in future be entirely open-sourced without commercial support. The CNCF (Cloud Native Computing Foundation) then purchased the rights to the RethinkDB source code and contributed it to the Linux Foundation.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "40c1c7",
                    logoTexture: "rethink-db-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://www.rethinkdb.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/RethinkDB",
                        github: "https://github.com/rethinkdb/rethinkdb",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/rethinkdb"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.riak": {
                    id: "database.riak",
                    name: "Riak",
                    nameShort: "Riak",
                    desc: "Riak is a distributed NoSQL key-value data store that offers high availability, fault tolerance, operational simplicity, and scalability. In addition to the open-source version, it comes in a supported enterprise version and a cloud storage version. Riak implements the principles from Amazon's Dynamo paper with heavy influence from the CAP Theorem. Written in Erlang, Riak has fault tolerance data replication and automatic data distribution across the cluster for performance and resilience.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "f89d33",
                    logoTexture: "riak-logo.png",
                    model: "keyvalue",
                    links: {
                        website: "http://basho.com/products/riak-kv/",
                        wikipedia: "https://en.wikipedia.org/wiki/Riak",
                        github: "https://github.com/basho/riak_kv",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/riak"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "database.sqlite": {
                    id: "database.sqlite",
                    name: "SQLite",
                    nameShort: "SQLite",
                    desc: "SQLite is a relational database management system contained in a C programming library. In contrast to many other database management systems, SQLite is not a client–server database engine. Rather, it is embedded into the end program.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "44a3dc",
                    logoTexture: "sqlite-logo.png",
                    model: "database",
                    links: {
                        website: "https://www.sqlite.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/SQLite"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "database.teradata-db": {
                    id: "database.teradata-db",
                    name: "Teradata Database",
                    nameShort: "Teradata Database",
                    desc: "Teradata is a fully scalable relational database management system produced by Teradata Corp. It is widely used to manage large data warehousing operations. The Teradata database system is based on off-the-shelf symmetric multiprocessing technology combined with communication networking, connecting symmetric multiprocessing systems to form large parallel processing systems.",
                    tags: ["database"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ed881c",
                    logoTexture: "teradata-db-logo.png",
                    model: "database",
                    links: {
                        website: "https://www.teradata.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/Teradata",
                        github: "https://github.com/Teradata",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/teradata"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                }
            }
        },
        devops: {
            title: "DevOps",
            desc: "Orchestration, Scheduling, CI and build systems",
            components: {
                "devops.hashicorp-consul": {
                    id: "devops.hashicorp-consul",
                    name: "HashiCorp Consul",
                    nameShort: "HashiCorp Consul",
                    desc: "Consul is a distributed service mesh to connect, secure, and configure services across any runtime platform and public or private cloud",
                    tags: ["hashicorp", "service-mesh", "orchestrator"],
                    backgroundColor: "111111",
                    primaryColor: "d62783",
                    logoTexture: "hashicorp-consul-logo.png",
                    model: "orchestrator",
                    links: {
                        website: "https://www.consul.io/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "devops.hashicorp-nomad": {
                    id: "devops.hashicorp-nomad",
                    name: "HashiCorp Nomad",
                    nameShort: "HashiCorp Nomad",
                    desc: "HashiCorp Nomad is a single binary that schedules applications and services on Linux, Windows, and Mac. It is an open source scheduler that uses a declarative job file for scheduling virtualized, containerized, and standalone applications.",
                    tags: ["hashicorp", "scheduler"],
                    backgroundColor: "111111",
                    primaryColor: "25ba81",
                    logoTexture: "hashicorp-nomad-logo.png",
                    model: "scheduler",
                    links: {
                        website: "https://www.nomadproject.io/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        networking: {
            title: "HTTP & Networking",
            desc: "HTTP Server, Proxies, Load Balancer, API-Gateways, VPNs, Connectivity and CDNs",
            components: {
                "networking.aws-amazon-cloudfront": {
                    id: "networking.aws-amazon-cloudfront",
                    name: "Amazon CloudFront",
                    nameShort: "AWS CloudFront",
                    desc: "Global Content Delivery Network",
                    tags: ["aws", "cdn"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "693CC5",
                    logoTexture: "aws-amazon-cloudfront-logo.png",
                    model: "cdn",
                    links: {
                        website: "https://aws.amazon.com/cloudfront/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.aws-amazon-route-53": {
                    id: "networking.aws-amazon-route-53",
                    name: "Amazon Route 53",
                    nameShort: "AWS Route 53",
                    desc: "Scalable Domain Name System",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "693CC5",
                    logoTexture: "aws-amazon-route-53-logo.png",
                    model: "router",
                    links: {
                        website: "https://aws.amazon.com/route53/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.aws-api-gateway": {
                    id: "networking.aws-api-gateway",
                    name: "AWS API Gateway",
                    nameShort: "AWS API Gateway",
                    desc: "A webfacing layer that processes, validates and routes incoming HTTP requests. Helpful as an additional layer of indirection to manage large scale APIs",
                    tags: ["api", "application", "programmable", "interface", "gateway", "api-gateway", "loadbalancer", "rest", "http", "amazon", "web", "services", "aws"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "693CC5",
                    logoTexture: "aws-api-gateway-icon.png",
                    model: "api-gateway",
                    links: {
                        website: "https://aws.amazon.com/api-gateway/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.aws-direct-connect": {
                    id: "networking.aws-direct-connect",
                    name: "AWS Direct Connect",
                    nameShort: "AWS Direct Connect",
                    desc: "AWS Direct Connect makes it possible to establish a dedicated network connection from your premises to AWS",
                    tags: ["amazon", "web", "services", "aws", "connection", "high-throughput", "cloud"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "693CC5",
                    logoTexture: "aws-direct-connect-logo.png",
                    model: "connection",
                    links: {
                        website: "https://aws.amazon.com/directconnect/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.aws-elastic-loadbalancer": {
                    id: "networking.aws-elastic-loadbalancer",
                    name: "AWS Elastic Loadbalancer",
                    nameShort: "AWS ELB",
                    desc: "A scalable, fully managed loadbalancer service for HTTP and TCP traffic",
                    tags: ["api", "gateway", "loadbalancer", "rest", "http", "amazon", "web", "services", "aws"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "D86613",
                    logoTexture: "aws-elb-logo.png",
                    model: "loadbalancer-alt",
                    links: {
                        website: "https://aws.amazon.com/elasticloadbalancing/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-api-management": {
                    id: "networking.azure-api-management",
                    name: "Azure API Management",
                    nameShort: "Azure API Management",
                    desc: "Publish APIs to developers, partners, and employees securely and at scale",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-api-management-logo.png",
                    model: "api-gateway",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-application-gateway": {
                    id: "networking.azure-application-gateway",
                    name: "Azure Application Gateway",
                    nameShort: "Azure Application Gateway",
                    desc: "Build secure, scalable, and highly available web front ends in Azure",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-application-gateway-logo.png",
                    model: "gateway",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-content-delivery-network": {
                    id: "networking.azure-content-delivery-network",
                    name: "Azure Content Delivery Network",
                    nameShort: "Azure CDN",
                    desc: "Ensure secure, reliable content delivery with broad global reach",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-cdn-logo.png",
                    model: "cdn",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-ddos-protection": {
                    id: "networking.azure-ddos-protection",
                    name: "Azure DDoS Protection",
                    nameShort: "Azure DDoS Protection",
                    desc: "Protect your applications from Distributed Denial of Service (DDoS) attacks",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "8abe10",
                    logoTexture: "azure-ddos-protection-logo.png",
                    model: "firewall",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-dns": {
                    id: "networking.azure-dns",
                    name: "Azure DNS",
                    nameShort: "Azure DNS",
                    desc: "Host your DNS domain in Azure",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-dns-logo.png",
                    model: "router",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-expressroute": {
                    id: "networking.azure-expressroute",
                    name: "Azure ExpressRoute",
                    nameShort: "Azure ExpressRoute",
                    desc: "Dedicated private network fiber connections to Azure",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-expressroute-logo.png",
                    model: "connection",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-load-balancer": {
                    id: "networking.azure-load-balancer",
                    name: "Azure Load Balancer",
                    nameShort: "Azure Load Balancer",
                    desc: "Deliver high availability and network performance to your applications",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-load-balancer-logo.png",
                    model: "loadbalancer-alt",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-traffic-manager": {
                    id: "networking.azure-traffic-manager",
                    name: "Azure Traffic Manager",
                    nameShort: "Azure Traffic Manager",
                    desc: "Route incoming traffic for high performance and availability",
                    tags: ["azure"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "0079d6",
                    logoTexture: "azure-traffic-manager-logo.png",
                    model: "router",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/traffic-manager/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-virtual-network": {
                    id: "networking.azure-virtual-network",
                    name: "Azure Virtual Network",
                    nameShort: "Azure Virtual Network",
                    desc: "Provision private networks, optionally connect to on-premises datacenters",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-virtual-network-logo.png",
                    model: "firewall",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.azure-vpn-gateway": {
                    id: "networking.azure-vpn-gateway",
                    name: "Azure VPN Gateway",
                    nameShort: "Azure VPN Gateway",
                    desc: "Establish secure, cross-premises connectivity",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-vpn-gateway-logo.png",
                    model: "gateway",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "networking.gcc-bigquery-data-transfer-service": {
                    id: "networking.gcc-bigquery-data-transfer-service",
                    name: "GCC BigQuery Data Transfer Service",
                    nameShort: "GCC BigQuery Data Transfer Service",
                    desc: "Fully managed data import service for BigQuery.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-bigquery-logo.png",
                    model: "connection",
                    links: {
                        website: "https://cloud.google.com/bigquery/transfer/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.gcc-cloud-armor": {
                    id: "networking.gcc-cloud-armor",
                    name: "GCC Cloud Armor",
                    nameShort: "GCC Cloud Armor",
                    desc: "Protect your services against DoS and web attacks.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-armor-logo.png",
                    model: "firewall",
                    links: {
                        website: "https://cloud.google.com/armor/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.gcc-cloud-cdn": {
                    id: "networking.gcc-cloud-cdn",
                    name: "GCC Cloud CDN",
                    nameShort: "GCC Cloud CDN",
                    desc: "Content delivery on Google's global network.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-cdn-logo.png",
                    model: "cdn",
                    links: {
                        website: "https://cloud.google.com/cdn/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.gcc-cloud-dns": {
                    id: "networking.gcc-cloud-dns",
                    name: "GCC Cloud DNS",
                    nameShort: "GCC Cloud DNS",
                    desc: "Reliable, resilient, low-latency DNS serving.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-dns-logo.png",
                    model: "router",
                    links: {
                        website: "https://cloud.google.com/dns/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.gcc-cloud-endpoints": {
                    id: "networking.gcc-cloud-endpoints",
                    name: "GCC Cloud Endpoints",
                    nameShort: "GCC Cloud Endpoints",
                    desc: "Develop, deploy, and manage APIs on GCP.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-endpoints-logo.png",
                    model: "api-gateway",
                    links: {
                        website: "https://cloud.google.com/endpoints/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.gcc-cloud-interconnect": {
                    id: "networking.gcc-cloud-interconnect",
                    name: "GCC Cloud Interconnect",
                    nameShort: "GCC Cloud Interconnect",
                    desc: "Connect directly to GCP’s network edge.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-interconnect-logo.png",
                    model: "connection",
                    links: {
                        website: "https://cloud.google.com/interconnect/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.gcc-cloud-load-balancing": {
                    id: "networking.gcc-cloud-load-balancing",
                    name: "GCC Cloud Load Balancing",
                    nameShort: "GCC Cloud Load Balancing",
                    desc: "High-performance, scalable load balancing.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-load-balancing-logo.png",
                    model: "loadbalancer",
                    links: {
                        website: "https://cloud.google.com/load-balancing/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.gcc-cloud-storage-transfer-service": {
                    id: "networking.gcc-cloud-storage-transfer-service",
                    name: "GCC Cloud Storage Transfer Service",
                    nameShort: "GCC Cloud Storage Transfer Service",
                    desc: "Transfer data between cloud storage services such as AWS S3 and Google Cloud Storage.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-storage-logo.png",
                    model: "connection",
                    links: {
                        website: "https://cloud.google.com/storage/transfer/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.gcc-transfer-appliance": {
                    id: "networking.gcc-transfer-appliance",
                    name: "GCC Transfer Appliance",
                    nameShort: "GCC Transfer Appliance",
                    desc: "Rackable storage server for shipping large volumes of data to Google Cloud.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-transfer-appliance-logo.png",
                    model: "aws-snowball",
                    links: {
                        website: "https://cloud.google.com/transfer-appliance/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.haproxy": {
                    id: "networking.haproxy",
                    name: "HA Proxy",
                    nameShort: "HA Proxy",
                    desc: "HAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for very high traffic web sites and powers quite a number of the world's most visited ones. Over the years it has become the de-facto standard opensource load balancer, is now shipped with most mainstream Linux distributions, and is often deployed by default in cloud platforms.",
                    tags: ["loadbalancer"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3d6da5",
                    logoTexture: "haproxy-logo.png",
                    model: "loadbalancer",
                    links: {
                        website: "http://www.haproxy.org/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.ibm-websphere-application-server": {
                    id: "networking.ibm-websphere-application-server",
                    name: "IBM WebSphere Application Server",
                    nameShort: "WebSphere App Server",
                    desc: "WebSphere Application Server (WAS) is a software product that performs the role of a web application server. More specifically, it is a software framework and middleware that hosts Java-based web applications.",
                    tags: ["application", "hosting", "http", "rest", "server", "web", "webhosting", "ibm", "websphere"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4178be",
                    logoTexture: "ibm-websphere-logo.png",
                    model: "server",
                    links: {
                        website: "https://www.ibm.com/us-en/marketplace/java-ee-runtime"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.ibm-websphere-http-server": {
                    id: "networking.ibm-websphere-http-server",
                    name: "IBM WebSphere HTTP Server",
                    nameShort: "Websphere HTTP Server",
                    desc: "IBM HTTP Server (IHS) is a web server based on the Apache Software Foundation's HTTP Server.",
                    tags: ["ibm", "websphere", "http", "apache"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "01397c",
                    logoTexture: "ibm-websphere-logo.png",
                    model: "server",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "networking.nginx": {
                    id: "networking.nginx",
                    name: "NginX",
                    nameShort: "NginX",
                    desc: "Nginx is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. The software was created by Igor Sysoev and first publicly released in 2004. A company of the same name was founded in 2011 to provide support and Nginx plus paid software.Nginx is free and open-source software, released under the terms of a BSD-like license. A large fraction of web servers use Nginx often as a load balancer.",
                    tags: ["loadbalancer"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "9900",
                    logoTexture: "nginx-logo.png",
                    model: "loadbalancer",
                    links: {
                        website: "https://www.mysql.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/MySQL",
                        github: "https://github.com/mysql/mysql-server",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/mysql"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        ai: {
            title: "AI & Machine Learning",
            desc: "Cognitive services (Image/Speech recognition etc.) and Neural Networks",
            components: {
                "ai.aws-amazon-comprehend": {
                    id: "ai.aws-amazon-comprehend",
                    name: "Amazon Comprehend",
                    nameShort: "AWS Comprehend",
                    desc: "Discover Insights and Relationships in Text",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "a165ff",
                    logoTexture: "aws-amazon-comprehend-logo.png",
                    model: "neural-net",
                    links: {
                        website: "https://aws.amazon.com/comprehend/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-amazon-lex": {
                    id: "ai.aws-amazon-lex",
                    name: "Amazon Lex",
                    nameShort: "AWS Lex",
                    desc: "Build Voice and Text Chatbots",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "1C7B68",
                    logoTexture: "aws-amazon-lex-logo.png",
                    model: "bot",
                    links: {
                        website: "https://aws.amazon.com/lex/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-amazon-machine-learning": {
                    id: "ai.aws-amazon-machine-learning",
                    name: "Amazon Machine Learning",
                    nameShort: "AWS Machine Learning",
                    desc: "Machine Learning for Developers",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "1C7B68",
                    logoTexture: "aws-amazon-machine-learning-logo.png",
                    model: "brain",
                    links: {
                        website: "https://aws.amazon.com/machine-learning/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-amazon-pinpoint": {
                    id: "ai.aws-amazon-pinpoint",
                    name: "Amazon Pinpoint",
                    nameShort: "AWS Pinpoint",
                    desc: "Push Notifications for Mobile Apps",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-amazon-pinpoint-logo.png",
                    model: "piechart",
                    links: {
                        website: "https://aws.amazon.com/pinpoint/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-amazon-polly": {
                    id: "ai.aws-amazon-polly",
                    name: "Amazon Polly",
                    nameShort: "AWS Polly",
                    desc: "Turn Text into Lifelike Speech",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "1C7B68",
                    logoTexture: "aws-amazon-polly-logo.png",
                    model: "speech",
                    links: {
                        website: "https://aws.amazon.com/polly/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-amazon-rekognition": {
                    id: "ai.aws-amazon-rekognition",
                    name: "Amazon Rekognition",
                    nameShort: "AWS Rekognition",
                    desc: "Analyze Image and Video",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "1C7B68",
                    logoTexture: "aws-amazon-rekognition-logo.png",
                    model: "vision",
                    links: {
                        website: "https://aws.amazon.com/rekognition/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-amazon-sagemaker": {
                    id: "ai.aws-amazon-sagemaker",
                    name: "Amazon SageMaker",
                    nameShort: "AWS SageMaker",
                    desc: "Build, Train, and Deploy Machine Learning Models at Scale",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "1C7B68",
                    logoTexture: "aws-amazon-sagemaker-logo.png",
                    model: "neural-net",
                    links: {
                        website: "https://aws.amazon.com/sagemaker/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-amazon-transcribe": {
                    id: "ai.aws-amazon-transcribe",
                    name: "Amazon Transcribe",
                    nameShort: "AWS Transcribe",
                    desc: "Automatic Speech Recognition",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "1C7B68",
                    logoTexture: "aws-amazon-transcribe-logo.png",
                    model: "speech",
                    links: {
                        website: "https://aws.amazon.com/transcribe/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-amazon-translate": {
                    id: "ai.aws-amazon-translate",
                    name: "Amazon Translate",
                    nameShort: "AWS Translate",
                    desc: "Natural and Fluent Language Translation",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "1C7B68",
                    logoTexture: "aws-amazon-translate-logo.png",
                    model: "speech",
                    links: {
                        website: "https://aws.amazon.com/translate/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-apache-mxnet-on-aws": {
                    id: "ai.aws-apache-mxnet-on-aws",
                    name: "Apache MXNet on AWS",
                    nameShort: "Apache MXNet on AWS",
                    desc: "Scalable, High-performance Deep Learning",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "048ccb",
                    logoTexture: "aws-apache-mxnet-on-aws-logo.png",
                    model: "neural-net",
                    links: {
                        website: "https://aws.amazon.com/mxnet/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.aws-deep-learning-amis": {
                    id: "ai.aws-deep-learning-amis",
                    name: "AWS Deep Learning AMIs",
                    nameShort: "AWS Deep Learning AMIs",
                    desc: "Quickly Start Deep Learning on EC2",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "1C7B68",
                    logoTexture: "aws-deep-learning-amis-logo.png",
                    model: "server",
                    links: {
                        website: "https://aws.amazon.com/amazon-ai/amis/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-batch-ai": {
                    id: "ai.azure-batch-ai",
                    name: "Azure Batch AI",
                    nameShort: "Azure Batch AI",
                    desc: "Easily experiment and train your deep learning and AI models in parallel at scale",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "006dd6",
                    logoTexture: "azure-batch-logo.png",
                    model: "batch-processor",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-bing-speech": {
                    id: "ai.azure-bing-speech",
                    name: "Azure Bing Speech",
                    nameShort: "Bing Speech",
                    desc: "Bing Speech is part of Microsoft Azure's Cognitive Service suite. It provides speech recognition (speech-to-text) and reading (text-to-speech) capabilities.",
                    tags: ["microsoft", "azure", "cognitive", "services", "speech-recognition", "text-to-speech"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "0063b1",
                    logoTexture: "azure-bing-speech-logo.png",
                    model: "speech",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/cognitive-services/speech/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-bot-service": {
                    id: "ai.azure-bot-service",
                    name: "Azure Bot Service",
                    nameShort: "Azure Bot Service",
                    desc: "Chatbot as a service that engages with customers in a conversational fashion.",
                    tags: ["microsoft", "azure", "cognitive", "services", "bot", "conversation", "chatbot"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3a96dd",
                    logoTexture: "azure-bot-service-logo.png",
                    model: "bot",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/bot-service/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.azure-computer-vision": {
                    id: "ai.azure-computer-vision",
                    name: "Azure Computer Vision",
                    nameShort: "Azure Computer Vision",
                    desc: "Distill actionable information from images",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0078d7",
                    logoTexture: "azure-computer-vision-logo.png",
                    model: "vision",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-content-moderator": {
                    id: "ai.azure-content-moderator",
                    name: "Azure Content Moderator",
                    nameShort: "Azure Content Moderator",
                    desc: "Automated image, text, and video moderation",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0078d7",
                    logoTexture: "azure-content-moderator-logo.png",
                    model: "firewall",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-custom-decision": {
                    id: "ai.azure-custom-decision",
                    name: "Azure Custom Decision",
                    nameShort: "Azure Custom Decision",
                    desc: "A cloud-based, contextual decision-making API that sharpens with experience",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0063b1",
                    logoTexture: "azure-custom-decision-logo.png",
                    model: "brain",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-custom-speech": {
                    id: "ai.azure-custom-speech",
                    name: "Azure Custom Speech",
                    nameShort: "Azure Custom Speech",
                    desc: "Overcome speech recognition barriers like speaking style, background noise, and vocabulary",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0063b1",
                    logoTexture: "azure-custom-speech-logo.png",
                    model: "speech",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-custom-vision": {
                    id: "ai.azure-custom-vision",
                    name: "Azure Custom Vision",
                    nameShort: "Azure Custom Vision",
                    desc: "Easily customize your own state-of-the-art computer vision models for your unique use case",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0063b2",
                    logoTexture: "azure-custom-vision-logo.png",
                    model: "vision",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-emotion": {
                    id: "ai.azure-emotion",
                    name: "Azure Emotion",
                    nameShort: "Azure Emotion",
                    desc: "Personalize user experiences with emotion recognition",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "009581",
                    logoTexture: "azure-emotion-logo.png",
                    model: "brain",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-face": {
                    id: "ai.azure-face",
                    name: "Azure Face",
                    nameShort: "Azure Face",
                    desc: "Detect, identify, analyze, organize, and tag faces in photos",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "009480",
                    logoTexture: "azure-face-logo.png",
                    model: "brain",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.azure-language-understanding": {
                    id: "ai.azure-language-understanding",
                    name: "Azure Language Understanding",
                    nameShort: "Azure Language Understanding",
                    desc: "Teach your apps to understand commands from your users",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d8",
                    logoTexture: "azure-language-understanding-logo.png",
                    model: "speech",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-linguistic-analysis": {
                    id: "ai.azure-linguistic-analysis",
                    name: "Azure Linguistic Analysis",
                    nameShort: "Azure Linguistic Analysis",
                    desc: "Simplify complex language concepts and parse text with the Linguistic Analysis API",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-linguistic-analysis-logo.png",
                    model: "speech",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-qna-maker": {
                    id: "ai.azure-qna-maker",
                    name: "Azure QnA Maker",
                    nameShort: "Azure QnA Maker",
                    desc: "Distill information into conversational, easy-to-navigate answers",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-cognitive-services-logo.png",
                    model: "brain",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-search": {
                    id: "ai.azure-search",
                    name: "Azure Search",
                    nameShort: "Azure Search",
                    desc: "Fully-managed search-as-a-service",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-search-logo.png",
                    model: "analytics-surface-magnifying-glass",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-speaker-recognition": {
                    id: "ai.azure-speaker-recognition",
                    name: "Azure Speaker Recognition",
                    nameShort: "Azure Speaker Recognition",
                    desc: "Use speech to identify and verify individual speakers",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-speaker-recognition-logo.png",
                    model: "speech",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-text-analytics": {
                    id: "ai.azure-text-analytics",
                    name: "Azure Text Analytics",
                    nameShort: "Azure Text Analytics",
                    desc: "Easily evaluate sentiment and topics to understand what users want",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "009581",
                    logoTexture: "azure-text-analytics-logo.png",
                    model: "processor",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-translator-speech": {
                    id: "ai.azure-translator-speech",
                    name: "Azure Translator Speech",
                    nameShort: "Azure Translator Speech",
                    desc: "Easily conduct real-time speech translation with a simple REST API call",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-translator-speech-logo.png",
                    model: "speech",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-translator-text": {
                    id: "ai.azure-translator-text",
                    name: "Azure Translator Text",
                    nameShort: "Azure Translator Text",
                    desc: "Easily conduct machine translation with a simple REST API call",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-translator-speech-logo.png",
                    model: "speech",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-video-indexer": {
                    id: "ai.azure-video-indexer",
                    name: "Azure Video Indexer",
                    nameShort: "Azure Video Indexer",
                    desc: "Unlock video insights",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-video-indexer-logo.png",
                    model: "stream-processor",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.azure-web-language-model": {
                    id: "ai.azure-web-language-model",
                    name: "Azure Web Language Model",
                    nameShort: "Azure Web Language Model",
                    desc: "Use the power of predictive language models trained on web-scale data",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-web-language-model-logo.png",
                    model: "speech",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "ai.gcc-cloud-automl": {
                    id: "ai.gcc-cloud-automl",
                    name: "GCC Cloud AutoML",
                    nameShort: "GCC Cloud AutoML",
                    desc: "Easily train high-quality, custom ML models.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-automl-logo.png",
                    model: "neural-net",
                    links: {
                        website: "https://cloud.google.com/automl/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.gcc-cloud-machine-learning-engine": {
                    id: "ai.gcc-cloud-machine-learning-engine",
                    name: "GCC Cloud Machine Learning Engine",
                    nameShort: "GCC Cloud Machine Learning",
                    desc: "Build superior models and deploy them into production.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-machine-learning-engine-logo.png",
                    model: "neural-net",
                    links: {
                        website: "https://cloud.google.com/ml-engine/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.gcc-cloud-natural-language": {
                    id: "ai.gcc-cloud-natural-language",
                    name: "GCC Cloud Natural Language",
                    nameShort: "GCC Cloud Natural Language",
                    desc: "Derive insights from unstructured text.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-natural-language-logo.png",
                    model: "speech",
                    links: {
                        website: "https://cloud.google.com/natural-language/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.gcc-cloud-speech-to-text": {
                    id: "ai.gcc-cloud-speech-to-text",
                    name: "GCC Cloud Speech-to-Text",
                    nameShort: "GCC Cloud Speech-to-Text",
                    desc: "Speech-to-text conversion powered by ML.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-speech-to-text-logo.png",
                    model: "speech",
                    links: {
                        website: "https://cloud.google.com/speech-to-text/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.gcc-cloud-text-to-speech": {
                    id: "ai.gcc-cloud-text-to-speech",
                    name: "GCC Cloud Text-to-Speech",
                    nameShort: "GCC Cloud Text-to-Speech",
                    desc: "Text-to-speech conversion powered by ML.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-speech-to-text-logo.png",
                    model: "speech",
                    links: {
                        website: "https://cloud.google.com/text-to-speech/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.gcc-cloud-translation-api": {
                    id: "ai.gcc-cloud-translation-api",
                    name: "GCC Cloud Translation API",
                    nameShort: "GCC Cloud Translation API",
                    desc: "Dynamically translate most language pairs.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-translation-api-logo.png",
                    model: "brain",
                    links: {
                        website: "https://cloud.google.com/translate/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.gcc-cloud-video-intelligence": {
                    id: "ai.gcc-cloud-video-intelligence",
                    name: "GCC Cloud Video Intelligence",
                    nameShort: "GCC Cloud Video Intelligence",
                    desc: "Extract metadata from videos.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-video-intelligence-logo.png",
                    model: "vision",
                    links: {
                        website: "https://cloud.google.com/video-intelligence/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.gcc-cloud-vision-api": {
                    id: "ai.gcc-cloud-vision-api",
                    name: "GCC Cloud Vision API",
                    nameShort: "GCC Cloud Vision API",
                    desc: "Derive insight from images powered by ML.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-vision-api-logo.png",
                    model: "vision",
                    links: {
                        website: "https://cloud.google.com/vision/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.gcc-dialogflow-enterprise-edition": {
                    id: "ai.gcc-dialogflow-enterprise-edition",
                    name: "GCC Dialogflow Enterprise Edition",
                    nameShort: "GCC Dialogflow",
                    desc: "Create conversational experiences across devices and platforms.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ef6c00",
                    logoTexture: "gcc-dialogflow-enterprise-edition-logo.png",
                    model: "bot",
                    links: {
                        website: "https://cloud.google.com/dialogflow-enterprise/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.gcc-firebase-predictions": {
                    id: "ai.gcc-firebase-predictions",
                    name: "GCC Firebase Predictions",
                    nameShort: "GCC Firebase Predictions",
                    desc: "Define dynamic user groups based on predicted behavior.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ffcb2b",
                    logoTexture: "gcc-firebase-realtime-database-logo.png",
                    model: "brain",
                    links: {
                        website: "https://firebase.google.com/products/predictions/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "ai.tensorflow": {
                    id: "ai.tensorflow",
                    name: "TensorFlow",
                    nameShort: "TensorFlow",
                    desc: "TensorFlow is an open-source software library for dataflow programming across a range of tasks. It is a symbolic math library, and is also used for machine learning applications such as neural networks. It is used for both research and production at Google,‍ often replacing its closed-source predecessor, DistBelief.",
                    tags: ["ai"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "f8bf3c",
                    logoTexture: "tensorflow-logo.png",
                    model: "neural-net",
                    links: {
                        website: "https://www.tensorflow.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/TensorFlow",
                        github: "https://github.com/tensorflow/tensorflow",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/tensorflow"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        analytics: {
            title: "Analytics & BI",
            desc: "Business Intelligence, Data Extraction, ETL and high level analytics",
            components: {
                "analytics.aws-athena": {
                    id: "analytics.aws-athena",
                    name: "AWS Athena",
                    nameShort: "AWS Athena",
                    desc: "AWS Athena is a serverless query engine that makes it possible to run SQL like statements against data stored in S3 buckets.",
                    tags: ["aws", "analytics", "etl", "amazon", "web", "services", "querying", "search", "analytics", "serverless"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "693CC5",
                    logoTexture: "aws-athena-logo.png",
                    model: "analytics-surface",
                    links: {
                        website: "https://aws.amazon.com/athena/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.aws-cloudtrail": {
                    id: "analytics.aws-cloudtrail",
                    name: "AWS CloudTrail",
                    nameShort: "AWS CloudTrail",
                    desc: "AWS CloudTrail is a service that enables governance, compliance, operational auditing, and risk auditing of your AWS account. With CloudTrail, you can log, continuously monitor, and retain account activity related to actions across your AWS infrastructure. CloudTrail provides event history of your AWS account activity, including actions taken through the AWS Management Console, AWS SDKs, command line tools, and other AWS services. This event history simplifies security analysis, resource change tracking, and troubleshooting.",
                    tags: ["analytics"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "CC2264",
                    logoTexture: "aws-cloudtrail-logo.png",
                    model: "logging",
                    links: {
                        website: "https://aws.amazon.com/cloudtrail/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.aws-data-pipeline": {
                    id: "analytics.aws-data-pipeline",
                    name: "AWS Data Pipeline",
                    nameShort: "AWS Data Pipeline",
                    desc: "Orchestration Service for Periodic, Data-driven Workflows",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "693CC5",
                    logoTexture: "aws-data-pipeline-logo.png",
                    model: "connection",
                    links: {
                        website: "https://aws.amazon.com/datapipeline/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.aws-glue": {
                    id: "analytics.aws-glue",
                    name: "AWS Glue",
                    nameShort: "AWS Glue",
                    desc: "AWS Glue is a fully managed extract, transform, and load (ETL) service that helps import semi-structured data from S3 into other AWS storage solutions.",
                    tags: ["aws", "analytics", "etl", "amazon", "web", "services"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "693CC5",
                    logoTexture: "aws-glue-logo.png",
                    model: "data-funnel",
                    links: {
                        website: "https://aws.amazon.com/glue/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.aws-quicksight": {
                    id: "analytics.aws-quicksight",
                    name: "AWS Quicksight",
                    nameShort: "AWS Quicksight",
                    desc: "AWS Quicksight is a business intelligence and analytics suite that allows to extract, evaluate and visualize data out of various AWS sources.",
                    tags: ["aws", "analytics", "business-intelligence", "data-visualisation"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "00b7f4",
                    logoTexture: "aws-quicksight-logo.png",
                    model: "piechart",
                    links: {
                        website: "https://aws.amazon.com/quicksight/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-analysis-services": {
                    id: "analytics.azure-analysis-services",
                    name: "Azure Analysis Services",
                    nameShort: "Azure Analysis Services",
                    desc: "Enterprise-grade analytics engine as a service",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "5ab4da",
                    logoTexture: "azure-analysis-services-logo.png",
                    model: "analytics-surface",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/analysis-services/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-apache-spark-for-azure-hdinsight": {
                    id: "analytics.azure-apache-spark-for-azure-hdinsight",
                    name: "Azure Apache Spark for Azure HDInsight",
                    nameShort: "Azure Apache Spark",
                    desc: "Apache Spark in the cloud for mission critical deployments",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-hdinsight-logo.png",
                    model: "stream-processor",
                    links: {
                        website: "https://docs.microsoft.com/en-us/azure/hdinsight/spark/apache-spark-overview"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-apache-storm-for-hdinsight": {
                    id: "analytics.azure-apache-storm-for-hdinsight",
                    name: "Azure Apache Storm for HDInsight",
                    nameShort: "Azure Apache Storm",
                    desc: "Real-time stream processing made easy for big data",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-hdinsight-logo.png",
                    model: "stream-processor",
                    links: {
                        website: "https://docs.microsoft.com/en-gb/azure/hdinsight/storm/apache-storm-overview"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-data-factory": {
                    id: "analytics.azure-data-factory",
                    name: "Azure Data Factory",
                    nameShort: "Azure Data Factory",
                    desc: "Hybrid data integration at enterprise scale, made easy",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-data-factory-logo.png",
                    model: "data-funnel",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-data-lake-analytics": {
                    id: "analytics.azure-data-lake-analytics",
                    name: "Azure Data Lake Analytics",
                    nameShort: "Azure Data Lake Analytics",
                    desc: "Distributed analytics service that makes big data easy",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-data-lake-analytics-logo.png",
                    model: "analytics-surface",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-data-lake-storage": {
                    id: "analytics.azure-data-lake-storage",
                    name: "Azure Data Lake Storage",
                    nameShort: "Azure Data Lake Storage",
                    desc: "Massively scalable data lake storage repository for big data analytics workloadsAzure",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-data-lake-storage-logo.png",
                    model: "data-warehouse",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-databricks": {
                    id: "analytics.azure-databricks",
                    name: "Azure Databricks",
                    nameShort: "Azure Databricks",
                    desc: "Fast, easy, and collaborative Apache Spark-based analytics platform",
                    tags: ["azure"],
                    backgroundColor: "e63118",
                    primaryColor: "e63118",
                    logoTexture: "databricks-logo.png",
                    model: "databricks",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/databricks/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-event-hubs": {
                    id: "analytics.azure-event-hubs",
                    name: "Azure Event Hubs",
                    nameShort: "Azure Event Hubs",
                    desc: "Receive telemetry from millions of devices",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-event-hubs-logo.png",
                    model: "message-broker",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-power-bi-embedded": {
                    id: "analytics.azure-power-bi-embedded",
                    name: "Azure Power BI Embedded",
                    nameShort: "Azure Power BI Embedded",
                    desc: "Embed fully interactive, stunning data visualizations in your applications",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "000000",
                    logoTexture: "azure-power-bi-embedded-logo.png",
                    model: "analytics-surface",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-r-server-for-hdinsight": {
                    id: "analytics.azure-r-server-for-hdinsight",
                    name: "Azure R Server for HDInsight",
                    nameShort: "Azure R Server for HDInsight",
                    desc: "Predictive analytics, machine learning, and statistical modeling for big data",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-hdinsight-logo.png",
                    model: "analytics-surface",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.azure-stream-analytics": {
                    id: "analytics.azure-stream-analytics",
                    name: "Azure Stream analytics",
                    nameShort: "Azure Stream analytics",
                    desc: "Real-time data stream processing from millions of IoT devices",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-stream-analytics-logo.png",
                    model: "stream-processor",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.cloud-search": {
                    id: "analytics.cloud-search",
                    name: "AWS Cloudsearch",
                    nameShort: "AWS Cloudsearch",
                    desc: "AWS Cloudsearch is a search-as-a-service offering that cen perform field-based, fulltext, geospatial and other searches within data stored in other AWS Storage solutions such as S3, DynamoDB or RDS.",
                    tags: ["database", "search", "aws", "amazon", "web", "services", "fulltext", "geospatial"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "693CC5",
                    logoTexture: "aws-cloudsearch-logo.png",
                    model: "analytics-surface-magnifying-glass",
                    links: {
                        website: "https://aws.amazon.com/cloudsearch/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "analytics.gcc-genomics": {
                    id: "analytics.gcc-genomics",
                    name: "GCC Genomics",
                    nameShort: "GCC Genomics",
                    desc: "Power your science with Google Genomics.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-genomics-logo.png",
                    model: "genetics",
                    links: {
                        website: "https://cloud.google.com/genomics/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "analytics.microsoft-genomics": {
                    id: "analytics.microsoft-genomics",
                    name: "Microsoft Genomics",
                    nameShort: "Microsoft Genomics",
                    desc: "Power genome sequencing & research insights",
                    tags: ["azure"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "1566bf",
                    logoTexture: "microsoft-genomics-logo.png",
                    model: "genetics",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/genomics/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                }
            }
        },
        cache: {
            title: "Cache",
            desc: "Short term storage (Redis, Memcached) and In-Memory-Data-Grids (SAP Hana, Hazelcast)",
            components: {
                "cache.aerospike": {
                    id: "cache.aerospike",
                    name: "Aerospike",
                    nameShort: "Aerospike",
                    desc: "Aerospike is a distributed in-memory key-value store optimised for flash memory and targeted towards enterprise use.",
                    tags: ["cache", "database", "in-memory", "key-value", "distributed", "enterprise", "open-source", "agpl-license", "commercial"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "c31618",
                    logoTexture: "aerospike-logo.png",
                    model: "cache",
                    links: {
                        website: "https://www.aerospike.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/Aerospike_database",
                        github: "https://github.com/aerospike",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/aerospike"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "cache.apache-geode": {
                    id: "cache.apache-geode",
                    name: "Apache Geode",
                    nameShort: "Apache Geode",
                    desc: "Geode is a distributed, in-memory compute and data-management platform that elastically scales depending on data needs. It provides a host of building blocks such as functions, event, data structures and the likes to adapt to complex usecases.",
                    tags: ["java", "in-memory-data-grid", "cache", "in-memory", "open-source", "apache", "redis-protocol"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "1E90FF",
                    logoTexture: "apache-geode-logo.png",
                    model: "cache",
                    links: {
                        website: "http://geode.apache.org/",
                        github: "https://github.com/apache/geode",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/geode"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "cache.aws-elasticache": {
                    id: "cache.aws-elasticache",
                    name: "AWS ElastiCache",
                    nameShort: "AWS ElastiCache",
                    desc: "ElastiCache is a managed Redis or Memcached distribution, running on AWS EC2 servers.",
                    tags: ["aws", "amazon", "web", "services", "managed", "cache", "redis-protocol", "in-memory", "distributed", "key-value", "object-store"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3B48CC",
                    logoTexture: "aws-elasticache-logo.png",
                    model: "cache",
                    links: {
                        website: "https://aws.amazon.com/elasticache",
                        wikipedia: "https://en.wikipedia.org/wiki/Amazon_ElastiCache",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/amazon-elasticache"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "cache.azure-redis-cache": {
                    id: "cache.azure-redis-cache",
                    name: "Azure Redis Cache",
                    nameShort: "Azure Redis Cache",
                    desc: "Fully managed, open source–compatible in-memory data store to power fast, scalable applications",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-redis-cache-logo.png",
                    model: "cache",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "cache.ibm-websphere-extreme-scale": {
                    id: "cache.ibm-websphere-extreme-scale",
                    name: "IBM WebSphere eXtreme Scale",
                    nameShort: "WebSphere eXtreme Scale",
                    desc: "IBM WebSphere eXtreme Scale is an IBM in-memory data grid product. It can be described as a fully elastic memory based storage grid. It virtualizes the free memory of a potentially large number of Java virtual machines and makes them behave like a single key addressable storage pool for application state.",
                    tags: ["in-memory", "in-memory-data-grid", "cache", "ibm", "websphere"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "01397c",
                    logoTexture: "ibm-websphere-logo.png",
                    model: "cache",
                    links: {
                        website: "https://www.ibm.com/support/knowledgecenter/en/SSTVLU_8.6.1/com.ibm.websphere.extremescale.doc/cxsoverview.html"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "cache.memcached": {
                    id: "cache.memcached",
                    name: "Memcached",
                    nameShort: "Memcached",
                    desc: "Memcached is a distributed, purely in-memory key-value object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.",
                    tags: ["cache", "in-memory", "distributed", "key-value", "object-store", "open-source", "high-performance", "bsd-license"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "298d83",
                    logoTexture: "memcached-logo.png",
                    model: "cache",
                    links: {
                        website: "https://memcached.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/Memcached",
                        github: "https://github.com/memcached/memcached",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/memcached"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "cache.redis": {
                    id: "cache.redis",
                    name: "Redis",
                    nameShort: "Redis",
                    desc: 'Often referred to as "the swiss army knife of the web" Redis is a fast and versatily in-memory key-value store that can also persist data to disk and can double as a pub-sub message broker or even as a neural network.',
                    tags: ["cache", "database", "in-memory", "key-value", "distributed", "message-broker", "pub-sub", "open-source", "bsd-license", "redis-protocol", "sentinel", "geospatial"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "C6302B",
                    logoTexture: "redis-logo.png",
                    model: "cache",
                    links: {
                        website: "https://redis.io/",
                        wikipedia: "https://en.wikipedia.org/wiki/Redis",
                        github: "https://github.com/antirez/redis",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/redis"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "cache.sap-hana": {
                    id: "cache.sap-hana",
                    name: "SAP HANA",
                    nameShort: "SAP HANA",
                    desc: "SAP HANA is an in-memory, column-oriented, relational database management system developed and marketed by SAP SE. Its primary function as a database server is to store and retrieve data as requested by the applications.",
                    tags: ["cache", "database", "in-memory", "distributed", "sap", "enterprise", "commercial", "big-data"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "14185",
                    logoTexture: "sap-hana-logo.png",
                    model: "cache",
                    links: {
                        website: "https://www.sap.com/products/hana.html",
                        wikipedia: "https://en.wikipedia.org/wiki/SAP_HANA",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/hana"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        "data-processing": {
            title: "Data Processing",
            desc: "Stream processing, Map Reduce, Big-Data and Parallel-Computation frameworks",
            components: {
                "data-processing.apache-flink": {
                    id: "data-processing.apache-flink",
                    name: "Apache Flink",
                    nameShort: "Apache Flink",
                    desc: "Apache Flink is an open-source cluster-computing and stream processing framework. It can be used to parallelize computational tasks an large datasets or datastreams.",
                    tags: ["open-source", "apache", "stream-processing", "map-reduce", "parallel-computation", "big-data", "hadoop", "sql", "streaming", "pipeline", "bulk-processing", "high-throughput", "low-latency", "data-parallel", "java", "scala", "python"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "e6526f",
                    logoTexture: "apache-flink-logo.png",
                    model: "stream-processor",
                    links: {
                        website: "https://flink.apache.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/Apache_Flink"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "data-processing.apache-spark": {
                    id: "data-processing.apache-spark",
                    name: "Apache Spark",
                    nameShort: "Apache Spark",
                    desc: "Apache Spark is an open-source cluster-computing and stream processing framework. It can be used to parallelize computational tasks an large datasets or datastreams.",
                    tags: ["open-source", "apache", "stream-processing", "map-reduce", "parallel-computation", "big-data", "hadoop", "sql", "streaming"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "e25a1c",
                    logoTexture: "apache-spark-logo.png",
                    model: "stream-processor",
                    links: {
                        website: "https://spark.apache.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/Apache_Spark"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "data-processing.aws-emr": {
                    id: "data-processing.aws-emr",
                    name: "AWS Elastic Map Reduce (EMR)",
                    nameShort: "AWS EMR",
                    desc: "AWS Elastic Map Reduce is a managed deployment of popular distributed task processing frameworks such as Hadoop, Apache Spark, HBase, Presto or Flink",
                    tags: ["managed", "elastic", "map-reduce", "hadoop", "aws", "amazon", "web", "services"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "693CC5",
                    logoTexture: "aws-emr-logo.png",
                    model: "mapreduce",
                    links: {
                        website: "https://aws.amazon.com/emr/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "data-processing.aws-macie": {
                    id: "data-processing.aws-macie",
                    name: "AWS Macie",
                    nameShort: "AWS Macie",
                    desc: "AWS Macie is a machine learning-powered security service to discover, classify, and protect sensitive data.",
                    tags: ["machine-learning", "ai", "artificial intelligence", "aws", "amazon", "web", "services"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3bfee4",
                    logoTexture: "aws-macie-logo.png",
                    model: "neural-net",
                    links: {
                        website: "https://aws.amazon.com/macie/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "data-processing.gcc-cloud-dataflow": {
                    id: "data-processing.gcc-cloud-dataflow",
                    name: "GCC Cloud Dataflow",
                    nameShort: "GCC Cloud Dataflow",
                    desc: "Real-time batch and stream data processing.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-dataflow-logo.png",
                    model: "batch-processor",
                    links: {
                        website: "https://cloud.google.com/dataflow/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "data-processing.gcc-cloud-dataprep": {
                    id: "data-processing.gcc-cloud-dataprep",
                    name: "GCC Cloud Dataprep",
                    nameShort: "GCC Cloud Dataprep",
                    desc: "Explore, clean, and prepare data for analysis.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-dataprep-logo.png",
                    model: "data-funnel",
                    links: {
                        website: "https://cloud.google.com/dataprep/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "data-processing.gcc-cloud-dataproc": {
                    id: "data-processing.gcc-cloud-dataproc",
                    name: "GCC Cloud Dataproc",
                    nameShort: "GCC Cloud Dataproc",
                    desc: "Managed Spark and Hadoop service.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-dataproc-logo.png",
                    model: "stream-processor",
                    links: {
                        website: "https://cloud.google.com/dataproc/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "data-processing.ibm-business-events": {
                    id: "data-processing.ibm-business-events",
                    name: "IBM Websphere Business Events",
                    nameShort: "IBM Business Events",
                    desc: "WebSphere Business Events is IBM's implementation of an event-processing engine. Event processing involves altering the existing server software in an organization to emit events (these are just small messages) whenever a notable event occurs. Event-processing software (such as this software) can monitor these events and look out for certain patterns of interest. This is useful for the prevention of Credit card fraud or for giving executives a high-level view of what's going on in their company (e.g. when share price drops for an extended period of time)",
                    tags: ["ibm", "websphere", "event-processing", "business-rules-engine", "business-rules"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "9044b1",
                    logoTexture: "ibm-websphere-logo.png",
                    model: "event-processing-engine",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        monitoring: {
            title: "Monitoring & Logging",
            desc: "Log Aggregator, Time Series Databases and Monitoring Dashboards",
            components: {
                "monitoring.aws-amazon-cloudwatch": {
                    id: "monitoring.aws-amazon-cloudwatch",
                    name: "Amazon CloudWatch",
                    nameShort: "AWS CloudWatch",
                    desc: "Monitor Resources and Applications",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "CC2264",
                    logoTexture: "aws-amazon-cloudwatch-logo.png",
                    model: "monitoring",
                    links: {
                        website: "https://aws.amazon.com/cloudwatch/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "monitoring.aws-systems-manager": {
                    id: "monitoring.aws-systems-manager",
                    name: "AWS Systems Manager",
                    nameShort: "AWS Systems Manager",
                    desc: "Gain Operational Insights and Take Action",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "CC2264",
                    logoTexture: "aws-systems-manager-logo.png",
                    model: "monitoring",
                    links: {
                        website: "https://aws.amazon.com/systems-manager/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "monitoring.azure-log-analytics": {
                    id: "monitoring.azure-log-analytics",
                    name: "Azure Log Analytics",
                    nameShort: "Azure Log Analytics",
                    desc: "Collect, search, and visualize machine data from on-premises and cloud",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-log-analytics-logo.png",
                    model: "analytics-surface-magnifying-glass",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "monitoring.azure-monitor": {
                    id: "monitoring.azure-monitor",
                    name: "Azure Monitor",
                    nameShort: "Azure Monitor",
                    desc: "Highly granular and real-time monitoring data for any Azure resource",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-monitor-logo.png",
                    model: "monitoring",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "monitoring.azure-network-watcher": {
                    id: "monitoring.azure-network-watcher",
                    name: "Azure Network Watcher",
                    nameShort: "Azure Network Watcher",
                    desc: "Network performance monitoring and diagnostics solution",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "3898c5",
                    logoTexture: "azure-network-watcher-logo.png",
                    model: "monitoring",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "monitoring.gcc-cloud-deployment-manager": {
                    id: "monitoring.gcc-cloud-deployment-manager",
                    name: "GCC Cloud Deployment Manager",
                    nameShort: "GCC Deployment Manager",
                    desc: "Manage cloud resources with simple templates.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-deployment-manager-logo.png",
                    model: "monitoring",
                    links: {
                        website: "https://cloud.google.com/deployment-manager/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "monitoring.gcc-debugger": {
                    id: "monitoring.gcc-debugger",
                    name: "GCC Debugger",
                    nameShort: "GCC Debugger",
                    desc: "Investigate code behavior in production.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-debugger-logo.png",
                    model: "logging",
                    links: {
                        website: "https://cloud.google.com/debugger/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "monitoring.gcc-error-reporting": {
                    id: "monitoring.gcc-error-reporting",
                    name: "GCC Error Reporting",
                    nameShort: "GCC Error Reporting",
                    desc: "Identifies and helps you understand application errors.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-error-reporting-logo.png",
                    model: "logging",
                    links: {
                        website: "https://cloud.google.com/error-reporting/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "monitoring.gcc-firebase-performance-monitoring": {
                    id: "monitoring.gcc-firebase-performance-monitoring",
                    name: "GCC Firebase Performance Monitoring",
                    nameShort: "GCC Performance Monitoring",
                    desc: "Gain insight into your app's performance.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ffcb2b",
                    logoTexture: "gcc-firebase-realtime-database-logo.png",
                    model: "monitoring",
                    links: {
                        website: "https://firebase.google.com/products/performance/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "monitoring.gcc-logging": {
                    id: "monitoring.gcc-logging",
                    name: "GCC Logging",
                    nameShort: "GCC Logging",
                    desc: "Logging for applications on GCP and AWS.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-logging-logo.png",
                    model: "logging",
                    links: {
                        website: "https://cloud.google.com/logging/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "monitoring.gcc-monitoring": {
                    id: "monitoring.gcc-monitoring",
                    name: "GCC Monitoring",
                    nameShort: "GCC Monitoring",
                    desc: "Monitoring for applications on GCP and AWS.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-monitoring-logo.png",
                    model: "monitoring",
                    links: {
                        website: "https://cloud.google.com/monitoring/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "monitoring.gcc-trace": {
                    id: "monitoring.gcc-trace",
                    name: "GCC Trace",
                    nameShort: "GCC Trace",
                    desc: "Find performance bottlenecks in production.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-trace-logo.png",
                    model: "monitoring",
                    links: {
                        website: "https://cloud.google.com/trace/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "monitoring.kibana": {
                    id: "monitoring.kibana",
                    name: "Kibana",
                    nameShort: "Kibana",
                    desc: "Kibana is an open source data visualization plugin for Elasticsearch. It provides visualization capabilities on top of the content indexed on an Elasticsearch cluster. Users can create bar, line and scatter plots, or pie charts and maps on top of large volumes of data.",
                    tags: ["data-visualisation", "elastic", "interface", "monitoring", "open-source", "elk-stack"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "e9478b",
                    logoTexture: "kibana-logo.png",
                    model: "monitoring",
                    links: {
                        website: "https://www.elastic.co/products/kibana"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        media: {
            title: "Audio & Video",
            desc: "Image and Video Transcoding, Scaling, Streaming and Delivery",
            components: {
                "media.aws-amazon-elastic-transcoder": {
                    id: "media.aws-amazon-elastic-transcoder",
                    name: "Amazon Elastic Transcoder",
                    nameShort: "AWS Elastic Transcoder",
                    desc: "Easy-to-use Scalable Media Transcoding",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D86613",
                    logoTexture: "aws-amazon-elastic-transcoder-logo.png",
                    model: "media-player",
                    links: {
                        website: "https://aws.amazon.com/elastictranscoder/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.aws-amazon-kinesis-video-streams": {
                    id: "media.aws-amazon-kinesis-video-streams",
                    name: "Amazon Kinesis Video Streams",
                    nameShort: "AWS Kinesis Video Streams",
                    desc: "Process and Analyze Video Streams",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D86613",
                    logoTexture: "aws-amazon-kinesis-video-streams-logo.png",
                    model: "media-player",
                    links: {
                        website: "https://aws.amazon.com/kinesis/video-streams/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.aws-elemental-mediaconvert": {
                    id: "media.aws-elemental-mediaconvert",
                    name: "AWS Elemental MediaConvert",
                    nameShort: "AWS Elemental MediaConvert",
                    desc: "Convert File-based Video Content",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D86613",
                    logoTexture: "aws-elemental-mediaconvert-logo.png",
                    model: "media-player",
                    links: {
                        website: "https://aws.amazon.com/mediaconvert/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.aws-elemental-medialive": {
                    id: "media.aws-elemental-medialive",
                    name: "AWS Elemental MediaLive",
                    nameShort: "AWS Elemental MediaLive",
                    desc: "Convert Live Video Content",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D86613",
                    logoTexture: "aws-elemental-medialive-logo.png",
                    model: "media-player",
                    links: {
                        website: "https://aws.amazon.com/medialive/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.aws-elemental-mediapackage": {
                    id: "media.aws-elemental-mediapackage",
                    name: "AWS Elemental MediaPackage",
                    nameShort: "AWS Elemental MediaPackage",
                    desc: "Video Origination and Packaging",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D86613",
                    logoTexture: "aws-elemental-mediapackage-logo.png",
                    model: "media-player",
                    links: {
                        website: "https://aws.amazon.com/mediapackage/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.aws-elemental-mediastore": {
                    id: "media.aws-elemental-mediastore",
                    name: "AWS Elemental MediaStore",
                    nameShort: "AWS Elemental MediaStore",
                    desc: "Media Storage and Simple HTTP Origin",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D86613",
                    logoTexture: "aws-elemental-mediastore-logo.png",
                    model: "media-player",
                    links: {
                        website: "https://aws.amazon.com/mediastore/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.aws-elemental-mediatailor": {
                    id: "media.aws-elemental-mediatailor",
                    name: "AWS Elemental MediaTailor",
                    nameShort: "AWS Elemental MediaTailor",
                    desc: "Video Personalization and Monetization",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D86613",
                    logoTexture: "aws-elemental-mediatailor-logo.png",
                    model: "media-player",
                    links: {
                        website: "https://aws.amazon.com/mediatailor/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.azure-content-protection": {
                    id: "media.azure-content-protection",
                    name: "Azure Content Protection",
                    nameShort: "Azure Content Protection",
                    desc: "Securely deliver content using AES, PlayReady, Widevine, and Fairplay",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "72bfdf",
                    logoTexture: "azure-content-protection-logo.png",
                    model: "firewall",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.azure-encoding": {
                    id: "media.azure-encoding",
                    name: "Azure Encoding",
                    nameShort: "Azure Encoding",
                    desc: "Studio grade encoding at cloud scale",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "00bcf2",
                    logoTexture: "azure-media-player-logo.png",
                    model: "stream-processor",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.azure-live-and-on-demand-streaming": {
                    id: "media.azure-live-and-on-demand-streaming",
                    name: "Azure Live and On-Demand Streaming",
                    nameShort: "Azure Streaming",
                    desc: "Deliver content to virtually all devices with scale to meet business needs",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "72bfdf",
                    logoTexture: "azure-live-and-on-demand-streaming-logo.png",
                    model: "cdn",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.azure-media-analytics": {
                    id: "media.azure-media-analytics",
                    name: "Azure Media Analytics",
                    nameShort: "Azure Media Analytics",
                    desc: "Uncover insights from video files with speech and vision services",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "00bcf2",
                    logoTexture: "azure-media-player-logo.png",
                    model: "analytics-surface",
                    links: {},
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.azure-media-player": {
                    id: "media.azure-media-player",
                    name: "Azure Media Player",
                    nameShort: "Azure Media Player",
                    desc: "A single player for all your playback needs",
                    tags: ["azure"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "00bcf2",
                    logoTexture: "azure-media-player-logo.png",
                    model: "media-player",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/media-services/media-player/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "media.gcc-anvato": {
                    id: "media.gcc-anvato",
                    name: "GCC Anvato",
                    nameShort: "GCC Anvato",
                    desc: "Stream live and on-demand video to any device.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "cf0014",
                    logoTexture: "gcc-anvato-logo.png",
                    model: "media-player",
                    links: {
                        website: "https://www.anvato.com/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                }
            }
        },
        security: {
            title: "Identity & Security",
            desc: "Authentication, User Management and Network Security",
            components: {
                "security.aws-amazon-cloud-directory": {
                    id: "security.aws-amazon-cloud-directory",
                    name: "Amazon Cloud Directory",
                    nameShort: "AWS Cloud Directory",
                    desc: "Create Flexible Cloud-native Directories",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-amazon-cloud-directory-logo.png",
                    model: "vault",
                    links: {
                        website: "https://aws.amazon.com/cloud-directory/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-amazon-cognito": {
                    id: "security.aws-amazon-cognito",
                    name: "Amazon Cognito",
                    nameShort: "AWS Cognito",
                    desc: "Identity Management for your Apps",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-amazon-cognito-logo.png",
                    model: "identity-provider",
                    links: {
                        website: "https://aws.amazon.com/cognito/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-amazon-guardduty": {
                    id: "security.aws-amazon-guardduty",
                    name: "Amazon GuardDuty",
                    nameShort: "AWS GuardDuty",
                    desc: "Managed Threat Detection Service",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-amazon-guardduty-logo.png",
                    model: "firewall",
                    links: {
                        website: "https://aws.amazon.com/guardduty/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-certificate-manager": {
                    id: "security.aws-certificate-manager",
                    name: "AWS Certificate Manager",
                    nameShort: "AWS Certificate Manager",
                    desc: "Provision, Manage, and Deploy SSL/TLS Certificates",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-certificate-manager-logo.png",
                    model: "vault",
                    links: {
                        website: "https://aws.amazon.com/certificate-manager/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-cloudhsm": {
                    id: "security.aws-cloudhsm",
                    name: "AWS CloudHSM",
                    nameShort: "AWS CloudHSM",
                    desc: "Hardware-based Key Storage for Regulatory Compliance",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-cloudhsm-logo.png",
                    model: "vault",
                    links: {
                        website: "https://aws.amazon.com/cloudhsm/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-directory-service": {
                    id: "security.aws-directory-service",
                    name: "AWS Directory Service",
                    nameShort: "AWS Directory Service",
                    desc: "Host and Manage Active Directory",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-directory-service-logo.png",
                    model: "identity-provider",
                    links: {
                        website: "https://aws.amazon.com/directoryservice/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-identity-&-access-management": {
                    id: "security.aws-identity-&-access-management",
                    name: "AWS Identity & Access Management",
                    nameShort: "AWS IAM",
                    desc: "Manage User Access and Encryption Keys",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-identity-&-access-management-logo.png",
                    model: "identity-provider",
                    links: {
                        website: "https://aws.amazon.com/iam/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-key-management-service": {
                    id: "security.aws-key-management-service",
                    name: "AWS Key Management Service",
                    nameShort: "AWS Key Management Service",
                    desc: "Managed Creation and Control of Encryption Keys",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-key-management-service-logo.png",
                    model: "identity-provider",
                    links: {
                        website: "https://aws.amazon.com/kms/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-secret-manager": {
                    id: "security.aws-secret-manager",
                    name: "AWS Secret Manager",
                    nameShort: "AWS Secret Manager",
                    desc: "Rotate, manage, and retrieve database credentials, API keys, and other secrets through their lifecycle",
                    tags: ["aws", "credentials-store"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "D6242D",
                    logoTexture: "aws-secret-manager-logo.png",
                    model: "vault",
                    links: {
                        website: "https://aws.amazon.com/secrets-manager/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-shield": {
                    id: "security.aws-shield",
                    name: "AWS Shield",
                    nameShort: "AWS Shield",
                    desc: "DDoS Protection",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-shield-logo.png",
                    model: "firewall",
                    links: {
                        website: "https://aws.amazon.com/shield/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.aws-waf": {
                    id: "security.aws-waf",
                    name: "AWS WAF",
                    nameShort: "AWS WAF",
                    desc: "Filter Malicious Web Traffic",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-waf-logo.png",
                    model: "firewall",
                    links: {
                        website: "https://aws.amazon.com/waf/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.azure-active-directory": {
                    id: "security.azure-active-directory",
                    name: "Azure Active Directory",
                    nameShort: "Azure Active Directory",
                    desc: "Synchronize on-premises directories and enable single sign-on",
                    tags: ["azure"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "0079d6",
                    logoTexture: "azure-active-directory-logo.png",
                    model: "identity-provider",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/active-directory/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.azure-key-vault": {
                    id: "security.azure-key-vault",
                    name: "Azure Key Vault",
                    nameShort: "Azure Key Vault",
                    desc: "Safeguard and maintain control of keys and other secrets",
                    tags: ["azure", "credentials-store"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "0079d6",
                    logoTexture: "azure-vault-logo.png",
                    model: "vault",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/key-vault/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "security.gcc-cloud-data-loss-prevention-api": {
                    id: "security.gcc-cloud-data-loss-prevention-api",
                    name: "GCC Cloud Data Loss Prevention API",
                    nameShort: "GCC Cloud Data Loss Prevention API",
                    desc: "Discover and redact sensitive data.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-data-loss-prevention-api-logo.png",
                    model: "vault",
                    links: {
                        website: "https://cloud.google.com/dlp/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "security.gcc-cloud-iam": {
                    id: "security.gcc-cloud-iam",
                    name: "GCC Cloud IAM",
                    nameShort: "GCC Cloud IAM",
                    desc: "Fine-grained identity and access management.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-iam-logo.png",
                    model: "identity-provider",
                    links: {
                        website: "https://cloud.google.com/iam/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "security.gcc-cloud-identity-aware-proxy": {
                    id: "security.gcc-cloud-identity-aware-proxy",
                    name: "GCC Cloud Identity-Aware Proxy",
                    nameShort: "GCC Cloud Identity-Aware Proxy",
                    desc: "Use identity to guard access.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-identity-aware-proxy-logo.png",
                    model: "vault",
                    links: {
                        website: "https://cloud.google.com/iap/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "security.gcc-cloud-key-management-service": {
                    id: "security.gcc-cloud-key-management-service",
                    name: "GCC Cloud Key Management Service",
                    nameShort: "GCC Cloud Key Management Service",
                    desc: "Manage encryption keys on GCP.",
                    tags: ["gcc", "google", "credentials-store"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-key-management-service-logo.png",
                    model: "vault",
                    links: {
                        website: "https://cloud.google.com/kms/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "security.gcc-firebase-authentication": {
                    id: "security.gcc-firebase-authentication",
                    name: "GCC Firebase Authentication",
                    nameShort: "GCC Firebase Auth",
                    desc: "Simple, free multi-platform sign-in.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ffcb2b",
                    logoTexture: "gcc-firebase-realtime-database-logo.png",
                    model: "identity-provider",
                    links: {
                        website: "https://firebase.google.com/products/auth/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "security.gcc-security-key-enforcement": {
                    id: "security.gcc-security-key-enforcement",
                    name: "GCC Security Key Enforcement",
                    nameShort: "GCC Security Key Enforcement",
                    desc: "Prevent phishing with security keys.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-security-key-enforcement-logo.png",
                    model: "vault",
                    links: {
                        website: "https://cloud.google.com/security-key/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "security.hashicorp-vault": {
                    id: "security.hashicorp-vault",
                    name: "HashiCorp Vault",
                    nameShort: "HashiCorp Vault",
                    desc: "HashiCorp Vault secures, stores, and tightly controls access to tokens, passwords, certificates, API keys, and other secrets in modern computing. Vault handles leasing, key revocation, key rolling, and auditing. Through a unified API, users can access an encrypted Key/Value store and network encryption-as-a-service, or generate AWS IAM/STS credentials, SQL/NoSQL databases, X.509 certificates, SSH credentials, and more.",
                    tags: ["hashicorp"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "#00ABE0",
                    logoTexture: "hashicorp-vault-logo.png",
                    model: "vault",
                    links: {
                        website: "https://www.vaultproject.io/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "security.opn-sense-firewall": {
                    id: "security.opn-sense-firewall",
                    name: "OpnSense Firewall",
                    nameShort: "OpnSense Firewall",
                    desc: "OPNsense is open source, FreeBSD-based firewall and routing software developed by Deciso, a company in the Netherlands that makes hardware and sells support packages for OPNsense. It is a fork of pfSense, which in turn was forked from m0n0wall, which was built on FreeBSD. OPNSense has a web-based interface and can be used on i386 and x86-64 platforms. Along with acting as a firewall, it has traffic shaping, load balancing, and virtual private network capabilities, and others can be added via plugins.",
                    tags: ["firewall", "open-source", "loadbalancer", "vpn"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "d94f00",
                    logoTexture: "opn-sense-logo.png",
                    model: "firewall",
                    links: {
                        website: "https://opnsense.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/OPNsense",
                        github: "https://github.com/opnsense"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        storage: {
            title: "File Storage & Data-Warehousing",
            desc: "Non-Database storage (S3 Buckets, Data-Warehouses, Blob Storage etc.)",
            components: {
                "storage.aws-amazon-ebs": {
                    id: "storage.aws-amazon-ebs",
                    name: "Amazon EBS",
                    nameShort: "AWS EBS",
                    desc: "Block Storage for EC2",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "3F8624",
                    logoTexture: "aws-amazon-ebs-logo.png",
                    model: "disk-storage",
                    links: {
                        website: "https://aws.amazon.com/ebs/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.aws-amazon-elastic-file-system": {
                    id: "storage.aws-amazon-elastic-file-system",
                    name: "Amazon Elastic File System",
                    nameShort: "AWS Elastic File System",
                    desc: "Managed File Storage for EC2",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "3F8624",
                    logoTexture: "aws-amazon-elastic-file-system-logo.png",
                    model: "disk-storage",
                    links: {
                        website: "https://aws.amazon.com/efs/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.aws-appsync": {
                    id: "storage.aws-appsync",
                    name: "AWS AppSync",
                    nameShort: "AWS AppSync",
                    desc: "Real-time and Offline Mobile Data Apps",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "D6242D",
                    logoTexture: "aws-appsync-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://aws.amazon.com/appsync/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.aws-ebs": {
                    id: "storage.aws-ebs",
                    name: "Amazon Elastic Block Store (EBS)",
                    nameShort: "AWS EBS",
                    desc: "Amazon Elastic Block Store (EBS) provides raw block-level storage that can be attached to Amazon EC2 instances. These block devices can then be used like any raw block device. In a typical use case, this would include formatting the device with a filesystem and mounting said filesystem. In addition EBS supports a number of advanced storage features, including snapshotting and cloning.",
                    tags: ["storage"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3F8624",
                    logoTexture: "aws-ebs-logo.png",
                    model: "data-warehouse",
                    links: {
                        website: "https://aws.amazon.com/ebs/",
                        wikipedia: "https://en.wikipedia.org/wiki/Amazon_Elastic_Block_Store"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.aws-glacier": {
                    id: "storage.aws-glacier",
                    name: "AWS Glacier",
                    nameShort: "AWS Glacier",
                    desc: "Amazon Glacier is a long-term storage facility for large amounts of data. It trades of slow read and write times with large volumes and low prices.",
                    tags: ["aws", "data-warehouse", "big-data", "storage", "amazon", "web", "services"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3F8624",
                    logoTexture: "aws-glacier-logo.png",
                    model: "data-warehouse",
                    links: {
                        website: "https://aws.amazon.com/glacier/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.aws-redshift": {
                    id: "storage.aws-redshift",
                    name: "AWS Redshift",
                    nameShort: "AWS Redshift",
                    desc: "Amazon Redshift is a fully managed data warehouse that allows for SQL like querying and a range of integrations with analytics and business intelligence tools.",
                    tags: ["aws", "data-warehouse", "big-data", "storage", "amazon", "web", "services", "querying", "sql", "relational"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3B48CC",
                    logoTexture: "aws-redshift-logo.png",
                    model: "data-warehouse",
                    links: {
                        website: "https://aws.amazon.com/redshift/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.aws-s3": {
                    id: "storage.aws-s3",
                    name: "AWS S3 Bucket",
                    nameShort: "AWS S3",
                    desc: "AWS Simple Storage Service (S3) is a cloud based file storage service that allows to persist text and binary files in so called 'buckets'. It is useful to host static files for websites, logs from other AWS services or any other kind of data.",
                    tags: ["aws", "file-storage", "storage", "blob-storage", "webhosting", "hosting", "amazon", "web", "services", "bucket"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3F8624",
                    logoTexture: "aws-s3-logo.png",
                    model: "aws-s3",
                    links: {
                        website: "https://aws.amazon.com/s3/",
                        wikipedia: "https://en.wikipedia.org/wiki/Amazon_S3",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/amazon-s3"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.aws-snowball": {
                    id: "storage.aws-snowball",
                    name: "AWS Snowball",
                    nameShort: "AWS Snowball",
                    desc: "AWS Snowball is a physical storage device capable of holding up to 80 Terrabyte of data. One or more devices are shipped to customers upon request, loaded with data and sent back to AWS who will make the data available within an S3 bucket.",
                    tags: ["aws", "big-data", "storage", "physical", "device", "amazon", "web", "services", "raid"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3F8624",
                    logoTexture: "aws-snowball-logo.png",
                    model: "aws-snowball",
                    links: {
                        website: "https://aws.amazon.com/snowball/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.aws-snowmobile": {
                    id: "storage.aws-snowmobile",
                    name: "AWS Snowmobile",
                    nameShort: "AWS Snowmobile",
                    desc: "AWS is a physical truck that drives to customer data-centers to migrate exabyte sized data to Amazon",
                    tags: ["aws", "big-data", "storage", "amazon", "web", "services"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "e15343",
                    logoTexture: "amazon-snowmobile-logo.png",
                    model: "aws-snowmobile",
                    links: {
                        website: "https://aws.amazon.com/snowmobile/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "storage.aws-storage-gateway": {
                    id: "storage.aws-storage-gateway",
                    name: "AWS Storage Gateway",
                    nameShort: "AWS Storage Gateway",
                    desc: "An AWS service that makes it possible to connect on-premise storage to AWS cloud storage endpoints such as S3, Glacier or EBS using protocols such as NFS or iSCSI",
                    tags: ["aws", "storage", "gateway", "big-data", "on-premise", "storage", "amazon", "web", "services", "enterprise"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3F8624",
                    logoTexture: "aws-storage-gateway-logo.png",
                    model: "gateway",
                    links: {
                        website: "https://aws.amazon.com/storagegateway/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.azure-archive-storage": {
                    id: "storage.azure-archive-storage",
                    name: "Azure Archive Storage",
                    nameShort: "Azure Archive Storage",
                    desc: "Industry leading price point for storing rarely accessed data",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-archive-storage-logo.png",
                    model: "data-warehouse",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.azure-blob-storage": {
                    id: "storage.azure-blob-storage",
                    name: "Azure Blob Storage",
                    nameShort: "Azure Blob Storage",
                    desc: "REST-based object storage for unstructured data",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d7",
                    logoTexture: "azure-blob-storage-logo.png",
                    model: "disk-storage",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.azure-data-box": {
                    id: "storage.azure-data-box",
                    name: "Azure Data Box",
                    nameShort: "Azure Data Box",
                    desc: "Secure, ruggedized appliance for Azure data transfer",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0063b2",
                    logoTexture: "azure-data-box-logo.png",
                    model: "aws-snowball",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.azure-disk-storage": {
                    id: "storage.azure-disk-storage",
                    name: "Azure Disk Storage",
                    nameShort: "Azure Disk Storage",
                    desc: "Persistent, secured disk options supporting virtual machines",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-disk-storage-logo.png",
                    model: "disk-storage",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.azure-file-storage": {
                    id: "storage.azure-file-storage",
                    name: "Azure File Storage",
                    nameShort: "Azure File Storage",
                    desc: "File shares that use the standard SMB 3.0 protocol",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-file-storage-logo.png",
                    model: "disk-storage",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.azure-managed-disks": {
                    id: "storage.azure-managed-disks",
                    name: "Azure Managed Disks",
                    nameShort: "Azure Managed Disks",
                    desc: "Persistent, secured disk storage for Azure virtual machines",
                    tags: ["azure"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "0079d6",
                    logoTexture: "azure-managed-disks.png",
                    model: "disk-storage",
                    links: {
                        website: "https://azure.microsoft.com/en-us/services/managed-disks/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.azure-queue-storage": {
                    id: "storage.azure-queue-storage",
                    name: "Azure Queue Storage",
                    nameShort: "Azure Queue Storage",
                    desc: "Effectively scale apps according to traffic",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-queue-storage-logo.png",
                    model: "message-queue",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.azure-storsimple": {
                    id: "storage.azure-storsimple",
                    name: "Azure StorSimple",
                    nameShort: "Azure StorSimple",
                    desc: "Lower costs with an enterprise hybrid cloud storage solution",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-storsimple-logo.png",
                    model: "aws-s3",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "storage.gcc-cloud-filestore": {
                    id: "storage.gcc-cloud-filestore",
                    name: "GCC Cloud Filestore",
                    nameShort: "GCC Cloud Filestore",
                    desc: "High performance file storage.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-storage-logo.png",
                    model: "objectdb",
                    links: {
                        website: "https://cloud.google.com/filestore/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "storage.gcc-cloud-firestore": {
                    id: "storage.gcc-cloud-firestore",
                    name: "GCC Cloud Firestore",
                    nameShort: "GCC Cloud Firestore",
                    desc: "NoSQL document database service with syncing for mobile apps.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ffcb2b",
                    logoTexture: "gcc-cloud-firestore-logo.png",
                    model: "database",
                    links: {
                        website: "https://firebase.google.com/products/firestore/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "storage.gcc-cloud-memorystore": {
                    id: "storage.gcc-cloud-memorystore",
                    name: "GCC Cloud Memorystore",
                    nameShort: "GCC Cloud Memorystore",
                    desc: "Fully managed in-memory data store service.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-storage-logo.png",
                    model: "cache",
                    links: {
                        website: "https://cloud.google.com/memorystore/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "storage.gcc-cloud-storage": {
                    id: "storage.gcc-cloud-storage",
                    name: "GCC Cloud Storage",
                    nameShort: "GCC Cloud Storage",
                    desc: "Object storage with global edge-caching.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-storage-logo.png",
                    model: "aws-s3",
                    links: {
                        website: "https://cloud.google.com/storage/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "storage.gcc-cloud-storage-for-firebase": {
                    id: "storage.gcc-cloud-storage-for-firebase",
                    name: "GCC Cloud Storage for Firebase",
                    nameShort: "GCC Cloud Storage for Firebase",
                    desc: "Store and serve content with ease.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ffcb2b",
                    logoTexture: "gcc-firebase-realtime-database-logo.png",
                    model: "data-warehouse",
                    links: {
                        website: "https://firebase.google.com/products/storage/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "storage.gcc-persistent-disk": {
                    id: "storage.gcc-persistent-disk",
                    name: "GCC Persistent Disk",
                    nameShort: "GCC Persistent Disk",
                    desc: "Block storage for VM instances.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-persistent-disk-logo.png",
                    model: "disk-storage",
                    links: {
                        website: "https://cloud.google.com/persistent-disk/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        messaging: {
            title: "Queues & Message Brokers",
            desc: "Job Queues (RabbitMQ, ZeroMQ) and Message Brokers (Kafka, Azure Service Bus) ",
            components: {
                "messaging.activemq": {
                    id: "messaging.activemq",
                    name: "ActiveMQ",
                    nameShort: "ActiveMQ",
                    desc: 'Apache ActiveMQ is an open source message broker written in Java together with a full Java Message Service (JMS) client. It provides "Enterprise Features" which in this case means fostering the communication from more than one client or server. Supported clients include Java via JMS 1.1 as well as several other "cross language" clients. The communication is managed with features such as computer clustering and ability to use any database as a JMS persistence provider besides virtual memory, cache, and journal persistency.',
                    tags: ["messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "680033",
                    logoTexture: "activemq-logo.png",
                    model: "message-queue",
                    links: {
                        website: "http://activemq.apache.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/Apache_ActiveMQ",
                        github: "https://github.com/apache/activemq",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/activemq"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.amazon-sqs": {
                    id: "messaging.amazon-sqs",
                    name: "Amazon Simple Queue Service (SQS)",
                    nameShort: "Amazon SQS",
                    desc: "Amazon Simple Queue Service (Amazon SQS) is a distributed message queuing service introduced by Amazon.com in late 2004. It supports programmatic sending of messages via web service applications as a way to communicate over the Internet. SQS is intended to provide a highly scalable hosted message queue that resolves issues arising from the common producer-consumer problem or connectivity between producer and consumer.",
                    tags: ["messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "CC2264",
                    logoTexture: "amazon-sqs-logo.png",
                    model: "message-queue",
                    links: {
                        website: "https://aws.amazon.com/ru/sqs/",
                        wikipedia: "https://en.wikipedia.org/wiki/Amazon_Simple_Queue_Service",
                        github: "https://github.com/awslabs/amazon-sqs-java-messaging-lib",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/amazon-sqs"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.apache-kafka": {
                    id: "messaging.apache-kafka",
                    name: "Apache Kafka",
                    nameShort: "Apache Kafka",
                    desc: 'Apache Kafka is an open-source stream-processing software platform developed by the Apache Software Foundation, written in Scala and Java. The project aims to provide a unified, high-throughput, low-latency platform for handling real-time data feeds. Its storage layer is essentially a "massively scalable pub/sub message queue architected as a distributed transaction log,"[3] making it highly valuable for enterprise infrastructures to process streaming data. Additionally, Kafka connects to external systems (for data import/export) via Kafka Connect and provides Kafka Streams, a Java stream processing library.',
                    tags: ["messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "000000",
                    logoTexture: "apache-kafka-logo.png",
                    model: "message-broker",
                    links: {
                        website: "https://kafka.apache.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/Apache_Kafka",
                        github: "https://github.com/apache/kafka",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/apache-kafka"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.apache-qpid": {
                    id: "messaging.apache-qpid",
                    name: "Apache Qpid",
                    nameShort: "Apache Qpid",
                    desc: "Apache Qpid is an open-source (Apache 2.0 licensed) messaging system which implements the Advanced Message Queuing Protocol (AMQP). It provides transaction management, queuing, distribution, security, management, clustering, federation and heterogeneous multi-platform support.",
                    tags: ["messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "7f308a",
                    logoTexture: "apache-qpid-logo.png",
                    model: "message-queue",
                    links: {
                        website: "https://qpid.apache.org/",
                        github: "https://github.com/apache/qpid",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/qpid"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.apollo": {
                    id: "messaging.apollo",
                    name: "Apollo",
                    nameShort: "Apollo",
                    desc: 'Apache ActiveMQ is an open source message broker written in Java together with a full Java Message Service (JMS) client. It provides "Enterprise Features" which in this case means fostering the communication from more than one client or server. Supported clients include Java via JMS 1.1 as well as several other "cross language" clients. The communication is managed with features such as computer clustering and ability to use any database as a JMS persistence provider besides virtual memory, cache, and journal persistency.',
                    tags: ["messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "000000",
                    logoTexture: "apollo-logo.png",
                    model: "message-queue",
                    links: {
                        website: "https://activemq.apache.org/apollo/",
                        github: "https://github.com/apache/activemq-apollo"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.aws-amazon-simple-notification-service-(sns)": {
                    id: "messaging.aws-amazon-simple-notification-service-(sns)",
                    name: "Amazon Simple Notification Service (SNS)",
                    nameShort: "AWS Simple Notification Service (SNS)",
                    desc: "Pub/Sub, Mobile Push and SMS",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "CC2264",
                    logoTexture: "aws-amazon-simple-notification-service-(sns)-logo.png",
                    model: "message-queue",
                    links: {
                        website: "https://aws.amazon.com/sns/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.aws-kinesis": {
                    id: "messaging.aws-kinesis",
                    name: "AWS Kinesis",
                    nameShort: "AWS Kinesis",
                    desc: "AWS Kinesis is a high-throughput, horizontally scalable message pipeline. It allows parallel publishers and consumers to poll and push near-realtime messages.",
                    tags: ["aws", "message", "queue", "amazon", "web", "services", "realtime", "streaming"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "693CC5",
                    logoTexture: "aws-kinesis-logo.png",
                    model: "message-queue",
                    links: {
                        website: "https://aws.amazon.com/kinesis/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.aws-simple-email-service": {
                    id: "messaging.aws-simple-email-service",
                    name: "Amazon Simple Email Service (SES)",
                    nameShort: "AWS SES",
                    desc: "Email Sending and Receiving",
                    tags: ["aws", "email"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3B48CC",
                    logoTexture: "aws-simple-email-service-logo.png",
                    model: "email",
                    links: {
                        website: "https://aws.amazon.com/ses/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.azure-event-grid": {
                    id: "messaging.azure-event-grid",
                    name: "Azure Event Grid",
                    nameShort: "Azure Event Grid",
                    desc: "Get reliable event delivery at massive scale",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-event-grid-logo.png",
                    model: "message-broker",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.azure-notification-hubs": {
                    id: "messaging.azure-notification-hubs",
                    name: "Azure Notification Hubs",
                    nameShort: "Azure Notification Hubs",
                    desc: "Send push notifications to any platform from any back end",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-notification-hubs-logo.png",
                    model: "event-hub",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.azure-service-bus": {
                    id: "messaging.azure-service-bus",
                    name: "Azure Service Bus",
                    nameShort: "Azure Service Bus",
                    desc: "Connect across private and public cloud environments",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-service-bus-logo.png",
                    model: "event-hub",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.azure-signalr-service": {
                    id: "messaging.azure-signalr-service",
                    name: "Azure SignalR Service",
                    nameShort: "Azure SignalR Service",
                    desc: "Add real-time web functionalities easily",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "019ee4",
                    logoTexture: "azure-signalr-service-logo.png",
                    model: "event-hub",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.deepstream": {
                    id: "messaging.deepstream",
                    name: "deepstream.io",
                    nameShort: "deepstream.io",
                    desc: "deepstream is a multi-purpose realtime data server that synchronises persistent and streaming data between thousands of backend and frontend systems",
                    tags: ["agpl-license", "distributed", "enterprise", "in-memory", "json", "low-latency", "message", "messaging", "open-source", "pub-sub", "realtime", "streaming"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3CAAE0",
                    logoTexture: "deepstream-logo.png",
                    model: "event-hub",
                    links: {
                        website: "https://deepstreamhub.com/",
                        github: "https://github.com/deepstreamio",
                        stackoverflow: "https://stackoverflow.com/search?q=deepstream"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.gcc-cloud-pub-sub": {
                    id: "messaging.gcc-cloud-pub-sub",
                    name: "GCC Cloud Pub/Sub",
                    nameShort: "GCC Cloud Pub/Sub",
                    desc: "Ingest event streams from anywhere, at any scale.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-pub-sub-logo.png",
                    model: "event-hub",
                    links: {
                        website: "https://cloud.google.com/pubsub/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.hornetq": {
                    id: "messaging.hornetq",
                    name: "HornetQ",
                    nameShort: "HornetQ",
                    desc: "HornetQ is an open source asynchronous messaging project from JBoss. It is an example of Message-oriented middleware. HornetQ is an open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system. During much of its development, the HornetQ code base was developed under the name JBoss Messaging 2.0.",
                    tags: ["messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "a30000",
                    logoTexture: "hornetq-logo.png",
                    model: "message-queue",
                    links: {
                        website: "http://hornetq.jboss.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/HornetQ",
                        github: "https://github.com/hornetq",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/hornetq"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.ibm-mq": {
                    id: "messaging.ibm-mq",
                    name: "IBM MQ",
                    nameShort: "IBM MQ",
                    desc: "IBM MQ is a family of message-oriented middleware products that IBM launched in December 1993. It was originally called MQSeries, and was renamed WebSphere MQ in 2002 to join the suite of WebSphere products. In April 2014, it was renamed IBM MQ. The products that are included in the MQ family are IBM MQ, IBM MQ Advanced, IBM MQ Appliance, IBM MQ for z/OS, and IBM MQ on IBM Cloud.",
                    tags: ["ibm", "esb", "message-bus", "enterprise-message-bus", "websphere"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "5b7bb5",
                    logoTexture: "ibm-mq-logo.png",
                    model: "message-bus",
                    links: {
                        website: "https://www.ibm.com/products/mq"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.ibm-websphere-message-broker": {
                    id: "messaging.ibm-websphere-message-broker",
                    name: "IBM WebSphere Message Broker",
                    nameShort: "Websphere Message Broker",
                    desc: "WebSphere® Message Broker is an enterprise service bus (ESB) providing connectivity and universal data transformation for service-oriented architecture (SOA) and non-SOA environments. Now businesses of any size can eliminate point-to-point connections and batch processing regardless of platform, protocol or data format.",
                    tags: ["messaging", "esb", "message-bus", "enterprise-message-bus", "ibm", "websphere"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "01397c",
                    logoTexture: "ibm-websphere-logo.png",
                    model: "message-broker",
                    links: {
                        website: "https://www.ibm.com/support/knowledgecenter/en/SSKM8N/mapfiles/product_welcome.html"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.mule-esb": {
                    id: "messaging.mule-esb",
                    name: "Mule Enterprise Service Bus",
                    nameShort: "Mule ESB",
                    desc: "Mule is a lightweight enterprise service bus and integration framework provided by MuleSoft.",
                    tags: ["messaging", "esb"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "00a1df",
                    logoTexture: "mulesoft-logo.png",
                    model: "message-broker",
                    links: {
                        website: "https://www.mulesoft.com/resources/esb/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.nats": {
                    id: "messaging.nats",
                    name: "NATS",
                    nameShort: "NATS",
                    desc: "NATS is an open source messaging system (sometimes called message-oriented middleware). The NATS server is written in the Go programming language. Client libraries to interface with the server are available for dozens of major programming languages. The core design principles of NATS are performance, scalability, and ease of use.",
                    tags: ["messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "8dc53e",
                    logoTexture: "nats-logo.png",
                    model: "message-queue",
                    links: {
                        website: "https://nats.io/",
                        wikipedia: "https://en.wikipedia.org/wiki/NATS_Messaging",
                        github: "https://github.com/nats-io",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/nats.io"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.oracle-golden-gate": {
                    id: "messaging.oracle-golden-gate",
                    name: "Oracle Golden Gate",
                    nameShort: "Oracle Golden Gate",
                    desc: "Oracle GoldenGate is a software package for real-time data integration and replication in heterogeneous IT environments.",
                    tags: ["messaging", "esb"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "f60508",
                    logoTexture: "oracle-golden-gate-logo.png",
                    model: "message-broker",
                    links: {
                        website: "https://www.oracle.com/middleware/technologies/goldengate.html"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "messaging.rabbitmq": {
                    id: "messaging.rabbitmq",
                    name: "RabbitMQ",
                    nameShort: "RabbitMQ",
                    desc: "RabbitMQ is an open source message broker software (sometimes called message-oriented middleware) that originally implemented the Advanced Message Queuing Protocol (AMQP) and has since been extended with a plug-in architecture to support Streaming Text Oriented Messaging Protocol (STOMP), Message Queuing Telemetry Transport (MQTT), and other protocols. The RabbitMQ server is written in the Erlang programming language and is built on the Open Telecom Platform framework for clustering and failover. Client libraries to interface with the broker are available for all major programming languages.",
                    tags: ["messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ff6600",
                    logoTexture: "rabbitmq-logo.png",
                    model: "message-queue",
                    links: {
                        website: "https://www.rabbitmq.com/",
                        wikipedia: "https://en.wikipedia.org/wiki/RabbitMQ",
                        github: "https://github.com/rabbitmq",
                        stackoverflow: "https://stackoverflow.com/questions/tagged/rabbitmq"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.tibco-messaging": {
                    id: "messaging.tibco-messaging",
                    name: "TIBCO Enterprise Message ServiceTibco Messaging",
                    nameShort: "Tibco Messaging",
                    desc: "TIBCO Enterprise Message Service is a standards-based messaging platform (fully TCK certified to both the JMS 1.1 and 2.0 standards)[10] that simplifies and accelerates the integration and management of data distribution in high-performance, enterprise environments.",
                    tags: ["messaging", "esb"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "3e8ede",
                    logoTexture: "tibco-logo.png",
                    model: "message-broker",
                    links: {
                        website: "https://www.tibco.com/products/tibco-messaging"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "messaging.zeromq": {
                    id: "messaging.zeromq",
                    name: "ZeroMQ",
                    nameShort: "ZeroMQ",
                    desc: "ZeroMQ (also spelled ØMQ, 0MQ or ZMQ) is a high-performance asynchronous messaging library, aimed at use in distributed or concurrent applications. It provides a message queue, but unlike message-oriented middleware, a ZeroMQ system can run without a dedicated message broker. The library's API is designed to resemble that of Berkeley sockets.",
                    tags: ["messaging"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "ff0000",
                    logoTexture: "zeromq-logo.png",
                    model: "message-queue",
                    links: {
                        website: "http://zeromq.org/",
                        wikipedia: "https://en.wikipedia.org/wiki/ZeroMQ"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                }
            }
        },
        iot: {
            title: "IoT",
            desc: "Services and Solutions for the Internet of Things",
            components: {
                "iot.aws-alexa": {
                    id: "iot.aws-alexa",
                    name: "AWS Alexa",
                    nameShort: "AWS Alexa",
                    desc: "Amazon Alexa is a virtual assistant developed by Amazon, first used in the Amazon Echo and the Amazon Echo Dot smart speakers developed by Amazon Lab126. It is capable of voice interaction, music playback, making to-do lists, setting alarms, streaming podcasts, playing audiobooks, and providing weather, traffic, sports, and other real-time information, such as news.",
                    tags: ["aws"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0099f9",
                    logoTexture: "aws-alexa-logo.png",
                    model: "echo-dot",
                    links: {
                        website: "https://developer.amazon.com/alexa?cid=a"
                    },
                    brightenLogo: false,
                    secondaryColor: "000000"
                },
                "iot.aws-iot-analytics": {
                    id: "iot.aws-iot-analytics",
                    name: "AWS IoT Analytics",
                    nameShort: "AWS IoT Analytics",
                    desc: "Analytics for IoT Devices",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "3F8624",
                    logoTexture: "aws-iot-analytics-logo.png",
                    model: "monitoring",
                    links: {
                        website: "https://aws.amazon.com/iot-analytics/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "iot.aws-iot-core": {
                    id: "iot.aws-iot-core",
                    name: "AWS IoT Core",
                    nameShort: "AWS IoT Core",
                    desc: "Connect Devices to the Cloud",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "3F8624",
                    logoTexture: "aws-iot-core-logo.png",
                    model: "event-hub",
                    links: {
                        website: "https://aws.amazon.com/iot-core/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "iot.aws-iot-device-defender": {
                    id: "iot.aws-iot-device-defender",
                    name: "AWS IoT Device Defender",
                    nameShort: "AWS IoT Device Defender",
                    desc: "Security Management for IoT devices",
                    tags: ["aws"],
                    backgroundColor: "cccccc",
                    primaryColor: "3F8624",
                    logoTexture: "aws-iot-device-defender-logo.png",
                    model: "firewall",
                    links: {
                        website: "https://aws.amazon.com/iot-device-defender/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "iot.azure-sphere": {
                    id: "iot.azure-sphere",
                    name: "Azure Sphere",
                    nameShort: "Azure Sphere",
                    desc: "Securely connect MCU-powered devices from the silicon to the cloud",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "0079d6",
                    logoTexture: "azure-sphere-logo.png",
                    model: "router",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "iot.azure-time-series-insights": {
                    id: "iot.azure-time-series-insights",
                    name: "Azure Time Series Insights",
                    nameShort: "Azure Time Series Insights",
                    desc: "Explore and analyze time-series data from IoT devices",
                    tags: ["azure"],
                    backgroundColor: "FFFFFF",
                    primaryColor: "00b294",
                    logoTexture: "azure-time-series-insights-logo.png",
                    model: "timeseriesdb",
                    links: {},
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "iot.gcc-cloud-iot-core": {
                    id: "iot.gcc-cloud-iot-core",
                    name: "GCC Cloud IoT Core",
                    nameShort: "GCC Cloud IoT Core",
                    desc: "Secure device connection and management.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-cloud-iot-core-logo.png",
                    model: "event-hub",
                    links: {
                        website: "https://cloud.google.com/iot-core/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                },
                "iot.gcc-google-beacon-platform": {
                    id: "iot.gcc-google-beacon-platform",
                    name: "GCC Google Beacon Platform",
                    nameShort: "GCC Google Beacon Platform",
                    desc: "Create proximity-based experiences.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "4285f4",
                    logoTexture: "gcc-google-beacon-platform-logo.png",
                    model: "beacon",
                    links: {
                        website: "https://developers.google.com/beacons/"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        },
        api: {
            title: "API",
            desc: "Business level endpoints such as Healthcare, Banking or Tracking",
            components: {
                "api.gcc-apigee-api-platform": {
                    id: "api.gcc-apigee-api-platform",
                    name: "GCC Apigee API Platform",
                    nameShort: "GCC Apigee API Platform",
                    desc: "Develop, secure, deploy, and monitor your APIs everywhere.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "fc4c02",
                    logoTexture: "gcc-apigee-api-platform-logo.png",
                    model: "api",
                    links: {
                        website: "https://cloud.google.com/apigee-api-management/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "api.gcc-apigee-healthcare-apix": {
                    id: "api.gcc-apigee-healthcare-apix",
                    name: "GCC Apigee Healthcare APIx",
                    nameShort: "GCCHealthcare APIx",
                    desc: "Accelerate building new FHIR API-based digital services.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "fc4c02",
                    logoTexture: "gcc-apigee-api-platform-logo.png",
                    model: "api",
                    links: {
                        website: "https://apigee.com/about/solutions/apigee-health-apix"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "api.gcc-apigee-open-banking-apix": {
                    id: "api.gcc-apigee-open-banking-apix",
                    name: "GCC Apigee Open Banking APIx",
                    nameShort: "GCC Open Banking APIx",
                    desc: "Accelerate open banking and PSD2 compliance.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "fc4c02",
                    logoTexture: "gcc-apigee-api-platform-logo.png",
                    model: "api",
                    links: {
                        website: "https://apigee.com/about/solutions/apigee-open-banking-apix"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "api.gcc-apigee-sense": {
                    id: "api.gcc-apigee-sense",
                    name: "GCC Apigee Sense",
                    nameShort: "GCC Apigee Sense",
                    desc: "Intelligent behavior detection to protect APIs from attacks.",
                    tags: ["gcc", "google"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "fc4c02",
                    logoTexture: "gcc-apigee-api-platform-logo.png",
                    model: "piechart",
                    links: {
                        website: "https://cloud.google.com/apigee-sense/"
                    },
                    brightenLogo: true,
                    secondaryColor: ""
                },
                "api.trello": {
                    id: "api.trello",
                    name: "Trello",
                    nameShort: "Trello",
                    desc: "Trello is an easy to use project management tool with a powerful HTTP API",
                    tags: ["application", "project-management"],
                    backgroundColor: "CCCCCC",
                    primaryColor: "0079bf",
                    logoTexture: "trello-logo.png",
                    model: "api",
                    links: {
                        website: "https://trello.com"
                    },
                    brightenLogo: false,
                    secondaryColor: ""
                }
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const CONF = __webpack_require__(1);
    module.exports = class ImagePlane {
        constructor(imagePath, canvas, model)
        {
            this.imagePath = imagePath;
            this.model = model;
            this.icon = null;
            this.iconColor = null;
            this.canvas = canvas;
            this.texture = (new THREE.TextureLoader).load(imagePath, this.onInitialTextureLoaded.bind(this));
            this.texture.anisotropy = canvas.renderer.capabilities.getMaxAnisotropy();
            this.material = new THREE.MeshBasicMaterial({
                map: this.texture,
                transparent: true
            });
            this.geometry = new THREE.PlaneGeometry(CONF.gridCellSize * (this.model.imagePlaneWidth || 1), CONF.gridCellSize * (this.model.imagePlaneHeight || 1), 1, 1);
            this.mesh = new THREE.Mesh(this.geometry, this.material)
        }
        onInitialTextureLoaded()
        {
            if (this.icon) {
                this.setIcon(this.icon, this.iconColor, true)
            } else if (this.imagePath) {
                this.setImagePath(this.imagePath, true)
            }
        }
        setImagePath(imagePath, force)
        {
            if (imagePath === this.imagePath && !force) {
                return
            }
            this.icon = null;
            this.imagePath = imagePath;
            this.canvas.imageCache.getImage128Square(imagePath, image => {
                this.texture.image = image;
                this.texture.needsUpdate = true
            })
        }
        setIcon(icon, iconColor, force)
        {
            if (icon === this.icon && iconColor === this.iconColor && !force) {
                return
            }
            this.imagePath = null;
            this.icon = icon;
            this.iconColor = iconColor;
            this.canvas.imageCache.getIconTexture(icon, iconColor, image => {
                this.texture.image = image;
                this.texture.needsUpdate = true
            })
        }
        setPosition(pos, offset)
        {
            this.mesh.position.x = pos.x || 0;
            this.mesh.position.y = pos.y || 0;
            this.mesh.position.z = pos.z || 0;
            this.mesh.position.x += offset.x || 0;
            this.mesh.position.y += offset.y || 0;
            this.mesh.position.z += offset.z || 0
        }
        setRotation(rot)
        {
            this.mesh.rotation.x = rot.x === undefined ? -Math.PI / 2 : rot.x;
            this.mesh.rotation.y = rot.y || 0;
            this.mesh.rotation.z = rot.z || 0
        }
        setScale(scale)
        {
            if (scale instanceof Array) {
                this.mesh.scale.set(scale[0], scale[1], scale[2])
            } else {
                this.mesh.scale.set(scale, scale, scale)
            }
        }
        getThreeObject()
        {
            return this.mesh
        }
        destroy()
        {
            this.material.dispose();
            this.geometry.dispose();
            this.texture.dispose();
            this.texture = null;
            this.material = null;
            this.geometry = null;
            this.mesh = null
        }
    }
}, function(module, exports) {
    module.exports = class MetricsPlane {
        constructor(canvas, value)
        {
            this.width = 256;
            this.height = 256;
            this.gaugeWidth = 40;
            this.paintableHeight = this.height / 2 + 20;
            this.segmentColors = ["#56ff3d", "#ffda3d", "#ff4d3d"];
            this.value = value;
            this.canvas = canvas;
            this.canvasElement = document.createElement("canvas");
            this.canvasElement.width = this.width;
            this.canvasElement.height = this.height;
            this.ctx = this.canvasElement.getContext("2d");
            this.texture = new THREE.CanvasTexture(this.canvasElement);
            this.texture.anisotropy = this.canvas.renderer.capabilities.getMaxAnisotropy();
            this.material = new THREE.MeshBasicMaterial({
                map: this.texture,
                transparent: true
            });
            this.material.blending = THREE.CustomBlending;
            this.material.blendSrc = THREE.OneFactor;
            this.material.blendDst = THREE.OneMinusSrcAlphaFactor;
            this.material.side = THREE.DoubleSide;
            this.geometry = new THREE.PlaneGeometry(10, 10, 1, 1);
            this.mesh = new THREE.Mesh(this.geometry, this.material);
            this.mesh.position.y = 6;
            this.setValue(value)
        }
        setValue(value)
        {
            this.ctx.lineWidth = this.gaugeWidth;
            const x = this.width / 2;
            const y = this.paintableHeight;
            const r = this.width / 2 - this.gaugeWidth / 2;
            const c = false;
            const seg = Math.PI / this.segmentColors.length;
            var s,
                i;
            for (i = 0; i < this.segmentColors.length; i++) {
                this.ctx.beginPath();
                s = Math.PI + i * seg;
                this.ctx.strokeStyle = this.segmentColors[i];
                this.ctx.arc(x, y, r, s, s + seg, c);
                this.ctx.stroke()
            }
            if (value === 1) {
                this.ctx.font = 'bold 60px "Open Sans", Arial, sans-serif'
            } else {
                this.ctx.font = 'bold 70px "Open Sans", Arial, sans-serif'
            }
            this.ctx.textAlign = "center";
            this.ctx.fillText(Math.round(value * 100) + "%", x, y)
        }
        lookAtCamera()
        {
            this.mesh.lookAt(this.canvas.camera.camera.position)
        }
        getThreeObject()
        {
            return this.mesh
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    module.exports = class ObjectAnchorPoints {
        constructor(canvas, object)
        {
            this.canvas = canvas;
            this.object = object;
            this.anchors = [];
            this.index = 0
        }
        refresh()
        {
            const bb = this.object.computeBoundingBox();
            this.index = 0;
            var x,
                y;
            for (x = bb.x1; x <= bb.x2; x += .5) {
                this.addAnchor(x, bb.y1);
                this.addAnchor(x, bb.y2)
            }
            for (y = bb.y1 + .5; y <= bb.y2 - .5; y += .5) {
                this.addAnchor(bb.x1, y);
                this.addAnchor(bb.x2, y)
            }
        }
        addAnchor(x, y)
        {
            if (this.anchors[this.index]) {
                this.anchors[this.index].x = x;
                this.anchors[this.index].y = y
            } else {
                this.anchors.push({
                    type: C.ANCHOR_TYPES.OBJECT,
                    index: this.index,
                    id: this.object.id,
                    x: x,
                    y: y
                })
            }
            this.index++
        }
    }
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(2);
    const MODES = __webpack_require__(103);
    const C = __webpack_require__(0);
    const TRACKABLE_MODES = {};
    TRACKABLE_MODES[C.INTERACTION_MODE.PLACE_COMPONENT] = true;
    TRACKABLE_MODES[C.INTERACTION_MODE.DRAW_LINES] = true;
    TRACKABLE_MODES[C.INTERACTION_MODE.DRAW_AREA] = true;
    TRACKABLE_MODES[C.INTERACTION_MODE.ADD_LABEL] = true;
    TRACKABLE_MODES[C.INTERACTION_MODE.ADD_ICON] = true;
    TRACKABLE_MODES[C.INTERACTION_MODE.ADD_IMAGE] = true;
    TRACKABLE_MODES[C.INTERACTION_MODE.ADD_GENERIC] = true;
    module.exports = class InteractionMode extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.canvas = canvas;
            this.canvas.app.eventHub.on("user-cancel", this.endActiveMode, this, 3);
            this.previousMode = null;
            this.previousModeData = null;
            this.activeMode = null;
            this.activeModeData = null;
            this.isStaticMode = false
        }
        setStaticMode(mode, data)
        {
            this.set(mode, data);
            this.isStaticMode = true
        }
        getActiveMode()
        {
            if (this.activeMode === null) {
                return "select"
            } else {
                return this.activeMode.name
            }
        }
        set(mode, data)
        {
            if (this.isStaticMode === true) {
                return
            }
            if (!MODES[mode]) {
                throw new Error("Unknown mode " + mode)
            }
            if (this.activeMode) {
                this.activeMode.stop(this.canvas);
                if (MODES[mode].returnToPreviousMode) {
                    this.previousMode = this.activeMode;
                    this.previousModeData = this.activeModeData
                } else {
                    this.previousMode = null;
                    this.previousModeData = null
                }
            }
            /*if (TRACKABLE_MODES[mode]) {
                this.canvas.app.trackEvent("mode", "change", mode)
            }*/
            this.activeMode = MODES[mode];
            this.activeModeData = data;
            this.activeMode.start(this.canvas, data);
            this.emit("change", mode, data)
        }
        endActiveMode()
        {
            if (!this.activeMode || this.isStaticMode) {
                return
            }
            this.activeMode.stop(this.canvas);
            const isSameMode = this.activeMode && this.previousMode && this.activeMode.name === this.previousMode.name;
            if (this.previousMode && this.activeMode.returnToPreviousMode && !isSameMode) {
                this.activeMode = null;
                this.set(this.previousMode.name, this.previousModeData)
            } else {
                this.previousMode = null;
                this.previousModeData = null;
                this.activeMode = null;
                this.activeModeData = null;
                this.emit("change", "select")
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const modes = {};
    const C = __webpack_require__(0);
    modes[C.INTERACTION_MODE.PLACE_COMPONENT] = {
        name: C.INTERACTION_MODE.PLACE_COMPONENT,
        start: (canvas, data) => {
            canvas.interactionPlane.interactions.componentGhost.show(data.componentId)
        },
        stop: function(canvas) {
            canvas.interactionPlane.interactions.componentGhost.remove()
        }
    };
    modes[C.INTERACTION_MODE.ADD_WIDGET] = {
        name: C.INTERACTION_MODE.ADD_WIDGET,
        start: function(canvas) {
            canvas.widgetManager.startAdd()
        },
        stop: function(canvas) {
            canvas.widgetManager.stopAdd()
        }
    };
    modes[C.INTERACTION_MODE.PAN] = {
        name: C.INTERACTION_MODE.PAN,
        returnToPreviousMode: true,
        start: function(canvas) {
            canvas.camera.startPan()
        },
        stop: function(canvas) {
            canvas.camera.stopPan()
        }
    };
    modes[C.INTERACTION_MODE.PAN_ON_DRAG] = {
        name: C.INTERACTION_MODE.PAN_ON_DRAG,
        returnToPreviousMode: true,
        stopPan: function() {
            canvas.camera.stopPan(true)
        },
        start: function(canvas) {
            document.body.classList.add("pan");
            canvas.mouseControls.on("mousedown", canvas.camera.startPan, canvas.camera);
            canvas.mouseControls.on("mouseup", this.stopPan, this)
        },
        stop: function(canvas) {
            document.body.classList.remove("pan");
            canvas.mouseControls.off("mousedown", canvas.camera.startPan, canvas.camera);
            canvas.mouseControls.off("mouseup", this.stopPan, this)
        }
    };
    modes[C.INTERACTION_MODE.DRAW_LINES] = {
        name: C.INTERACTION_MODE.DRAW_LINES,
        start: function(canvas, lineGroup) {
            canvas.linePlane.start(lineGroup || null)
        },
        stop: function() {
            canvas.linePlane.stop()
        }
    };
    modes[C.INTERACTION_MODE.DRAW_AREA] = {
        name: C.INTERACTION_MODE.DRAW_AREA,
        start: function(canvas) {
            canvas.linePlane.startArea()
        },
        stop: function(canvas) {
            canvas.linePlane.stopArea()
        }
    };
    modes[C.INTERACTION_MODE.ADD_LABEL] = {
        name: C.INTERACTION_MODE.ADD_LABEL,
        start: function(canvas) {
            canvas.pixelPlane.startAddLabel()
        },
        stop: function(canvas) {
            canvas.pixelPlane.stopAdd()
        }
    };
    modes[C.INTERACTION_MODE.ADD_ICON] = {
        name: C.INTERACTION_MODE.ADD_ICON,
        start: function(canvas) {
            canvas.pixelPlane.startAddIcon()
        },
        stop: function(canvas) {
            canvas.pixelPlane.stopAdd()
        }
    };
    modes[C.INTERACTION_MODE.ADD_IMAGE] = {
        name: C.INTERACTION_MODE.ADD_IMAGE,
        start: function(canvas) {
            canvas.pixelPlane.startAddImage()
        },
        stop: function(canvas) {
            canvas.pixelPlane.stopAdd()
        }
    };
    module.exports = modes
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(2);
    const defaults = __webpack_require__(21);
    const UNDEFINED = "undefined";
    const OBJECT = "object";
    const config = __webpack_require__(1);
    const tools = __webpack_require__(4);
    module.exports = class UserSettings extends EventEmitter {
        constructor(httpClient, loadImmediatly)
        {
            super();
            this.httpClient = httpClient;
            this.isReady = false;
            this.settings = null;
            this.savePending = {};
            this.isSavePending = false;
            if (loadImmediatly !== false) {
                this.httpClient.get("user-settings/all").then(this.onLoad.bind(this))
            }
        }
        onLoad(response)
        {
            this.settings = response.body;
            this.isReady = true;
            this.emit("ready")
        }
        get(key)
        {
            var value;
            if (this.settings[key] !== null && typeof this.settings[key] !== UNDEFINED) {
                value = this.settings[key]
            } else if (typeof defaults[key] !== undefined) {
                value = defaults[key]
            } else {
                throw new Error("Unknown user setting requested: " + key)
            }
            if (typeof value === OBJECT) {
                return tools.deepClone(value)
            } else {
                return value
            }
        }
        set(key, value, allowUnknown)
        {
            if (typeof defaults[key] === UNDEFINED && !allowUnknown) {
                throw new Error("Unknown user-setting " + key)
            }
            const stringValue = JSON.stringify(value);
            if (JSON.stringify(this.settings[key]) === stringValue) {
                return
            }
            if (typeof value === OBJECT) {
                value = JSON.parse(stringValue)
            }
            this.settings[key] = value;
            this.savePending[key] = value;
            if (this.isSavePending === false) {
                this.isSavePending = true;
                setTimeout(this.save.bind(this), config.userSettingSaveBufferTime)
            }
            this.emit(key + "changed", value)
        }
        save()
        {
            this.httpClient.post("user-settings/set", {
                settings: this.savePending
            });
            this.savePending = {};
            this.isSavePending = false
        }
    }
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(2);
    const C = __webpack_require__(0);
    module.exports = class AccountData extends EventEmitter {
        constructor(httpClient)
        {
            super();
            this.httpClient = httpClient;
            this.isReady = false;
            this.data = {}
        }
        isFreePlan()
        {
            return this.data.paymentPlan === C.PAYMENT_PLAN.FREE
        }
        get(key)
        {
            if (typeof this.data[key] === "undefined") {
                return null
            } else {
                return this.data[key]
            }
        }
        set(data)
        {
            for (var key in data) {
                this.data[key] = data[key]
            }
            if (this.data.isPayingUser === false) {
                this.data.paymentPlan = C.PAYMENT_PLAN.FREE
            } else if (this.data.isPayingUser === true) {
                if (this.data.subscriptionEnd) {
                    this.data.paymentPlan = C.PAYMENT_PLAN.CANCELLED
                } else {
                    this.data.paymentPlan = C.PAYMENT_PLAN.PAID
                }
            }
            if (this.data.subscriptionEnd) {
                this.data.subscriptionEnd = this.formatDate(this.data.subscriptionEnd)
            }
            this.emit("change")
        }
        formatDate(date)
        {
            return new Date(date).toLocaleString()
        }
        load(callback)
        {
            this.httpClient.get("account/get-user-data").then(res => {
                this.isReady = true;
                this.set(res.body);
                callback()
            })
        }
    }
}, function(module, exports, __webpack_require__) {
    const Point = __webpack_require__(8);
    const C = __webpack_require__(0);
    module.exports = class ObjectFinder {
        constructor(app)
        {
            this.app = app;
            this.raycaster = new THREE.Raycaster;
            this.mousePosition = new THREE.Vector2;
            this.boundingBoxes = {};
            this.app.state.on("change", this.computeBoundingBoxes, this);
            this.app.objects.on("change", this.computeBoundingBoxes, this)
        }
        computeBoundingBoxes()
        {
            this.boundingBoxes = this.app.objects.callMethodOnObjects("computeBoundingBox")
        }
        intersectsComponent(rectangle)
        {
            for (var id in this.boundingBoxes) {
                if (rectangle.isWithin(this.boundingBoxes[id])) {
                    return true
                }
            }
            return false
        }
        getObjectsWithinRectangle(rectangle)
        {
            var matchedObjects = [],
                id,
                obj;
            for (id in this.boundingBoxes) {
                if (rectangle.intersects(this.boundingBoxes[id])) {
                    obj = this.app.objects.getById(id);
                    if (obj.type === C.TYPES.LINE_GROUP && !rectangle.isWithin(this.boundingBoxes[id])) {
                        if (!obj.lineFinder.intersectsRectangle(rectangle)) {
                            continue
                        }
                    }
                    matchedObjects.push(obj)
                }
            }
            return matchedObjects
        }
        getObjectsForMouseEvent(event)
        {
            this.mousePosition.x = event.clientX / window.innerWidth * 2 - 1;
            this.mousePosition.y = -(event.clientY / window.innerHeight) * 2 + 1;
            this.raycaster.setFromCamera(this.mousePosition, this.app.canvas.camera.getThreeObject());
            const intersections = this.raycaster.intersectObjects(this.app.canvas.scene.children, true);
            const matchingObjects = [];
            var lineObject,
                pixelObject;
            for (var i = 0; i < intersections.length; i++) {
                if (intersections[i].object.arcObject && matchingObjects.indexOf(intersections[i].object.arcObject) === -1) {
                    matchingObjects.push(intersections[i].object.arcObject)
                } else if (intersections[i].object === this.app.canvas.pixelPlane.plane.mesh) {
                    matchingObjects.planeIntersectionPoint = Point.fromThreePoint(intersections[i].point);
                    pixelObject = this.app.canvas.pixelPlane.getPixelObjectForPoint(Point.fromThreePoint(intersections[i].point));
                    if (pixelObject) {
                        matchingObjects.push(pixelObject)
                    }
                    lineObject = this.app.canvas.linePlane.getLineObjectForPoint(matchingObjects.planeIntersectionPoint);
                    if (lineObject) {
                        matchingObjects.push(lineObject)
                    }
                }
            }
            return matchingObjects
        }
    }
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(2);
    module.exports = class ObjectRegistry extends EventEmitter {
        constructor(canvas)
        {
            super();
            this.canvas = canvas;
            this.objects = {};
            this.objectsByType = {}
        }
        getAll()
        {
            return this.objects
        }
        callMethodOnObjects(methodName, type)
        {
            const results = {};
            const objects = type ? this.getAllOfType(type) : this.objects;
            for (var id in objects) {
                results[id] = objects[id][methodName]()
            }
            return results
        }
        add(object)
        {
            this.objects[object.id] = object;
            if (!this.objectsByType[object.type]) {
                this.objectsByType[object.type] = {}
            }
            this.objectsByType[object.type][object.id] = object;
            this.emit("change")
        }
        remove(object)
        {
            if (!object) {
                return
            }
            delete this.objects[object.id];
            delete this.objectsByType[object.type][object.id];
            if (object.isSelected) {
                this.canvas.selectionManager.clearCurrentSelection(true)
            }
            object.destroy();
            this.emit("change")
        }
        removeById(id)
        {
            this.remove(this.getById(id))
        }
        getById(id)
        {
            return this.objects[id]
        }
        getAllOfType(type)
        {
            if (!this.objectsByType[type]) {
                return {}
            } else {
                return this.objectsByType[type]
            }
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    module.exports = class ErrorReporter {
        constructor(httpClient, app)
        {
            this.httpClient = httpClient;
            this.app = app;
            this.errorsSent = 0;
            window.addEventListener("error", this.onScriptError.bind(this), true)
        }
        onScriptError(errorEvent)
        {
            if (!errorEvent.message) {
                return
            }
            var stack = "-";
            console.warn("Encountered error:", errorEvent);
            if (errorEvent.error && errorEvent.error.stack) {
                stack = errorEvent.error.stack
            }
            this.reportError(C.ERROR_TYPES.SCRIPT_ERROR, `\n            Message: ${errorEvent.message}\n            Column: ${errorEvent.colno}\n            Line: ${errorEvent.lineno}\n            StackTrace: ${stack}\n        `)
        }
        reportError(type, message)
        {
            this.errorsSent++;
            if (this.errorsSent > 5) {
                return
            }
            setTimeout(() => {
                this.httpClient.post("feedback/report-error", {
                    type: type,
                    message: message
                })
            }, 20)
        }
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    __webpack_require__(110);
    __webpack_require__(111);
    __webpack_require__(115);
    __webpack_require__(129);
    __webpack_require__(132);
    __webpack_require__(139);
    __webpack_require__(149);
    __webpack_require__(151);
    __webpack_require__(154);
    __webpack_require__(155);
    __webpack_require__(158);
    __webpack_require__(159);
    __webpack_require__(160);
    __webpack_require__(161);
    __webpack_require__(162);
    __webpack_require__(163);
    __webpack_require__(164);
    __webpack_require__(165);
    __webpack_require__(166);
    __webpack_require__(167);
    __webpack_require__(168);
    __webpack_require__(170);
    __webpack_require__(171);
    __webpack_require__(172);
    __webpack_require__(173);
    __webpack_require__(28);
    __webpack_require__(174);
    __webpack_require__(175);
    __webpack_require__(176);
    __webpack_require__(177);
    __webpack_require__(179);
    __webpack_require__(180);
    __webpack_require__(181);
    __webpack_require__(182);
    __webpack_require__(183);
    __webpack_require__(184);
    __webpack_require__(185);
    __webpack_require__(199);
    __webpack_require__(200);
    __webpack_require__(201);
    __webpack_require__(202);
    Vue.component("sidebar", {
        template: `\n    <div id="sidebar" @click="stopEvent" @mouseup="stopEvent" @mousedown="stopEvent" @mousemove="stopEvent">\n        <div id="sidebar-resize-handle" ref="resizeHandle"></div>\n        <navigation ref="nav"></navigation>\n        <div class="view-container">\n            <loading-overlay ref="overlay"></loading-overlay>\n            <div class="view add" v-bind:class="{active: view === '${C.VIEWS.ADD}'}">\n                <component-library ref="componentLibrary"></component-library>\n            </div>\n            <div class="view selection" v-bind:class="{active: view === '${C.VIEWS.SELECTION}'}">\n                <context-panel ref="contextPanel"></context-panel>\n            </div>\n            <div class="view file" v-bind:class="{active: view === '${C.VIEWS.FILE}'}">\n                <file-panel ref="filePanel"></file-panel>\n            </div>\n            <div class="view export" v-bind:class="{active: view === '${C.VIEWS.EXPORT}'}">\n                <export-panel></export-panel>\n            </div>\n            <div class="view account" v-bind:class="{active: view === '${C.VIEWS.ACCOUNT}'}">\n                <account-panel></account-panel>\n            </div>\n            <div class="view api" v-bind:class="{active: view === '${C.VIEWS.API}'}">\n                <api-panel></api-panel>\n            </div>\n        </div>\n    </div>\n    `,
        data: function() {
            return {
                view: C.VIEWS.ADD,
                left: 0
            }
        },
        mounted: function() {
            this.$root.$on("init", this.init.bind(this));
            this.width = null;
            this.currentWidth = null;
            this.minWidth = 180;
            this.onMouseMoveFn = this.onMouseMove.bind(this);
            this.onMouseUpFn = this.onMouseUp.bind(this);
            this.dragStartX = null;
            this.lastView = this.$data.view;
            this.resizeHandleDragged = false;
            this.$refs.resizeHandle.addEventListener("mousedown", this.onMouseDown.bind(this), false)
        },
        methods: {
            init() {
                this.width = this.$root.userSettings.get("sidebarWidth");
                this.$el.style.width = this.width + "px";
                this.$root.canvas.selectionManager.on("selection-change", this.onSelectionChange, this)
            },
            show() {
                this.$el.style.left = 0
            },
            hide() {
                this.$el.style.left = (this.width + 10) * -1 + "px"
            },
            stopEvent(event) {
                if (this.resizeHandleDragged === false && !event.passThrough) {
                    event.stopPropagation()
                }
            },
            onSelectionChange(selectedObjects) {
                if (selectedObjects.length === 0 && this.lastView) {
                    this.setView(this.lastView);
                    this.lastView = null
                } else if (selectedObjects.length > 0) {
                    this.lastView = this.$data.view;
                    this.setView(C.VIEWS.SELECTION)
                }
            },
            setView(view) {
                this.$refs.nav.setView(view)
            },
            onMouseDown(e) {
                e.preventDefault();
                this.resizeHandleDragged = true;
                this.dragStartX = e.clientX;
                window.addEventListener("mousemove", this.onMouseMoveFn, false);
                window.addEventListener("mouseup", this.onMouseUpFn, false)
            },
            onMouseMove(e) {
                width = this.width + (e.clientX - this.dragStartX);
                if (width >= this.minWidth) {
                    this.currentWidth = width;
                    this.$el.style.width = width + "px"
                }
            },
            onMouseUp(e) {
                window.removeEventListener("mousemove", this.onMouseMoveFn, false);
                window.removeEventListener("mouseup", this.onMouseUpFn, false);
                this.resizeHandleDragged = false;
                this.width = this.currentWidth;
                this.$root.userSettings.set("sidebarWidth", this.width)
            }
        }
    })
}, function(module, exports) {
    Vue.filter("dateToLocaleString", d => {
        return new Date(d).toLocaleString()
    })
}, function(module, exports, __webpack_require__) {
    __webpack_require__(112);
    __webpack_require__(113);
    Vue.component("component-library", {
        template: `\n        <div class="component-library">\n            <general-controls></general-controls>\n            <component-list ref="componentList"></component-list>\n\t\t</div>\n\t`,
        data: function() {
            return {}
        },
        methods: {}
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const GENERIC_CANCEL_MODE = [C.INTERACTION_MODE.DRAW_AREA, C.INTERACTION_MODE.DRAW_LINES, C.INTERACTION_MODE.ADD_LABEL, C.INTERACTION_MODE.ADD_IMAGE, C.INTERACTION_MODE.ADD_ICON];
    Vue.component("general-controls", {
        template: `\n        <div class="general-controls">\n            <ul class="component-list">\n                <li v-bind:class="{active: currentMode === '${C.INTERACTION_MODE.DRAW_LINES}'}" v-on:click.stop="setMode('${C.INTERACTION_MODE.DRAW_LINES}')">\n                    <i class="fas fa-long-arrow-alt-right"></i>\n                    <span>line</span>\n                </li>\n                <li v-bind:class="{active: currentMode === '${C.INTERACTION_MODE.DRAW_AREA}'}" v-on:click.stop="setMode('${C.INTERACTION_MODE.DRAW_AREA}')">\n                    <i class="fas fa-square"></i>\n                    <span>area</span>\n                </li>\n                <li v-bind:class="{active: currentMode === '${C.INTERACTION_MODE.ADD_LABEL}'}" v-on:click.stop="setMode('${C.INTERACTION_MODE.ADD_LABEL}')">\n                    <i class="fas fa-font"></i>\n                    <span>label</span>\n                </li>\n                <li v-bind:class="{active: currentMode === '${C.INTERACTION_MODE.ADD_ICON}'}" v-on:click.stop="setMode('${C.INTERACTION_MODE.ADD_ICON}')">\n                    <i class="fas fa-star"></i>\n                    <span>icon</span>\n                </li>\n                <li v-bind:class="{active: currentMode === '${C.INTERACTION_MODE.ADD_IMAGE}'}" v-on:click.stop="setMode('${C.INTERACTION_MODE.ADD_IMAGE}')">\n                    <i class="fas fa-image"></i>\n                    <span>image</span>\n                </li>\n                <li v-bind:class="{active: currentMode === '${C.INTERACTION_MODE.ADD_WIDGET}'}" v-on:click.stop="showSelectWidget">\n                    <i class="fas fa-chart-line"></i>\n                    <span>widget</span>\n                </li>\n            </ul>\n        </div>\n    `,
        data: function() {
            return {
                currentMode: null
            }
        },
        created: function() {
            this.$root.$on("init", this.init.bind(this))
        },
        methods: {
            init() {
                this.$root.interactionMode.on("change", this.onModeChange, this)
            },
            onModeChange(mode) {
                this.$data.currentMode = mode
            },
            setMode(mode) {
                this.$root.interactionMode.set(mode)
            },
            showSelectWidget() {
                this.$root.$refs.sidebar.$refs.contextPanel.showObjectDetails({
                    type: C.TYPES.WIDGET,
                    id: null
                });
                this.$root.$refs.sidebar.setView(C.VIEWS.SELECTION)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const objectData = __webpack_require__(13);
    const componentSearch = __webpack_require__(114);
    const config = __webpack_require__(1);
    Vue.component("component-list", {
        template: `\n        <div class="component-list-outer">\n            <search-input :searchCallback="applySearch" placeholder="search components..."></search-input>\n            <div class="empty-message" v-if="showEmpty">\n                -- no components found for<br /> search term <em>{{searchTerm}}</em> --\n            </div>\n            <ul class="accordeon-list">\n                <li \n                    v-for="category in categories" \n                    v-bind:class="{open: category.isOpen }" \n                    v-show="category.show"\n                    :key="category.label"\n                >\n                    <label class="clickable" v-on:click="category.isOpen = !category.isOpen">\n                        <i class="fas fa-fw" :class="['fa-chevron-' + (category.isOpen?'down':'right')]"></i>   \n                        {{category.title}}\n                        <p>{{category.desc}}</p>\n                    </label>\n                    <ul class="component-list" v-if="category.isOpen">\n                        <li \n                            v-for="component in category.components"\n                            v-bind:class="{active: currentComponentId===component.id}" \n                            v-on:click.stop="pickComponentPosition(component.id)"\n                            v-show="component.isVisible"\n                            :key="component.id"\n                        >\n                            \n                            <loaded-img :src="logoFolder + component.logoTexture" width="42" height="42" :brighten="component.brightenLogo" />\n                            <span>{{component.nameShort}}</span>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n\t\t</div>\n    `,
        data: function() {
            return {
                currentComponentId: null,
                categories: this.getComponents(),
                openCategories: {},
                logoFolder: config.logoFolder,
                showEmpty: false,
                searchTerm: null
            }
        },
        watch: {
            categories: function() {
                this.$data.showEmpty = this.isEmpty()
            }
        },
        created: function() {
            this.$root.$on("init", this.init.bind(this))
        },
        methods: {
            getComponents() {
                const data = [];
                var categoryEntry;
                const categories = objectData.getComponentStructure();
                const addComponentAttributes = components => {
                    const componentArray = [];
                    for (var id in components) {
                        components[id].isVisible = true;
                        components[id].rank = 0;
                        componentArray.push(components[id])
                    }
                    return componentArray
                };
                for (var id in categories) {
                    categoryEntry = {
                        isOpen: false,
                        show: true,
                        id: id,
                        title: categories[id].title,
                        desc: categories[id].desc,
                        rank: 0,
                        components: addComponentAttributes(categories[id].components)
                    };
                    data.push(categoryEntry)
                }
                componentSearch.resetCategories(data);
                return data
            },
            init() {
                this.$root.interactionMode.on("change", this.onModeChange, this)
            },
            isEmpty() {
                for (var i = 0; i < this.$data.categories.length; i++) {
                    if (this.$data.categories[i].show) {
                        return false
                    }
                }
                return true
            },
            applySearch(term) {
                componentSearch.applySearch(term, this.$data.categories);
                this.$data.searchTerm = term
            },
            onModeChange(mode, data) {
                if (mode === "place-component") {
                    this.$data.currentComponentId = data.componentId
                } else {
                    this.$data.currentComponentId = null
                }
            },
            pickComponentPosition(componentId) {
                this.$root.interactionMode.set("place-component", {
                    componentId: componentId
                })
            }
        }
    })
}, function(module, exports) {
    exports.applySearch = function(term, categories) {
        term = term.toLowerCase().trim();
        if (!term || term.length === 0) {
            resetCategories(categories)
        } else {
            for (var i = 0; i < categories.length; i++) {
                findMatchesInCategory(categories[i], term)
            }
            categories.sort(sortByRank)
        }
    };
    exports.resetCategories = resetCategories;
    function sortByRank(catA, catB) {
        if (catA.rank === catB.rank) {
            return 0
        }
        return catA.rank > catB.rank ? -1 : 1
    }
    function resetCategories(categories) {
        var i,
            j;
        for (i = 0; i < categories.length; i++) {
            categories[i].isOpen = false;
            categories[i].show = true;
            for (j = 0; j < categories[i].components.length; j++) {
                categories[i].components[j].isVisible = true
            }
        }
        categories.sort((a, b) => {
            return a.title > b.title ? 1 : -1
        })
    }
    function contains(searchString, term) {
        return searchString.toLowerCase().indexOf(term) > -1
    }
    function findMatchesInCategory(category, term) {
        var foundMatch = false;
        var i;
        var rank;
        category.rank = 0;
        if (contains(category.title, term)) {
            category.rank++
        }
        if (contains(category.desc, term)) {
            category.rank++
        }
        for (i = 0; i < category.components.length; i++) {
            rankComponent(category.components[i], term);
            category.rank += category.components[i].rank
        }
        category.components.sort(sortByRank);
        if (category.rank > 0) {
            category.isOpen = true;
            category.show = true
        } else {
            category.isOpen = false;
            category.show = false
        }
    }
    function rankComponent(component, term) {
        component.rank = 0;
        if (contains(component.name, term)) {
            if (component.name.toLowerCase() === term) {
                component.rank += 6
            } else {
                component.rank += 5
            }
        } else if (contains(component.nameShort, term)) {
            if (component.nameShort.toLowerCase() === term) {
                component.rank += 6
            } else {
                component.rank += 5
            }
        }
        if (contains(component.desc, term)) {
            component.rank += 4
        }
        component.rank += rankComponentTags(component.tags, term);
        component.isVisible = component.rank > 0
    }
    function rankComponentTags(tags, term) {
        var rank = 0,
            i;
        for (i = 0; i < tags.length; i++) {
            if (tags[i] === term) {
                rank += 3
            } else if (contains(tags[i], term)) {
                rank += 1
            }
        }
        return rank
    }
}, function(module, exports, __webpack_require__) {
    __webpack_require__(116);
    __webpack_require__(117);
    __webpack_require__(120);
    __webpack_require__(121);
    __webpack_require__(122);
    __webpack_require__(123);
    __webpack_require__(124);
    __webpack_require__(125);
    __webpack_require__(126);
    const C = __webpack_require__(0);
    const TYPE_TO_VIEW = {};
    TYPE_TO_VIEW[C.TYPES.COMPONENT] = "component-details";
    TYPE_TO_VIEW[C.TYPES.LINE_GROUP] = "linegroup-settings";
    TYPE_TO_VIEW[C.TYPES.LABEL] = "label-settings";
    TYPE_TO_VIEW[C.TYPES.ICON] = "icon-settings";
    TYPE_TO_VIEW[C.TYPES.AREA] = "area-settings";
    TYPE_TO_VIEW[C.TYPES.IMAGE] = "image-settings";
    TYPE_TO_VIEW[C.TYPES.WIDGET] = "widget-settings";
    Vue.component("context-panel", {
        template: `\n        <div class="context-panel">\n            <div class="no-selection" v-if="view==='no-selection'">\n                <div>\n                    <i class="fas fa-cube"></i>\n                    <span>nothing selected</span>\n                </div>\n            </div>\n            <component-details :componentId="id"  v-if="view==='component-details'"></component-details>\n            <multi-selection v-if="view==='multi-selection'"></multi-selection>\n            <linegroup-settings :linegroupId="id" v-if="view==='linegroup-settings'"></linegroup-settings>\n            <label-settings :labelId="id" v-if="view==='label-settings'"></label-settings>\n            <icon-settings :id="id" v-if="view==='icon-settings'"></icon-settings>\n            <area-settings :id="id" v-if="view==='area-settings'"></area-settings>\n            <image-settings :id="id" v-if="view==='image-settings'"></image-settings>\n            <generic-settings :id="id" v-if="view==='generic-settings'"></generic-settings>\n            <widget-settings :id="id" v-if="view==='widget-settings'"></widget-settings>\n        </div>\n    `,
        data: function() {
            return {
                view: "no-selection",
                id: null
            }
        },
        created: function() {
            this.$root.$on("init", this.init.bind(this))
        },
        methods: {
            init() {
                this.$root.canvas.selectionManager.on("selection-change", this.onSelectionChange, this)
            },
            onSelectionChange(selectedObjects) {
                if (selectedObjects.length === 0) {
                    this.showNoSelection()
                } else if (selectedObjects.length === 1) {
                    this.showObjectDetails(selectedObjects[0])
                } else {
                    this.showMultiSelection(selectedObjects)
                }
            },
            showNoSelection() {
                this.$data.view = "no-selection"
            },
            showObjectDetails(object) {
                this.$data.id = object.id;
                if (object.type === C.TYPES.COMPONENT && object.config.id.split(".")[0] === C.GENERIC) {
                    this.$data.view = "generic-settings"
                } else {
                    this.$data.view = TYPE_TO_VIEW[object.type]
                }
            },
            showMultiSelection(selectedObjects) {
                this.$data.view = "multi-selection"
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    Vue.component("component-details", {
        template: `\n        <div class="component-details">\n            <component-data-view\n                :id="componentId"\n                :showMetaData="false"\n                :isEditable="true"\n            ></component-data-view>\n            <ul class="row-controls">\n                <li>\n                    <h3>opacity</h3>\n                    <opacity-picker :opacity="opacity" :callback="setOpacity"></opacity-picker>\n                </li>\n                <li>\n                    <h3>rotate</h3>\n                    <rotation-controls :rotation="rotation" :changeCallback="setRotation"></rotation-controls>\n                </li>\n                <li>\n                    <h3>layer</h3>\n                    <layer-selector :id="componentId"></layer-selector>\n                </li>\n                <li>\n                    <h3>actions</h3>\n                    <delete-selected-button></delete-selected-button>\n                </li>\n            </ul>\n            <plugin-panel :id="componentId"></plugin-panel>\n            <api-settings :id="componentId"></api-settings>\n            <h3>\n                Meta Data \n                <help-link>\n                    <p>\n                        Meta-Data is useful to associate arbitrary key-value pairs with a component - for instance its AWS Instance ID or state, a Docker image name etc.\n                    </p>\n                    <p>\n                        This allows you to find the component via the API as well as display the metadata as a label linked directly to the component.\n                    </p>\n                    <a href="/api-docs/meta-data/" target="_blank">\n                        Learn More\n                    </a>\n                </help-link>\n            </h3>\n            <key-value-editor data-key="meta" :id="componentId" :autosave="true"></key-value-editor>\n            <metadata-panel-controls :id="componentId"></metadata-panel-controls>\n        </div>\n    `,
        props: ["componentId"],
        created() {
            this.setComponentId(this.$props.componentId)
        },
        watch: {
            componentId: function(componentId) {
                this.setComponentId(componentId)
            },
            metricValue: function(value) {
                this.setData({
                    metricValue: value
                })
            }
        },
        data: function() {
            return {
                componentConfig: null,
                logoPath: null,
                rotation: null,
                opacity: null,
                name: null,
                metricValue: 0
            }
        },
        methods: {
            setRotation(rotation) {
                this.$data.rotation = rotation;
                this.setData({
                    rotation: rotation
                });
                this.$root.userSettings.set("componentRotation", rotation)
            },
            setOpacity(opacity) {
                this.$data.opacity = opacity;
                this.setData({
                    opacity: opacity
                });
                this.$root.userSettings.set("componentOpacity", opacity)
            },
            setData(data) {
                this.$root.state.processTransaction({
                    id: this.$props.componentId,
                    action: C.ACTIONS.UPDATE,
                    data: data
                })
            },
            setComponentId(componentId) {
                this.$data.componentConfig = this.$root.objects.getById(componentId).config;
                this.$data.logoPath = config.logoFolder + this.$data.componentConfig.logoTexture;
                const state = this.$root.state.getStateForId(componentId);
                this.$data.showMetaDataControls = state.meta && Object.keys(state.meta).length > 0;
                this.$data.rotation = state.rotation;
                this.$data.opacity = state.opacity
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const capabilityRegistry = __webpack_require__(118);
    const C = __webpack_require__(0);
    __webpack_require__(119);
    Vue.component("multi-selection", {
        template: `\n        <div class="multi-selection settings-container">\n            <multi-select-entries></multi-select-entries>\n            <ul class="row-controls">\n                <li v-if="visible.color">\n                    <h3>color</h3>\n                    <color-picker :color="values.color" :changeCallback="setValue.bind(this,'color')"></color-picker>\n                </li>\n                <li v-if="visible.fontSize">\n                    <h3>font size</h3>\n                    <font-size-picker :fontSize="values.fontSize" :callback="setValue.bind(this,'fontSize')"></font-size-picker>\n                </li>\n                <li v-if="visible.fontStyle">\n                    <h3>font style</h3>\n                    <font-style-picker :fontStyle="values.fontStyle" :callback="setValue.bind(this,'fontStyle')"></font-style-picker>\n                </li>\n                <li v-if="visible.rotation">\n                    <h3>rotation</h3>\n                    <rotation-controls :change-callback="setValue.bind(this,'rotation')" :rotation="values.rotation"></rotation-controls>\n                </li>\n                <li v-if="visible.textAlign">\n                    <h3>text align</h3>\n                    <text-align-picker :textAlign="values.textAlign" :callback="setValue.bind(this,'textAlign')"></text-align-picker>\n                </li>\n                <li v-if="visible.shadow">\n                    <h3>shadow</h3>\n                    <shadow-level-picker :shadowLevel="values.shadow" :changeCallback="setValue.bind(this,'shadow')"></shadow-level-picker>\n                </li>\n                <li v-if="visible.lineWidth">\n                    <h3>line width</h3>\n                    <linewidth-picker :lineWidth="values.lineWidth" :changeCallback="setValue.bind(this,'lineWidth')" :lineWidthOptions="[0.025,0.05,0.075,0.1,0.125]"></linewidth-picker>\n                </li>\n                <li v-if="visible.lineDash">\n                    <h3>line style</h3>\n                    <line-dash-picker :lineDash="values.lineDash" :callback="setValue.bind(this,'lineDash')"></line-dash-picker>\n                </li>\n                <li v-if="visible.outlineColor">\n                    <h3>line color</h3>\n                    <color-picker :color="values.outlineColor" :changeCallback="setValue.bind(this,'outlineColor')"></color-picker>\n                </li>\n                <li>\n                    <h3>align</h3>\n                    <align-controls></align-controls>\n                </li>\n                <li v-if="visible.opacity">\n                    <h3>opacity</h3>\n                    <opacity-picker :opacity="values.opacity" :callback="setValue.bind(this, 'opacity')"></opacity-picker>\n                </li>\n                <li>\n                    <h3>layer</h3>\n                    <layer-selector :callback="setValue.bind(this, 'layerId')"></layer-selector>\n                </li>\n                <li>\n                    <h3>actions</h3>\n                    <delete-selected-button></delete-selected-button>       \n                </li>\n            </ul>\n        </div>\n    `,
        created: function() {
            this.$root.canvas.selectionManager.on("selection-change", this.refresh, this);
            this.refresh()
        },
        destroyed: function() {
            this.$root.canvas.selectionManager.off("selection-change", this.refresh, this)
        },
        data: function() {
            return {
                visible: {
                    color: false,
                    lineWidth: false,
                    lineDash: false,
                    fontSize: false,
                    fontStyle: false,
                    rotation: false,
                    textAlign: false,
                    shadow: false,
                    outlineColor: false,
                    opacity: false
                },
                values: {
                    color: null,
                    lineWidth: null,
                    lineDash: null,
                    fontSize: null,
                    fontStyle: {
                        bold: false,
                        italic: false
                    },
                    rotation: null,
                    textAlign: null,
                    shadow: null,
                    outlineColor: null,
                    opacity: null
                }
            }
        },
        methods: {
            refresh() {
                const objects = this.$root.canvas.selectionManager.selectedObjects;
                var i,
                    capability,
                    capabilities,
                    state;
                for (capability in this.$data.visible) {
                    this.$data.visible[capability] = true
                }
                for (i = 0; i < objects.length; i++) {
                    capabilities = capabilityRegistry.getForType(objects[i].type);
                    state = this.$root.state.getStateForId(objects[i].id);
                    for (capability in capabilities) {
                        if (capabilities[capability] === false) {
                            this.$data.visible[capability] = false
                        } else {
                            this.$data.values[capability] = state[capabilities[capability]]
                        }
                    }
                }
            },
            setValue(key, value, isTransient) {
                const objects = this.$root.canvas.selectionManager.selectedObjects;
                this.$root.state.startTransactionBlock(`Changing ${key} for ${objects.length} objects.`);
                this.$data.values[key] = value;
                var i,
                    transaction;
                for (var i = 0; i < objects.length; i++) {
                    transaction = {
                        id: objects[i].id,
                        isTransient: !!isTransient,
                        action: C.ACTIONS.UPDATE,
                        data: {}
                    };
                    transaction.data[capabilityRegistry.getForType(objects[i].type)[key]] = value;
                    this.$root.state.processTransaction(transaction)
                }
                this.$root.state.endTransactionBlock()
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const CAPABILITIES = {};
    function getBaseCapabilities() {
        return {
            color: false,
            lineWidth: false,
            lineDash: false,
            fontSize: false,
            fontStyle: false,
            rotation: false,
            textAlign: false,
            shadow: false,
            outlineColor: false,
            opacity: false,
            layerId: "layerId"
        }
    }
    exports.getForType = function(type) {
        const base = getBaseCapabilities();
        for (var key in CAPABILITIES[type]) {
            base[key] = CAPABILITIES[type][key]
        }
        return base
    };
    CAPABILITIES[C.TYPES.LINE_GROUP] = {
        color: "strokeStyle",
        lineWidth: "lineWidth",
        lineDash: "lineDash"
    };
    CAPABILITIES[C.TYPES.AREA] = {
        color: "fillColor",
        lineWidth: "lineWidth",
        shadow: "shadowLevel",
        outlineColor: "lineColor"
    };
    CAPABILITIES[C.TYPES.LABEL] = {
        color: "color",
        fontSize: "fontSize",
        fontStyle: "fontStyle",
        rotation: "rotation",
        textAlign: "textAlign",
        lineWidth: "outlineWidth",
        outlineColor: "outlineColor"
    };
    CAPABILITIES[C.TYPES.ICON] = {
        color: "color",
        fontSize: "fontSize",
        rotation: "rotation",
        lineWidth: "outlineWidth",
        outlineColor: "outlineColor"
    };
    CAPABILITIES[C.TYPES.IMAGE] = {
        rotation: "rotation"
    };
    CAPABILITIES[C.TYPES.COMPONENT] = {
        rotation: "rotation",
        opacity: "opacity"
    };
    CAPABILITIES[C.TYPES.WIDGET] = {
        rotation: "rotation"
    }
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const STYLES = __webpack_require__(5);
    const objectData = __webpack_require__(13);
    const config = __webpack_require__(1);
    const colorTools = __webpack_require__(15);
    Vue.component("multi-select-entries", {
        template: `\n        <div class="multi-select-entries">\n            <h3>{{selectedObjects.length}} objects selected</h3>\n            <ul>\n                <li \n                    v-for="obj in selectedObjects" \n                    @click="selectObject( obj.id )" \n                    @mouseover="highlightObject( obj.id )"\n                    @mouseout="unhighlightObject( obj.id )"\n                    :style="{color: obj.color, 'border-bottom-color': obj.color}"\n                \n                    >\n                    <i :class="obj.iconClass" v-if="obj.iconClass"></i>\n                    <img :src="obj.img" v-if="obj.img" />\n                    <span>{{obj.name}}</span>\n                </li>\n            </ul>\n        </div>\n    `,
        data() {
            return {
                selectedObjects: []
            }
        },
        created() {
            this.updateSelection();
            this.$root.canvas.selectionManager.on("selection-change", this.updateSelection, this)
        },
        destroyed() {
            this.$root.canvas.selectionManager.off("selection-change", this.updateSelection, this)
        },
        methods: {
            selectObject(id) {
                this.$root.canvas.selectionManager.clearCurrentSelection();
                this.$root.canvas.selectionManager.addObjectToSelection(this.$root.objects.getById(id))
            },
            highlightObject(id) {
                this.$root.canvas.selectionManager.selectedObjects.forEach(obj => {
                    obj.isSelected = obj.id === id;
                    obj.isHovered = obj.id === id
                });
                this.$root.canvas.interactionPlane.plane.scheduleRender()
            },
            unhighlightObject(id) {
                this.$root.canvas.selectionManager.selectedObjects.forEach(obj => {
                    obj.isSelected = true
                });
                this.$root.canvas.interactionPlane.plane.scheduleRender()
            },
            updateSelection() {
                this.$data.selectedObjects = this.$root.canvas.selectionManager.selectedObjects.map(this.mapObject.bind(this))
            },
            mapObject(obj) {
                const entry = {};
                const state = this.$root.state.getStateForId(obj.id);
                entry.id = obj.id;
                if (obj.type === C.TYPES.LINE_GROUP) {
                    entry.iconClass = ["fas", "fa-long-arrow-alt-right"];
                    entry.name = "line";
                    entry.color = state.strokeStyle
                } else if (obj.type === C.TYPES.AREA) {
                    entry.iconClass = ["fas", "fa-square"];
                    entry.name = "area";
                    entry.color = state.fillColor === STYLES.transparentColor ? state.lineColor : state.fillColor
                } else if (obj.type === C.TYPES.LABEL) {
                    entry.iconClass = ["fas", "fa-font"];
                    entry.name = state.text;
                    entry.color = state.color
                } else if (obj.type === C.TYPES.ICON) {
                    entry.iconClass = ["fas", "fa-star"];
                    entry.name = "icon";
                    entry.color = state.color
                } else if (obj.type === C.TYPES.IMAGE) {
                    entry.iconClass = ["fas", "fa-image"];
                    entry.name = "image";
                    entry.color = "#CCCCCC"
                } else if (obj.type === C.TYPES.WIDGET && state.widgetType === C.WIDGET_TYPES.CHART) {
                    entry.iconClass = ["fas", "fa-chart-line"];
                    entry.name = "chart";
                    entry.color = state.lineColor
                } else if (obj.type === C.TYPES.WIDGET && state.widgetType === C.WIDGET_TYPES.SCALE_GROUP) {
                    entry.iconClass = ["fas", "fa-arrows-alt-h"];
                    entry.name = "scaling group";
                    entry.color = state.fillColor === STYLES.transparentColor ? state.lineColor : state.fillColor
                } else if (obj.type === C.TYPES.COMPONENT) {
                    const componentConfig = objectData.getComponentConfig(state.componentId);
                    entry.iconClass = null;
                    entry.img = config.logoFolder + componentConfig.logoTexture;
                    entry.name = componentConfig.nameShort;
                    entry.color = "#" + componentConfig.primaryColor
                }
                if (colorTools.hexToHsl(entry.color).l < .4) {
                    entry.color = colorTools.adjustLightness(entry.color, .4, true)
                }
                return entry
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("linegroup-settings", {
        template: `\n        <div class="linegroup-settings settings-container">\n            <ul class="row-controls">\n                <li>\n                    <h3>Line Color</h3>\n                    <color-picker :color="strokeStyle" :changeCallback="setStrokeStyle"></color-picker>\n                </li>\n                <li>\n                    <h3>Line Width</h3>\n                    <linewidth-picker \n                        :lineWidth="lineWidth" \n                        :changeCallback="setLineWidth"\n                        :lineWidthOptions="[0.025,0.05,0.075,0.1,0.125]"\n                    ></linewidth-picker>\n                </li>\n                <li>\n                    <h3>arrows\n                        <help-link>\n                        You can also select individual line-endings to add arrows to. Just click the anchor point at the end of the line that you wish to turn into an arrow and you'll see this tool change to a single arrow.\n                        </help-link>\n                    </h3>\n                    <arrow-tip-controls :arrowAnchorIndices="arrowAnchorIndices" :callback="setArrows"></arrow-tip-controls>\n                </li>\n                <li>\n                    <h3>line style</h3>\n                    <line-dash-picker :lineDash="lineDash" :callback="setLineDash"></line-dash-picker>\n                </li>\n                <li>\n                    <h3>layer</h3>\n                    <layer-selector :id="linegroupId"></layer-selector>\n                </li>\n                <li>\n                    <h3>actions</h3>\n                    <delete-selected-button></delete-selected-button>\n                </li>\n            </ul>\n            <api-settings :id="linegroupId"></api-settings>\n        </div>\n    `,
        props: ["linegroupId"],
        created() {
            this.setLinegroupId(this.$props.linegroupId)
        },
        watch: {
            linegroupId: function(linegroupId) {
                this.setLinegroupId(linegroupId)
            }
        },
        data: function() {
            return {
                lineWidth: null,
                strokeStyle: null,
                arrowAnchorIndices: null,
                lineDash: null
            }
        },
        methods: {
            setStrokeStyle(strokeStyle, isTransient) {
                this.setData({
                    strokeStyle: strokeStyle
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("lineColor", strokeStyle)
                }
            },
            setLineWidth(lineWidth) {
                this.setData({
                    lineWidth: lineWidth
                });
                this.$root.userSettings.set("lineWidth", lineWidth)
            },
            setArrows(arrowAnchorIndices) {
                this.setData({
                    arrowAnchorIndices: arrowAnchorIndices
                })
            },
            setLineDash(lineDash) {
                this.setData({
                    lineDash: lineDash
                });
                this.$root.userSettings.set("lineDash", lineDash)
            },
            setData(data, isTransient) {
                this.$root.state.processTransaction({
                    action: C.ACTIONS.UPDATE,
                    type: C.TYPES.LINE_GROUP,
                    id: this.$props.linegroupId,
                    isTransient: !!isTransient,
                    data: data
                })
            },
            setLinegroupId(linegroupId) {
                const data = this.$root.state.getStateForId(linegroupId);
                this.$data.lineWidth = data.lineWidth;
                this.$data.strokeStyle = data.strokeStyle;
                this.$data.arrowAnchorIndices = data.arrowAnchorIndices;
                this.$data.lineDash = data.lineDash
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("label-settings", {
        template: `\n        <div class="label-settings settings-container">\n            <ul class="row-controls">\n                <li>\n                    <h3>Text</h3>\n                    <textarea \n                        rows="2" \n                        class="copyable" \n                        ref="labelText" \n                        v-model="labelText" \n                        @focus="onTextEntryStart" \n                        @blur="onTextEntryEnd" \n                        v-on:keyup.stop \n                        v-on:keydown.stop>\n                    </textarea>\n                </li>\n                <li>\n                    <h3>Color</h3>\n                    <color-picker :color="color" :changeCallback="setColor"></color-picker>\n                </li>\n                <li>\n                    <h3>font size</h3>\n                    <font-size-picker :fontSize="fontSize" :callback="setFontSize"></font-size-picker>\n                </li>\n                <li>\n                    <h3>font style</h3>\n                    <font-style-picker :fontStyle="fontStyle" :callback="setFontStyle"></font-style-picker>\n                </li>\n                <li>\n                    <h3>text rotation</h3>\n                    <rotation-controls :change-callback="setRotation" :rotation="rotation"></rotation-controls>\n                </li>\n                <li>\n                    <h3>text align</h3>\n                    <text-align-picker :textAlign="textAlign" :callback="setTextAlign"></text-align-picker>\n                </li>\n                <li>\n                    <h3>outline color</h3>\n                    <color-picker :color="outlineColor" :changeCallback="setOutlineColor"></color-picker>\n                </li>\n                <li>\n                    <h3>outline width</h3>\n                    <linewidth-picker \n                        :lineWidth="outlineWidth" \n                        :changeCallback="setOutlineWidth"\n                        :lineWidthOptions="[0.025,0.05,0.075,0.1,0.125]"\n                    ></linewidth-picker>\n                </li>\n                <li>\n                    <h3>layer</h3>\n                    <layer-selector :id="labelId"></layer-selector>\n                </li>\n                <li>\n                    <h3>actions</h3>\n                    <delete-selected-button></delete-selected-button>\n                </li>       \n            </ul>\n            <api-settings :id="labelId"></api-settings>            \n        </div>\n    `,
        props: ["labelId"],
        created: function() {
            this.setLabelId(this.$props.labelId)
        },
        mounted: function() {},
        watch: {
            labelId: function(id) {
                this.setLabelId(id)
            },
            labelText: function(newValue) {
                this.updateData({
                    text: newValue
                }, true)
            }
        },
        data: function() {
            return {
                color: null,
                fontSize: null,
                labelText: null,
                rotation: null,
                textAlign: null,
                fontStyle: {
                    bold: false,
                    italic: false
                },
                outlineColor: null,
                outlineWidth: null
            }
        },
        methods: {
            setLabelId(id) {
                const data = this.$root.state.getStateForId(id);
                this.$data.color = data.color;
                this.$data.labelText = data.text;
                this.$data.fontSize = data.fontSize;
                this.$data.rotation = data.rotation;
                this.$data.textAlign = data.textAlign;
                this.$data.outlineColor = data.outlineColor;
                this.$data.outlineWidth = data.outlineWidth;
                this.$data.fontStyle.bold = data.fontStyle.bold;
                this.$data.fontStyle.italic = data.fontStyle.italic
            },
            onTextEntryStart() {
                this.$root.state.startTransactionBlock("editing label text")
            },
            onTextEntryEnd() {
                this.$root.state.endTransactionBlock("editing label text");
                this.updateData({
                    text: this.$data.labelText
                })
            },
            setColor(color, isTransient) {
                this.$data.color = color;
                this.updateData({
                    color: color
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("labelFontColor", color)
                }
            },
            setOutlineColor(color, isTransient) {
                this.$data.outlineColor = color;
                this.updateData({
                    outlineColor: color
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("labelOutlineColor", color)
                }
            },
            setOutlineWidth(outlineWidth) {
                this.$data.outlineWidth = outerWidth;
                this.updateData({
                    outlineWidth: outlineWidth,
                    outlineWidth: outlineWidth
                });
                this.$root.userSettings.set("labelOutlineWidth", outlineWidth)
            },
            setFontSize(fontSize) {
                this.$data.fontSize = fontSize;
                this.updateData({
                    fontSize: fontSize
                });
                this.$root.userSettings.set("labelFontSize", fontSize)
            },
            setTextAlign(textAlign) {
                this.$data.textAlign = textAlign;
                this.updateData({
                    textAlign: textAlign
                });
                this.$root.userSettings.set("labelTextAlign", textAlign)
            },
            setFontStyle(fontStyle) {
                this.updateData({
                    fontStyle: this.$data.fontStyle
                });
                this.$root.userSettings.set("labelFontStyle", this.$data.fontStyle)
            },
            setRotation(degree) {
                this.$data.rotation = degree;
                this.updateData({
                    rotation: this.$data.rotation
                });
                this.$root.userSettings.set("labelRotation", this.$data.rotation)
            },
            updateData(data, isTransient) {
                this.$root.state.processTransaction({
                    id: this.$props.labelId,
                    action: C.ACTIONS.UPDATE,
                    isTransient: !!isTransient,
                    data: data
                })
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("icon-settings", {
        template: `\n        <div class="icon-settings settings-container">\n            <h3>Icon</h3>\n            <icon-picker :icon="icon" :changeCallback="setIcon"></icon-picker>\n            <ul class="row-controls">\n                <li>\n                    <h3>Color</h3>\n                    <color-picker :color="fontColor" :changeCallback="setFontColor"></color-picker>\n                </li>\n                <li>\n                    <h3>size</h3>\n                    <font-size-picker :fontSize="fontSize" :callback="setFontSize"></font-size-picker>\n                </li>\n                <li>\n                    <h3>rotation</h3>\n                    <rotation-controls :change-callback="setRotation" :rotation="rotation"></rotation-controls>\n                </li>\n                <li>\n                    <h3>outline width</h3>\n                    <linewidth-picker \n                        :lineWidth="outlineWidth" \n                        :changeCallback="setOutlineWidth"\n                        :lineWidthOptions="[0.015,0.025,0.05,0.75,0.1]"\n                    ></linewidth-picker>\n                </li>\n                <li>\n                    <h3>outline color</h3>\n                    <color-picker :color="outlineColor" :changeCallback="setOutlineColor"></color-picker>\n                </li>\n                <li>\n                    <h3>layer</h3>\n                    <layer-selector :id="id"></layer-selector>\n                </li>\n                <li>\n                    <h3>actions</h3>\n                    <delete-selected-button></delete-selected-button>\n                </li>\n            </ul>\n            <api-settings :id="id"></api-settings>           \n        </div>\n    `,
        props: ["id"],
        created: function() {
            this.setId(this.$props.id)
        },
        watch: {
            id: function(id) {
                this.setId(id)
            }
        },
        data: function() {
            return {
                fontColor: null,
                fontSize: null,
                rotation: null,
                icon: null,
                outlineColor: null,
                outlineWidth: null
            }
        },
        methods: {
            setId(id) {
                const data = this.$root.state.getStateForId(id);
                this.$data.fontColor = data.color;
                this.$data.fontSize = data.fontSize;
                this.$data.icon = data.icon;
                this.$data.rotation = data.rotation;
                this.$data.outlineColor = data.outlineColor;
                this.$data.outlineWidth = data.outlineWidth
            },
            setFontColor(color, isTransient) {
                this.$data.fontColor = color;
                this.updateData({
                    color: color
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("iconColor", color)
                }
            },
            setFontSize(fontSize) {
                this.$data.fontSize = fontSize;
                this.updateData({
                    fontSize: fontSize
                });
                this.$root.userSettings.set("iconFontSize", fontSize)
            },
            setOutlineColor(color, isTransient) {
                this.$data.outlineColor = color;
                this.updateData({
                    outlineColor: color
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("iconOutlineColor", color)
                }
            },
            setOutlineWidth(outlineWidth) {
                this.$data.outlineWidth = outerWidth;
                this.updateData({
                    outlineWidth: outlineWidth,
                    outlineWidth: outlineWidth
                });
                this.$root.userSettings.set("iconOutlineWidth", outlineWidth)
            },
            setIcon(icon) {
                this.$data.icon = icon;
                this.updateData({
                    icon: icon
                });
                this.$root.userSettings.set("icon", icon)
            },
            setRotation(rotation) {
                this.$data.rotation = rotation;
                this.updateData({
                    rotation: rotation
                });
                this.$root.userSettings.set("iconRotation", rotation)
            },
            updateData(data, isTransient) {
                this.$root.state.processTransaction({
                    id: this.$props.id,
                    action: C.ACTIONS.UPDATE,
                    isTransient: !!isTransient,
                    data: data
                })
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("area-settings", {
        template: `\n        <div class="linegroup-settings settings-container">\n            <ul class="row-controls">\n                <li>\n                    <h3>Area Type</h3>\n                    <area-type-picker :areaType="areaType" :callback="setAreaType"></area-type-picker>\n                </li>\n            \n\n                <li v-if="areaType===${C.AREA_TYPES.VPN}">\n                    <h3>VPC Wall Color</h3>\n                    <color-picker :color="wallColor" :changeCallback="setWallColor"></color-picker>\n                </li>\n                <li v-if="areaType===${C.AREA_TYPES.VPN}">\n                    <h3>VPC Wall Height</h3>\n                    <linewidth-picker :lineWidth="wallHeight" :changeCallback="setWallHeight" :lineWidthOptions="[0.5,1,2,4,6]"></linewidth-picker>\n                </li>\n                <li>\n                    <h3>Fill Color</h3>\n                    <color-picker :color="fillColor" :changeCallback="setFillColor"></color-picker>\n                </li>\n                <li>\n                    <h3>Line Color</h3>\n                    <color-picker :color="lineColor" :changeCallback="setLineColor"></color-picker>\n                </li>\n                <li>\n                    <h3>Line Width</h3>\n                    <linewidth-picker :lineWidth="lineWidth" :changeCallback="setLineWidth" :lineWidthOptions="[0.025,0.05,0.075,0.1,0.125]"></linewidth-picker>\n                </li>\n                <li>\n                    <h3>Shadow</h3>\n                    <shadow-level-picker :shadowLevel="shadowLevel" :changeCallback="setShadowLevel"></shadow-level-picker>\n                </li>\n                <li>\n                    <h3>Z Index</h3>\n                    <z-index-picker :zIndex="zIndex" :callback="setZIndex"></z-index-picker">\n                </li>\n                <li>\n                    <h3>layer</h3>\n                    <layer-selector :id="id"></layer-selector>\n                </li>\n                <li>\n                    <h3>actions</h3>\n                    <delete-selected-button></delete-selected-button>\n                </li>\n            </ul>\n            <api-settings :id="id"></api-settings>\n        </div>\n    `,
        props: ["id"],
        created() {
            this.setId(this.$props.id)
        },
        watch: {
            id: function(id) {
                this.setId(id)
            }
        },
        data: function() {
            return {
                lineWidth: null,
                lineColor: null,
                fillColor: null,
                shadowLevel: null,
                zIndex: null,
                areaType: null,
                wallColor: null,
                wallHeight: null
            }
        },
        methods: {
            setWallColor(wallColor, isTransient) {
                this.setData({
                    wallColor: wallColor
                }, isTransient)
            },
            setWallHeight(wallHeight) {
                this.setData({
                    wallHeight: wallHeight
                })
            },
            setLineColor(lineColor, isTransient) {
                this.setData({
                    lineColor: lineColor
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("areaLineColor", lineColor)
                }
            },
            setLineWidth(lineWidth) {
                this.setData({
                    lineWidth: lineWidth
                });
                this.$root.userSettings.set("areaLineWidth", lineWidth)
            },
            setFillColor(fillColor, isTransient) {
                this.setData({
                    fillColor: fillColor
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("areaFillColor", fillColor)
                }
            },
            setShadowLevel(shadowLevel) {
                this.setData({
                    shadowLevel: shadowLevel
                });
                this.$root.userSettings.set("areaShadowLevel", shadowLevel)
            },
            setAreaType(areaType) {
                this.setData({
                    areaType: areaType
                });
                this.$data.areaType = areaType
            },
            setZIndex(zIndex) {
                this.setData({
                    zIndex: zIndex
                })
            },
            setData(data, isTransient) {
                this.$root.state.processTransaction({
                    action: C.ACTIONS.UPDATE,
                    type: C.TYPES.AREA,
                    id: this.$props.id,
                    isTransient: !!isTransient,
                    data: data
                })
            },
            setId(id) {
                const data = this.$root.state.getStateForId(id);
                this.$data.lineWidth = data.lineWidth;
                this.$data.lineColor = data.lineColor;
                this.$data.fillColor = data.fillColor;
                this.$data.shadowLevel = data.shadowLevel;
                this.$data.zIndex = data.zIndex;
                this.$data.areaType = data.areaType !== undefined ? data.areaType : C.AREA_TYPES.STANDARD;
                this.$data.wallColor = data.wallColor !== undefined ? data.wallColor : "#CCCCCC";
                this.$data.wallHeight = data.wallHeight !== undefined ? data.wallHeight : 2
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("image-settings", {
        template: `\n        <div class="image-settings settings-container">\n            <h3>Image</h3>\n            <image-picker :imagePath="imagePath" :callback="setImagePath"></image-picker>\n            <h3>image dimensions</h3>\n            <ul class="option-list two-items">\n                <li :class="{active: stretchToSize}" @click="setStretchToSize( true )">\n                    fit to box\n                </li>\n                <li :class="{active: !stretchToSize}" @click="setStretchToSize( false )">\n                    keep aspect ratio\n                </li>\n            </ul>\n            <ul class="row-controls">\n                <li>\n                    <h3>rotation</h3>\n                    <rotation-controls :change-callback="setRotation" :rotation="rotation"></rotation-controls>\n                </li>\n                <li>\n                    <h3>layer</h3>\n                    <layer-selector :id="id"></layer-selector>\n                </li>\n                <li>\n                    <h3>actions</h3>\n                    <delete-selected-button></delete-selected-button>\n                </li>\n            </ul>\n            <api-settings :id="id"></api-settings>    \n        </div>\n    `,
        props: ["id"],
        created: function() {
            this.setId(this.$props.id);
            this.tempData = {}
        },
        watch: {
            id: function(id) {
                this.setId(id)
            }
        },
        data: function() {
            return {
                rotation: null,
                imagePath: null,
                stretchToSize: null
            }
        },
        methods: {
            setId(id) {
                if (id) {
                    const data = this.$root.state.getStateForId(id);
                    this.$data.rotation = data.rotation;
                    this.$data.imageUrl = data.imageUrl;
                    this.$data.stretchToSize = data.stretchToSize;
                    if (this.tempData && Object.keys(this.tempData).length > 0) {
                        this.updateData(this.tempData);
                        this.tempData = {}
                    }
                } else {
                    this.$data.rotation = this.$root.userSettings.get("imageRotation");
                    this.$data.imageUrl = this.$root.userSettings.get("imageUrl");
                    this.$data.stretchToSize = this.$root.userSettings.get("imageStretchToSize")
                }
            },
            setImagePath(imagePath) {
                this.$data.path = imagePath;
                this.updateData({
                    path: imagePath
                })
            },
            setStretchToSize(stretchToSize) {
                this.$data.stretchToSize = stretchToSize;
                this.updateData({
                    stretchToSize: stretchToSize
                });
                this.$root.userSettings.set("imageStretchToSize", stretchToSize)
            },
            setRotation(rotation) {
                this.$data.rotation = rotation;
                const data = this.$root.state.getStateForId(this.$props.id);
                const transactionData = {
                    rotation: rotation,
                    position: {},
                    dimensions: {}
                };
                transactionData.position.x = this.toEights(data.position.x + data.dimensions.width / 2 - data.dimensions.height / 2);
                transactionData.position.y = this.toEights(data.position.y + data.dimensions.height / 2 - data.dimensions.width / 2);
                transactionData.dimensions.width = this.toEights(data.dimensions.height);
                transactionData.dimensions.height = this.toEights(data.dimensions.width);
                this.updateData(transactionData);
                this.$root.userSettings.set("imageRotation", rotation)
            },
            toEights(val) {
                return Math.round(val * 8) / 8
            },
            updateData(data, isTransient) {
                if (this.$props.id) {
                    this.$root.state.processTransaction({
                        id: this.$props.id,
                        action: C.ACTIONS.UPDATE,
                        isTransient: !!isTransient,
                        data: data
                    })
                } else {
                    for (var key in data) {
                        this.tempData[key] = data[key]
                    }
                }
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("generic-settings", {
        template: `\n        <div class="generic settings-container">\n            <component-data-view\n                :id="id"\n                :showMetaData="false"\n                :isEditable="true"\n            ></component-data-view>\n            <ul class="row-controls">\n                <li>\n                    <h3>rotate</h3>\n                    <rotation-controls :rotation="rotation" :changeCallback="setRotation"></rotation-controls>\n                </li>\n                <li>\n                    <h3>Background Color</h3>\n                    <color-picker :color="backgroundColor" :changeCallback="setBackgroundColor"></color-picker>\n                </li>\n                <li v-if="hasAccentColor">\n                    <h3>Accent Color</h3>\n                    <color-picker :color="primaryColor" :changeCallback="setPrimaryColor"></color-picker>\n                </li>\n                <li>    \n                    <h3>opacity</h3>\n                    <opacity-picker :opacity="opacity" :callback="setOpacity"></opacity-picker>\n                </li>\n            </ul>\n            <div v-if="showImageSelector">\n                <h3>Logo</h3>\n                <ul class="option-list two-items">\n                    <li :class="{active:view === 'image'}" @click="view='image'">Image</li>\n                    <li :class="{active:view === 'icon'}" @click="view='icon'">Icon</li>\n                </ul>\n                <image-picker v-if="view === 'image'" :imagePath="imagePath" :callback="setImagePath"></image-picker>\n                <div v-if="view === 'icon'">\n                    <icon-picker :icon="icon" :changeCallback="setIcon"></icon-picker>\n                    <ul class="row-controls">\n                        <li>\n                            <h3>Icon Color</h3>\n                            <color-picker :color="iconColor" :changeCallback="setIconColor"></color-picker>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <li>\n                <h3>layer</h3>\n                <layer-selector :id="id"></layer-selector>\n            </li>\n            <plugin-panel :id="id"></plugin-panel>\n            <api-settings :id="id"></api-settings>\n            <h3>\n                Meta Data \n                <help-link>\n                    <p>\n                        Meta-Data is useful to associate arbitrary key-value pairs with a component - for instance its AWS Instance ID or state, a Docker image name etc.\n                    </p>\n                    <p>\n                        This allows you to find the component via the API as well as display the metadata as a label linked directly to the component.\n                    </p>\n                    <a href="/api-docs/meta-data/" target="_blank">\n                        Learn More\n                    </a>\n                </help-link>\n            </h3>\n            <key-value-editor data-key="meta" :id="id" :autosave="true"></key-value-editor>\n            <metadata-panel-controls :id="id"></metadata-panel-controls>\n        </div>\n    `,
        props: ["id"],
        created() {
            this.setId(this.$props.id)
        },
        watch: {
            id: function(id) {
                this.setId(id)
            }
        },
        data: function() {
            return {
                hasAccentColor: null,
                backgroundColor: null,
                primaryColor: null,
                imagePath: null,
                showImageSelector: true,
                view: "image",
                icon: null,
                iconColor: null,
                rotation: null,
                opacity: null
            }
        },
        methods: {
            setBackgroundColor(color) {
                this.$data.backgroundColor = color;
                this.setData({
                    backgroundColor: color
                });
                this.$root.userSettings.set("genericBackgroundColor", color)
            },
            setPrimaryColor(color) {
                this.$data.primaryColor = color;
                this.setData({
                    primaryColor: color
                });
                this.$root.userSettings.set("genericPrimaryColor", color)
            },
            setOpacity(opacity) {
                this.$data.opacity = opacity;
                this.setData({
                    opacity: opacity
                });
                this.$root.userSettings.set("componentOpacity", opacity)
            },
            setRotation(rotation) {
                this.$data.rotation = rotation;
                this.setData({
                    rotation: rotation
                })
            },
            setImagePath(imagePath) {
                this.$data.imagePath = imagePath;
                this.setData({
                    imagePath: imagePath,
                    icon: null
                })
            },
            setIcon(icon) {
                this.$data.icon = icon;
                this.setData({
                    imagePath: null,
                    icon: icon
                })
            },
            setIconColor(iconColor) {
                this.$data.iconColor = iconColor;
                this.setData({
                    iconColor: iconColor
                });
                this.$root.userSettings.set("genericIconColor", iconColor)
            },
            setData(data, isTransient) {
                this.$root.state.processTransaction({
                    action: C.ACTIONS.UPDATE,
                    type: C.TYPES.COMPONENT,
                    id: this.$props.id,
                    isTransient: !!isTransient,
                    data: data
                })
            },
            setId(id) {
                const data = this.$root.state.getStateForId(id);
                this.$data.primaryColor = data.primaryColor;
                this.$data.backgroundColor = data.backgroundColor;
                this.$data.imagePath = data.imagePath;
                this.$data.icon = data.icon;
                this.$data.iconColor = data.iconColor;
                this.$data.view = data.icon ? "icon" : "image";
                this.$data.rotation = data.rotation;
                this.$data.opacity = data.opacity;
                const model = this.$root.objects.getById(id).model;
                this.$data.showImageSelector = !model.disableImagePlane;
                this.$data.hasAccentColor = model.primaryColorFaces.length > 0
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    __webpack_require__(127);
    __webpack_require__(128);
    const WIDGET_TYPE_TO_SETTINGS = {
        [C.WIDGET_TYPES.CHART]: "widget-chart-settings",
        [C.WIDGET_TYPES.SCALE_GROUP]: "widget-scale-group-settings"
    };
    Vue.component("widget-settings", {
        template: `\n        <div class="widget-settings">\n            <ul class="widget-type" v-if="!id">\n                <li @click="addWidget('${C.WIDGET_TYPES.CHART}')">\n                    <i class="fas fa-chart-line"></i>\n                    chart\n                </li>\n                <li @click="addWidget('${C.WIDGET_TYPES.SCALE_GROUP}')">\n                    <i class="fas fa-arrows-alt-h"></i>\n                    Scaling Group\n                </li>\n            </ul>\n            <component  :is="settingsComponentName" :id="id"></component>\n        </div>\n    `,
        props: ["id"],
        created() {
            this.setId(this.$props.id)
        },
        watch: {
            id: function(id) {
                this.setId(id)
            }
        },
        data() {
            return {
                settingsComponentName: null
            }
        },
        methods: {
            addWidget(type) {
                this.$root.canvas.widgetManager.add(type)
            },
            setId(id) {
                if (id) {
                    this.$data.settingsComponentName = WIDGET_TYPE_TO_SETTINGS[this.$root.state.getStateForId(id).widgetType]
                } else {
                    this.$data.settingsComponentName = null
                }
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const MINUTE = 60;
    const HOUR = 60 * 60;
    const DAY = 60 * 60 * 24;
    Vue.component("widget-chart-settings", {
        template: `\n        <div class="widget-chart-settings settings-container">\n            <ul class="row-controls">\n                <li>\n                    <h3>\n                        Datasource\n                        <help-link class="top">\n                            <p>\n                                Decide where your chart gets its data from. If you choose API you'll have to set the chart's data property via <a href="http://localhost/api-docs/" target="_blank">Arcentry's REST API</a>.\n                            </p>\n                        </help-link>\n                    </h3>\n                    <ul class="option-list two-items">\n                        <li @click="setDataSource('api')" :class="{active: dataSource === 'api'}">API</li>\n                        <li @click="setDataSource('cloudwatch')" :class="{active: dataSource === 'cloudwatch'}">Cloudwatch</li>\n                    </ul>\n                </li>\n            </ul>\n            <monitoring-aws-cloudwatch-settings :id="id" :canAddEntries="false" ref="cloudwatchSettings"></monitoring-aws-cloudwatch-settings>\n            <ul class="row-controls">\n                <li>\n                    <h3>Y Axis Space</h3>\n                    <ul class="option-list two-items axis-space">\n                        <li class="checkbox-container">\n                            <checkbox label="auto" :value="yAxisSpace === 'auto'" :callback="setYAxisSpace"></checkbox">\n                        </li>\n                        <li class="input-container" @click="yAxisSpace='custom'" :class="{disabled:yAxisSpace === 'auto'}">\n                            <input type="text" placeholder="min" v-model="minY"/>\n                            <span>-</span>\n                            <input type="text" placeholder="max" v-model="maxY"/>\n                        </li>\n                    </ul>\n                </li>\n                <li v-if="refreshInterval">\n                    <h3>Refreshes Every</h3>\n                    <ul class="option-list two-items refresh-controls">\n                        <li class="refresh-interval">\n                            {{refreshInterval}}\n                        </li>\n                        <li @click="refreshChart" class="refresh-now">\n                            <i class="fas fa-sync-alt"></i>\n                            refresh now\n                        </li>\n                    </ul>\n                </li>\n                <li>\n                    <h3>Plot Type</h3>\n                    <ul class="option-list two-items flex">\n                        <li @click="setPlotType('line')" :class="{active: plotType==='line'}">\n                            <i class="fas fa-chart-line"></i>\n                            line\n                        </li>\n                        <li  @click="setPlotType('bar')" :class="{active: plotType==='bar'}">\n                            <i class="fas fa-chart-bar"></i>\n                            bar\n                        </li>\n                    </ul>\n                </li>\n                <li>\n                    <h3 v-if="plotType==='line'">Line Color</h3>\n                    <h3 v-if="plotType==='bar'">Bar Color</h3>\n                    <color-picker :color="lineColor" :changeCallback="setLineColor"></color-picker>\n                </li>\n                <li v-if="plotType==='line'">\n                    <h3>Fill Chart</h3>\n                    <checkbox :label="null" :value="fillChart" :callback="setFillChart"></checkbox">\n                </li>\n                <li>\n                    <h3>Show Labels</h3>\n                    <checkbox :label="null" :value="showLabels" :callback="setShowLabels"></checkbox">\n                </li>\n                <li>\n                    <h3>layer</h3>\n                    <layer-selector :id="id"></layer-selector>\n                </li>\n            </ul>\n            <api-settings :id="id"></api-settings>\n        </div>\n    `,
        props: ["id"],
        created() {
            this.updateRefreshIntervalFn = this.updateRefreshInterval.bind(this);
            this.setId(this.$props.id)
        },
        data() {
            return {
                dataSource: "api",
                lineColor: null,
                fillChart: true,
                showLabels: true,
                yAxisSpace: "auto",
                refreshInterval: null,
                plotType: null,
                minY: 0,
                maxY: 0
            }
        },
        watch: {
            id: function(id, oldId) {
                if (oldId) {
                    this.$root.objects.getById(oldId).extremesChangeCallback = null
                }
                this.setId(id)
            },
            minY: function() {
                this.setCustomExtremes()
            },
            maxY: function() {
                this.setCustomExtremes()
            }
        },
        beforeDestroy() {
            const chart = this.$root.objects.getById(this.$props.id);
            if (chart) {
                chart.extremesChangeCallback = null;
                this.removeRefreshIntervalListener()
            }
        },
        methods: {
            setId(id) {
                const state = this.$root.state.getStateForId(id);
                this.$data.dataSource = state.dataSource || "api";
                this.$data.lineColor = state.lineColor;
                this.$data.fillChart = state.fillChart;
                this.$data.showLabels = state.showLabels;
                this.$data.yAxisSpace = state.yAxisSpace || "auto";
                this.$data.minY = state.minY;
                this.$data.maxY = state.maxY;
                this.$data.plotType = state.plotType;
                this.$root.objects.getById(id).extremesChangeCallback = this.updateExtremes.bind(this);
                this.updateExtremes();
                this.updateRefreshInterval()
            },
            refreshChart() {
                this.$root.objects.getById(this.$props.id).dataSource.getData()
            },
            removeRefreshIntervalListener() {
                const chart = this.$root.objects.getById(this.$props.id);
                if (chart && chart.dataSource) {
                    chart.dataSource.removeListener("refreshIntervalChanged", this.updateRefreshIntervalFn)
                }
                this.$data.refreshInterval = null
            },
            updateRefreshInterval() {
                const chart = this.$root.objects.getById(this.$props.id);
                if (chart.dataSource && chart.dataSource.refreshInterval) {
                    if (!this.$data.refreshInterval) {
                        chart.dataSource.on("refreshIntervalChanged", this.updateRefreshIntervalFn)
                    }
                    this.$data.refreshInterval = this.formatInterval(chart.dataSource.refreshInterval)
                } else {
                    this.$data.refreshInterval = null
                }
            },
            formatInterval(seconds) {
                var amount,
                    unit;
                if (seconds < MINUTE) {
                    amount = seconds;
                    unit = "second"
                } else if (seconds < HOUR) {
                    amount = Math.floor(seconds / MINUTE);
                    unit = "minute"
                } else if (seconds < DAY) {
                    amount = Math.floor(seconds / HOUR);
                    unit = "hours"
                } else {
                    amount = Math.floor(seconds / DAY);
                    unit = "day"
                }
                if (amount === 1) {
                    return amount + " " + unit
                } else {
                    return amount + " " + unit + "s"
                }
            },
            setCustomExtremes() {
                if (this.$data.yAxisSpace === "auto") {
                    return
                }
                const minY = parseFloat(this.$data.minY);
                const maxY = parseFloat(this.$data.maxY);
                if (isNaN(minY) || isNaN(maxY)) {
                    return
                }
                if (minY > maxY) {
                    return
                }
                this.setData({
                    yAxisSpace: "custom",
                    minY: minY,
                    maxY: maxY
                })
            },
            updateExtremes() {
                if (this.$data.yAxisSpace === "custom") {
                    return
                }
                const chart = this.$root.objects.getById(this.$props.id);
                this.$data.minY = chart.formatLabel(chart.extremes.minY);
                this.$data.maxY = chart.formatLabel(chart.extremes.maxY)
            },
            setDataSource(dataSource) {
                if (dataSource === "api") {
                    this.removeRefreshIntervalListener();
                    this.$data.dataSource = dataSource;
                    this.setData({
                        dataSource: dataSource
                    })
                }
                if (dataSource === "cloudwatch") {
                    if (!this.$root.canvas.plugin.registry.getById("monitoring-aws-cloudwatch").isActive) {
                        const msg = "To use AWS Cloudwatch as a Chart Datasource, please first enable the Cloudwatch plugin in the API Tab.";
                        this.$root.$refs.sidebar.$refs.overlay.showWarning(msg);
                        return
                    }
                    this.$data.dataSource = dataSource;
                    this.setData({
                        dataSource: dataSource
                    });
                    this.$refs.cloudwatchSettings.addMetric();
                    this.updateRefreshInterval()
                }
            },
            setYAxisSpace(isAuto) {
                if (isAuto) {
                    this.$data.yAxisSpace = "auto";
                    this.setData({
                        yAxisSpace: "auto"
                    })
                } else {
                    this.$data.yAxisSpace = "custom";
                    this.setCustomExtremes()
                }
            },
            setLineColor(color, isTransient) {
                this.$data.lineColor = color;
                this.setData({
                    lineColor: color
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("widgetChartLineColor", color)
                }
            },
            setPlotType(plotType) {
                this.$data.plotType = plotType;
                this.setData({
                    plotType: plotType
                });
                this.$root.userSettings.set("widgetChartPlotType", plotType)
            },
            setFillChart(fillChart) {
                this.$data.fillChart = fillChart;
                this.setData({
                    fillChart: fillChart
                });
                this.$root.userSettings.set("widgetChartFillChart", fillChart)
            },
            setShowLabels(showLabels) {
                this.$data.showLabels = showLabels;
                this.setData({
                    showLabels: showLabels
                });
                this.$root.userSettings.set("widgetChartShowLabels", showLabels)
            },
            setData(data, isTransient) {
                this.$root.state.processTransaction({
                    id: this.$props.id,
                    action: C.ACTIONS.UPDATE,
                    isTransient: !!isTransient,
                    data: data
                })
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const config = __webpack_require__(1);
    Vue.component("widget-scale-group-settings", {
        template: `\n        <div class="widget-scale-group-settings settings-container">\n            <ul class="row-controls">\n                <li>\n                    <h3>component\n                    <help-link class="top">\n                        <p>\n                            To associate a component with this scaling group, <br />drag it into the highlighted rectangle.\n                        </p>\n                        <p>This will allow you to easily add and remove instance of this component.</p>\n                    </help-link>\n                    </h3>\n                    <div class="linked-component">\n                        <div class="no-linked-component" v-if="!linkedComponentId">\n                           no linked component\n                        </div>\n                        <div class="linked-component-info" v-if="linkedComponentId">\n                            <img :src="linkedComponentLogo" />\n                            <span>{{linkedComponentName}}</span>\n                        </div>\n                    </div>\n                </li>\n                <li v-if="linkedComponentId">\n                    <h3>Instance Count</h3>\n                    <number-picker :min="1" :max="maxInstances" :value="instanceCount" :callback="setInstanceCount"></number-picker>\n                </li>\n                <li>\n                    <h3>Fill Color</h3>\n                    <color-picker :color="fillColor" :changeCallback="setFillColor"></color-picker>\n                </li>\n                <li>\n                    <h3>Line Color</h3>\n                    <color-picker :color="lineColor" :changeCallback="setLineColor"></color-picker>\n                </li>\n                <li>\n                    <h3>Line Width</h3>\n                    <linewidth-picker :lineWidth="lineWidth" :changeCallback="setLineWidth" :lineWidthOptions="[0.025,0.05,0.075,0.1,0.125]"></linewidth-picker>\n                </li>\n                <li>\n                    <h3>Shadow</h3>\n                    <shadow-level-picker :shadowLevel="shadowLevel" :changeCallback="setShadowLevel"></shadow-level-picker>\n                </li>\n                <li>\n                    <h3>actions</h3>\n                    <delete-selected-button></delete-selected-button>\n                </li>\n                <li>\n                    <h3>layer</h3>\n                    <layer-selector :id="id"></layer-selector>\n                </li>\n            </ul>\n            <api-settings :id="id"></api-settings>\n        </div>\n    `,
        props: ["id"],
        created() {
            this.setId(this.$props.id)
        },
        watch: {
            id: function(id) {
                this.setId(id)
            }
        },
        data: function() {
            return {
                lineWidth: null,
                lineColor: null,
                fillColor: null,
                shadowLevel: null,
                zIndex: null,
                areaType: null,
                wallColor: null,
                wallHeight: null,
                linkedComponentId: null,
                linkedComponentName: null,
                linkedComponentColor: null,
                linkedComponentLogo: config.blankImagePath,
                maxInstances: 3,
                instanceCount: 1
            }
        },
        methods: {
            setLineColor(lineColor, isTransient) {
                this.setData({
                    lineColor: lineColor
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("widgetScaleGroupLineColor", lineColor)
                }
            },
            setLineWidth(lineWidth) {
                this.setData({
                    lineWidth: lineWidth
                });
                this.$root.userSettings.set("widgetScaleGroupLineWidth", lineWidth)
            },
            setFillColor(fillColor, isTransient) {
                this.setData({
                    fillColor: fillColor
                }, isTransient);
                if (!isTransient) {
                    this.$root.userSettings.set("widgetScaleGroupFillColor", fillColor)
                }
            },
            setShadowLevel(shadowLevel) {
                this.setData({
                    shadowLevel: shadowLevel
                });
                this.$root.userSettings.set("widgetScaleGroupShadowLevel", shadowLevel)
            },
            setInstanceCount(instanceCount) {
                this.setData({
                    instanceCount: instanceCount
                });
                this.$root.canvas.widgetManager.widgetScaleGroupLinkedComponentManager.updateLinkedComponents(this.$props.id)
            },
            setLinkedComponent() {
                this.$data.linkedComponentId = this.$root.canvas.widgetManager.widgetScaleGroupLinkedComponentManager.getLinkedComponentId(this.$props.id);
                if (this.$data.linkedComponentId === null) {
                    this.$data.linkedComponentName = config.blankImagePath;
                    this.$data.linkedComponentLogo = null;
                    this.$data.linkedComponentColor = null
                } else {
                    const linkedComponent = this.$root.objects.getById(this.$data.linkedComponentId);
                    this.$data.linkedComponentName = linkedComponent.config.name;
                    this.$data.linkedComponentLogo = config.logoFolder + linkedComponent.config.logoTexture;
                    this.$data.linkedComponentColor = linkedComponent.config.primaryColor
                }
                this.$root.canvas.widgetManager.widgetScaleGroupLinkedComponentManager.updateLinkedComponents(this.$props.id)
            },
            setData(data, isTransient) {
                this.$root.state.processTransaction({
                    action: C.ACTIONS.UPDATE,
                    type: C.TYPES.AREA,
                    id: this.$props.id,
                    isTransient: !!isTransient,
                    data: data
                })
            },
            setId(id) {
                const data = this.$root.state.getStateForId(id);
                this.$data.lineWidth = data.lineWidth;
                this.$data.lineColor = data.lineColor;
                this.$data.fillColor = data.fillColor;
                this.$data.shadowLevel = data.shadowLevel;
                this.$data.zIndex = data.zIndex;
                this.$data.instanceCount = data.instanceCount || 1;
                this.$data.maxInstances = Math.floor(data.dimensions.width / 1.5);
                this.setLinkedComponent()
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    __webpack_require__(130);
    __webpack_require__(28);
    __webpack_require__(131);
    const C = __webpack_require__(0);
    const VIEWS = {
        MY_DOCS: "mydocs",
        SHARED_WITH_ME_DOCS: "shareddocs"
    };
    Vue.component("file-panel", {
        template: `\n    <div>\n        <loading-overlay ref="overlay"></loading-overlay>\n        <div class="file-panel settings-container">\n            <div class="two-tabs">\n                <h3 :class="{active: activeView === '${VIEWS.MY_DOCS}'}" @click="activeView='${VIEWS.MY_DOCS}'">my diagrams ({{myDocCount}})</h3>\n                <h3 :class="{active: activeView === '${VIEWS.SHARED_WITH_ME_DOCS}'}" @click="activeView='${VIEWS.SHARED_WITH_ME_DOCS}'">shared with me ({{sharedDocCount}})</h3>\n            </div>\n            <div class="my-diagrams" v-if="activeView === '${VIEWS.MY_DOCS}'">\n                <search-input :searchCallback="applySearchTerm" placeholder="search documents..."></search-input>\n                <ul class="doc-list">\n                    <li \n                        class="folder" \n                        v-for="folder in docList"\n                        :key="folder.folderId"\n                        v-bind:class="{open: folder.isOpen}">\n                    \n                        <file-panel-entry\n                            :onclick="toggleFolderOpen"\n                            :label="folder.folderTitle"\n                            :id="folder.folderId"\n                            type="folder"\n                        ></file-panel-entry>\n\n                        <ul class="docs">\n                            <li \n                                class="doc" \n                                v-for="doc in folder.items" \n                                v-show="!doc.isHidden" \n                                :key="doc.id" \n                                v-on:click="setActiveDoc(doc.id)"\n                                v-bind:class="{active: activeDocId === doc.id }"\n                            >\n                                <file-panel-entry\n                                    :label="doc.title"\n                                    :id="doc.id"\n                                    type="doc"\n                                ></file-panel-entry>\n                            </li>\n                            <li class="add-doc">\n                                <div v-on:click="activateLabel(folder.folderId)" class="file-panel-new-entry">\n                                    <i class="fas fa-plus-square"></i>\n                                    <editable-label\n                                        event="none"\n                                        label="add new document"\n                                        :callback="createNewDocument"\n                                        :parentId="folder.folderId"\n                                    ></editable-label>\n                                </div>\n                            </li>\n                        </ul>\n                    </li>\n                    <li class="add-folder">\n                        <div v-on:click="activateLabel('folder')" class="file-panel-new-entry">\n                            <i class="fas fa-plus-square"></i>\n                            <editable-label\n                                event="none"\n                                label="add new folder"\n                                :callback="createNewFolder"\n                                parentId="folder"\n                            ></editable-label>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            <file-panel-shared-with-me ref="sharedWithMePanel"  v-if="activeView === '${VIEWS.SHARED_WITH_ME_DOCS}'" :docs="sharedWithMeDocs"></file-panel-shared-with-me>\n        </div>\n    </div>\n    `,
        created() {
            this.refreshListFn = this.refreshList.bind(this);
            this.$root.$on("init", this.init, this)
        },
        data() {
            return {
                docList: [],
                sharedWithMeDocs: [],
                activeDocId: null,
                myDocCount: null,
                sharedDocCount: null,
                activeView: VIEWS.MY_DOCS
            }
        },
        methods: {
            init() {
                this.refreshList(() => {
                    const lastActiveDocId = this.$root.userSettings.get("lastActiveDocId");
                    if (lastActiveDocId) {
                        if (this.getDocById(lastActiveDocId)) {
                            this.setActiveDoc(lastActiveDocId);
                            this.$data.activeView = VIEWS.MY_DOCS
                        } else {
                            this.$data.activeView = VIEWS.SHARED_WITH_ME_DOCS
                        }
                    } else {
                        this.setFallbackDoc()
                    }
                });
                this.$root.eventHub.on(C.NOTIFICATION_TYPES.SHARED_DOC, this.refreshList, this);
                this.$root.eventHub.on(C.NOTIFICATION_TYPES.DOC_STRUCTURE_CHANGE, this.refreshList, this)
            },
            getActiveDocTitle() {
                if (this.$data.activeDocId) {
                    return this.getDocById(this.$data.activeDocId).title
                } else if (this.$refs.sharedWithMePanel) {
                    return this.$refs.sharedWithMePanel.getActiveDocTitle()
                }
            },
            getDocById(docId) {
                return this.forEachDoc(doc => {
                    if (doc.id === docId) {
                        return doc
                    }
                })
            },
            forEachDoc(callback) {
                var i,
                    j,
                    returnVal;
                for (i = 0; i < this.$data.docList.length; i++) {
                    for (j = 0; j < this.$data.docList[i].items.length; j++) {
                        returnVal = callback(this.$data.docList[i].items[j]);
                        if (returnVal !== undefined) {
                            return returnVal
                        }
                    }
                }
            },
            makeHttpRequest(method, url, data, callback, msg) {
                this.$refs.overlay.showLoading(msg);
                this.$http[method](url, data || null).then(response => {
                    this.$refs.overlay.hide();
                    callback(response.body)
                }).catch(error => {
                    this.$refs.overlay.showWarning(error.toString())
                })
            },
            externalCreateDocument() {
                const folderId = this.openFolderForDoc(this.activeDocId);
                this.activateLabel(folderId)
            },
            refreshList(callback) {
                this.makeHttpRequest("get", "docs/list", null, data => {
                    var i,
                        j;
                    const folderState = {};
                    for (i = 0; i < this.$data.docList.length; i++) {
                        folderState[this.$data.docList[i].folderId] = this.$data.docList[i].isOpen
                    }
                    for (i = 0; i < data.folders.length; i++) {
                        if (typeof folderState[data.folders[i].folderId] === "undefined") {
                            data.folders[i].isOpen = false
                        } else {
                            data.folders[i].isOpen = folderState[data.folders[i].folderId]
                        }
                        for (j = 0; j < data.folders[i].items.length; j++) {
                            data.folders[i].items[j].isHidden = false
                        }
                    }
                    this.$data.docList = data.folders;
                    this.$data.sharedWithMeDocs = data.sharedDocs;
                    this.$data.myDocCount = this.countDocs();
                    this.$data.sharedDocCount = data.sharedDocs.length;
                    if (typeof callback === "function") {
                        callback()
                    }
                }, "loading documents")
            },
            applySearchTerm(searchTerm) {
                const term = searchTerm.trim().toLowerCase();
                var folder,
                    i,
                    foundMatch;
                for (folder in this.$data.docList) {
                    foundMatch = false;
                    for (i = 0; i < this.$data.docList[folder].items.length; i++) {
                        if (!term || term.length === 0) {
                            this.$data.docList[folder].items[i].isHidden = false
                        } else if (this.$data.docList[folder].items[i].title.toLowerCase().indexOf(term) === -1) {
                            this.$data.docList[folder].items[i].isHidden = true
                        } else {
                            this.$data.docList[folder].items[i].isHidden = false;
                            foundMatch = true
                        }
                    }
                    this.$data.docList[folder].isOpen = foundMatch
                }
            },
            activateLabel(parentId) {
                for (var i = 0; i < this.$children.length; i++) {
                    if (this.$children[i].isEditableLabel && this.$children[i].parentId === parentId) {
                        this.$children[i].startEdit()
                    }
                }
            },
            createNewFolder(title) {
                this.makeHttpRequest("post", "docs/create-folder", {
                    title: title
                }, this.refreshListFn, "creating folder")
            },
            countDocs() {
                var count = 0;
                this.forEachDoc(doc => {
                    count++
                });
                return count
            },
            createNewDocument(title, folderId) {
                if (!this.$root.accountData.get("isPayingUser")) {
                    if (this.countDocs() >= 3) {
                        this.$refs.overlay.showWarning("Sorry, but the free version of Arcentry is limited to only three documents. To get unlimited documents and items please upgrade to standard ($9.90 / month, cancel anytime)");
                        return
                    }
                }
                this.makeHttpRequest("post", "docs/create", {
                    title: title,
                    folderId: folderId
                }, responseData => {
                    this.refreshList(() => {
                        this.setActiveDoc(responseData.id)
                    })
                }, "creating document")
            },
            toggleFolderOpen(folderId) {
                const folder = this.getFolderById(folderId);
                folder.isOpen = !folder.isOpen
            },
            getFolderById(folderId) {
                for (var i = 0; i < this.$data.docList.length; i++) {
                    if (this.$data.docList[i].folderId === folderId) {
                        return this.$data.docList[i]
                    }
                }
            },
            deleteDocument(id, title) {
                if (this.countDocs() === 1) {
                    this.$refs.overlay.showWarning("Sorry, but you can't delete your only document. Please create another document first.");
                    return
                }
                this.$refs.overlay.confirm(`Are you sure you want to irrevocably delete document <b>${title}</b>?`, () => {
                    this.makeHttpRequest("post", "docs/delete", {
                        docId: id
                    }, () => {
                        this.refreshList()
                    }, "deleting document")
                })
            },
            deleteFolder(id, title) {
                if (this.countDocs() === 1 && this.getFolderById(id).items.length === 1) {
                    this.$refs.overlay.showWarning("Sorry, but you can't delete the folder containing your only document. Please create another document in another folder first.");
                    return
                }
                const folder = this.getFolderById(id);
                var confirmationMessage = `Are you sure you want to irrevocably delete folder <b>${title}</b>`;
                if (folder.items.length === 0) {
                    confirmationMessage += "?"
                } else if (folder.items.length === 1) {
                    confirmationMessage += ` as well as the document <b>${folder.items[0].title}</b> it contains?`
                } else if (folder.items.length > 1) {
                    var docList = folder.items.splice(0, folder.items.length - 1).map(item => {
                        return "<b>" + item.title + "</b>"
                    }).join(", ");
                    docList += " and <b>" + folder.items[folder.items.length - 1].title + "</b>";
                    confirmationMessage += ` as well as the documents ${docList} it contains?`
                }
                this.$refs.overlay.confirm(confirmationMessage, () => {
                    this.makeHttpRequest("post", "docs/delete-folder", {
                        folderId: id
                    }, () => {
                        this.refreshList()
                    }, "deleting folder")
                })
            },
            cloneDocument(id, title) {
                const titleparts = title.split("-");
                var newTitle;
                if (titleparts.length > 1 && !isNaN(titleparts[titleparts.length - 1])) {
                    titleparts[titleparts.length - 1] = parseInt(titleparts[titleparts.length - 1], 10) + 1;
                    newTitle = titleparts.join("-")
                } else {
                    newTitle = title + "-2"
                }
                this.makeHttpRequest("post", "docs/clone", {
                    title: newTitle,
                    originalDocId: id
                }, responseData => {
                    this.refreshList(() => {
                        this.setActiveDoc(responseData.id)
                    })
                }, "cloning document")
            },
            getAllDocIds() {
                const docIds = [];
                this.forEachDoc(doc => {
                    docIds.push(doc.id)
                });
                return docIds
            },
            setFallbackDoc() {
                console.info("Setting Fallback Doc");
                const docIds = this.getAllDocIds();
                if (docIds.length === 1) {
                    this.createNewDocument("recovery document", this.$data.docList[0].folderId)
                } else {
                    for (var i = 0; i < docIds.length; i++) {
                        if (this.activeDocId !== docIds[i]) {
                            this.setActiveDoc(docIds[i])
                        }
                    }
                }
            },
            setActiveDoc(docId) {
                this.$data.activeDocId = docId;
                this.$root.state.persistence.setActiveDocId(docId);
                this.$root.userSettings.set("lastActiveDocId", docId);
                if (this.$refs.sharedWithMePanel) {
                    this.$refs.sharedWithMePanel.$data.activeDocId = null
                }
                this.openFolderForDoc(docId)
            },
            openFolderForDoc(docId) {
                var folder,
                    i;
                for (folder in this.$data.docList) {
                    for (i = 0; i < this.$data.docList[folder].items.length; i++) {
                        if (this.$data.docList[folder].items[i].id === docId) {
                            this.$data.docList[folder].isOpen = true;
                            return this.$data.docList[folder].folderId
                        }
                    }
                }
            }
        }
    })
}, function(module, exports) {
    Vue.component("file-panel-entry", {
        template: `\n    <div class="file-panel-entry" v-on:click="onComponentClick">\n        <i v-if="type == 'doc'" class="fas fa-file"></i>\n        <i v-if="type == 'folder'" class="fas fa-folder" ></i>\n        <i v-if="type == 'folder'" class="fas fa-folder-open"></i>\n        <editable-label\n            event="dblClick"\n            :label="label"\n            :callback="setTitle"\n            :populateWithLabel="true"\n        ></editable-label>\n        <div class="context-menu-container" v-bind:class="{'show-context-menu':showContextMenu}">\n            <div class="trigger" v-on:click.stop="toggleContextMenu($event)">\n                <i class="fas fa-ellipsis-v"></i>\n            </div>\n            <ul class="context-menu" :class="[type]" >\n                <li v-if="type==='doc'" @click="cloneDoc">\n                    <i class="fas fa-copy"></i>\n                    <span>clone</span>\n                </li>\n                <li v-on:click="deleteEntry">\n                    <i class="fas fa-trash-alt"></i>\n                    <span>delete</span>\n                </li>\n            </ul>\n        </div>\n    </div>\n    `,
        props: ["label", "id", "type", "onclick"],
        data() {
            return {
                showContextMenu: false
            }
        },
        created() {
            this.toggleContextMenuFn = this.toggleContextMenu.bind(this)
        },
        methods: {
            setTitle(title) {
                const data = {
                    title: title
                };
                var url;
                if (this.$props.type === "doc") {
                    data.docId = this.$props.id;
                    url = "docs/update-doc-title"
                } else {
                    data.folderId = this.$props.id;
                    url = "docs/update-folder-title"
                }
                this.$parent.makeHttpRequest("post", url, data, res => {
                    this.$parent.refreshList()
                }, "renaming")
            },
            cloneDoc() {
                this.$parent.cloneDocument(this.$props.id, this.$data.title || this.$props.label)
            },
            toggleContextMenu(event) {
                if (this.$data.showContextMenu) {
                    document.getElementById("sidebar").removeEventListener("click", this.toggleContextMenuFn, false);
                    this.$data.showContextMenu = false
                } else {
                    document.getElementById("sidebar").addEventListener("click", this.toggleContextMenuFn, false);
                    this.$data.showContextMenu = true;
                    event.stopPropagation()
                }
            },
            deleteEntry() {
                if (this.$props.type === "doc") {
                    this.$parent.deleteDocument(this.$props.id, this.$data.title || this.$props.label)
                } else if (this.$props.type === "folder") {
                    this.$parent.deleteFolder(this.$props.id, this.$data.title || this.$props.label)
                }
            },
            onComponentClick() {
                if (this.$props.onclick) {
                    this.$props.onclick(this.$props.id)
                }
            }
        }
    })
}, function(module, exports) {
    Vue.component("file-panel-shared-with-me", {
        template: `\n        <div class="file-panel-shared-with-me">\n            <ul>\n                <li v-for="doc in sharedDocs" @click="loadDoc(doc.id)" :class="{active: activeDocId === doc.id}">\n                    <i class="fas fa-file"></i>\n                    <div>\n                        <em>{{doc.title}}</em>\n                        <span>Owned by {{doc.owner}}</span>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    `,
        props: ["docs"],
        data() {
            return {
                sharedDocs: null,
                activeDocId: null
            }
        },
        created() {
            this.setDocs();
            const activeDocId = this.$root.userSettings.get("lastActiveDocId");
            if (this.getDocById(activeDocId)) {
                this.loadDoc(activeDocId)
            }
        },
        watch: {
            docs: function() {
                this.setDocs()
            }
        },
        methods: {
            getActiveDocTitle() {
                return this.getActiveDoc(this.activeDocId).title
            },
            getDocById(id) {
                for (var i = 0; i < this.$data.sharedDocs.length; i++) {
                    if (this.$data.sharedDocs[i].id === id) {
                        return this.$data.sharedDocs[i]
                    }
                }
                return null
            },
            setDocs() {
                this.$data.sharedDocs = this.$props.docs.map(doc => {
                    doc.owner = this.getOwnerString(doc);
                    return doc
                })
            },
            getOwnerString(doc) {
                if (doc.name) {
                    return `${doc.name} (${doc.email})`
                } else if (doc.firstname || doc.lastname) {
                    return `${doc.firstname} ${doc.lastname} (${doc.email})`
                } else {
                    return doc.email
                }
            },
            loadDoc(docId) {
                this.$data.activeDocId = docId;
                this.$parent.$data.activeDocId = null;
                this.$root.state.persistence.setActiveDocId(docId);
                this.$root.userSettings.set("lastActiveDocId", docId)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const VIEW = {
        INITIAL: "initial",
        DOWNLOAD_IMAGE: "download-image",
        EMBED: "create-embed",
        LIVE_EMBED: "live-embed",
        JSON: "json",
        CSV: "csv"
    };
    const C = __webpack_require__(0);
    __webpack_require__(133);
    __webpack_require__(134);
    __webpack_require__(135);
    __webpack_require__(136);
    __webpack_require__(138);
    Vue.component("export-panel", {
        template: `\n        <div class="export-panel settings-container">\n            <div v-bind:class="{visible:view === '${VIEW.INITIAL}'}">\n                <h3>export</h3>\n                <ul class="exporters" >\n                    <li class="clickable" v-on:click="setView('${VIEW.DOWNLOAD_IMAGE}')">\n                        <i class="fas fa-fw fa-image"></i>\n                        <span>download as image</span>\n                    </li>\n                    <li class="clickable" v-on:click="setView('${VIEW.EMBED}')">\n                        <i class="fas fa-fw fa-code"></i>\n                        <span>static embed for websites</span>\n                    </li>\n                    <li class="clickable" :class="{inactive: isFreePlan}" v-on:click="setView('${VIEW.LIVE_EMBED}')">\n                        <div class="standard-plan-warning">*standard plan only</div>\n                        <i class="far fa-fw fa-caret-square-right"></i>\n                        <span>live embed for dashboards</span>\n                    </li>\n                    <li class="clickable" v-on:click="setView('${VIEW.JSON}')">\n                        <i class="json">{&nbsp;}</i>\n                        <span>download as JSON</span>\n                    </li>\n                    <li class="clickable" v-on:click="setView('${VIEW.CSV}')">\n                        <i class="fas fa-table"></i>\n                        <span>download as CSV for Spreadsheets</span>\n                    </li>\n                </ul>\n            </div>\n            <div v-bind:class="{visible:view === '${VIEW.DOWNLOAD_IMAGE}'}">\n                <download-image-exporter v-if="view === '${VIEW.DOWNLOAD_IMAGE}'"></download-image-exporter>\n            </div>\n            <div v-bind:class="{visible:view === '${VIEW.EMBED}'}">\n                <embed-exporter v-if="view === '${VIEW.EMBED}'"></embed-exporter>\n            </div>\n            <div v-bind:class="{visible:view === '${VIEW.LIVE_EMBED}'}">\n                <live-embed-exporter v-if="view === '${VIEW.LIVE_EMBED}'"></live-embed-exporter>\n            </div>\n            <div v-bind:class="{visible:view === '${VIEW.CSV}'}">\n                <csv-exporter v-if="view === '${VIEW.CSV}'"></csv-exporter>\n            </div>\n            <div v-bind:class="{visible:view === '${VIEW.JSON}'}">\n                <json-exporter v-if="view === '${VIEW.JSON}'"></json-exporter>\n            </div>\n        </div>\n    `,
        created() {
            this.$root.$on("view-changed", rootView => {
                if (rootView !== "export") {
                    this.setView(VIEW.INITIAL)
                }
            });
            this.$root.$on("init", () => {
                this.setPlan();
                this.$root.accountData.on("change", this.setPlan, this)
            })
        },
        data() {
            return {
                view: VIEW.INITIAL,
                isFreePlan: null
            }
        },
        methods: {
            setView: function(view) {
                this.$data.view = view
            },
            cancelCurrentView: function() {
                this.$data.view = VIEW.INITIAL
            },
            setPlan() {
                this.$data.isFreePlan = this.$root.accountData.get("paymentPlan") === C.PAYMENT_PLAN.FREE
            }
        }
    })
}, function(module, exports) {
    const QUALITIES = {
        .2: "very low",
        .4: "low",
        .6: "medium",
        .8: "high",
        1: "very high"
    };
    Vue.component("download-image-exporter", {
        template: `\n        <div class="download-image-exporter exporter">\n            <h4>\n                <i class="fas fa-image"></i>\n                <span>download as image</span>\n            </h4>\n            <h3>filename</h3>\n            <input type="text" v-model="filename" />\n            <h3>resolution (in px)</h3>\n            <div class="size">\n                <input type="text" :disabled="heightLocked" v-model="newImageWidth" />\n                <div \n                    class="toggle-lock btn" \n                    v-on:click="toggleLocks" \n                    v-bind:class="{'width-locked': widthLocked, 'height-locked': heightLocked}"\n                    :title="lockTitle"\n                >\n                    <i class="fas fa-caret-left width"></i>\n                    <i class="fas fa-fw fa-lock-open"></i>\n                    <i class="fas fa-fw fa-lock"></i>\n                    <i class="fas fa-caret-right height"></i>\n                </div>\n                <input type="text" :disabled="widthLocked" v-model="newImageHeight" />\n            </div>\n            <h3>format</h3>\n            <ul class="option-list two-items">\n                <li v-on:click="mimeType='image/png'" v-bind:class="{active: mimeType === 'image/png'}">png</li>\n                <li v-on:click="mimeType='image/jpeg'" v-bind:class="{active: mimeType === 'image/jpeg'}">jpg</li>\n            </ul>\n            <h3>settings</h3>\n            <div class="settings">\n                <checkbox label="show grid" :value="gridVisible" :callback="setGridVisibility"></checkbox>\n                <checkbox v-if="mimeType==='image/png'" label="transparent background" :value="transparentBackground" :callback="setBackgroundTransparency"></checkbox>                \n            </div>\n            <h3 v-if="mimeType === 'image/jpeg'">JPEG Quality ({{qualityText}})</h3>\n            <input v-if="mimeType === 'image/jpeg'" type="range" v-model="quality" min="0.2" max="1" step="0.2" />\n           \n            <div class="confirm-controls">\n                <div class="btn" v-on:click="cancel">cancel</div>\n                <div class="btn primary flat" v-on:click="createAndDownloadImage">\n                    <i class="fas fa-cloud-download-alt"></i>\n                    download\n                </div>\n            </div>\n            <div class="hint-panel">\n                All downloaded image are yours. Arcentry, Inc. reserves no copy- or other rights. \n                You are free to use and modify for both commercial and other purposes in any way you see fit.\n            </div>\n        </div>\n    `,
        created() {
            this.$root.$refs.imageAreaSelector.show();
            this.updateNewImageSizesFn = this.updateNewImageSizes.bind(this);
            this.$root.$refs.imageAreaSelector.$on("change", this.updateNewImageSizesFn);
            this.updateNewImageSizes()
        },
        mounted() {
            this.$root.$refs.imageAreaSelector.rectangle.setFromSerializable(this.$root.userSettings.get("exportDownloadAsImageSettings").rectangle);
            this.$root.$refs.imageAreaSelector.updatePosition();
            this.setGridVisibility(this.$root.userSettings.get("exportDownloadAsImageSettings").gridVisible)
        },
        destroyed() {
            this.$root.canvas.grid.mesh.visible = true;
            this.$root.$refs.imageAreaSelector.$off("change", this.updateNewImageSizesFn);
            this.$root.$refs.imageAreaSelector.hide()
        },
        data() {
            const settings = this.$root.userSettings.get("exportDownloadAsImageSettings");
            return {
                newImageWidth: settings.newImageWidth,
                newImageHeight: settings.newImageHeight,
                widthLocked: settings.widthLocked,
                heightLocked: settings.heightLocked,
                transparentBackground: settings.transparentBackground,
                mimeType: settings.mimeType,
                qualityText: "very high",
                quality: settings.quality,
                gridVisible: settings.gridVisible,
                filename: this.createInitialFileName(),
                lockTitle: "only adjust height while keeping width constant"
            }
        },
        watch: {
            newImageHeight: function() {
                this.updateNewImageSizes()
            },
            newImageWidth: function() {
                this.updateNewImageSizes()
            },
            quality: function(quality) {
                this.$data.qualityText = QUALITIES[quality.toString()]
            },
            mimeType: function(mimeType) {
                const lastDotIndex = this.$data.filename.lastIndexOf(".");
                var fileNameBase;
                if (lastDotIndex === -1) {
                    fileNameBase = this.$data.filename
                } else {
                    fileNameBase = this.$data.filename.substr(0, lastDotIndex)
                }
                if (mimeType === "image/jpeg") {
                    this.$data.filename = fileNameBase + ".jpg"
                } else {
                    this.$data.filename = fileNameBase + ".png"
                }
            }
        },
        methods: {
            createInitialFileName() {
                const docTitle = this.$root.$refs.sidebar.$refs.filePanel.getActiveDocTitle();
                return docTitle.toLowerCase().replace(/ /g, "-") + ".png"
            },
            cancel: function() {
                this.saveSettings();
                this.$parent.cancelCurrentView()
            },
            setGridVisibility(isVisible) {
                this.$root.canvas.grid.mesh.visible = isVisible;
                this.$data.gridVisible = isVisible
            },
            setBackgroundTransparency(isTransparent) {
                this.$data.transparentBackground = isTransparent
            },
            toggleLocks() {
                if (this.$data.widthLocked && !this.$data.heightLocked) {
                    this.$data.heightLocked = true;
                    this.$data.widthLocked = false;
                    this.$data.lockTitle = "only adjust width while keeping height constant"
                } else if (!this.$data.widthLocked && this.$data.heightLocked) {
                    this.$data.heightLocked = false;
                    this.$data.widthLocked = false;
                    this.$data.lockTitle = "adjust both widht and height"
                } else {
                    this.$data.heightLocked = false;
                    this.$data.widthLocked = true;
                    this.$data.lockTitle = "only adjust height while keeping width constant"
                }
            },
            updateNewImageSizes() {
                const r = this.$root.$refs.imageAreaSelector.rectangle;
                if (this.$data.widthLocked) {
                    this.$data.newImageHeight = Math.round(r.height * (this.$data.newImageWidth / r.width))
                } else if (this.$data.heightLocked) {
                    this.$data.newImageWidth = Math.round(r.width * (this.$data.newImageHeight / r.height))
                } else {
                    this.$root.$refs.imageAreaSelector.setAspectRatio(this.$data.newImageHeight / this.$data.newImageWidth)
                }
            },
            saveSettings() {
                this.$root.userSettings.set("exportDownloadAsImageSettings", {
                    newImageWidth: this.$data.newImageWidth,
                    newImageHeight: this.$data.newImageHeight,
                    widthLocked: this.$data.widthLocked,
                    heightLocked: this.$data.heightLocked,
                    transparentBackground: this.$data.transparentBackground,
                    mimeType: this.$data.mimeType,
                    quality: this.$data.quality,
                    gridVisible: this.$data.gridVisible,
                    rectangle: this.$root.$refs.imageAreaSelector.rectangle.getSerializable()
                })
            },
            createAndDownloadImage() {
                this.$parent.$parent.$refs.overlay.showLoading("Creating Image");
                this.$root.$refs.imageAreaSelector.flash();
                this.saveSettings();
                const imageDownloadSettings = {
                    srcRectangle: this.$root.$refs.imageAreaSelector.rectangle,
                    destWidth: this.$data.newImageWidth,
                    destHeight: this.$data.newImageHeight,
                    widthLocked: this.$data.widthLocked,
                    heightLocked: this.$data.heightLocked,
                    transparentBackground: this.$data.transparentBackground,
                    mimeType: this.$data.mimeType,
                    quality: this.$data.quality
                };
                setTimeout(() => {
                    this.$root.canvas.getBlob(imageDownloadSettings, this.downloadImage.bind(this))
                }, 50)
            },
            downloadImage(blob) {
                const a = document.createElement("a");
                const url = window.URL.createObjectURL(blob);
                a.style.display = "none";
                document.body.appendChild(a);
                a.href = url;
                a.download = this.$data.filename;
                a.click();
                window.URL.revokeObjectURL(url);
                a.remove();
                this.$parent.$parent.$refs.overlay.hide()
            }
        }
    })
}, function(module, exports) {
    Vue.component("embed-exporter", {
        template: `\n        <div class="embed-exporter exporter">\n            <h4>\n                <i class="fas fa-code"></i>\n                <span>embed in website</span>\n            </h4>\n            <h3>your embedded documents</h3>\n            <ul class="embedded-docs-list">\n                <li class="empty" v-if="docs.length === 0">\n                    <span>\n                        no embedded documents yet\n                    </span>\n                </li>\n                <li v-for="doc in docs" @click="showDoc( doc.id )">\n                    <div class="main">\n                        <span class="title">{{doc.title}}</span>\n                        <span class="date">{{doc.created | dateToLocaleString}}</span>\n                    </div>\n                    <span class="delete clickable" @click.stop="deleteDoc( doc.id, doc.title )">\n                        <i class="fas fa-trash"></i>\n                    </span>\n                </li>\n            </ul>\n            <h3>Create new: title</h3>\n            <input type="text" v-model="title" />\n            <div class="confirm-controls">\n                <div class="btn" v-on:click="cancel">cancel</div>\n                <div class="btn primary flat" v-on:click="create">\n                    <i class="fas fa-code"></i>\n                    create\n                </div>\n            </div>\n            <div class="hint-panel">\n                \n            </div>\n        </div>\n    `,
        data: function() {
            return {
                title: null,
                docs: []
            }
        },
        mounted: function() {
            this.refresh()
        },
        methods: {
            refresh() {
                this.$parent.$parent.$refs.overlay.showLoading("Loading embedded documents");
                this.$http.get("embed/list").then(res => {
                    this.$data.docs = res.body
                }).finally(() => {
                    this.$parent.$parent.$refs.overlay.hide()
                })
            },
            create() {
                if (!this.$data.title || this.$data.title.trim().length === 0) {
                    this.$parent.$parent.$refs.overlay.showWarning("Please enter a title");
                    return
                }
                this.$parent.$parent.$refs.overlay.showLoading("Creating embeddable document");
                const data = {
                    docId: this.$root.state.persistence.activeDocId,
                    title: this.$data.title,
                    settings: {
                        cameraPosition: this.$root.userSettings.get("cameraPosition"),
                        zoom: this.$root.userSettings.get("zoom")
                    }
                };
                this.$http.post("embed/create", data).then(res => {
                    this.$data.title = "";
                    this.$root.$refs.fullscreenOverlay.showEmbedPreview(res.body.id)
                }).finally(() => {
                    this.refresh()
                })
            },
            showDoc(id) {
                this.$root.$refs.fullscreenOverlay.showEmbedPreview(id)
            },
            deleteDoc(id, title) {
                this.$parent.$parent.$refs.overlay.confirm("Are you sure you want to delete document " + title + "?", () => {
                    this.$parent.$parent.$refs.overlay.showLoading("deleting document " + title);
                    this.$http.post("embed/delete", {
                        id: id
                    }).finally(() => {
                        this.$parent.$parent.$refs.overlay.hide();
                        this.refresh()
                    })
                })
            },
            cancel: function() {
                this.$parent.cancelCurrentView()
            }
        }
    })
}, function(module, exports) {
    Vue.component("live-embed-exporter", {
        template: `\n        <div class="live-embed-exporter">\n            <div class="api-header">\n                <toggle-switch :enabled="enabled" :callback="setEnabled" />\n                <label :class="{enabled: enabled}" @click="setEnabled( !enabled )">\n                    <span v-if="enabled">Life Embed Enabled</span>\n                    <span v-if="!enabled">Life Embed Disabled</span>\n                </label>\n            </div>\n            <div class="embed-url" v-if="enabled">\n                <h3>Use this URL in an iFrame or Browser window to embed your diagram</h3>\n                <span class="copyable">http://localhost/app/embed.html?id={{docId}}&key={{liveEmbedKey}}&live=true&camera={{cameraSettings}}&hideViewControls={{embedViewControls?0:1}}</span>\n            </div>\n            <checkbox v-if="enabled" label="show view controls in embed" :value="embedViewControls" :callback="setEmbedViewControls"></checkbox>\n            <div class="explanation">\n                <p>Live Embeds allow you to framelessly embed Arcentry diagrams directly into monitoring dashboards, overview screens, iframes or other third-party apps. Live Embeds update in realtime whenever the underlying diagram changes.</p>\n                <p>Please note: You can have up to five live embeds open per document. If you are looking to embed an Arcentry diagram into a page with more parallel views, e.g. a Blogpost please use the static embed feature.</p>\n            </div>\n        </div>\n    `,
        data() {
            return {
                enabled: false,
                docId: this.$root.userSettings.get("lastActiveDocId"),
                liveEmbedKey: null,
                cameraSettings: null,
                embedViewControls: true
            }
        },
        created() {
            this.updateDocumentData();
            this.updateCameraSettings();
            this.$root.state.meta.on("doc-meta-changed", this.setDocumentData, this);
            this.$root.canvas.camera.on("change", this.updateCameraSettings, this)
        },
        destroyed() {
            this.$root.state.meta.off("doc-meta-changed", this.setDocumentData, this);
            this.$root.canvas.camera.off("change", this.updateCameraSettings, this)
        },
        methods: {
            setEmbedViewControls(showViewControls) {
                this.$data.embedViewControls = showViewControls
            },
            updateDocumentData() {
                this.$data.enabled = this.$root.state.meta.docMeta.liveEmbedEnabled;
                this.$data.liveEmbedKey = this.$root.state.meta.docMeta.liveEmbedKey;
                this.$data.docId = this.$root.state.meta.docMeta.id
            },
            updateCameraSettings() {
                this.$data.cameraSettings = canvas.camera.persistence.toHash()
            },
            round(val) {
                return Math.round(val * 1e5) / 1e5
            },
            setEnabled(isEnabled) {
                if (isEnabled) {
                    this.storeEnabled(true)
                } else {
                    const msg = `This will disable all current live embed URLs for this document. \n                Please note: If you re-enable live embeds again later, the key will have changed and you\n                will have to update your old URLs for this document`;
                    this.$root.$refs.sidebar.$refs.overlay.confirm(msg, () => {
                        this.storeEnabled(false)
                    })
                }
            },
            storeEnabled(isEnabled) {
                if (isEnabled) {
                    this.$root.$refs.sidebar.$refs.overlay.showLoading("Enabling live embed")
                } else {
                    this.$root.$refs.sidebar.$refs.overlay.showLoading("Disabling live embed")
                }
                this.$http.post("embed/set-live-embed", {
                    docId: this.$root.userSettings.get("lastActiveDocId"),
                    liveEmbedEnabled: isEnabled
                }).then(res => {
                    this.$data.enabled = isEnabled;
                    this.$data.liveEmbedKey = res.body.key;
                    this.$root.$refs.sidebar.$refs.overlay.hide();
                    this.updateCameraSettings()
                })
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const tools = __webpack_require__(4);
    __webpack_require__(137);
    Vue.component("csv-exporter", {
        template: `\n        <div class="csv-exporter exporter">\n            <csv-exporter-column-settings ref="columnSettings"></csv-exporter-column-settings>\n            <h4>\n                <i class="fas fa-table"></i>\n                <span>Download as CSV for Spreadsheets</span>\n            </h4>\n            <h3>Preview</h3>\n            <div class="preview">\n                <table>\n                    <thead>\n                        <tr>\n                            <th v-for="(column, name) in columns" @click="callMenu($event, name)">\n                                <span>{{column.label}}</span>\n                                <i class="fas fa-ellipsis-v"></i>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr v-for="row in rows">\n                            <td v-for="entry in row" :class="{active: entry.isActive}">{{entry.value}}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class="btn-row">\n                <div class="btn" @click="cancel">\n                    <i class="fas fa-times"></i>\n                    <span>cancel</span>\n                </div>\n                <div class="btn" @click="reset">\n                    <i class="fas fa-undo"></i>\n                    <span>clear all filters</span>\n                </div>\n                <div class="btn primary" @click="downloadAsCSV">\n                    <i class="fas fa-cloud-download-alt"></i>\n                    <span>download as csv</span>\n                </div>\n            </div>\n        </div>\n    `,
        mounted() {
            this.createTable();
            this.loadConfig();
            this.applyFilters()
        },
        data() {
            return {
                columns: {},
                rows: []
            }
        },
        methods: {
            reset() {
                this.$root.$refs.sidebar.$refs.overlay.confirm("Are you sure you want to reset any changes made to this CVS preview?", () => {
                    this.createTable();
                    this.applyFilters();
                    this.saveConfig()
                })
            },
            cancel() {
                this.$parent.cancelCurrentView()
            },
            downloadAsCSV() {
                const data = [];
                var columnName,
                    col,
                    row,
                    rowValues = [];
                for (var columnName in this.$data.columns) {
                    if (this.$data.columns[columnName].isExcluded) {
                        continue
                    }
                    rowValues.push(this.formatForCsv(this.$data.columns[columnName].label))
                }
                data.push(rowValues);
                for (row = 0; row < this.$data.rows.length; row++) {
                    rowValues = [];
                    for (col = 0; col < this.$data.rows[row].length; col++) {
                        if (this.$data.rows[row][col].isActive) {
                            rowValues.push(this.formatForCsv(this.$data.rows[row][col].value))
                        }
                    }
                    if (rowValues.length > 0) {
                        data.push(rowValues)
                    }
                }
                const fileName = this.$root.$refs.sidebar.$refs.filePanel.getActiveDocTitle().toLowerCase().replace(/ /g, "-") + ".csv";
                const content = data.map(row => {
                    return row.join(",")
                }).join("\n");
                tools.downloadAsFile(fileName, content, "text/csv")
            },
            formatForCsv(value) {
                if (value === null) {
                    return ""
                }
                if (!isNaN(value)) {
                    return value
                }
                return '"' + value.toString().replace(/\"/g, '\\"') + '"'
            },
            filterByValue(columnName, value, show) {
                const index = this.$data.columns[columnName].excludeRowsWhereValueIs.indexOf(value);
                if (show && index > -1) {
                    this.$data.columns[columnName].excludeRowsWhereValueIs.splice(index, 1)
                } else if (!show && index === -1) {
                    this.$data.columns[columnName].excludeRowsWhereValueIs.push(value)
                }
                this.applyFilters();
                this.saveConfig()
            },
            loadConfig() {
                conf = this.$root.state.meta.load("csv-export-config");
                for (var columnName in conf) {
                    this.$data.columns[columnName].excludeRowsWhereValueIs = conf[columnName].excludeRowsWhereValueIs;
                    this.$data.columns[columnName].isExcluded = conf[columnName].isExcluded;
                    this.$data.columns[columnName].label = conf[columnName].label
                }
            },
            saveConfig() {
                const config = {};
                for (var key in this.$data.columns) {
                    config[key] = {
                        excludeRowsWhereValueIs: this.$data.columns[key].excludeRowsWhereValueIs,
                        isExcluded: this.$data.columns[key].isExcluded,
                        label: this.$data.columns[key].label
                    }
                }
                this.$root.state.meta.save("csv-export-config", config)
            },
            applyFilters() {
                const excludedColumnIndices = [];
                const excludedRowIndices = [];
                const columns = tools.deepClone(this.$data.columns);
                const rows = tools.deepClone(this.$data.rows);
                var columnName,
                    column,
                    row,
                    col = 0;
                for (columnName in columns) {
                    column = columns[columnName];
                    if (column.isExcluded) {
                        excludedColumnIndices.push(col)
                    }
                    for (row = 0; row < rows.length; row++) {
                        if (column.excludeRowsWhereValueIs.includes(rows[row][col].value)) {
                            excludedRowIndices.push(row)
                        }
                    }
                    col++
                }
                for (row = 0; row < rows.length; row++) {
                    for (col = 0; col < rows[row].length; col++) {
                        rows[row][col].isActive = !excludedColumnIndices.includes(col) && !excludedRowIndices.includes(row)
                    }
                }
                this.$data.rows = rows
            },
            setColumnIncluded(columnName, isIncluded) {
                this.$data.columns[columnName].isExcluded = !isIncluded;
                this.applyFilters();
                this.saveConfig()
            },
            setLabel(columnName, label) {
                if (this.$data.columns[columnName].label === label) {
                    return
                }
                this.$data.columns[columnName].label = label;
                this.saveConfig()
            },
            forEachEntry(callback) {
                var row,
                    col;
                for (row = 0; row < this.$data.rows.length; row++) {
                    for (col = 0; col < this.$data.rows[row].length; col++) {
                        callback(col, row, this.$data.rows[row][col])
                    }
                }
            },
            getColumnIndex(columnName) {
                var i = 0;
                for (var name in this.$data.columns) {
                    if (name === columnName) {
                        return i
                    }
                    i++
                }
                return null
            },
            createTable() {
                const state = tools.deepClone(this.$root.state.data);
                this.updateColumns(state);
                this.updateRows(state)
            },
            callMenu(event, columnName) {
                const iconElement = event.currentTarget.getElementsByTagName("i")[0];
                this.$refs.columnSettings.showFor(iconElement, columnName)
            },
            createColumnConfig(label, path) {
                return {
                    label: label,
                    path: path || [],
                    uniqueValues: [],
                    excludeRowsWhereValueIs: [],
                    isExcluded: false
                }
            },
            updateColumns(state) {
                const columns = {
                    id: this.createColumnConfig("id"),
                    type: this.createColumnConfig("type", ["type"])
                };
                var id,
                    key,
                    subKey;
                for (id in state) {
                    if (id.startsWith("meta")) {
                        continue
                    }
                    for (var key in state[id].data) {
                        if (columns[key]) {
                            continue
                        }
                        if (typeof state[id].data[key] !== "object") {
                            columns[key] = this.createColumnConfig(key, ["data", key]);
                            continue
                        }
                        for (subKey in state[id].data[key]) {
                            columns[key + "-" + subKey] = this.createColumnConfig(key + "-" + subKey, ["data", key, subKey])
                        }
                    }
                }
                this.$data.columns = columns
            },
            updateRows(state) {
                var id,
                    columnName,
                    row,
                    rows = [],
                    value;
                const columns = tools.deepClone(this.$data.columns);
                for (id in state) {
                    if (id.startsWith("meta")) {
                        continue
                    }
                    row = [];
                    for (columnName in columns) {
                        if (columnName === "id") {
                            row.push({
                                value: id,
                                isActive: true
                            });
                            continue
                        }
                        value = this.getValue(columns[columnName].path, state[id]);
                        row.push({
                            value: value,
                            isActive: true
                        });
                        if (!columns[columnName].uniqueValues.includes(value)) {
                            columns[columnName].uniqueValues.push(value)
                        }
                    }
                    rows.push(row)
                }
                this.$data.columns = columns;
                this.$data.rows = rows
            },
            getValue(path, obj) {
                var node = obj,
                    i;
                for (i = 0; i < path.length; i++) {
                    if (node[path[i]]) {
                        node = node[path[i]]
                    } else {
                        return null
                    }
                }
                return node
            }
        }
    })
}, function(module, exports) {
    Vue.component("csv-exporter-column-settings", {
        template: `\n        <div class="csv-exporter-column-settings" :class="{show: isVisible}" :style="{left:left + 'px', top: top + 'px'}">\n            <div class="tip">\n                <div></div>\n            </div>\n            <h3 class="first">column name</h3>\n            <input type="text" v-model="columLabel" ref="inputElement"/>\n            <checkbox label="include in output" :value="isIncluded" :callback="setIncluded"></checkbox>\n            <h3>only include rows where value is</h3>\n            <checkbox :key="value" :value="isSelected" v-for="(isSelected, value) in values" :label="value" :callback="setValue.bind(this, value)"></checkbox>\n        </div>\n    `,
        props: [""],
        data() {
            return {
                top: 0,
                left: 0,
                isVisible: false,
                isIncluded: true,
                values: {},
                columLabel: null
            }
        },
        watch: {
            columLabel(val) {
                this.$parent.setLabel(this.columnName, val)
            }
        },
        created() {
            this.hideFn = this.hide.bind(this)
        },
        methods: {
            setValue(value, show) {
                this.$parent.filterByValue(this.columnName, value, show)
            },
            setIncluded(isIncluded) {
                this.$parent.setColumnIncluded(this.columnName, isIncluded)
            },
            showFor(element, columnName) {
                const rect = element.getBoundingClientRect();
                this.$data.left = rect.left;
                this.$data.top = rect.top;
                this.$data.isVisible = true;
                this.columnName = columnName;
                const values = {};
                const column = this.$parent.columns[columnName];
                this.$data.isIncluded = !column.isExcluded;
                this.$data.columLabel = column.label;
                for (var i = 0; i < column.uniqueValues.length; i++) {
                    values[column.uniqueValues[i]] = !column.excludeRowsWhereValueIs.includes(column.uniqueValues[i])
                }
                this.$data.values = values;
                window.addEventListener("click", this.hideFn, true)
            },
            hide(e) {
                const path = e.path || e.composedPath && e.composedPath();
                if (path.includes(this.$el)) {
                    return
                }
                if (document.activeElement === this.$refs.inputElement) {
                    return
                }
                this.$data.isVisible = false;
                window.removeEventListener("click", this.hideFn, true)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const tools = __webpack_require__(4);
    Vue.component("json-exporter", {
        template: `\n        <div class="json-exporter exporter">\n            <h4>\n                <em>{&nbsp;}</em>\n                <span>Download as CSV for Spreadsheets</span>\n            </h4>\n            <h3>Preview</h3>\n            <textarea>\n                {{jsonOutput}}\n            </textarea>\n            <div class="btn-row">\n                <div class="btn" @click="cancel">\n                    <i class="fas fa-times"></i>\n                    <span>Cancel</span>\n                </div>\n                <div class="btn primary" @click="downloadAsJson">\n                    <i class="fas fa-cloud-download-alt"></i>\n                    <span>Download as JSON</span>\n                </div>\n            </div>\n        </div>`,
        data() {
            return {
                jsonOutput: null
            }
        },
        mounted() {
            this.$data.jsonOutput = JSON.stringify(this.getJSON(), null, "  ")
        },
        methods: {
            downloadAsJson() {
                const fileName = this.$root.$refs.sidebar.$refs.filePanel.getActiveDocTitle().toLowerCase().replace(/ /g, "-") + ".json";
                const content = JSON.stringify(this.getJSON());
                tools.downloadAsFile(fileName, content, "application/json")
            },
            cancel() {
                this.$parent.cancelCurrentView()
            },
            getJSON() {
                const data = tools.deepClone(this.$root.state.data);
                for (var key in data) {
                    delete data[key].stableData
                }
                return data
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    __webpack_require__(140);
    __webpack_require__(141);
    __webpack_require__(142);
    __webpack_require__(143);
    __webpack_require__(144);
    __webpack_require__(145);
    __webpack_require__(146);
    __webpack_require__(148);
    const C = __webpack_require__(0);
    Vue.component("account-panel", {
        template: `\n        <div class="account-panel ">\n            <div class="account-header">\n                <div class="user-img">\n                    <i class="fas fa-user"></i>\n                </div>\n                \n                <div class="name">\n                    <h2>{{name}}</h2>\n                    <h3>{{email}}</h3>\n                </div>\n            </div>\n\n            <div class="settings-container">\n                \x3c!--\n                <stripe-payment v-if="!isPaid"></stripe-payment>\n\n                <div v-if="isPaid && !isFreeAccount" class="your-plan">\n                    <h3>Your Plan</h3>\n                    <p>\n                        You've subscribed to Arcentry's standard plan on {{subscribedToPaidDate}} - thanks so much! Your registered payment\n                        source will be charged $9.90 the next time on {{nextChargeDate}}.  \n                    </p>\n                    <p>\n                        We'd be sad to see you go, but if you wish you can downgrade to the free plan by <span @click="cancelPaidPlan">clicking here</span>.\n                    </p>\n                </div>\n                --\x3e\n                <div class="is-free-account" v-if="isPaid && isFreeAccount">\n                    <i class="fas fa-heart"></i>\n                    <h3>Hurray!</h3>\n                    <p>This is a free account - it has all the features of a paid account - minus the actual payment. Isn't life awesome?</p>\n                </div>\n\n                <ul class="accordeon">\n                    <accordeon-entry title="Change Password" v-if="createdWith === 'arcentry'">\n                        <change-password></change-password>\n                    </accordeon-entry>\n                    <accordeon-entry title="Change Email Address" v-if="createdWith === 'arcentry'">\n                        <change-email></change-email>\n                    </accordeon-entry>\n                    <accordeon-entry title="Switch to regular account" v-if="createdWith !== 'arcentry'">\n                        <change-to-regular-account></change-to-regular-account>\n                    </accordeon-entry>\n                    <accordeon-entry title="Change Invoice Address" v-if="isPaid && !isFreeAccount">\n                        <change-billing-address></change-billing-address>\n                    </accordeon-entry>\n                    <accordeon-entry title="Change Credit Card" v-if="isPaid && !isFreeAccount">\n                        <change-card-details></change-card-details>\n                    </accordeon-entry>\n                    <accordeon-entry title="view invoices" v-if="isPaid && !isFreeAccount">\n                        <stripe-payment-history view="invoices"></stripe-payment-history>\n                    </accordeon-entry>\n                    <accordeon-entry title="view payments" v-if="isPaid && !isFreeAccount">\n                        <stripe-payment-history view="charges"></stripe-payment-history>\n                    </accordeon-entry>\n                    <accordeon-entry title="delete account" >\n                        <p>To irrevocably delete this account and all its data, click the button below:</p>\n                        <br />\n                        <div class="delete-account btn" @click="deleteAccount">\n                            <i class="far fa-trash-alt"></i>\n                            delete account\n                        </div>\n                    </accordeon-entry>\n                </ul>\n\n               \n                <div class="logout btn" @click="logout">\n                    <i class="fas fa-power-off"></i>\n                    logout\n                </div>\n            </div>\n        </div>\n    `,
        created() {
            if (this.$root.accountData && this.$root.accountData.isReady) {
                this.setAccountData();
                this.$root.accountData.on("change", this.setAccountData, this)
            } else {
                this.$root.$on("init", () => {
                    this.$root.accountData.on("change", this.setAccountData, this);
                    this.setAccountData()
                })
            }
        },
        data() {
            return {
                isFreeAccount: false,
                email: null,
                name: null,
                isPaid: null,
                subscriptionEnd: null,
                nextChargeDate: null,
                subscribedToPaidDate: null,
                createdWith: null
            }
        },
        mounted() {
            if (this.$root.trackEvent) {
                this.$root.trackEvent("payment", "open account panel", "stripe")
            }
        },
        methods: {
            setAccountData() {
                this.$data.isFreeAccount = this.$root.accountData.get("isFreeAccount");
                this.$data.email = this.$root.accountData.get("email");
                this.$data.name = this.$root.accountData.get("name") || "Account";
                this.$data.isPaid = this.$root.accountData.get("paymentPlan") === C.PAYMENT_PLAN.PAID;
                this.$data.createdWith = canvas.app.accountData.get("createdWith");
                if (this.$data.isPaid && !this.$root.accountData.get("isFreeAccount")) {
                    this.loadSubscriptionInfo()
                }
            },
            cancelPaidPlan() {
                const msg = `Are you sure you want to downgrade to the free account? \n            If so, your subscription will automatically run out on ${this.$data.nextChargeDate}.`;
                this.$parent.$refs.overlay.confirm(msg, () => {
                    this.$parent.$refs.overlay.showLoading("Cancelling Subscription");
                    this.$http.post("payment-stripe/unsubscribe", {}).then(res => {
                        this.$parent.$refs.overlay.hide();
                        this.$root.accountData.set({
                            isPayingUser: true,
                            subscriptionEnd: res.body.subscriptionEnd
                        })
                    })
                })
            },
            loadSubscriptionInfo() {
                this.$http.get("payment-stripe/get-subscription-details").then(res => {
                    this.$data.nextChargeDate = new Date(res.body.nextInvoice).toDateString();
                    this.$data.subscribedToPaidDate = new Date(res.body.created).toDateString()
                })
            },
            deleteAccount() {
                var msg = "Are you sure you want to delete your account? ";
                if (this.$data.isPaid) {
                    msg += `This will immediatly cancel your running subscription and irreversibly delete all your data. \n                    If you wish to go ahead please enter your password to confirm:`
                } else {
                    msg += `This will irreversibly delete all your data. \n                    If you wish to go ahead please enter your password to confirm:`
                }
                this.$parent.$refs.overlay.confirmWithPassword(msg, password => {
                    this.$parent.$refs.overlay.showLoading("deleting account");
                    this.$http.post("account/delete", {
                        password: password
                    }).then(res => {
                        if (res.wrongPassword) {
                            this.$parent.$refs.overlay.showWarning("Incorrect password!")
                        } else {
                            window.location = "http://localhost" //"https://arcentry.com"
                        }
                    })
                })
            },
            logout() {
                this.$http.post("account/logout", {}).then(() => {
                    window.location = document.location.origin + "?logout=true"
                })
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    Vue.component("stripe-payment", {
        template: `\n        <div class="stripe-payment">\n            <div class="subscribe">\n                <div class="pricing-table" :class="{free: isFree, cancelled: isCancelled, paid: isPaid}">\n                    <div class="free">\n                        <div class="head">\n                            <em>FREE</em>\n                            <span v-if="isFree">(your plan)</span>\n                        </div>\n                        <div class="row first">\n                            30\n                            <label>items / architecture</label>\n                        </div>\n                        <div class="row">\n                            3\n                            <label>architectures</label>\n                        </div>\n                        <div class="downgrade row" v-if="isPaid">\n                            <span @click="unsubscribe">downgrade to free</span>\n                            <label >(Your subscription will end on {{nextInvoice}})</label>\n                        </div>\n                    </div>\n                    <div class="standard" :class="{cancelled: isCancelled}">\n                        <div class="head">\n                            <em>STANDARD</em>\n                            <span>$9.90 / month</span>\n                            <span v-if="!isCancelled">cancel anytime</span>\n                            <span v-if="isCancelled">(cancelled, will revert to free on {{subscriptionEnd}})</span>\n                        </div>\n                        <div class="row first">\n                            Infinite\n                            <label>items / architecture</label>\n                        </div>\n                        <div class="row">\n                            Infinite\n                            <label>architectures</label>\n                        </div>\n                        <div v-if="isFree" class="update-btn" @click="showForm">UPGRADE</div>\n                        <div v-if="isPaid" class="update-btn your-plan">(your plan)</div>\n                        <div v-if="isCancelled" class="update-btn" @click="renewSubscription">REACTIVATE</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,
        created() {
            if (this.$root.accountData && this.$root.accountData.isReady) {
                this.init()
            } else {
                this.$root.$on("init", this.init.bind(this))
            }
        },
        data() {
            return {
                subscriptionEnd: null,
                paymentPlan: null,
                subscriptionCreated: null,
                nextInvoice: null,
                isFree: false,
                isPaid: false,
                isCancelled: false
            }
        },
        methods: {
            init() {
                this.stripeHandler = this.getStripeHandler();
                this.$root.accountData.on("change", this.setUserData, this);
                this.setUserData();
                if (this.$root.accountData.get("paymentPlan") === C.PAYMENT_PLAN.PAID && !this.$root.accountData.get("isFreeAccount")) {
                    this.$http.get("payment-stripe/get-subscription-details").then(res => {
                        this.$data.subscriptionCreated = new Date(res.body.created).toDateString();
                        this.$data.nextInvoice = new Date(res.body.nextInvoice).toDateString()
                    })
                }
            },
            renewSubscription() {
                this.post("payment-stripe/renew", {}, "re-activating subscription", () => {
                    this.$root.accountData.set({
                        isPayingUser: true,
                        subscriptionEnd: null,
                        paymentPlan: C.PAYMENT_PLAN.PAID
                    })
                })
            },
            unsubscribe() {
                this.post("payment-stripe/unsubscribe", {}, "cancelling subscription", res => {
                    this.$root.accountData.set({
                        isPayingUser: true,
                        subscriptionEnd: res.subscriptionEnd,
                        paymentPlan: C.PAYMENT_PLAN.CANCELLED
                    })
                })
            },
            setUserData() {
                this.$data.paymentPlan = this.$root.accountData.get("paymentPlan");
                this.$data.subscriptionEnd = this.$root.accountData.get("subscriptionEnd");
                this.$data.isFree = this.$root.accountData.get("paymentPlan") === C.PAYMENT_PLAN.FREE;
                this.$data.isPaid = this.$root.accountData.get("paymentPlan") === C.PAYMENT_PLAN.PAID;
                this.$data.isCancelled = this.$root.accountData.get("paymentPlan") === C.PAYMENT_PLAN.CANCELLED
            },
            getStripeHandler() {
                return StripeCheckout.configure({
                    key: config.stripeApiKey,
                    image: "http://localhost/assets/images/icon-standalone-whitespace.png",
                    locale: "auto",
                    email: this.$root.accountData.get("email"),
                    panelLabel: "Subscribe ({{amount}}/month)",
                    source: this.onSource.bind(this)
                })
            },
            onSource(source, userData) {
                this.$root.trackEvent("payment", "payment made", "stripe");
                this.post("payment-stripe/subscribe", {
                    source: source,
                    userData: userData
                }, "upgrading plan", res => {
                    this.$root.accountData.set({
                        isPayingUser: true,
                        paymentPlan: C.PAYMENT_PLAN.PAID
                    });
                    this.$root.trackEvent("payment", "payment complete", "stripe");
                    this.$parent.$parent.$refs.overlay.showSuccess("Upgraded to standard!")
                })
            },
            showForm() {
                this.$root.trackEvent("payment", "open form", "stripe");
                this.stripeHandler.open({
                    name: "Arcentry Standard Plan",
                    description: "$9.90 a month. Cancel anytime.",
                    amount: 990,
                    zipCode: true,
                    billingAddress: true
                })
            },
            post(url, data, loadingText, callback) {
                this.$parent.$parent.$refs.overlay.showLoading(loadingText);
                this.$http.post(url, data).then(res => {
                    this.$parent.$parent.$refs.overlay.hide();
                    callback(res.body)
                })
            }
        }
    })
}, function(module, exports) {
    Vue.component("change-password", {
        template: `\n        <form class="change-password" action="#" @submit.prevent="changePassword">\n            <input type="password" placeholder="current password" v-model="currentPassword" data-lpignore="true"/>\n            <input type="password" placeholder="new password" v-model="newPasswordA" data-lpignore="true"/>\n            <input type="password" placeholder="new password repeat" v-model="newPasswordB" data-lpignore="true"/>\n            <div class="btn-container right">\n                <button class="btn">\n                    <i class="fas fa-check"></i>\n                    CHANGE\n                </button>\n            </div>\n        </form>\n    `,
        data() {
            return {
                currentPassword: null,
                newPasswordA: null,
                newPasswordB: null
            }
        },
        methods: {
            changePassword() {
                const formCompleted = this.has(this.$data.currentPassword) && this.has(this.$data.newPasswordA) && this.has(this.$data.newPasswordB);
                if (!formCompleted) {
                    this.$root.$refs.sidebar.$refs.overlay.showWarning("Please provide all fields.");
                    return
                }
                if (this.$data.newPasswordA !== this.$data.newPasswordB) {
                    this.$root.$refs.sidebar.$refs.overlay.showWarning("New passwords do not match.");
                    return
                }
                if (this.$data.currentPassword === this.$data.newPasswordA) {
                    this.$root.$refs.sidebar.$refs.overlay.showWarning("New password can't be the same as old password");
                    return
                }
                const postData = {
                    passwordOld: this.$data.currentPassword,
                    passwordNew: this.$data.newPasswordA
                };
                this.$root.$refs.sidebar.$refs.overlay.showLoading("changing password");
                this.$http.post("account/change-password", postData).then(res => {
                    if (res.body.oldPasswordWrong === true) {
                        this.$root.$refs.sidebar.$refs.overlay.showWarning("The current password is not correct.")
                    } else if (res.body.success === true) {
                        this.$root.$refs.sidebar.$refs.overlay.showSuccess("Password changed succesfully")
                    }
                })
            },
            has(text) {
                if (!text) {
                    return false
                }
                return text.trim().length > 0
            }
        }
    })
}, function(module, exports) {
    const AUTH_SERVICES = {
        google: "Google",
        github: "Github"
    };
    Vue.component("change-to-regular-account", {
        template: `\n        <div class="change-to-regular-account">\n            <div class="current">\n                <i v-if="createdWith === 'Google'" class="fab fa-google"></i> \n                <i v-if="createdWith === 'Github'" class="fab fa-github"></i>\n                <p>\n                You're currently signed up with {{createdWith}} using your email {{email}}.\n                To switch to a regular Arcentry account, please set a password below.\n                </p>\n            </div>\n            <form action="#" @submit.prevent="switchAccount">\n                <input type="password" required placeholder="password" v-model="newPasswordA" />\n                <input type="password" required placeholder="password repeat" v-model="newPasswordB" />\n                <div class="btn-container">\n                    <input type="submit" class="btn secondary" value="Switch to regular account" />\n                </div>\n            </form>\n        </div>\n    `,
        data() {
            return {
                newPasswordA: "",
                newPasswordB: "",
                createdWith: null,
                email: null
            }
        },
        created() {
            this.setAccountDataFn = this.setAccountData.bind(this);
            if (this.$root.accountData) {
                this.setAccountData()
            } else {
                this.$root.$on("init", this.setAccountDataFn)
            }
        },
        destroyed() {
            this.$root.$off("init", this.setAccountDataFn)
        },
        methods: {
            setAccountData() {
                this.$data.createdWith = AUTH_SERVICES[this.$root.accountData.get("createdWith")];
                this.$data.email = this.$root.accountData.get("email")
            },
            switchAccount() {
                const passA = this.$data.newPasswordA.trim();
                const passB = this.$data.newPasswordB.trim();
                const overlay = this.$root.$refs.sidebar.$refs.overlay;
                if (!passA || !passB) {
                    overlay.showWarning("Please enter both passwords");
                    return
                }
                if (passA !== passB) {
                    overlay.showWarning("Passwords don't match");
                    return
                }
                overlay.showLoading("Switching to regular account");
                this.$http.post("account/switch-to-regular-account", {
                    password: passA
                }).then(() => {
                    overlay.showSuccess("Switched to regular account");
                    this.$root.accountData.set({
                        createdWith: "arcentry"
                    })
                })
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const CARD_BRAND_TO_ICON = __webpack_require__(29);
    Vue.component("stripe-payment-history", {
        template: `\n        <div class="stripe-payment-history">\n            <ul class="invoices" v-if="view === 'invoices'">\n                <li v-for="inv in invoices">\n                    <i class="fas fa-file-invoice-dollar"></i>\n                    <span class="date">{{toDate(inv.date)}}</span>\n                    <a :href="inv.hostedUrl" target="_blank">HTML</a>\n                    <a :href="inv.pdfUrl" download target="_blank">PDF</a>\n                </li>\n            </ul>\n            <ul class="charges" v-if="view === 'charges'">\n                <li v-for="charge in charges">\n                    <div class="successful charge-result" v-if="charge.paid">\n                        <i class="fas fa-check"></i>\n                        <span class="date">{{toDate(charge.date)}}</span>\n                        <span class="amount">$ {{toAmount(charge.amount)}}</span>\n                        <div class="card">\n                            <span class="ending-in">{{charge.cardLastFour}}</span>\n                            <i :class="toCardClass(charge.cardBrand)"></i>\n                        </div>\n                    </div>\n\n                    <div class="failed charge-result" v-if="!charge.paid">\n                        <i class="fas fa-times-circle"></i>\n                        <span class="date">{{toDate(charge.date)}}</span>\n                        <span class="amount">$ {{toAmount(charge.amount)}}</span>\n                        <div class="card">\n                            <span class="ending-in">{{charge.cardLastFour}}</span>\n                            <i :class="toCardClass(charge.cardBrand)"></i>\n                        </div>\n                    </div>\n                    <div class="fail-explanation" v-if="!charge.paid">\n                        {{charge.failureCode}}: {{charge.failureMsg}}\n                    </div>\n                </li>\n            </ul>\n        </div>\n    `,
        props: ["view"],
        data() {
            return {
                invoices: [],
                charges: []
            }
        },
        created() {
            this.refresh()
        },
        methods: {
            refresh() {
                this.$root.$refs.sidebar.$refs.overlay.showLoading("retrieving " + this.$props.view);
                const url = "payment-stripe/get-payment-history?" + Math.floor(Math.random() * 1e12).toString(32);
                this.$http.get(url).then(res => {
                    this.$data.invoices = res.body.invoices;
                    this.$data.charges = res.body.charges;
                    this.$root.$refs.sidebar.$refs.overlay.hide()
                })
            },
            toDate(date) {
                return new Date(date).toLocaleDateString()
            },
            toAmount(value) {
                return (value / 100).toFixed(2)
            },
            toCardClass(brand) {
                if (CARD_BRAND_TO_ICON[brand]) {
                    return CARD_BRAND_TO_ICON[brand]
                } else {
                    return "fas credit-card"
                }
            }
        }
    })
}, function(module, exports) {
    Vue.component("accordeon-entry", {
        template: `\n        <li class="accordeon-entry">\n            <h3 @click="open = !open">\n                <i class="fas fa-chevron-right" v-if="!open"></i>\n                <i class="fas fa-chevron-down" v-if="open"></i>\n                <span>{{title}}</span>\n            </h3>\n            <div class="content"  v-if="open">\n                <slot></slot>\n            </div>\n        </li>\n    `,
        props: ["title"],
        data() {
            return {
                open: false
            }
        }
    })
}, function(module, exports) {
    Vue.component("change-email", {
        template: `\n        <div class="change-email">\n            <form action="#" @submit.prevent="changeEmail">\n                <input type="email" required v-model="newEmail" />\n                <div class="btn-container right">\n                    <button class="btn">\n                        <i class="fas fa-check"></i>\n                        CHANGE\n                    </button>\n                </div>\n            </form>\n        </div>\n    `,
        data() {
            return {
                newEmail: null
            }
        },
        created() {
            if (this.$root.accountData) {
                this.setCurrentEmail()
            } else {
                this.setCurrentEmailFn = this.setCurrentEmail.bind(this);
                this.$root.$on("init", this.setCurrentEmailFn)
            }
        },
        destroyed() {
            this.$root.$off("init", this.setCurrentEmailFn)
        },
        methods: {
            setCurrentEmail() {
                this.$data.newEmail = this.$root.accountData.get("email")
            },
            changeEmail() {
                const newEmail = this.$data.newEmail.trim();
                if (!newEmail || newEmail.length === 0) {
                    this.$root.$refs.sidebar.$refs.overlay.showWarning("Please specify an email address");
                    return
                }
                this.$root.$refs.sidebar.$refs.overlay.showLoading("changing email");
                this.$http.post("account/change-email", {
                    email: newEmail
                }).then(() => {
                    this.$root.$refs.sidebar.$refs.overlay.showSuccess("Email succesfully changed to " + newEmail)
                })
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const COUNTRIES = __webpack_require__(147);
    Vue.component("change-billing-address", {
        template: `\n        <div class="change-billing-address">\n            <form action="#" @submit.prevent="changeBillingAddress">\n                <input type="text" v-model="line1" placeholder="Address Line 1" data-lpignore="true" />\n                <input type="text" v-model="line2" placeholder="Address Line 2" data-lpignore="true" />\n                <div class="city-zip">\n                    <input type="text" class="city" v-model="city" placeholder="City" data-lpignore="true" />\n                    <input type="text" class="zip" v-model="zip" placeholder="Postal Code" data-lpignore="true"/>\n                </div>\n                <autocomplete :value="country" :options="countries" :callback="setCountry" placeholder="Country"></autocomplete>\n                <input type="text" v-model="state" placeholder="State" v-if="country==='United States'" data-lpignore="true"/>\n                <div class="btn-container right">\n                    <button class="btn">\n                        <i class="fas fa-check"></i>\n                        CHANGE\n                    </button>\n                </div>\n            </form>\n        </div>\n    `,
        data() {
            return {
                line1: null,
                line2: null,
                city: null,
                zip: null,
                country: null,
                countries: COUNTRIES,
                state: null
            }
        },
        created() {
            this.refresh()
        },
        methods: {
            refresh() {
                this.$root.$refs.sidebar.$refs.overlay.showLoading("retrieving invoice address");
                const url = "payment-stripe/get-billing-address?" + Math.floor(Math.random() * 1e12).toString(32);
                this.$http.get(url).then(res => {
                    if (res.body && res.body.address) {
                        this.$data.line1 = res.body.address.line1;
                        this.$data.line2 = res.body.address.line2;
                        this.$data.city = res.body.address.city;
                        this.$data.zip = res.body.address.postal_code;
                        this.$data.country = res.body.address.country;
                        this.$data.state = res.body.address.state
                    } else {
                        this.$data.line1 = null;
                        this.$data.line2 = null;
                        this.$data.city = null;
                        this.$data.zip = null;
                        this.$data.country = null;
                        this.$data.state = null
                    }
                }).finally(res => {
                    this.$root.$refs.sidebar.$refs.overlay.hide()
                })
            },
            changeBillingAddress() {
                const data = {
                    line1: this.processString(this.$data.line1),
                    line2: this.processString(this.$data.line2),
                    city: this.processString(this.$data.city),
                    postal_code: this.processString(this.$data.zip),
                    country: this.processString(this.$data.country),
                    state: this.processString(this.$data.state)
                };
                this.$root.$refs.sidebar.$refs.overlay.showLoading("updating invoice address");
                this.$http.post("payment-stripe/set-billing-address", data).then(() => {
                    this.$root.$refs.sidebar.$refs.overlay.showSuccess("invoice address succesfully updated");
                    this.refresh()
                }).catch(() => {
                    this.$root.$refs.sidebar.$refs.overlay.hide()
                })
            },
            setCountry(country) {
                this.$data.country = country
            },
            processString(value) {
                if (typeof value === "string") {
                    return value.trim()
                } else {
                    return ""
                }
            }
        }
    })
}, function(module, exports) {
    module.exports = ["Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "British Indian Ocean Territory", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos Islands", "Colombia", "Comoros", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Democratic Republic of the Congo", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland", "France", "French Polynesia", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Isle of Man", "Israel", "Italy", "Ivory Coast", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macao", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of the Congo", "Romania", "Russia", "Rwanda", "Saint Barthelemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia and the South Sandwich Islands", "South Korea", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "U.S. Virgin Islands", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Vatican", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"]
}, function(module, exports, __webpack_require__) {
    const CARD_BRAND_TO_ICON = __webpack_require__(29);
    const config = __webpack_require__(1);
    Vue.component("change-card-details", {
        template: `\n        <div class="change-card-details">\n            <ul class="current-cards">\n                <li v-for="card in cards">\n                    <i :class="card.icon"></i>\n                    <div>\n                        <div class="line card-info">\n                            Your {{card.brand}} card, ending in {{card.lastFour}}\n                        </div>\n                        <div class="line card-meta">\n                            added on {{card.date}}, \n                            <span class="status" :class="{error: card.status !== 'chargeable'}">{{card.status}}</span>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n            <div class="btn-container right">\n                <div class="btn" @click="changeCreditCardDetails">\n                    <i class="fas fa-credit-card"></i>\n                    CHANGE CARD\n                </div>\n            </div>\n        </div>\n    `,
        created() {
            this.refresh()
        },
        data() {
            return {
                cards: []
            }
        },
        methods: {
            refresh(callback) {
                this.$root.$refs.sidebar.$refs.overlay.showLoading("loading cards");
                const url = "payment-stripe/get-card-details?" + Math.floor(Math.random() * 1e12).toString(32);
                this.$http.get(url).then(res => {
                    this.$data.cards = res.body.map(card => {
                        return {
                            icon: CARD_BRAND_TO_ICON[card.brand],
                            date: new Date(card.created * 1e3).toLocaleDateString(),
                            expiry: card.expiry,
                            status: card.status,
                            lastFour: card.lastFour,
                            brand: card.brand
                        }
                    })
                }).finally(res => {
                    if (callback) {
                        callback()
                    } else {
                        this.$root.$refs.sidebar.$refs.overlay.hide()
                    }
                })
            },
            changeCreditCardDetails() {
                const stripeHandler = StripeCheckout.configure({
                    key: config.stripeApiKey,
                    image: "http://localhost/assets/images/icon-standalone-whitespace.png",
                    locale: "auto",
                    email: this.$root.accountData.get("email"),
                    panelLabel: "Update Card Details",
                    source: this.onSource.bind(this)
                });
                stripeHandler.open({
                    zipCode: false,
                    billingAddress: false
                })
            },
            onSource(source, userData) {
                this.$root.$refs.sidebar.$refs.overlay.showLoading("updating card");
                const url = "payment-stripe/set-payment-source";
                const data = {
                    source: source.id
                };
                this.$http.post(url, data).then(res => {
                    this.refresh(() => {
                        this.$root.$refs.sidebar.$refs.overlay.showSuccess("Card updated successfully")
                    })
                }).catch(res => {
                    this.$root.$refs.sidebar.$refs.overlay.hide()
                })
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    __webpack_require__(150);
    Vue.component("api-panel", {
        template: `\n        <div class="api-panel ">\n            <div class="api-header">\n                <label :class="{enabled: apiEnabled}" @click="setApiEnabled( !apiEnabled )">\n                    <span v-if="apiEnabled">API enabled</span>\n                    <span v-if="!apiEnabled">API disabled</span>\n                </label>\n                <toggle-switch :enabled="apiEnabled" :callback="setApiEnabled" />\n            </div>\n\n            <div class="api-message" v-if="!apiEnabled">\n                <i class="fas fa-code"></i>\n                <p>\n                    Arcentry comes with a powerful REST API that allows you to manipulate the objects in your diagrams in realtime.\n                </p>\n                <p>\n                    To use it, please activate it above.\n                </p>\n                <p>\n                    To learn more, head over to the <a href="http://localhost/api-docs/" target="_blank">API docs</a>.\n                </p>\n            </div>\n\n            <div class="api-info" v-if="apiEnabled">\n                <h3>Your API Key</h3>\n                <div class="api-key copyable">\n                    {{apiKey}}\n                </div>\n\n                <h3>id for this document</h3>\n                <div class="api-key copyable">\n                    {{docId}}\n                </div>\n            </div>\n\n            <div class="api-message" v-if="apiEnabled">\n                <p>\n                    All set, you are ready to use the API!\n                </p>\n                <p>\n                    To learn how to use it,<br /> head over to the <a href="http://localhost/api-docs/" target="_blank">API docs</a>.\n                </p>\n            </div>\n\n            <h3>\n                Plugins\n            </h3>\n            <plugin-selector></plugin-selector>\n        </div>\n    `,
        data() {
            return {
                apiEnabled: false,
                apiKey: null,
                docId: null
            }
        },
        created() {
            this.$parent.$refs.overlay.showLoading("Refresh");
            this.$http.get("v1/get-key").then(res => {
                this.$data.apiKey = res.body.apiKey;
                this.$data.apiEnabled = res.body.apiKey
            }).finally(() => {
                this.$parent.$refs.overlay.hide()
            });
            this.$root.$on("init", this.init.bind(this))
        },
        methods: {
            init() {
                this.$data.docId = this.$root.userSettings.get("lastActiveDocId");
                this.$root.userSettings.on("lastActiveDocIdchanged", () => {
                    this.$data.docId = this.$root.userSettings.get("lastActiveDocId")
                })
            },
            setApiEnabled(isEnabled) {
                if (isEnabled) {
                    this.createApiKey();
                    this.$data.apiEnabled = true
                } else {
                    const msg = `Are you sure? This will delete your current API key and disable the API.`;
                    this.$parent.$refs.overlay.confirm(msg, () => {
                        this.$data.apiEnabled = false;
                        this.$root.accountData.set({
                            apiKey: null
                        });
                        this.deleteApiKey()
                    })
                }
            },
            createApiKey() {
                this.$parent.$refs.overlay.showLoading("Enabling API");
                this.$http.post("v1/create-key", {}).then(res => {
                    this.$data.apiKey = res.body.apiKey;
                    this.$root.accountData.set({
                        apiKey: this.$data.apiKey
                    })
                }).finally(() => {
                    this.$parent.$refs.overlay.hide()
                })
            },
            deleteApiKey() {
                this.$parent.$refs.overlay.showLoading("Disabling API");
                this.$data.apiKey = null;
                this.$http.post("v1/delete-key", {}).finally(() => {
                    this.$parent.$refs.overlay.hide()
                })
            }
        }
    })
}, function(module, exports) {
    Vue.component("plugin-selector", {
        template: `\n        <ul class="plugin-selector">\n            <li\n                v-for="plugin in plugins"\n                @click="togglePluginActive(plugin.id)"\n                :class="{active:plugin.isActive}"\n            >\n                <i class="fas fa-check"></i>\n                <img :src="plugin.logo" />\n                <h3>{{plugin.name}}</h3>\n            </li>\n        </ul>\n    `,
        data: function() {
            return {
                plugins: []
            }
        },
        created() {
            this.$root.$on("init", this.init.bind(this))
        },
        methods: {
            init() {
                this.$root.canvas.plugin.registry.on("change", this.refreshPlugins, this);
                this.refreshPlugins()
            },
            refreshPlugins() {
                const allPlugins = this.$root.canvas.plugin.registry.getAll();
                const plugins = [];
                for (var id in allPlugins) {
                    plugins.push({
                        id: id,
                        logo: allPlugins[id].manifest.logo,
                        name: allPlugins[id].manifest.name,
                        isActive: allPlugins[id].isActive,
                        desc: allPlugins[id].manifest.desc
                    })
                }
                this.$data.plugins = plugins
            },
            togglePluginActive(pluginId) {
                if (this.$root.canvas.plugin.registry.getById(pluginId).isActive) {
                    const pluginName = canvas.plugin.registry.getById("monitoring-aws-cloudwatch").manifest.name;
                    const pluginMsg = `Are you sure you want to deactivate the ${pluginName} plugin?`;
                    this.$root.$refs.sidebar.$refs.overlay.confirm(pluginMsg, () => {
                        this.$root.canvas.plugin.registry.deactivatePlugin(pluginId)
                    })
                } else {
                    this.$root.canvas.plugin.registry.activatePlugin(pluginId)
                }
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const CodeFlask = __webpack_require__(152).default;
    Vue.component("api-settings", {
        template: `\n        <div class="api-settings" v-if="apiEnabled">\n            <h3>\n                Object Data\n                <help-link>\n                    <p>\n                        You see this panel because you've activated Arcentry's API functionality.\n                    </p>\n                    <a href="http://localhost/api-docs/" target="_blank">\n                        Learn More\n                    </a>\n                </help-link>\n            </h3>\n\n            <ul class="props">\n                <li>\n                    <label>id:</label>\n                    <span class="copyable">{{objectId}}</span>\n                </li>\n                <li>\n                    <label>type:</label>\n                    <span class="copyable">{{objectType}}</span>\n                </li>\n            </ul>\n\n            <div class="code-editor-container copyable" ref="codeEditorContainer"></div>\n\n            <div class="btn-row" :class="{invalid: !isValid, 'has-changed': hasChanged}">\n                <div class="btn" @click="refresh">\n                    <i class="fas fa-undo"></i>\n                    <span>reset</span>\n                </div>\n                <div class="btn" @click="saveChanges">\n                    <i class="fas fa-save"></i>\n                    <span>save</span>\n                </div>\n            </div>\n        </div>\n    `,
        props: ["id"],
        created: function() {
            this.refresh();
            this.$root.accountData.on("change", this.refresh, this)
        },
        destroyed: function() {
            this.$root.accountData.off("change", this.refresh, this)
        },
        mounted() {
            if (!this.$refs.codeEditorContainer) {
                return
            }
            this.editor = new CodeFlask(this.$refs.codeEditorContainer, {
                language: "js"
            });
            this.editor.onUpdate(this.validateProps.bind(this));
            requestAnimationFrame(this.setObjectProps.bind(this))
        },
        watch: {
            id: function(id) {
                this.setId(id)
            }
        },
        data: function() {
            return {
                objectId: null,
                objectType: null,
                objectProps: null,
                apiEnabled: false,
                isValid: true,
                hasChanged: false
            }
        },
        methods: {
            saveChanges() {
                if (this.$data.hasChanged && this.$data.isValid) {
                    this.$root.state.processTransaction({
                        action: C.ACTIONS.SET,
                        id: this.$props.id,
                        data: this.editorState
                    });
                    this.refresh()
                }
            },
            refresh() {
                this.$data.apiEnabled = !!this.$root.accountData.get("apiKey");
                this.setId(this.$props.id)
            },
            validateProps(code) {
                try {
                    this.editorState = JSON.parse(code)
                } catch (e) {
                    this.$data.isValid = false;
                    return
                }
                this.$data.isValid = true;
                const state = this.$root.state.getStateForId(this.$data.objectId);
                this.$data.hasChanged = JSON.stringify(state) !== JSON.stringify(this.editorState)
            },
            setId(id) {
                if (this.$data.objectId) {
                    this.unbindEvents()
                }
                if (!this.$data.apiEnabled) {
                    return
                }
                this.$data.objectId = id;
                this.$root.state.on(this.$data.objectId + "-update", this.setObjectProps, this);
                this.$data.objectType = this.$root.state.getTypeForId(id);
                this.setObjectProps()
            },
            setObjectProps() {
                if (!this.editor) {
                    setTimeout(this.setObjectProps.bind(this), 50);
                    return
                }
                const state = this.$root.state.getStateForId(this.$data.objectId);
                this.editor.updateCode(JSON.stringify(state, null, "    "))
            },
            unbindEvents() {
                this.$root.state.off(this.$data.objectId + "-update", this.setObjectProps, this)
            }
        }
    })
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
    });
    (function(global) {
        var BACKGROUND_COLOR = "#fff",
            LINE_HEIGHT = "20px",
            FONT_SIZE = "13px",
            defaultCssTheme = "\n.codeflask {\n  background: " + BACKGROUND_COLOR + ";\n  color: #4f559c;\n}\n\n.codeflask .token.punctuation {\n  color: #4a4a4a;\n}\n\n.codeflask .token.keyword {\n  color: #8500ff;\n}\n\n.codeflask .token.operator {\n  color: #ff5598;\n}\n\n.codeflask .token.string {\n  color: #41ad8f;\n}\n\n.codeflask .token.comment {\n  color: #9badb7;\n}\n\n.codeflask .token.function {\n  color: #8500ff;\n}\n\n.codeflask .token.boolean {\n  color: #8500ff;\n}\n\n.codeflask .token.number {\n  color: #8500ff;\n}\n\n.codeflask .token.selector {\n  color: #8500ff;\n}\n\n.codeflask .token.property {\n  color: #8500ff;\n}\n\n.codeflask .token.tag {\n  color: #8500ff;\n}\n\n.codeflask .token.attr-value {\n  color: #8500ff;\n}\n";
        function cssSupports(e, t) {
            return "undefined" != typeof CSS ? CSS.supports(e, t) : "undefined" != typeof document && toCamelCase(e) in document.body.style
        }
        function toCamelCase(e) {
            return (e = e.split("-").filter(function(e) {
                return !!e
            }).map(function(e) {
                return e[0].toUpperCase() + e.substr(1)
            }).join(""))[0].toLowerCase() + e.substr(1)
        }
        var FONT_FAMILY = '"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',
            COLOR = cssSupports("caret-color", "#000") ? BACKGROUND_COLOR : "#ccc",
            LINE_NUMBER_WIDTH = "40px",
            editorCss = "\n  .codeflask {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n\n  .codeflask, .codeflask * {\n    box-sizing: border-box;\n  }\n\n  .codeflask__pre {\n    pointer-events: none;\n    z-index: 3;\n    overflow: hidden;\n  }\n\n  .codeflask__textarea {\n    background: none;\n    border: none;\n    color: " + COLOR + ";\n    z-index: 1;\n    resize: none;\n    font-family: " + FONT_FAMILY + ";\n    -webkit-appearance: pre;\n    caret-color: #111;\n    z-index: 2;\n    width: 100%;\n    height: 100%;\n  }\n\n  .codeflask--has-line-numbers .codeflask__textarea {\n    width: calc(100% - " + LINE_NUMBER_WIDTH + ");\n  }\n\n  .codeflask__code {\n    display: block;\n    font-family: " + FONT_FAMILY + ";\n    overflow: hidden;\n  }\n\n  .codeflask__flatten {\n    padding: 10px;\n    font-size: " + FONT_SIZE + ";\n    line-height: " + LINE_HEIGHT + ";\n    white-space: pre;\n    position: absolute;\n    top: 0;\n    left: 0;\n    overflow: auto;\n    margin: 0 !important;\n    outline: none;\n    text-align: left;\n  }\n\n  .codeflask--has-line-numbers .codeflask__flatten {\n    width: calc(100% - " + LINE_NUMBER_WIDTH + ");\n    left: " + LINE_NUMBER_WIDTH + ";\n  }\n\n  .codeflask__line-highlight {\n    position: absolute;\n    top: 10px;\n    left: 0;\n    width: 100%;\n    height: " + LINE_HEIGHT + ";\n    background: rgba(0,0,0,0.1);\n    z-index: 1;\n  }\n\n  .codeflask__lines {\n    padding: 10px 4px;\n    font-size: 12px;\n    line-height: " + LINE_HEIGHT + ";\n    font-family: 'Cousine', monospace;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: " + LINE_NUMBER_WIDTH + ";\n    height: 100%;\n    text-align: right;\n    color: #999;\n    z-index: 2;\n  }\n\n  .codeflask__lines__line {\n    display: block;\n  }\n\n  .codeflask.codeflask--has-line-numbers {\n    padding-left: " + LINE_NUMBER_WIDTH + ";\n  }\n\n  .codeflask.codeflask--has-line-numbers:before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: " + LINE_NUMBER_WIDTH + ";\n    height: 100%;\n    background: #eee;\n    z-index: 1;\n  }\n";
        function injectCss(e, t, n) {
            var a = t || "codeflask-style",
                s = n || document.head;
            if (!e)
                return !1;
            if (document.getElementById(a))
                return !0;
            var o = document.createElement("style");
            return o.innerHTML = e, o.id = a, s.appendChild(o), !0
        }
        var entityMap = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#x2F;",
            "`": "&#x60;",
            "=": "&#x3D;"
        };
        function escapeHtml(e) {
            return String(e).replace(/[&<>"'`=/]/g, function(e) {
                return entityMap[e]
            })
        }
        var commonjsGlobal = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
        function createCommonjsModule(e, t) {
            return e(t = {
                exports: {}
            }, t.exports), t.exports
        }
        var prism = createCommonjsModule(function(e) {
                var t = function(e) {
                    var t = /\blang(?:uage)?-([\w-]+)\b/i,
                        n = 0,
                        a = {
                            manual: e.Prism && e.Prism.manual,
                            disableWorkerMessageHandler: e.Prism && e.Prism.disableWorkerMessageHandler,
                            util: {
                                encode: function(e) {
                                    return e instanceof s ? new s(e.type, a.util.encode(e.content), e.alias) : Array.isArray(e) ? e.map(a.util.encode) : e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ")
                                },
                                type: function(e) {
                                    return Object.prototype.toString.call(e).slice(8, -1)
                                },
                                objId: function(e) {
                                    return e.__id || Object.defineProperty(e, "__id", {
                                        value: ++n
                                    }), e.__id
                                },
                                clone: function e(t, n) {
                                    var s,
                                        o,
                                        i = a.util.type(t);
                                    switch (n = n || {}, i) {
                                    case "Object":
                                        if (o = a.util.objId(t), n[o])
                                            return n[o];
                                        for (var r in s = {}, n[o] = s, t)
                                            t.hasOwnProperty(r) && (s[r] = e(t[r], n));
                                        return s;
                                    case "Array":
                                        return o = a.util.objId(t), n[o] ? n[o] : (s = [], n[o] = s, t.forEach(function(t, a) {
                                            s[a] = e(t, n)
                                        }), s);
                                    default:
                                        return t
                                    }
                                }
                            },
                            languages: {
                                extend: function(e, t) {
                                    var n = a.util.clone(a.languages[e]);
                                    for (var s in t)
                                        n[s] = t[s];
                                    return n
                                },
                                insertBefore: function(e, t, n, s) {
                                    var o = (s = s || a.languages)[e],
                                        i = {};
                                    for (var r in o)
                                        if (o.hasOwnProperty(r)) {
                                            if (r == t)
                                                for (var l in n)
                                                    n.hasOwnProperty(l) && (i[l] = n[l]);
                                            n.hasOwnProperty(r) || (i[r] = o[r])
                                        }
                                    var c = s[e];
                                    return s[e] = i, a.languages.DFS(a.languages, function(t, n) {
                                        n === c && t != e && (this[t] = i)
                                    }), i
                                },
                                DFS: function e(t, n, s, o) {
                                    o = o || {};
                                    var i = a.util.objId;
                                    for (var r in t)
                                        if (t.hasOwnProperty(r)) {
                                            n.call(t, r, t[r], s || r);
                                            var l = t[r],
                                                c = a.util.type(l);
                                            "Object" !== c || o[i(l)] ? "Array" !== c || o[i(l)] || (o[i(l)] = !0, e(l, n, r, o)) : (o[i(l)] = !0, e(l, n, null, o))
                                        }
                                }
                            },
                            plugins: {},
                            highlightAll: function(e, t) {
                                a.highlightAllUnder(document, e, t)
                            },
                            highlightAllUnder: function(e, t, n) {
                                var s = {
                                    callback: n,
                                    selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
                                };
                                a.hooks.run("before-highlightall", s);
                                for (var o, i = s.elements || e.querySelectorAll(s.selector), r = 0; o = i[r++];)
                                    a.highlightElement(o, !0 === t, s.callback)
                            },
                            highlightElement: function(n, s, o) {
                                for (var i, r, l = n; l && !t.test(l.className);)
                                    l = l.parentNode;
                                l && (i = (l.className.match(t) || [, ""])[1].toLowerCase(), r = a.languages[i]),
                                n.className = n.className.replace(t, "").replace(/\s+/g, " ") + " language-" + i,
                                n.parentNode && (l = n.parentNode, /pre/i.test(l.nodeName) && (l.className = l.className.replace(t, "").replace(/\s+/g, " ") + " language-" + i));
                                var c = {
                                        element: n,
                                        language: i,
                                        grammar: r,
                                        code: n.textContent
                                    },
                                    d = function(e) {
                                        c.highlightedCode = e,
                                        a.hooks.run("before-insert", c),
                                        c.element.innerHTML = c.highlightedCode,
                                        a.hooks.run("after-highlight", c),
                                        a.hooks.run("complete", c),
                                        o && o.call(c.element)
                                    };
                                if (a.hooks.run("before-sanity-check", c), c.code)
                                    if (a.hooks.run("before-highlight", c), c.grammar)
                                        if (s && e.Worker) {
                                            var u = new Worker(a.filename);
                                            u.onmessage = function(e) {
                                                d(e.data)
                                            },
                                            u.postMessage(JSON.stringify({
                                                language: c.language,
                                                code: c.code,
                                                immediateClose: !0
                                            }))
                                        } else
                                            d(a.highlight(c.code, c.grammar, c.language));
                                    else
                                        d(a.util.encode(c.code));
                                else
                                    a.hooks.run("complete", c)
                            },
                            highlight: function(e, t, n) {
                                var o = {
                                    code: e,
                                    grammar: t,
                                    language: n
                                };
                                return a.hooks.run("before-tokenize", o), o.tokens = a.tokenize(o.code, o.grammar), a.hooks.run("after-tokenize", o), s.stringify(a.util.encode(o.tokens), o.language)
                            },
                            matchGrammar: function(e, t, n, o, i, r, l) {
                                for (var c in n)
                                    if (n.hasOwnProperty(c) && n[c]) {
                                        if (c == l)
                                            return;
                                        var d = n[c];
                                        d = "Array" === a.util.type(d) ? d : [d];
                                        for (var u = 0; u < d.length; ++u) {
                                            var p = d[u],
                                                h = p.inside,
                                                g = !!p.lookbehind,
                                                f = !!p.greedy,
                                                m = 0,
                                                b = p.alias;
                                            if (f && !p.pattern.global) {
                                                var k = p.pattern.toString().match(/[imuy]*$/)[0];
                                                p.pattern = RegExp(p.pattern.source, k + "g")
                                            }
                                            p = p.pattern || p;
                                            for (var y = o, C = i; y < t.length; C += t[y].length, ++y) {
                                                var F = t[y];
                                                if (t.length > e.length)
                                                    return;
                                                if (!(F instanceof s)) {
                                                    if (f && y != t.length - 1) {
                                                        if (p.lastIndex = C, !(T = p.exec(e)))
                                                            break;
                                                        for (var v = T.index + (g ? T[1].length : 0), x = T.index + T[0].length, w = y, A = C, _ = t.length; w < _ && (A < x || !t[w].type && !t[w - 1].greedy); ++w)
                                                            v >= (A += t[w].length) && (++y, C = A);
                                                        if (t[y] instanceof s)
                                                            continue;
                                                        E = w - y,
                                                        F = e.slice(C, A),
                                                        T.index -= C
                                                    } else {
                                                        p.lastIndex = 0;
                                                        var T = p.exec(F),
                                                            E = 1
                                                    }
                                                    if (T) {
                                                        g && (m = T[1] ? T[1].length : 0);
                                                        x = (v = T.index + m) + (T = T[0].slice(m)).length;
                                                        var L = F.slice(0, v),
                                                            N = F.slice(x),
                                                            S = [y, E];
                                                        L && (++y, C += L.length, S.push(L));
                                                        var I = new s(c, h ? a.tokenize(T, h) : T, b, T, f);
                                                        if (S.push(I), N && S.push(N), Array.prototype.splice.apply(t, S), 1 != E && a.matchGrammar(e, t, n, y, C, !0, c), r)
                                                            break
                                                    } else if (r)
                                                        break
                                                }
                                            }
                                        }
                                    }
                            },
                            tokenize: function(e, t) {
                                var n = [e],
                                    s = t.rest;
                                if (s) {
                                    for (var o in s)
                                        t[o] = s[o];
                                    delete t.rest
                                }
                                return a.matchGrammar(e, n, t, 0, 0, !1), n
                            },
                            hooks: {
                                all: {},
                                add: function(e, t) {
                                    var n = a.hooks.all;
                                    n[e] = n[e] || [],
                                    n[e].push(t)
                                },
                                run: function(e, t) {
                                    var n = a.hooks.all[e];
                                    if (n && n.length)
                                        for (var s, o = 0; s = n[o++];)
                                            s(t)
                                }
                            },
                            Token: s
                        };
                    function s(e, t, n, a, s) {
                        this.type = e,
                        this.content = t,
                        this.alias = n,
                        this.length = 0 | (a || "").length,
                        this.greedy = !!s
                    }
                    if (e.Prism = a, s.stringify = function(e, t, n) {
                        if ("string" == typeof e)
                            return e;
                        if (Array.isArray(e))
                            return e.map(function(n) {
                                return s.stringify(n, t, e)
                            }).join("");
                        var o = {
                            type: e.type,
                            content: s.stringify(e.content, t, n),
                            tag: "span",
                            classes: ["token", e.type],
                            attributes: {},
                            language: t,
                            parent: n
                        };
                        if (e.alias) {
                            var i = Array.isArray(e.alias) ? e.alias : [e.alias];
                            Array.prototype.push.apply(o.classes, i)
                        }
                        a.hooks.run("wrap", o);
                        var r = Object.keys(o.attributes).map(function(e) {
                            return e + '="' + (o.attributes[e] || "").replace(/"/g, "&quot;") + '"'
                        }).join(" ");
                        return "<" + o.tag + ' class="' + o.classes.join(" ") + '"' + (r ? " " + r : "") + ">" + o.content + "</" + o.tag + ">"
                    }, !e.document)
                        return e.addEventListener ? (a.disableWorkerMessageHandler || e.addEventListener("message", function(t) {
                            var n = JSON.parse(t.data),
                                s = n.language,
                                o = n.code,
                                i = n.immediateClose;
                            e.postMessage(a.highlight(o, a.languages[s], s)),
                            i && e.close()
                        }, !1), a) : a;
                    var o = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();
                    return o && (a.filename = o.src, a.manual || o.hasAttribute("data-manual") || ("loading" !== document.readyState ? window.requestAnimationFrame ? window.requestAnimationFrame(a.highlightAll) : window.setTimeout(a.highlightAll, 16) : document.addEventListener("DOMContentLoaded", a.highlightAll))), a
                }("undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {});
                e.exports && (e.exports = t),
                void 0 !== commonjsGlobal && (commonjsGlobal.Prism = t),
                t.languages.markup = {
                    comment: /<!--[\s\S]*?-->/,
                    prolog: /<\?[\s\S]+?\?>/,
                    doctype: /<!DOCTYPE[\s\S]+?>/i,
                    cdata: /<!\[CDATA\[[\s\S]*?]]>/i,
                    tag: {
                        pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/i,
                        greedy: !0,
                        inside: {
                            tag: {
                                pattern: /^<\/?[^\s>\/]+/i,
                                inside: {
                                    punctuation: /^<\/?/,
                                    namespace: /^[^\s>\/:]+:/
                                }
                            },
                            "attr-value": {
                                pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,
                                inside: {
                                    punctuation: [/^=/, {
                                        pattern: /^(\s*)["']|["']$/,
                                        lookbehind: !0
                                    }]
                                }
                            },
                            punctuation: /\/?>/,
                            "attr-name": {
                                pattern: /[^\s>\/]+/,
                                inside: {
                                    namespace: /^[^\s>\/:]+:/
                                }
                            }
                        }
                    },
                    entity: /&#?[\da-z]{1,8};/i
                },
                t.languages.markup.tag.inside["attr-value"].inside.entity = t.languages.markup.entity,
                t.hooks.add("wrap", function(e) {
                    "entity" === e.type && (e.attributes.title = e.content.replace(/&amp;/, "&"))
                }),
                Object.defineProperty(t.languages.markup.tag, "addInlined", {
                    value: function(e, n) {
                        var a = {};
                        a["language-" + n] = {
                            pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
                            lookbehind: !0,
                            inside: t.languages[n]
                        },
                        a.cdata = /^<!\[CDATA\[|\]\]>$/i;
                        var s = {
                            "included-cdata": {
                                pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
                                inside: a
                            }
                        };
                        s["language-" + n] = {
                            pattern: /[\s\S]+/,
                            inside: t.languages[n]
                        };
                        var o = {};
                        o[e] = {
                            pattern: RegExp(/(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(/__/g, e), "i"),
                            lookbehind: !0,
                            greedy: !0,
                            inside: s
                        },
                        t.languages.insertBefore("markup", "cdata", o)
                    }
                }),
                t.languages.xml = t.languages.extend("markup", {}),
                t.languages.html = t.languages.markup,
                t.languages.mathml = t.languages.markup,
                t.languages.svg = t.languages.markup,
                function(e) {
                    var t = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
                    e.languages.css = {
                        comment: /\/\*[\s\S]*?\*\//,
                        atrule: {
                            pattern: /@[\w-]+?[\s\S]*?(?:;|(?=\s*\{))/i,
                            inside: {
                                rule: /@[\w-]+/
                            }
                        },
                        url: RegExp("url\\((?:" + t.source + "|.*?)\\)", "i"),
                        selector: RegExp("[^{}\\s](?:[^{};\"']|" + t.source + ")*?(?=\\s*\\{)"),
                        string: {
                            pattern: t,
                            greedy: !0
                        },
                        property: /[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,
                        important: /!important\b/i,
                        function: /[-a-z0-9]+(?=\()/i,
                        punctuation: /[(){};:,]/
                    },
                    e.languages.css.atrule.inside.rest = e.languages.css;
                    var n = e.languages.markup;
                    n && (n.tag.addInlined("style", "css"), e.languages.insertBefore("inside", "attr-value", {
                        "style-attr": {
                            pattern: /\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,
                            inside: {
                                "attr-name": {
                                    pattern: /^\s*style/i,
                                    inside: n.tag.inside
                                },
                                punctuation: /^\s*=\s*['"]|['"]\s*$/,
                                "attr-value": {
                                    pattern: /.+/i,
                                    inside: e.languages.css
                                }
                            },
                            alias: "language-css"
                        }
                    }, n.tag))
                }(t),
                t.languages.clike = {
                    comment: [{
                        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
                        lookbehind: !0
                    }, {
                        pattern: /(^|[^\\:])\/\/.*/,
                        lookbehind: !0,
                        greedy: !0
                    }],
                    string: {
                        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
                        greedy: !0
                    },
                    "class-name": {
                        pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,
                        lookbehind: !0,
                        inside: {
                            punctuation: /[.\\]/
                        }
                    },
                    keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
                    boolean: /\b(?:true|false)\b/,
                    function: /\w+(?=\()/,
                    number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
                    operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
                    punctuation: /[{}[\];(),.:]/
                },
                t.languages.javascript = t.languages.extend("clike", {
                    "class-name": [t.languages.clike["class-name"], {
                        pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,
                        lookbehind: !0
                    }],
                    keyword: [{
                        pattern: /((?:^|})\s*)(?:catch|finally)\b/,
                        lookbehind: !0
                    }, {
                        pattern: /(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
                        lookbehind: !0
                    }],
                    number: /\b(?:(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\d+n|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,
                    function: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
                    operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/
                }),
                t.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,
                t.languages.insertBefore("javascript", "keyword", {
                    regex: {
                        pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,
                        lookbehind: !0,
                        greedy: !0
                    },
                    "function-variable": {
                        pattern: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,
                        alias: "function"
                    },
                    parameter: [{
                        pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,
                        lookbehind: !0,
                        inside: t.languages.javascript
                    }, {
                        pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,
                        inside: t.languages.javascript
                    }, {
                        pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,
                        lookbehind: !0,
                        inside: t.languages.javascript
                    }, {
                        pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,
                        lookbehind: !0,
                        inside: t.languages.javascript
                    }],
                    constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
                }),
                t.languages.insertBefore("javascript", "string", {
                    "template-string": {
                        pattern: /`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,
                        greedy: !0,
                        inside: {
                            interpolation: {
                                pattern: /\${[^}]+}/,
                                inside: {
                                    "interpolation-punctuation": {
                                        pattern: /^\${|}$/,
                                        alias: "punctuation"
                                    },
                                    rest: t.languages.javascript
                                }
                            },
                            string: /[\s\S]+/
                        }
                    }
                }),
                t.languages.markup && t.languages.markup.tag.addInlined("script", "javascript"),
                t.languages.js = t.languages.javascript,
                "undefined" != typeof self && self.Prism && self.document && document.querySelector && (self.Prism.fileHighlight = function(e) {
                    e = e || document;
                    var n = {
                        js: "javascript",
                        py: "python",
                        rb: "ruby",
                        ps1: "powershell",
                        psm1: "powershell",
                        sh: "bash",
                        bat: "batch",
                        h: "c",
                        tex: "latex"
                    };
                    Array.prototype.slice.call(e.querySelectorAll("pre[data-src]")).forEach(function(e) {
                        if (!e.hasAttribute("data-src-loaded")) {
                            for (var a, s = e.getAttribute("data-src"), o = e, i = /\blang(?:uage)?-([\w-]+)\b/i; o && !i.test(o.className);)
                                o = o.parentNode;
                            if (o && (a = (e.className.match(i) || [, ""])[1]), !a) {
                                var r = (s.match(/\.(\w+)$/) || [, ""])[1];
                                a = n[r] || r
                            }
                            var l = document.createElement("code");
                            l.className = "language-" + a,
                            e.textContent = "",
                            l.textContent = "Loading…",
                            e.appendChild(l);
                            var c = new XMLHttpRequest;
                            c.open("GET", s, !0),
                            c.onreadystatechange = function() {
                                4 == c.readyState && (c.status < 400 && c.responseText ? (l.textContent = c.responseText, t.highlightElement(l), e.setAttribute("data-src-loaded", "")) : c.status >= 400 ? l.textContent = "✖ Error " + c.status + " while fetching file: " + c.statusText : l.textContent = "✖ Error: File does not exist or is empty")
                            },
                            c.send(null)
                        }
                    }),
                    t.plugins.toolbar && t.plugins.toolbar.registerButton("download-file", function(e) {
                        var t = e.element.parentNode;
                        if (t && /pre/i.test(t.nodeName) && t.hasAttribute("data-src") && t.hasAttribute("data-download-link")) {
                            var n = t.getAttribute("data-src"),
                                a = document.createElement("a");
                            return a.textContent = t.getAttribute("data-download-link-label") || "Download", a.setAttribute("download", ""), a.href = n, a
                        }
                    })
                }, document.addEventListener("DOMContentLoaded", function() {
                    self.Prism.fileHighlight()
                }))
            }),
            CodeFlask = function(e, t) {
                if (!e)
                    throw Error("CodeFlask expects a parameter which is Element or a String selector");
                if (!t)
                    throw Error("CodeFlask expects an object containing options as second parameter");
                if (e.nodeType)
                    this.editorRoot = e;
                else {
                    var n = document.querySelector(e);
                    n && (this.editorRoot = n)
                }
                this.opts = t,
                this.startEditor()
            };
        CodeFlask.prototype.startEditor = function() {
            if (!injectCss(editorCss, null, this.opts.styleParent))
                throw Error("Failed to inject CodeFlask CSS.");
            this.createWrapper(),
            this.createTextarea(),
            this.createPre(),
            this.createCode(),
            this.runOptions(),
            this.listenTextarea(),
            this.populateDefault(),
            this.updateCode(this.code)
        },
        CodeFlask.prototype.createWrapper = function() {
            this.code = this.editorRoot.innerHTML,
            this.editorRoot.innerHTML = "",
            this.elWrapper = this.createElement("div", this.editorRoot),
            this.elWrapper.classList.add("codeflask")
        },
        CodeFlask.prototype.createTextarea = function() {
            this.elTextarea = this.createElement("textarea", this.elWrapper),
            this.elTextarea.classList.add("codeflask__textarea", "codeflask__flatten")
        },
        CodeFlask.prototype.createPre = function() {
            this.elPre = this.createElement("pre", this.elWrapper),
            this.elPre.classList.add("codeflask__pre", "codeflask__flatten")
        },
        CodeFlask.prototype.createCode = function() {
            this.elCode = this.createElement("code", this.elPre),
            this.elCode.classList.add("codeflask__code", "language-" + (this.opts.language || "html"))
        },
        CodeFlask.prototype.createLineNumbers = function() {
            this.elLineNumbers = this.createElement("div", this.elWrapper),
            this.elLineNumbers.classList.add("codeflask__lines"),
            this.setLineNumber()
        },
        CodeFlask.prototype.createElement = function(e, t) {
            var n = document.createElement(e);
            return t.appendChild(n), n
        },
        CodeFlask.prototype.runOptions = function() {
            this.opts.rtl = this.opts.rtl || !1,
            this.opts.tabSize = this.opts.tabSize || 2,
            this.opts.enableAutocorrect = this.opts.enableAutocorrect || !1,
            this.opts.lineNumbers = this.opts.lineNumbers || !1,
            this.opts.defaultTheme = !1 !== this.opts.defaultTheme,
            this.opts.areaId = this.opts.areaId || null,
            this.opts.ariaLabelledby = this.opts.ariaLabelledby || null,
            this.opts.readonly = this.opts.readonly || null,
            "boolean" != typeof this.opts.handleTabs && (this.opts.handleTabs = !0),
            "boolean" != typeof this.opts.handleSelfClosingCharacters && (this.opts.handleSelfClosingCharacters = !0),
            "boolean" != typeof this.opts.handleNewLineIndentation && (this.opts.handleNewLineIndentation = !0),
            !0 === this.opts.rtl && (this.elTextarea.setAttribute("dir", "rtl"), this.elPre.setAttribute("dir", "rtl")),
            !1 === this.opts.enableAutocorrect && (this.elTextarea.setAttribute("spellcheck", "false"), this.elTextarea.setAttribute("autocapitalize", "off"), this.elTextarea.setAttribute("autocomplete", "off"), this.elTextarea.setAttribute("autocorrect", "off")),
            this.opts.lineNumbers && (this.elWrapper.classList.add("codeflask--has-line-numbers"), this.createLineNumbers()),
            this.opts.defaultTheme && injectCss(defaultCssTheme, "theme-default", this.opts.styleParent),
            this.opts.areaId && this.elTextarea.setAttribute("id", this.opts.areaId),
            this.opts.ariaLabelledby && this.elTextarea.setAttribute("aria-labelledby", this.opts.ariaLabelledby),
            this.opts.readonly && this.enableReadonlyMode()
        },
        CodeFlask.prototype.updateLineNumbersCount = function() {
            for (var e = "", t = 1; t <= this.lineNumber; t++)
                e = e + '<span class="codeflask__lines__line">' + t + "</span>";
            this.elLineNumbers.innerHTML = e
        },
        CodeFlask.prototype.listenTextarea = function() {
            var e = this;
            this.elTextarea.addEventListener("input", function(t) {
                e.code = t.target.value,
                e.elCode.innerHTML = escapeHtml(t.target.value),
                e.highlight(),
                setTimeout(function() {
                    e.runUpdate(),
                    e.setLineNumber()
                }, 1)
            }),
            this.elTextarea.addEventListener("keydown", function(t) {
                e.handleTabs(t),
                e.handleSelfClosingCharacters(t),
                e.handleNewLineIndentation(t)
            }),
            this.elTextarea.addEventListener("scroll", function(t) {
                e.elPre.style.transform = "translate3d(-" + t.target.scrollLeft + "px, -" + t.target.scrollTop + "px, 0)",
                e.elLineNumbers && (e.elLineNumbers.style.transform = "translate3d(0, -" + t.target.scrollTop + "px, 0)")
            })
        },
        CodeFlask.prototype.handleTabs = function(e) {
            if (this.opts.handleTabs) {
                if (9 !== e.keyCode)
                    return;
                e.preventDefault();
                var t = this.elTextarea,
                    n = t.selectionDirection,
                    a = t.selectionStart,
                    s = t.selectionEnd,
                    o = t.value,
                    i = o.substr(0, a),
                    r = o.substring(a, s),
                    l = o.substring(s),
                    c = " ".repeat(this.opts.tabSize);
                if (a !== s && r.length >= c.length) {
                    var d = a - i.split("\n").pop().length,
                        u = c.length,
                        p = c.length;
                    if (e.shiftKey)
                        o.substr(d, c.length) === c ? (u = -u, d > a ? (r = r.substring(0, d) + r.substring(d + c.length), p = 0) : d === a ? (u = 0, p = 0, r = r.substring(c.length)) : (p = -p, i = i.substring(0, d) + i.substring(d + c.length))) : (u = 0, p = 0),
                        r = r.replace(new RegExp("\n" + c.split("").join("\\"), "g"), "\n");
                    else
                        i = i.substr(0, d) + c + i.substring(d, a),
                        r = r.replace(/\n/g, "\n" + c);
                    t.value = i + r + l,
                    t.selectionStart = a + u,
                    t.selectionEnd = a + r.length + p,
                    t.selectionDirection = n
                } else
                    t.value = i + c + l,
                    t.selectionStart = a + c.length,
                    t.selectionEnd = a + c.length;
                var h = t.value;
                this.updateCode(h),
                this.elTextarea.selectionEnd = s + this.opts.tabSize
            }
        },
        CodeFlask.prototype.handleSelfClosingCharacters = function(e) {
            if (this.opts.handleSelfClosingCharacters) {
                var t = e.key;
                if (["(", "[", "{", "<", "'", '"'].includes(t) || [")", "]", "}", ">", "'", '"'].includes(t))
                    switch (t) {
                    case "(":
                    case ")":
                        this.closeCharacter(t);
                        break;
                    case "[":
                    case "]":
                        this.closeCharacter(t);
                        break;
                    case "{":
                    case "}":
                        this.closeCharacter(t);
                        break;
                    case "<":
                    case ">":
                    case "'":
                    case '"':
                        this.closeCharacter(t)
                    }
            }
        },
        CodeFlask.prototype.setLineNumber = function() {
            this.lineNumber = this.code.split("\n").length,
            this.opts.lineNumbers && this.updateLineNumbersCount()
        },
        CodeFlask.prototype.handleNewLineIndentation = function(e) {
            if (this.opts.handleNewLineIndentation && 13 === e.keyCode) {
                e.preventDefault();
                var t = this.elTextarea,
                    n = t.selectionStart,
                    a = t.selectionEnd,
                    s = t.value,
                    o = s.substr(0, n),
                    i = s.substring(a),
                    r = s.lastIndexOf("\n", n - 1),
                    l = r + s.slice(r + 1).search(/[^ ]|$/),
                    c = l > r ? l - r : 0,
                    d = o + "\n" + " ".repeat(c) + i;
                t.value = d,
                t.selectionStart = n + c + 1,
                t.selectionEnd = n + c + 1,
                this.updateCode(t.value)
            }
        },
        CodeFlask.prototype.closeCharacter = function(e) {
            var t = this.elTextarea.selectionStart,
                n = this.elTextarea.selectionEnd;
            if (this.skipCloseChar(e)) {
                var a = this.code.substr(n, 1) === e,
                    s = a ? n + 1 : n,
                    o = !a && ["'", '"'].includes(e) ? e : "",
                    i = "" + this.code.substring(0, t) + o + this.code.substring(s);
                this.updateCode(i),
                this.elTextarea.selectionEnd = ++this.elTextarea.selectionStart
            } else {
                var r = e;
                switch (e) {
                case "(":
                    r = String.fromCharCode(e.charCodeAt() + 1);
                    break;
                case "<":
                case "{":
                case "[":
                    r = String.fromCharCode(e.charCodeAt() + 2)
                }
                var l = this.code.substring(t, n),
                    c = "" + this.code.substring(0, t) + l + r + this.code.substring(n);
                this.updateCode(c)
            }
            this.elTextarea.selectionEnd = t
        },
        CodeFlask.prototype.skipCloseChar = function(e) {
            var t = this.elTextarea.selectionStart,
                n = this.elTextarea.selectionEnd,
                a = Math.abs(n - t) > 0;
            return [")", "}", "]", ">"].includes(e) || ["'", '"'].includes(e) && !a
        },
        CodeFlask.prototype.updateCode = function(e) {
            this.code = e,
            this.elTextarea.value = e,
            this.elCode.innerHTML = escapeHtml(e),
            this.highlight(),
            this.setLineNumber(),
            setTimeout(this.runUpdate.bind(this), 1)
        },
        CodeFlask.prototype.updateLanguage = function(e) {
            var t = this.opts.language;
            this.elCode.classList.remove("language-" + t),
            this.elCode.classList.add("language-" + e),
            this.opts.language = e,
            this.highlight()
        },
        CodeFlask.prototype.addLanguage = function(e, t) {
            prism.languages[e] = t
        },
        CodeFlask.prototype.populateDefault = function() {
            this.updateCode(this.code)
        },
        CodeFlask.prototype.highlight = function() {
            prism.highlightElement(this.elCode, !1)
        },
        CodeFlask.prototype.onUpdate = function(e) {
            if (e && "[object Function]" !== {}.toString.call(e))
                throw Error("CodeFlask expects callback of type Function");
            this.updateCallBack = e
        },
        CodeFlask.prototype.getCode = function() {
            return this.code
        },
        CodeFlask.prototype.runUpdate = function() {
            this.updateCallBack && this.updateCallBack(this.code)
        },
        CodeFlask.prototype.enableReadonlyMode = function() {
            this.elTextarea.setAttribute("readonly", !0)
        },
        CodeFlask.prototype.disableReadonlyMode = function() {
            this.elTextarea.removeAttribute("readonly")
        };
        __webpack_exports__["default"] = CodeFlask
    }).call(__webpack_exports__, __webpack_require__(153))
}, function(module, exports) {
    var g;
    g = function() {
        return this
    }();
    try {
        g = g || Function("return this")() || (1, eval)("this")
    } catch (e) {
        if (typeof window === "object")
            g = window
    }
    module.exports = g
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("navigation", {
        template: `\n    <ul class="navigation">\n        <li title="add item" v-bind:class="{active: view ==='${C.VIEWS.ADD}'}" v-on:click="setView('${C.VIEWS.ADD}')">\n            <i class="fas fa-plus"></i>\n        </li>\n        <li title="current selection" v-bind:class="{active: view ==='${C.VIEWS.SELECTION}'}" v-on:click="setView('${C.VIEWS.SELECTION}')">\n            <i class="fas fa-mouse-pointer"></i>\n        </li>\n        <li title="manage documents" v-bind:class="{active: view ==='${C.VIEWS.FILE}'}" v-on:click="setView('${C.VIEWS.FILE}')">\n            <i class="fas fa-file"></i>\n        </li>\n        <li title="export" v-bind:class="{active: view ==='${C.VIEWS.EXPORT}'}" v-on:click="setView('${C.VIEWS.EXPORT}')">\n            <i class="fas fa-download"></i>\n        </li>\n        <li title="api" v-bind:class="{active: view ==='${C.VIEWS.API}'}" v-on:click="setView('${C.VIEWS.API}')">\n            <i class="fas fa-code"></i>\n        </li>\n        <li title="user &amp; account" v-bind:class="{active: view ==='${C.VIEWS.ACCOUNT}'}" v-on:click="setView('${C.VIEWS.ACCOUNT}')">\n            <i class="fas fa-user"></i>\n        </li>\n    </ul>\n    `,
        data: function() {
            return {
                view: C.VIEWS.ADD
            }
        },
        created: function() {
            this.$root.$on("init", () => {
                const lastView = this.$root.userSettings.get("sidebarView");
                if (lastView !== "selection") {
                    this.setView(lastView)
                }
            })
        },
        methods: {
            setView(view) {
                this.$data.view = view;
                this.$parent.$data.view = view;
                this.$root.userSettings.set("sidebarView", view);
                this.$root.$emit("view-changed", view)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const COLORS = __webpack_require__(156);
    const DEFAULT_COLOR = "#E61899";
    const DragPanel = __webpack_require__(157);
    const colorTools = __webpack_require__(15);
    const TRANSPARENT_COLOR = __webpack_require__(5).transparentColor;
    const SL_WIDTH = 200;
    const SL_HEIGHT = 124;
    const H_WIDTH = 200;
    const H_OFFSET = -3;
    const SL_OFFSET = -7;
    Vue.component("color-picker", {
        template: `\n        <div class="color-picker">\n            <div \n                class="selected-color"\n                title="set color"\n                @click="showPanel"\n                :class="{transparent: selectedColor === '#00000000'}"\n                :style="{backgroundColor:selectedColor || '#CCCCCC', color: getContrastColor(selectedColor || '#CCCCCC')}">\n                {{selectedColor === '#00000000' ? 'transparent' : (selectedColor || 'select color') }}\n            </div>\n            <div class="color-picker-panel" :class="{show:isPanelVisible}" @click.stop>\n                <div class="tip"><div></div></div>\n                <ul class="colors">\n                    <li \n                        class="transparent"\n                        title="transparent"\n                        v-bind:class="{active: selectedColor === '#FFFFFF00'}"\n                        v-on:click="setColor('${TRANSPARENT_COLOR}', false)"\n                    >\n                        <div></div>\n                    </li>\n                    <li \n                        v-for="color in colors" \n                        :style="{'background-color': color}" \n                        v-bind:class="{active: selectedColor === color}"\n                        v-on:click="setColor(color, false)"\n                    ></li>\n                    <li \n                        v-for="color in customColors" \n                        :style="{'background-color': color}" \n                        v-bind:class="{active: selectedColor === color}"\n                        v-on:click="setColor(color, true)"\n                    ></li>\n                    <li class="add-new" title="add custom color" v-on:click="addCustomColor">\n                        <i class="fas fa-plus"></i>\n                    </li>\n                </ul>\n                <form action="#" v-on:submit.prevent="setCustomColor" class="custom-color" v-show="isCustomColor">\n                    <div class="preview-swatch" :style="{background: customColor}" v-on:click.stop="showCustomColorPicker">\n                        <div class="custom-color-picker" v-on:click.stop v-bind:class="{open:customColorPickerVisible}">\n                            <div class="saturation-lightness-selector" :style="{'background-color': slBackgroundColor}" ref="slPanel">\n                                <div class="gradient-white"></div>\n                                <div class="gradient-black"></div>\n                                <div class="selector" ref="slSelector"></div>\n                            </div>\n                            <div class="hue-selector" ref="hPanel">\n                                <div class="selector" ref="hSelector"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <input v-model="customColor" type="text" />\n                    <i class="fas fa-times" title="remove color" v-on:mousedown="removeCustomColor"></i>                \n                </form>\n            </div>\n        </div>\n    `,
        props: ["color", "changeCallback"],
        watch: {
            color: function(color) {
                if (color.toUpperCase() !== this.$data.selectedColor) {
                    this.setColor(color, this.$data.customColors.indexOf(color) > -1)
                }
            }
        },
        data: function() {
            return {
                selectedColor: this.$props.color ? this.$props.color.toUpperCase() : null,
                colors: COLORS,
                customColors: this.$root.userSettings.get("customColors"),
                customColor: null,
                isCustomColor: false,
                isPanelVisible: false,
                customColorPickerVisible: false,
                slBackgroundColor: DEFAULT_COLOR
            }
        },
        created() {
            this.closeCustomColorPickerFn = this.closeCustomColorPicker.bind(this);
            this.hue = 0;
            this.saturation = 0;
            this.lightness = 0
        },
        mounted() {
            this.slDragPanel = new DragPanel(this.$refs.slPanel, this.$refs.slSelector, {
                x: true,
                y: true
            });
            this.hDragPanel = new DragPanel(this.$refs.hPanel, this.$refs.hSelector, {
                x: true,
                y: false
            });
            this.hDragPanel.on("value-change", this.onHValueChange, this);
            this.slDragPanel.on("value-change", this.onSlValueChange, this)
        },
        methods: {
            showPanel() {
                this.$data.isPanelVisible = true;
                setTimeout(() => {
                    const closePanel = e => {
                        const path = e.path || e.composedPath && e.composedPath();
                        if (path.includes(this.$el)) {
                            return
                        }
                        this.$data.isPanelVisible = false;
                        document.body.removeEventListener("click", closePanel, true)
                    };
                    document.body.addEventListener("click", closePanel, true)
                })
            },
            getContrastColor(color) {
                const hsl = colorTools.hexToHsl(color);
                if (hsl.l > .5) {
                    hsl.l = .1
                } else {
                    hsl.l = .9
                }
                hsl.h = (hsl.h + .5) % 1;
                return colorTools.hslToHex(hsl.h, hsl.s, hsl.l)
            },
            setColor(color, isCustomColor) {
                color = color.toUpperCase();
                this.$data.selectedColor = color;
                this.$data.isCustomColor = isCustomColor;
                if (isCustomColor) {
                    this.$data.customColor = color
                }
                const isTransient = this.hDragPanel.dragInProgress || this.slDragPanel.dragInProgress;
                this.$props.changeCallback(color, isTransient);
                if (!isTransient) {
                    const hsl = colorTools.hexToHsl(color);
                    this.hue = hsl.h;
                    this.saturation = hsl.s;
                    this.lightness = hsl.l
                }
            },
            addCustomColor() {
                const randomColor = colorTools.getRandomColor();
                this.$data.customColors.push(randomColor);
                this.$data.isCustomColor = true;
                this.$data.customColor = randomColor;
                this.$data.selectedColor = randomColor;
                this.$root.userSettings.set("customColors", this.$data.customColors);
                this.setColor(randomColor, true)
            },
            setCustomColor() {
                var index = this.$data.customColors.indexOf(this.$data.selectedColor);
                if (index > -1) {
                    this.$data.customColors[index] = this.$data.customColor;
                    this.$root.userSettings.set("customColors", this.$data.customColors);
                    this.setColor(this.$data.customColor, true)
                }
            },
            removeCustomColor() {
                var index = this.$data.customColors.indexOf(this.$data.selectedColor);
                if (index === -1) {
                    return
                }
                this.$data.customColors.splice(index, 1);
                this.$root.userSettings.set("customColors", this.$data.customColors);
                this.setColor("#E61898", false)
            },
            showCustomColorPicker() {
                this.$data.customColorPickerVisible = true;
                const hsl = colorTools.hexToHsl(this.$data.selectedColor);
                this.$refs.slSelector.style.left = hsl.s * SL_WIDTH + "px";
                this.$refs.slSelector.style.top = (1 - hsl.l) * SL_HEIGHT + "px";
                this.$refs.hSelector.style.left = hsl.h * H_WIDTH + "px";
                this.$data.slBackgroundColor = `hsl(${hsl.h * 360},100%, 50%)`;
                document.body.addEventListener("click", this.closeCustomColorPickerFn, false);
                document.getElementById("sidebar").addEventListener("click", this.closeCustomColorPickerFn, false)
            },
            closeCustomColorPicker() {
                this.$data.customColorPickerVisible = false;
                document.body.removeEventListener("click", this.closeCustomColorPickerFn, false);
                document.getElementById("sidebar").removeEventListener("click", this.closeCustomColorPickerFn, false)
            },
            onHValueChange(fx) {
                this.hue = fx;
                this.$data.slBackgroundColor = `hsl(${fx * 360},100%, 50%)`;
                this.createCustomColor()
            },
            onSlValueChange(fx, fy) {
                this.saturation = fx;
                this.lightness = ((1 - fx) * (1 - fy) + (1 - fy)) * .5;
                this.createCustomColor()
            },
            createCustomColor() {
                const h = this.hue;
                const s = this.saturation;
                const l = this.lightness;
                this.$data.customColor = colorTools.hslToHex(h, s, l).toUpperCase();
                this.setCustomColor()
            }
        }
    })
}, function(module, exports) {
    module.exports = ["#000000", "#202020", "#404040", "#606060", "#808080", "#9f9f9f", "#bfbfbf", "#dfdfdf", "#FFFFFF", "#E61898", "#E61876", "#E61853", "#E61831", "#E62118", "#E64418", "#E66618", "#E68818", "#E6AB18", "#E6CD18", "#DDE618", "#BAE618", "#98E618", "#76E618", "#53E618", "#31E618", "#18E621", "#18E644", "#18E666", "#18E688", "#18E6AB", "#18E6CD", "#18DDE6", "#18BAE6", "#1898E6", "#1876E6", "#1853E6", "#1831E6", "#2118E6", "#4418E6", "#6618E6", "#8818E6", "#AB18E6", "#CD18E6", "#E618DD", "#E618BA"]
}, function(module, exports, __webpack_require__) {
    const EventEmitter = __webpack_require__(2);
    module.exports = class DragListener extends EventEmitter {
        constructor(panelElement, pointerElement, options)
        {
            super();
            this.panelElement = panelElement;
            this.pointerElement = pointerElement;
            this.options = options;
            this.panelElement.addEventListener("mousedown", this.onMouseDown.bind(this), false);
            this.onMouseMoveFn = this.onMouseMove.bind(this);
            this.onMouseUpFn = this.onMouseUp.bind(this);
            this.panelWidth = null;
            this.panelHeight = null;
            this.pointerOffsetX = null;
            this.pointerOffsetY = null;
            this.panelPosition = null;
            this.left = null;
            this.top = null;
            this.dragInProgress = false
        }
        onMouseDown(e)
        {
            e.preventDefault();
            this.panelWidth = this.panelElement.offsetWidth;
            this.panelHeight = this.panelElement.offsetHeight;
            this.pointerOffsetX = this.pointerElement.offsetWidth / 2;
            this.pointerOffsetY = this.pointerElement.offsetHeight / 2;
            this.panelPosition = this.panelElement.getBoundingClientRect();
            window.addEventListener("mousemove", this.onMouseMoveFn, true);
            window.addEventListener("mouseup", this.onMouseUpFn, true);
            this.dragInProgress = true;
            this.updatePosition(e);
            this.emit("drag-start")
        }
        onMouseMove(e)
        {
            this.updatePosition(e)
        }
        onMouseUp(e)
        {
            e.stopPropagation();
            this.dragInProgress = false;
            window.removeEventListener("mousemove", this.onMouseMoveFn, true);
            window.removeEventListener("mouseup", this.onMouseUpFn, true);
            this.emitValueChange();
            this.emit("drag-end")
        }
        updatePosition(e)
        {
            const left = this.getValue(e.clientX - this.panelPosition.left, this.pointerOffsetX, this.panelWidth);
            const top = this.getValue(e.clientY - this.panelPosition.top, this.pointerOffsetY, this.panelHeight);
            if (left !== this.left || top !== this.top) {
                if (this.options.x) {
                    this.pointerElement.style.left = left + "px"
                }
                if (this.options.y) {
                    this.pointerElement.style.top = top + "px"
                }
                this.left = left;
                this.top = top;
                this.emitValueChange()
            }
        }
        emitValueChange()
        {
            const fx = (this.left + this.pointerOffsetX) / this.panelWidth;
            const fy = (this.top + this.pointerOffsetY) / this.panelHeight;
            this.emit("value-change", fx, fy)
        }
        getValue(eventOffset, pointerOffset, dimension)
        {
            var value = eventOffset - pointerOffset;
            value = Math.max(-pointerOffset, value);
            value = Math.min(dimension - pointerOffset, value);
            return value
        }
    }
}, function(module, exports) {
    Vue.component("linewidth-picker", {
        template: `\n        <div class="linewidth-picker" v-bind:class="{'has-null': hasNull}">\n            <div v-if="hasNull" class="set-null" v-on:click="setLineWidth( 0 )" title="none" >\n                <div></div>\n            </div>\n            <div \n                v-for="(opt, i) in lineWidthOptions"\n                v-on:click="setLineWidth( opt )" \n                v-bind:class="[selectedLineWidth === opt ? 'active': '', 'width-' + (i+1)]" \n                :title="'linewidth ' + (i + 1)"\n            >\n                <div></div>\n            </div>\n        </div>\n    `,
        props: ["lineWidth", "changeCallback", "lineWidthOptions", "hasNull"],
        watch: {
            lineWidth: function(lineWidth) {
                this.$data.selectedLineWidth = lineWidth
            }
        },
        data: function() {
            return {
                selectedLineWidth: this.$props.lineWidth
            }
        },
        methods: {
            setLineWidth(lineWidth) {
                this.$data.selectedLineWidth = lineWidth;
                this.$props.changeCallback(lineWidth)
            }
        }
    })
}, function(module, exports) {
    Vue.component("delete-selected-button", {
        template: `\n        <ul class="delete-selected-button option-list one-item" v-on:click="deleteSelectedObject">\n            <li>\n                <span>\n                    <i class="fas fa-trash-alt"></i>\n                    <span>delete</span>\n                </span>\n            </li>\n        </ul>\n    `,
        methods: {
            deleteSelectedObject() {
                this.$root.canvas.selectionManager.deleteSelectedObjects()
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const ICONS = __webpack_require__(11);
    Vue.component("icon-picker", {
        template: `\n        <div class="icon-picker">\n            <search-input :searchCallback="applySearch" placeholder="search icons..."></search-input>\n            <div class="empty-message" v-if="isEmpty">\n                -- no matching icons found --\n            </div>\n            <ul class="icon-view">\n                <li :title="name"\n                    v-for="(icon,name) in icons" \n                    v-bind:class="[icon.style, selectedIcon === name ? 'active' : '' ]" \n                    v-on:click="setIcon(name)" \n                >\n                    {{icon.unicode}}\n                </li>\n            </ul>\n        </div>\n    `,
        data: function() {
            return {
                icons: ICONS,
                selectedIcon: this.$props.icon || null,
                isEmpty: false
            }
        },
        watch: {
            icon: function(icon) {
                this.$data.selectedIcon = icon
            }
        },
        props: ["icon", "changeCallback"],
        methods: {
            setIcon(icon) {
                this.$data.selectedIcon = icon;
                this.changeCallback(icon)
            },
            applySearch(term) {
                term = term.trim().toLowerCase();
                if (!term || term.length === 0) {
                    this.$data.icons = ICONS;
                    return
                }
                const matchingIcons = {};
                var id,
                    i;
                for (id in ICONS) {
                    if (id.indexOf(term) > -1) {
                        matchingIcons[id] = ICONS[id];
                        continue
                    }
                    for (i = 0; i < ICONS[id].tags.length; i++) {
                        if (ICONS[id].tags[i].indexOf(term) > -1) {
                            matchingIcons[id] = ICONS[id];
                            break
                        }
                    }
                }
                this.$data.icons = matchingIcons;
                this.$data.isEmpty = Object.keys(matchingIcons).length === 0
            }
        }
    })
}, function(module, exports) {
    Vue.component("search-input", {
        template: `\n        <div class="search-input">\n            <input type="text" :placeholder="placeholder" v-model="searchTerm" v-on:keyup.stop v-on:keydown.stop class="copyable"/>\n            <i v-if="!searchTerm || searchTerm.length === 0" class="fas fa-search"></i>\n            <i v-else class="fas fa-times interactive" v-on:click="clearInput"></i>\n        </div>\n    `,
        data: function() {
            return {
                searchTerm: null
            }
        },
        props: ["searchCallback", "placeholder"],
        watch: {
            searchTerm: function(term) {
                this.$props.searchCallback(term)
            }
        },
        methods: {
            clearInput() {
                this.$data.searchTerm = ""
            }
        }
    })
}, function(module, exports) {
    const VALUES = [0, Math.PI * .5, Math.PI, Math.PI * 1.5];
    Vue.component("rotation-controls", {
        template: `\n    <ul class="rotation-controls two-items option-list">\n        <li v-on:click="rotateLeft" title="rotate left">\n            <span title="rotate">\n                <i class="fas fa-undo-alt"></i>\n                <label v-if="labelsVisible">left</label>\n            </span>\n        </li>\n        <li v-on:click="rotateRight" title="rotate right">\n            <span>\n                <i class="fas fa-redo-alt"></i>\n                <label v-if="labelsVisible">right</label>\n            </span>\n        </li>\n    </ul>\n    `,
        props: ["rotation", "changeCallback", "showLabels"],
        data: function() {
            return {
                labelsVisible: this.$props.showLabels === undefined ? true : this.$props.showLabels
            }
        },
        created() {
            this.$root.canvas.app.eventHub.on("rotate-item-left", this.rotateLeft, this);
            this.$root.canvas.app.eventHub.on("rotate-item-right", this.rotateRight, this)
        },
        destroyed() {
            this.$root.canvas.app.eventHub.off("rotate-item-left", this.rotateLeft, this);
            this.$root.canvas.app.eventHub.off("rotate-item-right", this.rotateRight, this)
        },
        methods: {
            rotateLeft() {
                this.moveIndexBy(-1)
            },
            rotateRight() {
                this.moveIndexBy(1)
            },
            moveIndexBy(index) {
                var currentIndex,
                    newIndex;
                if (this.$props.rotation === null) {
                    currentIndex = 0
                } else {
                    currentIndex = VALUES.indexOf(this.$props.rotation)
                }
                if (currentIndex === -1) {
                    throw new Error("Unsupportad rotation " + this.$props.rotation)
                }
                newIndex = currentIndex + index;
                if (newIndex < 0) {
                    newIndex = VALUES.length - 1
                }
                if (newIndex > VALUES.length - 1) {
                    newIndex = 0
                }
                this.$props.changeCallback(VALUES[newIndex])
            }
        }
    })
}, function(module, exports) {
    Vue.component("shadow-level-picker", {
        template: `\n        <ul class="shadow-level-picker option-list">\n            <li \n                v-for="level in 4" \n                v-on:click="setShadowLevel( level - 1 )" \n                v-bind:class="{active: selectedShadowLevel == level - 1}">\n                    <div></div>\n                    <div></div>\n                </li>\n        </ul>\n    `,
        props: ["shadowLevel", "changeCallback"],
        data: function() {
            return {
                selectedShadowLevel: this.$props.shadowLevel
            }
        },
        watch: {
            shadowLevel: function(shadowLevel) {
                this.$data.selectedShadowLevel = shadowLevel
            }
        },
        methods: {
            setShadowLevel(level) {
                this.$data.selectedShadowLevel = level;
                this.$props.changeCallback(level)
            }
        }
    })
}, function(module, exports) {
    Vue.component("font-size-picker", {
        template: `\n    <ul class="font-size option-list five-items">\n        <li class="size-1" title="fontsize 1" v-on:click="setFontSize( 0.25 )" v-bind:class="{active: fontSize === 0.25}">A</li>\n        <li class="size-2" title="fontsize 2" v-on:click="setFontSize( 0.35 )" v-bind:class="{active: fontSize === 0.35}">A</li>\n        <li class="size-3" title="fontsize 3" v-on:click="setFontSize( 0.5 )" v-bind:class="{active: fontSize === 0.5}">A</li>\n        <li class="size-4" title="fontsize 4" v-on:click="setFontSize( 0.7 )" v-bind:class="{active: fontSize === 0.7}">A</li>\n        <li class="size-5" title="fontsize 5" v-on:click="setFontSize( 1 )" v-bind:class="{active: fontSize === 1}">A</li>\n    </ul>\n    `,
        data: function() {
            return {
                selectedFontSize: this.$props.fontSize
            }
        },
        props: ["fontSize", "callback"],
        watch: {
            fontSize: function(fontSize) {
                this.$data.selectedFontSize = fontSize
            }
        },
        methods: {
            setFontSize(fontSize) {
                this.$data.selectedFontSize = fontSize;
                this.$props.callback(fontSize)
            }
        }
    })
}, function(module, exports) {
    Vue.component("text-align-picker", {
        template: `\n    <ul class="text-align option-list three-items">\n        <li v-on:click="setTextAlign( 'left' )" v-bind:class="{active: selectedTextAlign === 'left'}" title="align left">\n            <i class="fas fa-align-left"></i>\n        </li>\n        <li v-on:click="setTextAlign( 'center' )" v-bind:class="{active: selectedTextAlign === 'center'}" title="align center">\n            <i class="fas fa-align-center"></i>        \n        </li>\n        <li v-on:click="setTextAlign( 'right' )" v-bind:class="{active: selectedTextAlign === 'right'}" title="align right">\n            <i class="fas fa-align-right"></i>        \n        </li>\n    </ul>\n    `,
        data: function() {
            return {
                selectedTextAlign: this.$props.textAlign
            }
        },
        props: ["textAlign", "callback"],
        watch: {
            textAlign: function(textAlign) {
                this.$data.selectedTextAlign = textAlign
            }
        },
        methods: {
            setTextAlign(textAlign) {
                this.$data.selectedTextAlign = textAlign;
                this.$props.callback(textAlign)
            }
        }
    })
}, function(module, exports) {
    Vue.component("font-style-picker", {
        template: `\n    <ul class="font-style option-list">\n        <li v-on:click="toggleFontStyle( 'bold' )" v-bind:class="{active: fontStyle.bold}">\n            <span><i class="fas fa-bold"></i>old</span>\n        </li>\n        <li v-on:click="toggleFontStyle( 'italic' )" v-bind:class="{active: fontStyle.italic}">\n            <span><i class="fas fa-italic"></i>talic</span>            \n        </li>\n    </ul>\n    `,
        data: function() {
            return {
                selectedFontStyle: this.$props.fontStyle
            }
        },
        props: ["fontStyle", "callback"],
        watch: {
            fontStyle: function(fontStyle) {
                this.$data.selectedFontStyle = fontStyle
            }
        },
        methods: {
            toggleFontStyle(fontStyle) {
                this.$data.selectedFontStyle[fontStyle] = !this.$data.selectedFontStyle[fontStyle];
                this.$props.callback(this.$data.selectedFontStyle)
            }
        }
    })
}, function(module, exports) {
    Vue.component("checkbox", {
        template: `\n    <div class="checkbox btn" v-on:click="toggleValue" v-bind:class="{checked: isChecked}">\n        <i class="fas fa-fw fa-check-square"></i>\n        <i class="fas fa-fw fa-square"></i>\n        <span>{{label}}</span>\n    </div>\n    `,
        data: function() {
            return {
                isChecked: this.$props.value
            }
        },
        props: ["label", "value", "callback"],
        watch: {
            value: function(value) {
                this.$data.isChecked = value
            }
        },
        methods: {
            toggleValue() {
                this.$data.isChecked = !this.$data.isChecked;
                this.$props.callback(this.$data.isChecked)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const tools = __webpack_require__(4);
    __webpack_require__(169);
    Vue.component("image-picker", {
        template: `\n        <div class="image-picker" :class="{'dragged-over': isDraggedOver, 'dragging': isDragging}">\n            <div class="list-view-toggle">\n                <i class="fas fa-list clickable" title="list view" v-if="showGrid" @click="showGrid=false"></i>\n                <i class="fas fa-th clickable" title="large preview images" v-if="!showGrid" @click="showGrid=true"></i>\n            </div>\n            <div class="drop-overlay center">\n                <div>\n                    <i class="fas fa-cloud-upload-alt"></i>\n                    drop here to upload...\n                </div>\n            </div>\n            <div class="no-image-overlay center" v-if="images.length === 0">\n                <div>\n                    <i class="fas fa-cloud-upload-alt"></i>\n                    <p>\n                        No images yet - you can upload one by dragging it here or by clicking the button below...\n                    </p>\n                </div>\n            </div>\n            <ul \n                class="image-list" \n                :class="[showGrid?'grid':'list']"\n                @dragover.prevent.stop="isDraggedOver = true"\n                @dragleave.prevent.stop="isDraggedOver = false"\n                @drop.prevent.stop="onDrop"\n            >\n                <image-picker-entry \n                    v-for="image in images" \n                    :image="image"\n                    :selectedImagePath="selectedImagePath"\n                    :key="image.name || image"\n                ></image-picker-entry>\n            </ul>\n\n            <div class="btn" v-on:click.stop="triggerUploadDialog">\n                <i class="fas fa-cloud-upload-alt"></i>\n                upload image\n            </div>\n            <input \n                ref="fileInput" \n                type="file" \n                name="file" \n                id="file" \n                data-multiple-caption="{count} files selected"\n                multiple\n                @change="onInputChange($event)"\n            />\n        </div>\n    `,
        props: ["imagePath", "callback"],
        watch: {
            imagePath: function(imagePath) {
                this.$data.selectedImagePath = imagePath
            }
        },
        data: function() {
            return {
                selectedImagePath: this.$props.imagePath,
                images: [],
                showGrid: false,
                isDraggedOver: false,
                isDragging: false
            }
        },
        created() {
            this.refresh()
        },
        methods: {
            setImagePath(imagePath) {
                this.$data.selectedImagePath = imagePath;
                this.$props.callback(imagePath)
            },
            triggerUploadDialog() {
                this.$refs.fileInput.click()
            },
            onInputChange(event) {
                this.addFiles(event.target.files)
            },
            showInvalidTypeWarning(file) {},
            onDrop(event) {
                this.$data.isDraggedOver = false;
                this.addFiles(event.dataTransfer.files)
            },
            refresh() {
                this.$http.get("file/list").then(res => {
                    this.$data.images = res.body
                })
            },
            addFiles(files) {
                for (var i = 0; i < files.length; i++) {
                    if (files[i].type.substr(0, 5) !== "image") {
                        this.showInvalidTypeWarning(files[i]);
                        continue
                    }
                    this.$data.images.push(files[i])
                }
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    Vue.component("image-picker-entry", {
        template: `\n        <li class="image-picker-entry clickable" :class="{'has-action':!!action, active: active }" @click="setPath">\n            <div class="upload-overlay">\n                {{action}} {{uploadDots}}\n            </div>\n            <div class="image-box">\n                <img :src="imageSrc" ref="img"/>\n            </div>\n            <label>\n                <span class="file-name">{{fileName}}</span>\n                <span class="details">\n                    Uploaded {{created}}&nbsp;&nbsp;&nbsp;({{size}})\n                </span>\n            </label>\n            <div class="delete-btn" title="delete-image" @click.stop="deleteImage">\n                <i class="fas fa-trash"></i>            \n            </div>\n        </li>\n    `,
        props: ["image", "selectedImagePath"],
        data: function() {
            return {
                fileName: null,
                imageSrc: null,
                created: null,
                size: null,
                isUploading: false,
                uploadDots: "",
                action: null,
                active: (this.path || this.$props.image.path) === this.$props.selectedImagePath
            }
        },
        created: function() {
            this.$data.fileName = this.getFileName();
            if (this.$props.image instanceof window.File) {
                this.readImage()
            } else {
                this.$data.imageSrc = config.imageRoot + this.$props.image.path;
                this.path = this.$props.image.path;
                this.setMetaData(this.$props.image)
            }
        },
        watch: {
            selectedImagePath: function(path) {
                this.$data.active = (this.path || this.$props.image.path) === path
            }
        },
        mounted: function() {
            this.$refs.img.onload = this.onLoad.bind(this)
        },
        methods: {
            formatImageSize(size) {
                size = parseInt(size, 10);
                if (size > 1024 * 1024) {
                    return (size / (1024 * 1024)).toFixed(2) + "mb"
                } else if (size > 1024) {
                    return (size / 1024).toFixed(2) + "kb"
                } else {
                    return size + "b"
                }
            },
            getFileName() {
                var imageCount = 0,
                    i,
                    match,
                    highestCount = 0;
                for (i = 0; i < this.$parent.$data.images.length; i++) {
                    if (this.$props.image.name === this.$parent.$data.images[i].name) {
                        imageCount++
                    } else {
                        match = this.$parent.$data.images[i].name.match(/(.*)-([0-9]*)\.[^\.]*$/);
                        if (match && match[1] === this.$props.image.name.replace(/(\.[^\.]*$)/, "")) {
                            imageCount++;
                            highestCount = Math.max(highestCount, parseInt(match[2], 10))
                        }
                    }
                }
                if (imageCount === 1) {
                    return this.$props.image.name
                } else {
                    return this.$props.image.name.replace(/(\.[^\.]*$)/, `-${Math.max(imageCount, highestCount + 1)}$1`)
                }
            },
            setPath() {
                this.$parent.setImagePath(this.path)
            },
            setMetaData(data) {
                this.$data.size = this.formatImageSize(data.size);
                this.$data.created = new Date(data.created).toDateString()
            },
            readImage() {
                this.fileReader = new FileReader;
                this.fileReader.onload = this.onFileRead.bind(this);
                this.fileReader.readAsDataURL(this.$props.image)
            },
            onFileRead() {
                this.$data.imageSrc = this.fileReader.result;
                this.uploadImage(this.fileReader.result)
            },
            uploadImage(dataUrl) {
                const params = {
                    dataUrl: dataUrl,
                    mimeType: this.fileReader.result.match(/data\:([^;]*);/)[1],
                    fileName: this.$data.fileName
                };
                this.$http.post("file/upload", params).then(this.onUploadComplete.bind(this)).catch(this.onUploadFailed.bind(this));
                this.startAction("uploading");
                this.$el.parentElement.scrollTo(0, 999999999999)
            },
            onUploadFailed() {
                this.$data.action = "sorry, upload failed";
                this.$data.uploadDots = "";
                window.clearInterval(this.uploadDotInterval)
            },
            startAction(action) {
                this.$data.action = action;
                var uploadDotsCount = 0;
                this.uploadDotInterval = window.setInterval(() => {
                    uploadDotsCount++;
                    if (uploadDotsCount > 3) {
                        uploadDotsCount = 0
                    }
                    this.$data.uploadDots = "....".substr(0, uploadDotsCount)
                }, 300)
            },
            endAction() {
                this.$data.action = null;
                window.clearInterval(this.uploadDotInterval)
            },
            onUploadComplete(res) {
                this.setMetaData(res.body);
                this.path = res.body.path;
                this.endAction()
            },
            onLoad() {
                if (this.$refs.img) {
                    this.$refs.img.style.maxWidth = this.$refs.img.naturalWidth + "px"
                }
            },
            deleteImage() {
                const msg = `Are you sure that you want to delete ${this.$data.fileName}?`;
                this.$root.$refs.sidebar.$refs.overlay.confirm(msg, () => {
                    this.startAction("deleting");
                    this.$http.post("file/delete", {
                        path: this.path
                    }).then(res => {
                        this.removeDeletedImageFromImageObjects();
                        this.removeDeletedImageFromGenericComponents();
                        this.endAction();
                        this.$parent.refresh()
                    })
                })
            },
            removeDeletedImageFromImageObjects() {
                const images = this.$root.state.getAllOfType(C.TYPES.IMAGE);
                for (var id in images) {
                    if (images[id].data.path === this.path) {
                        this.$root.state.processTransaction({
                            action: C.ACTIONS.UPDATE,
                            id: id,
                            data: {
                                path: config.defaultImagePath
                            }
                        })
                    }
                }
            },
            removeDeletedImageFromGenericComponents() {
                const allComponents = this.$root.state.getAllOfType(C.TYPES.COMPONENT);
                for (var id in allComponents) {
                    if (allComponents[id].data.imagePath === this.path) {
                        this.$root.state.processTransaction({
                            action: C.ACTIONS.UPDATE,
                            id: id,
                            data: {
                                imagePath: config.blankImagePath
                            }
                        })
                    }
                }
            }
        }
    })
}, function(module, exports) {
    Vue.component("z-index-picker", {
        template: `\n    <ul class="z-index option-list three-items">\n        \n        \n        <li v-on:click="setZIndex(-1)" title="move downwards">\n            <i class="fas fa-arrow-down"></i>        \n        </li>\n        <li class="not-clickable">\n            {{selectedZIndex}}\n        </li>\n        <li v-on:click="setZIndex(+1)" title="move upwards">\n            <i class="fas fa-arrow-up"></i>         \n        </li>\n    </ul>\n    `,
        data: function() {
            return {
                selectedZIndex: this.$props.zIndex
            }
        },
        props: ["zIndex", "callback"],
        watch: {
            zIndex: function(zIndex) {
                this.$data.selectedZIndex = zIndex
            }
        },
        methods: {
            setZIndex(delta) {
                this.$data.selectedZIndex += delta;
                this.$props.callback(this.$data.selectedZIndex)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const lineTools = __webpack_require__(7);
    Vue.component("arrow-tip-controls", {
        template: `\n    <ul class=" option-list" :class="[anchorSelected?'one-item':'two-items']">\n        <li v-if="!anchorSelected" v-on:click="toggleArrow( 'left')" title="arrow at beginning">\n            <i class="fas fa-arrow-left"></i>        \n        </li>\n        <li v-on:click="toggleArrow( 'right')" title="arrow at end" :class="{active:selectedAnchorHasArrow}" >\n            <i class="fas fa-arrow-right"></i>         \n        </li>\n    </ul>\n    `,
        data: function() {
            return {
                anchorSelected: false,
                selectedAnchorHasArrow: false
            }
        },
        props: ["arrowAnchorIndices", "callback"],
        created() {
            this.selectedLineGroup = null;
            this.$root.canvas.selectionManager.on("selection-change", this.listenForSubPartChange, this);
            this.listenForSubPartChange()
        },
        destroyed() {
            this.selectedLineGroup.subparts.off("selectedSubPartChanged", this.onSelectionChange, this);
            this.$root.canvas.selectionManager.off("selection-change", this.onSelectionChange, this)
        },
        methods: {
            listenForSubPartChange() {
                if (this.selectedLineGroup) {
                    this.selectedLineGroup.subparts.off("selectedSubPartChanged", this.onSelectionChange, this)
                }
                if (this.$root.canvas.selectionManager.selectedObjects.length > 0 && this.$root.canvas.selectionManager.selectedObjects[0].type === C.TYPES.LINE_GROUP) {
                    this.selectedLineGroup = this.$root.canvas.selectionManager.selectedObjects[0];
                    this.selectedLineGroup.subparts.on("selectedSubPartChanged", this.onSelectionChange, this)
                }
            },
            onSelectionChange() {
                this.$data.anchorSelected = this.selectedLineGroup.subparts.selectedSubPartType === C.SUB_PART_TYPES.ANCHOR_POINT;
                this.$data.selectedAnchorHasArrow = !!this.arrowAnchorIndices[this.selectedLineGroup.subparts.selectedSubPartIndex]
            },
            setArrows(side) {
                const data = this.$root.canvas.app.state.getStateForId(this.selectedLineGroup.id);
                const connectionsPerAnchor = {};
                var i,
                    totalX = 0,
                    totalY = 0,
                    minX = Infinity,
                    maxX = -Infinity,
                    minY = Infinity,
                    maxY = -Infinity,
                    avg,
                    dimension,
                    value,
                    singleAnchorCount = 0,
                    anchorPoint;
                for (i = 0; i < data.anchors.length; i++) {
                    connectionsPerAnchor[i] = 0
                }
                for (i = 0; i < data.lines.length; i++) {
                    connectionsPerAnchor[data.lines[i][0]]++;
                    connectionsPerAnchor[data.lines[i][1]]++
                }
                for (i = 0; i < data.anchors.length; i++) {
                    if (connectionsPerAnchor[i] === 1) {
                        singleAnchorCount++;
                        anchorPoint = lineTools.toAnchorPoint(data.anchors[i]);
                        totalX += anchorPoint.x;
                        totalY += anchorPoint.y;
                        minX = Math.min(minX, anchorPoint.x);
                        maxX = Math.max(maxX, anchorPoint.x);
                        minY = Math.min(minY, anchorPoint.y);
                        maxY = Math.max(maxY, anchorPoint.y)
                    }
                }
                if (maxY - minY > maxX - minX) {
                    dimension = "y";
                    avg = totalY / singleAnchorCount
                } else {
                    dimension = "x";
                    avg = totalX / singleAnchorCount
                }
                for (i = 0; i < data.anchors.length; i++) {
                    if (!data.anchors[i]) {
                        continue
                    }
                    value = lineTools.toAnchorPoint(data.anchors[i])[dimension];
                    if (connectionsPerAnchor[i] !== 1) {
                        continue
                    }
                    if (dimension === "x" && (side === "left" && value < avg || side === "right" && value > avg) || dimension === "y" && (side === "left" && value > avg || side === "right" && value < avg)) {
                        this.arrowAnchorIndices[i] = !this.arrowAnchorIndices[i]
                    }
                }
            },
            toggleArrow(side) {
                if (this.$data.anchorSelected) {
                    this.arrowAnchorIndices[this.selectedLineGroup.subparts.selectedSubPartIndex] = !this.arrowAnchorIndices[this.selectedLineGroup.subparts.selectedSubPartIndex]
                } else {
                    this.setArrows(side)
                }
                this.$data.selectedAnchorHasArrow = !!this.arrowAnchorIndices[this.selectedLineGroup.subparts.selectedSubPartIndex];
                this.$props.callback(this.arrowAnchorIndices)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("line-dash-picker", {
        template: `\n        <ul class="line-dash-picker option-list three-items">\n            <li \n                @click="setLineDash(${C.LINE_DASH.SOLID})" \n                title="solid" \n                class="solid" :class="{active:selectedLineDash===${C.LINE_DASH.SOLID}}"\n            >\n                <div></div>   \n            </li>\n            <li \n                @click="setLineDash(${C.LINE_DASH.DASHED})" \n                title="dashed" \n                class="dashed"\n                :class="{active:selectedLineDash===${C.LINE_DASH.DASHED}}"\n            >\n                <div></div>   \n            </li>\n            <li \n                @click="setLineDash(${C.LINE_DASH.DOTTED})" \n                title="dotted" \n                class="dotted"\n                :class="{active:selectedLineDash===${C.LINE_DASH.DOTTED}}"\n            >\n                <div></div>   \n            </li>\n        </ul>\n    `,
        props: ["lineDash", "callback"],
        watch: {
            lineDash: function(lineDash) {
                this.$data.selectedLineDash = lineDash
            }
        },
        data: function() {
            return {
                selectedLineDash: this.$props.lineDash
            }
        },
        methods: {
            setLineDash(lineDash) {
                this.$data.selectedLineDash = lineDash;
                this.$props.callback(lineDash)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const LEFT = "left";
    const MIDDLE = "middle";
    const RIGHT = "right";
    const TOP = "top";
    const CENTER = "center";
    const BOTTOM = "bottom";
    function toHalfCell(value) {
        return Math.round(value * 2) / 2
    }
    Vue.component("align-controls", {
        template: `\n        <div class="align-controls">\n            <ul class="option-list three-items">\n                <li \n                    v-for="dir in directions" \n                    @mouseover="showIndicator(dir)" \n                    @mouseout="hideIndicator" \n                    @click="setAlign(dir)" \n                    :class="[dir]" \n                    :title="'align items at ' + dir">\n                    <div>\n                        <div class="line"></div>\n                        <div class="short"></div>\n                        <div class="long"></div>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    `,
        data: function() {
            return {
                directions: [LEFT, MIDDLE, RIGHT, TOP, CENTER, BOTTOM]
            }
        },
        created: function() {},
        methods: {
            getExtremes() {
                const extremes = {
                    xMin: Infinity,
                    xMax: -Infinity,
                    yMin: Infinity,
                    yMax: -Infinity
                };
                var i,
                    bb,
                    key;
                for (i = 0; i < canvas.selectionManager.selectedObjects.length; i++) {
                    bb = canvas.selectionManager.selectedObjects[i].computeBoundingBox();
                    extremes.xMin = Math.min(extremes.xMin, bb.x1);
                    extremes.yMin = Math.min(extremes.yMin, bb.y1);
                    extremes.xMax = Math.max(extremes.xMax, bb.x2);
                    extremes.yMax = Math.max(extremes.yMax, bb.y2)
                }
                extremes.xAvg = extremes.xMin + (extremes.xMax - extremes.xMin) / 2;
                extremes.yAvg = extremes.yMin + (extremes.yMax - extremes.yMin) / 2;
                for (key in extremes) {
                    extremes[key] = toHalfCell(extremes[key])
                }
                return extremes
            },
            getPositionForDirection(dir, bb, extremes) {
                if (dir === TOP) {
                    return {
                        x: extremes.xMin,
                        y: bb.y1
                    }
                } else if (dir === CENTER) {
                    return {
                        x: extremes.xAvg - bb.width / 2,
                        y: bb.y1
                    }
                } else if (dir === BOTTOM) {
                    return {
                        x: extremes.xMax - bb.width,
                        y: bb.y1
                    }
                } else if (dir === RIGHT) {
                    return {
                        x: bb.x1,
                        y: extremes.yMin
                    }
                } else if (dir === MIDDLE) {
                    return {
                        x: bb.x1,
                        y: extremes.yAvg - bb.height / 2
                    }
                } else if (dir === LEFT) {
                    return {
                        x: bb.x1,
                        y: extremes.yMax - bb.height
                    }
                }
            },
            setAlign(dir) {
                const extremes = this.getExtremes();
                var obj,
                    pos,
                    data,
                    bb;
                this.$root.state.startTransactionBlock("align items " + dir);
                for (i = 0; i < this.$root.canvas.selectionManager.selectedObjects.length; i++) {
                    obj = this.$root.canvas.selectionManager.selectedObjects[i];
                    bb = obj.computeBoundingBox();
                    pos = this.getPositionForDirection(dir, bb, extremes);
                    if (obj.alignWith) {
                        obj.alignWith(pos, dir)
                    } else if (obj.setPositionDelta) {
                        obj.storeCurrentPosition();
                        obj.setPositionDelta(pos.x - bb.x1, pos.y - bb.y1, false)
                    } else {
                        this.$root.state.processTransaction({
                            id: obj.id,
                            action: C.ACTIONS.UPDATE,
                            data: {
                                position: pos
                            }
                        })
                    }
                }
                this.$root.state.endTransactionBlock()
            },
            showIndicator(dir) {
                const extremes = this.getExtremes();
                if (dir === TOP) {
                    this.$root.canvas.interactionPlane.drawSingleDimensionIndicator(extremes.xMin, "x")
                } else if (dir === CENTER) {
                    this.$root.canvas.interactionPlane.drawSingleDimensionIndicator(extremes.xAvg, "x")
                } else if (dir === BOTTOM) {
                    this.$root.canvas.interactionPlane.drawSingleDimensionIndicator(extremes.xMax, "x")
                } else if (dir === RIGHT) {
                    this.$root.canvas.interactionPlane.drawSingleDimensionIndicator(extremes.yMin, "y")
                } else if (dir === MIDDLE) {
                    this.$root.canvas.interactionPlane.drawSingleDimensionIndicator(extremes.yAvg, "y")
                } else if (dir === LEFT) {
                    this.$root.canvas.interactionPlane.drawSingleDimensionIndicator(extremes.yMax, "y")
                }
            },
            hideIndicator() {
                this.$root.canvas.interactionPlane.hideSingleDimensionIndicator()
            }
        }
    })
}, function(module, exports) {
    Vue.component("opacity-picker", {
        template: `\n        <div class="opacity-picker">\n            <select-box\n                :options="opacities"\n                :value="selectedOpacity"\n                :callback="setOpacity">\n            ></select-box>\n        </div>\n    `,
        props: ["opacity", "callback"],
        watch: {
            opacity: function(opacity) {
                this.$data.selectedOpacity = opacity
            }
        },
        data: function() {
            return {
                selectedOpacity: this.$props.opacity,
                opacities: [{
                    label: "25%",
                    value: .25
                }, {
                    label: "50%",
                    value: .5
                }, {
                    label: "75%",
                    value: .75
                }, {
                    label: "100%",
                    value: 1
                }]
            }
        },
        methods: {
            setOpacity(opacity) {
                this.$data.selectedOpacity = opacity;
                this.$props.callback(opacity)
            }
        }
    })
}, function(module, exports) {
    Vue.component("loaded-img", {
        template: `\n        <img :src="src" :width="width" :height="height" :class="{loaded: isLoaded, brighten: brighten}" @load="onLoad" />\n    `,
        props: ["src", "width", "height", "brighten"],
        data: function() {
            return {
                isLoaded: false
            }
        },
        mounted: function() {
            this.$data.isLoaded = this.$el.complete
        },
        methods: {
            onLoad() {
                this.$data.isLoaded = true
            }
        }
    })
}, function(module, exports) {
    Vue.component("toggle-switch", {
        template: `\n    <div class="toggle-switch" :class="{enabled: isEnabled}" @click="toggle">\n        <div class="inner">\n            <div></div>\n        </div>\n    </div>\n    `,
        data: function() {
            return {
                isEnabled: this.$props.enabled
            }
        },
        props: ["enabled", "callback"],
        watch: {
            enabled: function(enabled) {
                this.$data.isEnabled = enabled
            }
        },
        methods: {
            toggle() {
                this.$props.callback(!this.$data.isEnabled)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    __webpack_require__(178);
    const C = __webpack_require__(0);
    Vue.component("key-value-editor", {
        template: `\n        <div class="key-value-editor">\n            <ul>\n                <key-value-editor-entry\n                v-for="(entry, entryId) in entries"\n                :mkey="entry.key"\n                :mvalue="entry.value"\n                :key="entryId"\n                :id="entryId"\n                ></key-value-editor-entry>\n            </ul>\n            <div class="add btn" @click="addEntry">\n                <i class="fas fa-plus"></i>\n                <span>{{addBtnLabel}}</span>\n            </div>\n        </div>\n    `,
        props: ["id", "dataKey", "autosave", "addButtonCaption", "additionalEntries"],
        watch: {
            id: function(id, oldId) {
                this.saveIfPending(oldId);
                this.setId(id)
            }
        },
        beforeDestroy: function() {
            this.saveIfPending()
        },
        destroyed() {
            window.clearTimeout(this.saveTimeout)
        },
        created: function() {
            this.entryCount = 0;
            this.saveTimeout = null;
            this.saveDataString = "";
            this.setId(this.$props.id)
        },
        data: function() {
            return {
                entries: {},
                addBtnLabel: this.$props.addButtonCaption || "add entry"
            }
        },
        methods: {
            saveIfPending(id) {
                if (this.saveTimeout) {
                    window.clearTimeout(this.saveTimeout);
                    this.save(id)
                }
            },
            addEntry() {
                this.entryCount++;
                this.$set(this.$data.entries, "entry-" + this.entryCount, {
                    key: "",
                    value: ""
                });
                this.scheduleSave()
            },
            removeEntry(id) {
                this.$delete(this.$data.entries, id);
                this.scheduleSave()
            },
            scheduleSave() {
                if (!this.saveTimeout) {
                    this.saveTimeout = setTimeout(this.save.bind(this), 1e3)
                }
                this.save(null, true)
            },
            setId(id) {
                if (!id) {
                    return
                }
                const data = this.$root.state.getStateForId(id);
                const entries = {};
                const rawEntries = {};
                var key;
                if (this.$props.additionalEntries) {
                    for (key in this.$props.additionalEntries) {
                        rawEntries[key] = this.$props.additionalEntries[key]
                    }
                }
                if (data[this.$props.dataKey]) {
                    for (key in data[this.$props.dataKey]) {
                        rawEntries[key] = data[this.$props.dataKey][key]
                    }
                }
                for (key in rawEntries) {
                    this.entryCount++;
                    entries["entry-" + this.entryCount] = {
                        key: key,
                        value: rawEntries[key]
                    }
                }
                this.$data.entries = entries;
                this.saveDataString = JSON.stringify(rawEntries)
            },
            getData() {
                const saveData = {};
                var entry;
                for (var i = 0; i < this.$children.length; i++) {
                    if (!this.$children[i].isKvPair) {
                        continue
                    }
                    entry = this.$children[i].getData();
                    if (typeof entry.key === "undefined" || typeof entry.value === "undefined") {
                        continue
                    } else if (entry.key.length === 0 || entry.value.length === 0) {
                        continue
                    } else if (entry.value === "true") {
                        saveData[entry.key] = true
                    } else if (entry.value === "false") {
                        saveData[entry.key] = false
                    } else if (entry.value === "null") {
                        saveData[entry.key] = null
                    } else if (!isNaN(entry.value)) {
                        saveData[entry.key] = parseFloat(entry.value)
                    } else {
                        saveData[entry.key] = entry.value
                    }
                }
                return saveData
            },
            save(id, isTransient) {
                this.saveTimeout = null;
                if (!this.$props.autosave) {
                    return
                }
                const saveData = this.getData();
                const saveDataString = JSON.stringify(saveData);
                if (this.saveDataString === saveDataString) {
                    return
                }
                this.saveDataString = saveDataString;
                const transaction = {
                    id: id || this.$props.id,
                    action: C.ACTIONS.UPDATE,
                    data: {}
                };
                transaction.data[this.$props.dataKey] = saveData;
                this.$root.state.processTransaction(transaction, isTransient)
            }
        }
    })
}, function(module, exports) {
    Vue.component("key-value-editor-entry", {
        template: `\n        <li class="key-value-editor-entry">\n            <input type="text" v-model="keyInput" ref="keyInput" @keyup="onKeyInputKeyUp($event)">\n            <span>:</span>\n            <input type="text" v-model="valueInput" ref="valueInput" @keyup="onValueInputKeyUp($event)">\n            <i class="fas fa-times" title="remove line" @click="removeEntry"></i>\n        </li>\n    `,
        props: ["mkey", "mvalue", "id"],
        created() {
            this.isKvPair = true
        },
        mounted() {
            if (this.$data.keyInput.length === 0) {
                this.$refs.keyInput.focus()
            }
        },
        data: function() {
            return {
                keyInput: this.$props.mkey,
                valueInput: "" + this.$props.mvalue
            }
        },
        watch: {
            keyInput: function() {
                this.$parent.scheduleSave()
            },
            valueInput: function() {
                this.$parent.scheduleSave()
            }
        },
        methods: {
            getData() {
                return {
                    key: this.keyInput,
                    value: this.valueInput
                }
            },
            onKeyInputKeyUp(e) {
                if (e.key.toLowerCase() === "enter") {
                    this.$refs.valueInput.focus()
                }
            },
            onValueInputKeyUp(e) {
                if (e.key.toLowerCase() === "enter") {
                    this.$parent.addEntry()
                }
            },
            removeEntry() {
                this.$parent.removeEntry(this.$props.id)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("metadata-panel-controls", {
        template: `\n        <div class="metadata-panel-controls">\n            <checkbox \n            label="show meta data next to component"\n            v-if="hasMetaData"\n            :value="showMetaData"\n            :callback="setShowMetaData"></checkbox>\n            <div v-if="showMetaData">\n                <checkbox \n                    label="show keys"\n                    :value="showMetaDataKeys"\n                    :callback="setShowMetaDataKeys"></checkbox>\n                <div class="compact-controls">\n                    <rotation-controls :change-callback="setRotation" :rotation="rotation" :showLabels="false"></rotation-controls>\n                    <div class="seperator"></div>\n                    <font-size-picker :fontSize="fontSize" :callback="setFontSize"></font-size-picker>\n                    <div class="seperator"></div>\n                    <text-align-picker :textAlign="textAlign" :callback="setTextAlign"></text-align-picker>\n                </div>\n            </div>\n        </div>\n    `,
        props: ["id"],
        created() {
            this.setId(this.$props.id);
            this.$root.state.on(this.$props.id + "-update", this.setState, this)
        },
        destroyed() {
            this.$root.state.off(this.id + "-update", this.setState, this)
        },
        watch: {
            id: function(id, oldId) {
                this.$root.state.off(oldId + "-update", this.setState, this);
                this.$root.state.on(id + "-update", this.setState, this);
                this.setId(id)
            }
        },
        data: function() {
            return {
                showMetaData: false,
                hasMetaData: false,
                fontSize: this.$root.userSettings.get("metaDataFontSize"),
                textAlign: this.$root.userSettings.get("metaDataTextAlign"),
                showMetaDataKeys: this.$root.userSettings.get("metaDataShowKeys"),
                rotation: this.$root.userSettings.get("metaDataRotation")
            }
        },
        methods: {
            setId(id, oldId) {
                this.id = id;
                this.setState()
            },
            setState() {
                const data = this.$root.state.getStateForId(this.id);
                this.$data.showMetaData = data.showMetaData;
                this.$data.fontSize = data.metaDataFontSize;
                this.$data.textAlign = data.metaDataTextAlign;
                this.$data.showMetaDataKeys = data.showMetaDataKeys;
                this.$data.fontSize = data.metaDataFontSize;
                this.$data.hasMetaData = !!(data.meta && Object.keys(data.meta).length > 0)
            },
            setShowMetaData(show) {
                if (show) {
                    this.setData({
                        showMetaData: true,
                        metaDataFontSize: this.$root.userSettings.get("metaDataFontSize"),
                        metaDataTextAlign: this.$root.userSettings.get("metaDataTextAlign"),
                        showMetaDataKeys: this.$root.userSettings.get("metaDataShowKeys"),
                        metaDataRotation: this.$root.userSettings.get("metaDataRotation")
                    })
                } else {
                    this.setData({
                        showMetaData: false
                    })
                }
            },
            setRotation(rotation) {
                this.setData({
                    metaDataRotation: rotation
                });
                this.$root.userSettings.set("metaDataRotation", rotation)
            },
            setShowMetaDataKeys(show) {
                this.setData({
                    showMetaDataKeys: show
                });
                this.$root.userSettings.set("metaDataShowKeys", show)
            },
            setFontSize(fontSize) {
                this.setData({
                    metaDataFontSize: fontSize
                });
                this.$root.userSettings.set("metaDataFontSize", fontSize)
            },
            setTextAlign(textAlign) {
                this.setData({
                    metaDataTextAlign: textAlign
                });
                this.$root.userSettings.set("metaDataTextAlign", textAlign)
            },
            setData(data) {
                this.$root.state.processTransaction({
                    id: this.id,
                    action: C.ACTIONS.UPDATE,
                    data: data
                });
                this.$root.canvas.pixelPlane.plane.scheduleRender()
            }
        }
    })
}, function(module, exports) {
    Vue.component("help-link", {
        template: `\n    <div class="help-link">\n        <i class="far fa-question-circle"></i>\n        <div class="tooltip">\n            <div class="tip">\n                <div class="inner"></div>\n            </div>\n            <div class="content">\n                <slot />\n            </div>\n        </div>\n    </div>\n    `
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("area-type-picker", {
        template: `\n        <div class="area-type-picker">\n            <ul class="option-list two-items">\n                <li @click="setAreaType(${C.AREA_TYPES.STANDARD})" :class="{active: type === ${C.AREA_TYPES.STANDARD}}">standard</li>\n                <li @click="setAreaType(${C.AREA_TYPES.VPN})" :class="{active: type === ${C.AREA_TYPES.VPN}}">VPN / VPC</li>\n            </ul>\n        </div>\n    `,
        props: ["areaType", "callback"],
        watch: {
            areaType: function(areaType) {
                this.$data.type = areaType
            }
        },
        data: function() {
            return {
                type: this.$props.areaType
            }
        },
        methods: {
            setAreaType(type) {
                this.$data.type = type;
                this.$props.callback(type)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const config = __webpack_require__(1);
    const C = __webpack_require__(0);
    const LINK_ICONS = {
        wikipedia: "fab fa-wikipedia-w fa-fw",
        website: "fas fa-external-link-alt fa-fw",
        stackoverflow: "fab fa-stack-overflow fa-fw",
        github: "fab fa-github fa-fw"
    };
    Vue.component("component-data-view", {
        template: `\n        <div class="context-content component component-data-view" :class="{'edit-mode':editMode}">\n            <div class="header">\n                <div \n                    v-if="!editMode && isEditable"\n                    class="start-edit" \n                    title="edit name, description and links" \n                    @click="editMode=true">\n                    <i class="fas fa-edit"></i>\n                </div>\n                \n                <h2 :style="{'border-bottom-color': '#' + color}">\n                    <img :src="logoPath" />\n                    <span v-if="!editMode">{{name}}</span>\n                    <input type="text" v-if="editMode" v-model="nameInput" />\n                </h2>\n                <p v-if="!editMode">{{desc}}</p>\n                <textarea v-if="editMode" v-model="descInput"></textarea>\n            </div>\n            <div class="links">\n                <a v-if="!editMode" target="_blank" v-for="(url, key) in links" :href="url">\n                    <i :class="getLinkIcon( key )"></i>\n                    <span>{{key}}</span>\n                </a>\n                <div v-if="editMode" class="key-value-editor-title">\n                    <span>Link Title</span>\n                    <span>URL</span>\n                </div>\n                <key-value-editor\n                    v-if="editMode"\n                    data-key="links" \n                    :id="id" \n                    :autosave="false" \n                    add-button-caption="add link"\n                    :additional-entries="links"\n                    ref="linkEditor"\n                ></key-value-editor>\n            </div>\n            <div class="confirm-controls" v-if="editMode">\n                <div class="btn" @click="cancelEditMode">cancel</div> \n                <div class="btn primary flat" @click="saveChanges">\n                    <i class="fas fa-save"></i>\n                    SAVE\n                </div>\n            </div>\n            <ul class="meta-data" v-if="showMetaData">\n                <li v-for="(value, key) in metadata">\n                    <label>{{key}}:</label>\n                    <span>{{value}}</span>\n                </li>\n            </ul>\n        </div>\n    `,
        props: ["id", "showMetaData", "isEditable"],
        created: function() {
            if (this.$props.id) {
                this.refresh()
            }
        },
        watch: {
            id: function() {
                this.refresh()
            }
        },
        data: function() {
            return {
                name: "",
                desc: "",
                color: "",
                logoPath: config.blankImagePath,
                links: {},
                metadata: {},
                editMode: false,
                nameInput: "",
                descInput: ""
            }
        },
        methods: {
            cancelEditMode() {
                this.$data.editMode = false;
                this.refresh()
            },
            saveChanges() {
                const transaction = {
                    id: this.$props.id,
                    action: C.ACTIONS.UPDATE,
                    data: {
                        name: this.$data.nameInput,
                        desc: this.$data.descInput,
                        links: this.$refs.linkEditor.getData()
                    }
                };
                this.$root.state.processTransaction(transaction);
                this.cancelEditMode()
            },
            refresh() {
                if (!this.$props.id) {
                    return
                }
                const componentConfig = this.$root.objects.getById(this.$props.id).config;
                const state = this.$root.state.getStateForId(this.$props.id);
                this.$data.name = state.name || componentConfig.name;
                this.$data.desc = state.desc || componentConfig.desc;
                this.$data.nameInput = this.$data.name;
                this.$data.descInput = this.$data.desc;
                this.$data.color = state.primaryColor || componentConfig.primaryColor;
                this.$data.logoPath = config.logoFolder + componentConfig.logoTexture;
                this.$data.links = state.links || componentConfig.links;
                this.$data.metadata = state.meta || {}
            },
            getLinkIcon(linkType) {
                return LINK_ICONS[linkType] || LINK_ICONS.website
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("plugin-panel", {
        template: `\n    \n    <div class="plugin-panel">\n        <div class="no-plugins-enabled" v-if="!hasActivePlugins && !suppressNoPluginWarning">\n            No Plugins enabled. To add one, <a href="#" @click="switchToApiPanel">click here</a>\n        </div>\n        <component\n            v-for="componentName in settingsComponents" \n            :canAddEntries="true"\n            :is="componentName"  \n            :id="id"\n            :key="componentName"\n        ></component>\n    </div>\n    `,
        props: ["id", "suppressNoPluginWarning"],
        data: function() {
            return {
                settingsComponents: [],
                hasActivePlugins: false
            }
        },
        created: function() {
            if (this.$root.canvas && this.$root.canvas.plugin.registry) {
                this.init()
            } else {
                this.initFn = this.init.bind(this);
                this.$root.$on("init", this.initFn)
            }
        },
        destroyed: function() {
            this.$root.$off("init", this.initFn);
            this.$root.canvas.plugin.registry.off("change", this.updateList, this)
        },
        methods: {
            init: function() {
                this.$root.canvas.plugin.registry.on("change", this.updateList, this);
                this.updateList()
            },
            updateList: function() {
                this.$data.settingsComponents = this.$root.canvas.plugin.registry.getSettingComponents();
                this.$data.hasActivePlugins = this.$data.settingsComponents.length > 0
            },
            switchToApiPanel: function() {
                this.$root.$refs.sidebar.$refs.nav.setView(C.VIEWS.API)
            }
        }
    })
}, function(module, exports) {
    Vue.component("autocomplete", {
        template: `\n        <div class="autocomplete" :class="{open: showOptions, loading: isLoading}">\n            <input \n                type="text" \n                v-model="inputValue"\n                ref="input"\n                :placeholder="placeholder"\n                autocomplete="off"\n                data-lpignore="true"\n                @focus="onFocus" \n                @blur="onBlur" \n                @keydown="onKeyDown($event)"\n                :disabled="isLoading"\n            />\n            <ul class="suggestions">\n                <li\n                    v-if="showOptions"\n                    v-for="option in matchingOptions"\n                    v-html="getHighlightedMatches(option)"\n                    @click.stop="setOption(option)"\n                    @mousedown="preventBlur"\n                    :class="{selected: selectedOption === option}"\n                ></li>\n            </ul>\n        </div>\n    `,
        props: ["value", "options", "callback", "isLoading", "placeholder"],
        data() {
            return {
                inputValue: this.$props.value || "",
                selectedOption: null,
                showOptions: false,
                originalValue: this.$props.value || "",
                matchingOptions: this.getMatchingOptions(this.$props.value || ""),
                clickInProgress: false
            }
        },
        created() {
            this.setIsLoading()
        },
        watch: {
            value() {
                this.$data.inputValue = this.$props.value
            },
            inputValue(val) {
                this.$data.matchingOptions = this.getMatchingOptions(val)
            },
            isLoading() {
                this.setIsLoading()
            }
        },
        methods: {
            setIsLoading() {
                if (this.$props.isLoading) {
                    this.$data.inputValue = "loading..."
                } else {
                    this.$data.inputValue = this.$props.value
                }
            },
            getHighlightedMatches(option) {
                const val = this.$data.inputValue;
                return option.replace(val, `<em>${val}</em>`)
            },
            onKeyDown(e) {
                if (e.key === "ArrowUp") {
                    var index;
                    if (this.$data.selectedOption === null) {
                        index = this.$data.matchingOptions.length - 1
                    } else {
                        index = this.$data.matchingOptions.indexOf(this.$data.selectedOption) - 1;
                        if (index < 0) {
                            index = this.$data.matchingOptions.length - 1
                        }
                    }
                    this.$data.selectedOption = this.$data.matchingOptions[index]
                } else if (e.key === "ArrowDown") {
                    var index;
                    if (this.$data.selectedOption === null) {
                        index = 0
                    } else {
                        index = this.$data.matchingOptions.indexOf(this.$data.selectedOption) + 1;
                        if (index > this.$data.matchingOptions.length - 1) {
                            index = 0
                        }
                    }
                    this.$data.selectedOption = this.$data.matchingOptions[index]
                } else if (e.key === "Enter" && this.$data.selectedOption) {
                    this.setOption(this.$data.selectedOption)
                } else if (e.key === "Escape") {
                    this.setOption(this.$data.originalValue)
                }
            },
            onFocus() {
                this.$data.matchingOptions = this.getMatchingOptions("");
                this.$data.showOptions = true
            },
            onBlur() {
                if (this.$data.clickInProgress === false) {
                    this.$data.showOptions = false
                }
            },
            preventBlur() {
                this.$data.clickInProgress = true
            },
            setOption(option) {
                this.$data.inputValue = option;
                this.$data.selectedOption = option;
                this.$data.clickInProgress = false;
                this.$refs.input.blur();
                this.$data.showOptions = false;
                if (this.$data.originalValue !== option) {
                    this.$data.originalValue = option;
                    this.$props.callback(option)
                }
            },
            getMatchingOptions(val) {
                if (typeof val !== "string") {
                    return []
                }
                return this.$props.options.filter(option => {
                    return option.toLowerCase().indexOf(val.trim().toLowerCase()) > -1
                })
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const Dygraph = __webpack_require__(186).default;
    Vue.component("chart", {
        template: `\n        <div class="chart">\n            <div class="controls">\n                <span class="timespan" :class="{active: selectedTimeSpan==='1H'}" @click="setTimeSpan('1H')" title="Set time frame to one hour">1H</span>\n                <span class="timespan" :class="{active: selectedTimeSpan==='4H'}" @click="setTimeSpan('4H')" title="Set time frame to 4 hours">4H</span>\n                <span class="timespan" :class="{active: selectedTimeSpan==='8H'}" @click="setTimeSpan('8H')" title="Set time frame to eight hours">8H</span>\n                <span class="timespan" :class="{active: selectedTimeSpan==='1D'}" @click="setTimeSpan('1D')" title="Set time frame to one day">1D</span>\n                <span class="timespan" :class="{active: selectedTimeSpan==='2D'}" @click="setTimeSpan('2D')" title="Set time frame to two days">2D</span>\n                <span class="timespan" :class="{active: selectedTimeSpan==='3D'}" @click="setTimeSpan('3D')" title="Set time frame to three days">3D</span>\n                <span class="timespan" :class="{active: selectedTimeSpan==='1W'}" @click="setTimeSpan('1W')" title="Set time frame to one week">1W</span>\n                <i class="fas fa-cog"  title="edit settings" @click="editCallback()"></i>\n                <i class="fas fa-times" title="remove chart" @click="deleteCallback()"></i>\n            </div>\n            \n            <div class="chart-loading-overlay" :class="{show: isLoading}">\n                <i class="fas fa-circle-notch fa-spin loading-icon"></i>\n            </div>\n            <div class="empty" v-if="isEmpty">\n                <i class="fas fa-chart-line"></i>\n            </div>\n            <div \n                class="chart-container" \n                ref="chartContainer"\n                @click="forwardEvent" \n                @mouseup="forwardEvent"\n                @mousedown="forwardEvent" \n                @mousemove="forwardEvent"\n            ></div>\n        </div>\n    `,
        props: ["dataSource", "editCallback", "deleteCallback", "timeSpanChangeCallback"],
        mounted() {
            this.showLoadingFn = this.showLoading.bind(this);
            this.updateChartFn = this.updateChart.bind(this);
            this.$root.userSettings.on("sidebarWidthchanged", this.resize, this);
            if (this.$props.dataSource) {
                this.$props.dataSource.on("loading", this.showLoadingFn);
                this.$props.dataSource.on("data", this.updateChartFn);
                this.$props.dataSource.getData()
            }
        },
        destroyed() {
            if (this.showLoadingFn && this.updateChartFn && this.$props.dataSource) {
                this.$props.dataSource.removeListener("loading", this.showLoadingFn);
                this.$props.dataSource.removeListener("data", this.updateChartFn)
            }
            this.$root.userSettings.off("sidebarWidthchanged", this.resize, this);
            if (this.chart) {
                this.chart.destroy()
            }
            this.chartData = null
        },
        data: function() {
            return {
                isLoading: false,
                isEmpty: true,
                selectedTimeSpan: this.$props.dataSource ? this.$props.dataSource.settings.span : "1D"
            }
        },
        created() {
            this.chart = null;
            this.chartData = null
        },
        methods: {
            resize() {
                if (this.chart) {
                    this.chart.resize()
                }
            },
            getTimeSpan() {
                return this.$data.selectedTimeSpan
            },
            setTimeSpan(span) {
                this.$data.selectedTimeSpan = span;
                this.$props.timeSpanChangeCallback(span)
            },
            showLoading() {
                this.$data.isLoading = true
            },
            forwardEvent(e) {
                e.passThrough = true
            },
            updateChart(data, labels, span) {
                this.$data.isLoading = false;
                this.$data.selectedTimeSpan = span;
                this.chartData = data;
                if (this.chart) {
                    this.chart.updateOptions({
                        file: data,
                        labels: labels
                    })
                } else {
                    this.createChart(data)
                }
            },
            createChart(chartData) {
                const chartOptions = {
                    labels: ["A", "B"],
                    gridLineColor: "#272f3b",
                    animatedZooms: true,
                    axisLineColor: "#52617a",
                    strokeWidth: 1.5,
                    color: "#9aa7bc",
                    axisLabelWidth: 40,
                    fillGraph: true,
                    fillAlpha: .1
                };
                this.$data.isEmpty = false;
                this.chart = new Dygraph(this.$refs.chartContainer, chartData, chartOptions)
            }
        }
    })
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
    });
    var __WEBPACK_IMPORTED_MODULE_0__src_dygraph__ = __webpack_require__(16);
    __webpack_require__.d(__webpack_exports__, "default", function() {
        return __WEBPACK_IMPORTED_MODULE_0__src_dygraph__["a"]
    })
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    (function(process) {
        var __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__ = __webpack_require__(6);
        var __WEBPACK_IMPORTED_MODULE_1__dygraph_default_attrs__ = __webpack_require__(32);
        var __WEBPACK_IMPORTED_MODULE_2__dygraph_options_reference__ = __webpack_require__(33);
        var DygraphOptions = function(dygraph) {
            this.dygraph_ = dygraph;
            this.yAxes_ = [];
            this.xAxis_ = {};
            this.series_ = {};
            this.global_ = this.dygraph_.attrs_;
            this.user_ = this.dygraph_.user_attrs_ || {};
            this.labels_ = [];
            this.highlightSeries_ = this.get("highlightSeriesOpts") || {};
            this.reparseSeries()
        };
        DygraphOptions.AXIS_STRING_MAPPINGS_ = {
            y: 0,
            Y: 0,
            y1: 0,
            Y1: 0,
            y2: 1,
            Y2: 1
        };
        DygraphOptions.axisToIndex_ = function(axis) {
            if (typeof axis == "string") {
                if (DygraphOptions.AXIS_STRING_MAPPINGS_.hasOwnProperty(axis)) {
                    return DygraphOptions.AXIS_STRING_MAPPINGS_[axis]
                }
                throw "Unknown axis : " + axis
            }
            if (typeof axis == "number") {
                if (axis === 0 || axis === 1) {
                    return axis
                }
                throw "Dygraphs only supports two y-axes, indexed from 0-1."
            }
            if (axis) {
                throw "Unknown axis : " + axis
            }
            return 0
        };
        DygraphOptions.prototype.reparseSeries = function() {
            var labels = this.get("labels");
            if (!labels) {
                return
            }
            this.labels_ = labels.slice(1);
            this.yAxes_ = [{
                series: [],
                options: {}
            }];
            this.xAxis_ = {
                options: {}
            };
            this.series_ = {};
            var seriesDict = this.user_.series || {};
            for (var idx = 0; idx < this.labels_.length; idx++) {
                var seriesName = this.labels_[idx];
                var optionsForSeries = seriesDict[seriesName] || {};
                var yAxis = DygraphOptions.axisToIndex_(optionsForSeries["axis"]);
                this.series_[seriesName] = {
                    idx: idx,
                    yAxis: yAxis,
                    options: optionsForSeries
                };
                if (!this.yAxes_[yAxis]) {
                    this.yAxes_[yAxis] = {
                        series: [seriesName],
                        options: {}
                    }
                } else {
                    this.yAxes_[yAxis].series.push(seriesName)
                }
            }
            var axis_opts = this.user_["axes"] || {};
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["R"](this.yAxes_[0].options, axis_opts["y"] || {});
            if (this.yAxes_.length > 1) {
                __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["R"](this.yAxes_[1].options, axis_opts["y2"] || {})
            }
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["R"](this.xAxis_.options, axis_opts["x"] || {});
            if (typeof process !== "undefined") {
                if (process.env.NODE_ENV != "production") {
                    this.validateOptions_()
                }
            }
        };
        DygraphOptions.prototype.get = function(name) {
            var result = this.getGlobalUser_(name);
            if (result !== null) {
                return result
            }
            return this.getGlobalDefault_(name)
        };
        DygraphOptions.prototype.getGlobalUser_ = function(name) {
            if (this.user_.hasOwnProperty(name)) {
                return this.user_[name]
            }
            return null
        };
        DygraphOptions.prototype.getGlobalDefault_ = function(name) {
            if (this.global_.hasOwnProperty(name)) {
                return this.global_[name]
            }
            if (__WEBPACK_IMPORTED_MODULE_1__dygraph_default_attrs__["a"].hasOwnProperty(name)) {
                return __WEBPACK_IMPORTED_MODULE_1__dygraph_default_attrs__["a"][name]
            }
            return null
        };
        DygraphOptions.prototype.getForAxis = function(name, axis) {
            var axisIdx;
            var axisString;
            if (typeof axis == "number") {
                axisIdx = axis;
                axisString = axisIdx === 0 ? "y" : "y2"
            } else {
                if (axis == "y1") {
                    axis = "y"
                }
                if (axis == "y") {
                    axisIdx = 0
                } else if (axis == "y2") {
                    axisIdx = 1
                } else if (axis == "x") {
                    axisIdx = -1
                } else {
                    throw "Unknown axis " + axis
                }
                axisString = axis
            }
            var userAxis = axisIdx == -1 ? this.xAxis_ : this.yAxes_[axisIdx];
            if (userAxis) {
                var axisOptions = userAxis.options;
                if (axisOptions.hasOwnProperty(name)) {
                    return axisOptions[name]
                }
            }
            if (!(axis === "x" && name === "logscale")) {
                var result = this.getGlobalUser_(name);
                if (result !== null) {
                    return result
                }
            }
            var defaultAxisOptions = __WEBPACK_IMPORTED_MODULE_1__dygraph_default_attrs__["a"].axes[axisString];
            if (defaultAxisOptions.hasOwnProperty(name)) {
                return defaultAxisOptions[name]
            }
            return this.getGlobalDefault_(name)
        };
        DygraphOptions.prototype.getForSeries = function(name, series) {
            if (series === this.dygraph_.getHighlightSeries()) {
                if (this.highlightSeries_.hasOwnProperty(name)) {
                    return this.highlightSeries_[name]
                }
            }
            if (!this.series_.hasOwnProperty(series)) {
                throw "Unknown series: " + series
            }
            var seriesObj = this.series_[series];
            var seriesOptions = seriesObj["options"];
            if (seriesOptions.hasOwnProperty(name)) {
                return seriesOptions[name]
            }
            return this.getForAxis(name, seriesObj["yAxis"])
        };
        DygraphOptions.prototype.numAxes = function() {
            return this.yAxes_.length
        };
        DygraphOptions.prototype.axisForSeries = function(series) {
            return this.series_[series].yAxis
        };
        DygraphOptions.prototype.axisOptions = function(yAxis) {
            return this.yAxes_[yAxis].options
        };
        DygraphOptions.prototype.seriesForAxis = function(yAxis) {
            return this.yAxes_[yAxis].series
        };
        DygraphOptions.prototype.seriesNames = function() {
            return this.labels_
        };
        if (typeof process !== "undefined") {
            if (process.env.NODE_ENV != "production") {
                DygraphOptions.prototype.validateOptions_ = function() {
                    if (typeof __WEBPACK_IMPORTED_MODULE_2__dygraph_options_reference__["a"] === "undefined") {
                        throw "Called validateOptions_ in prod build."
                    }
                    var that = this;
                    var validateOption = function(optionName) {
                        if (!__WEBPACK_IMPORTED_MODULE_2__dygraph_options_reference__["a"][optionName]) {
                            that.warnInvalidOption_(optionName)
                        }
                    };
                    var optionsDicts = [this.xAxis_.options, this.yAxes_[0].options, this.yAxes_[1] && this.yAxes_[1].options, this.global_, this.user_, this.highlightSeries_];
                    var names = this.seriesNames();
                    for (var i = 0; i < names.length; i++) {
                        var name = names[i];
                        if (this.series_.hasOwnProperty(name)) {
                            optionsDicts.push(this.series_[name].options)
                        }
                    }
                    for (var i = 0; i < optionsDicts.length; i++) {
                        var dict = optionsDicts[i];
                        if (!dict)
                            continue;
                        for (var optionName in dict) {
                            if (dict.hasOwnProperty(optionName)) {
                                validateOption(optionName)
                            }
                        }
                    }
                };
                var WARNINGS = {};
                DygraphOptions.prototype.warnInvalidOption_ = function(optionName) {
                    if (!WARNINGS[optionName]) {
                        WARNINGS[optionName] = true;
                        var isSeries = this.labels_.indexOf(optionName) >= 0;
                        if (isSeries) {
                            console.warn("Use new-style per-series options (saw " + optionName + " as top-level options key). See http://bit.ly/1tceaJs")
                        } else {
                            console.warn("Unknown option " + optionName + " (full list of options at dygraphs.com/options.html")
                        }
                        throw "invalid option " + optionName
                    }
                };
                DygraphOptions.resetWarnings_ = function() {
                    WARNINGS = {}
                }
            }
        }
        __webpack_exports__["a"] = DygraphOptions
    }).call(__webpack_exports__, __webpack_require__(17))
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__bars__ = __webpack_require__(14);
    var ErrorBarsHandler = function() {};
    ErrorBarsHandler.prototype = new __WEBPACK_IMPORTED_MODULE_0__bars__["a"];
    ErrorBarsHandler.prototype.extractSeries = function(rawData, i, options) {
        var series = [];
        var x,
            y,
            variance,
            point;
        var sigma = options.get("sigma");
        var logScale = options.get("logscale");
        for (var j = 0; j < rawData.length; j++) {
            x = rawData[j][0];
            point = rawData[j][i];
            if (logScale && point !== null) {
                if (point[0] <= 0 || point[0] - sigma * point[1] <= 0) {
                    point = null
                }
            }
            if (point !== null) {
                y = point[0];
                if (y !== null && !isNaN(y)) {
                    variance = sigma * point[1];
                    series.push([x, y, [y - variance, y + variance, point[1]]])
                } else {
                    series.push([x, y, [y, y, y]])
                }
            } else {
                series.push([x, null, [null, null, null]])
            }
        }
        return series
    };
    ErrorBarsHandler.prototype.rollingAverage = function(originalData, rollPeriod, options) {
        rollPeriod = Math.min(rollPeriod, originalData.length);
        var rollingData = [];
        var sigma = options.get("sigma");
        var i,
            j,
            y,
            v,
            sum,
            num_ok,
            stddev,
            variance,
            value;
        for (i = 0; i < originalData.length; i++) {
            sum = 0;
            variance = 0;
            num_ok = 0;
            for (j = Math.max(0, i - rollPeriod + 1); j < i + 1; j++) {
                y = originalData[j][1];
                if (y === null || isNaN(y))
                    continue;
                num_ok++;
                sum += y;
                variance += Math.pow(originalData[j][2][2], 2)
            }
            if (num_ok) {
                stddev = Math.sqrt(variance) / num_ok;
                value = sum / num_ok;
                rollingData[i] = [originalData[i][0], value, [value - sigma * stddev, value + sigma * stddev]]
            } else {
                v = rollPeriod == 1 ? originalData[i][1] : null;
                rollingData[i] = [originalData[i][0], v, [v, v]]
            }
        }
        return rollingData
    };
    __webpack_exports__["a"] = ErrorBarsHandler
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__bars__ = __webpack_require__(14);
    var CustomBarsHandler = function() {};
    CustomBarsHandler.prototype = new __WEBPACK_IMPORTED_MODULE_0__bars__["a"];
    CustomBarsHandler.prototype.extractSeries = function(rawData, i, options) {
        var series = [];
        var x,
            y,
            point;
        var logScale = options.get("logscale");
        for (var j = 0; j < rawData.length; j++) {
            x = rawData[j][0];
            point = rawData[j][i];
            if (logScale && point !== null) {
                if (point[0] <= 0 || point[1] <= 0 || point[2] <= 0) {
                    point = null
                }
            }
            if (point !== null) {
                y = point[1];
                if (y !== null && !isNaN(y)) {
                    series.push([x, y, [point[0], point[2]]])
                } else {
                    series.push([x, y, [y, y]])
                }
            } else {
                series.push([x, null, [null, null]])
            }
        }
        return series
    };
    CustomBarsHandler.prototype.rollingAverage = function(originalData, rollPeriod, options) {
        rollPeriod = Math.min(rollPeriod, originalData.length);
        var rollingData = [];
        var y,
            low,
            high,
            mid,
            count,
            i,
            extremes;
        low = 0;
        mid = 0;
        high = 0;
        count = 0;
        for (i = 0; i < originalData.length; i++) {
            y = originalData[i][1];
            extremes = originalData[i][2];
            rollingData[i] = originalData[i];
            if (y !== null && !isNaN(y)) {
                low += extremes[0];
                mid += y;
                high += extremes[1];
                count += 1
            }
            if (i - rollPeriod >= 0) {
                var prev = originalData[i - rollPeriod];
                if (prev[1] !== null && !isNaN(prev[1])) {
                    low -= prev[2][0];
                    mid -= prev[1];
                    high -= prev[2][1];
                    count -= 1
                }
            }
            if (count) {
                rollingData[i] = [originalData[i][0], 1 * mid / count, [1 * low / count, 1 * high / count]]
            } else {
                rollingData[i] = [originalData[i][0], null, [null, null]]
            }
        }
        return rollingData
    };
    __webpack_exports__["a"] = CustomBarsHandler
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__datahandler__ = __webpack_require__(20);
    var __WEBPACK_IMPORTED_MODULE_1__default__ = __webpack_require__(35);
    var DefaultFractionHandler = function() {};
    DefaultFractionHandler.prototype = new __WEBPACK_IMPORTED_MODULE_1__default__["a"];
    DefaultFractionHandler.prototype.extractSeries = function(rawData, i, options) {
        var series = [];
        var x,
            y,
            point,
            num,
            den,
            value;
        var mult = 100;
        var logScale = options.get("logscale");
        for (var j = 0; j < rawData.length; j++) {
            x = rawData[j][0];
            point = rawData[j][i];
            if (logScale && point !== null) {
                if (point[0] <= 0 || point[1] <= 0) {
                    point = null
                }
            }
            if (point !== null) {
                num = point[0];
                den = point[1];
                if (num !== null && !isNaN(num)) {
                    value = den ? num / den : 0;
                    y = mult * value;
                    series.push([x, y, [num, den]])
                } else {
                    series.push([x, num, [num, den]])
                }
            } else {
                series.push([x, null, [null, null]])
            }
        }
        return series
    };
    DefaultFractionHandler.prototype.rollingAverage = function(originalData, rollPeriod, options) {
        rollPeriod = Math.min(rollPeriod, originalData.length);
        var rollingData = [];
        var i;
        var num = 0;
        var den = 0;
        var mult = 100;
        for (i = 0; i < originalData.length; i++) {
            num += originalData[i][2][0];
            den += originalData[i][2][1];
            if (i - rollPeriod >= 0) {
                num -= originalData[i - rollPeriod][2][0];
                den -= originalData[i - rollPeriod][2][1]
            }
            var date = originalData[i][0];
            var value = den ? num / den : 0;
            rollingData[i] = [date, mult * value]
        }
        return rollingData
    };
    __webpack_exports__["a"] = DefaultFractionHandler
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__bars__ = __webpack_require__(14);
    var FractionsBarsHandler = function() {};
    FractionsBarsHandler.prototype = new __WEBPACK_IMPORTED_MODULE_0__bars__["a"];
    FractionsBarsHandler.prototype.extractSeries = function(rawData, i, options) {
        var series = [];
        var x,
            y,
            point,
            num,
            den,
            value,
            stddev,
            variance;
        var mult = 100;
        var sigma = options.get("sigma");
        var logScale = options.get("logscale");
        for (var j = 0; j < rawData.length; j++) {
            x = rawData[j][0];
            point = rawData[j][i];
            if (logScale && point !== null) {
                if (point[0] <= 0 || point[1] <= 0) {
                    point = null
                }
            }
            if (point !== null) {
                num = point[0];
                den = point[1];
                if (num !== null && !isNaN(num)) {
                    value = den ? num / den : 0;
                    stddev = den ? sigma * Math.sqrt(value * (1 - value) / den) : 1;
                    variance = mult * stddev;
                    y = mult * value;
                    series.push([x, y, [y - variance, y + variance, num, den]])
                } else {
                    series.push([x, num, [num, num, num, den]])
                }
            } else {
                series.push([x, null, [null, null, null, null]])
            }
        }
        return series
    };
    FractionsBarsHandler.prototype.rollingAverage = function(originalData, rollPeriod, options) {
        rollPeriod = Math.min(rollPeriod, originalData.length);
        var rollingData = [];
        var sigma = options.get("sigma");
        var wilsonInterval = options.get("wilsonInterval");
        var low,
            high,
            i,
            stddev;
        var num = 0;
        var den = 0;
        var mult = 100;
        for (i = 0; i < originalData.length; i++) {
            num += originalData[i][2][2];
            den += originalData[i][2][3];
            if (i - rollPeriod >= 0) {
                num -= originalData[i - rollPeriod][2][2];
                den -= originalData[i - rollPeriod][2][3]
            }
            var date = originalData[i][0];
            var value = den ? num / den : 0;
            if (wilsonInterval) {
                if (den) {
                    var p = value < 0 ? 0 : value,
                        n = den;
                    var pm = sigma * Math.sqrt(p * (1 - p) / n + sigma * sigma / (4 * n * n));
                    var denom = 1 + sigma * sigma / den;
                    low = (p + sigma * sigma / (2 * den) - pm) / denom;
                    high = (p + sigma * sigma / (2 * den) + pm) / denom;
                    rollingData[i] = [date, p * mult, [low * mult, high * mult]]
                } else {
                    rollingData[i] = [date, 0, [0, 0]]
                }
            } else {
                stddev = den ? sigma * Math.sqrt(value * (1 - value) / den) : 1;
                rollingData[i] = [date, mult * value, [mult * (value - stddev), mult * (value + stddev)]]
            }
        }
        return rollingData
    };
    __webpack_exports__["a"] = FractionsBarsHandler
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var annotations = function() {
        this.annotations_ = []
    };
    annotations.prototype.toString = function() {
        return "Annotations Plugin"
    };
    annotations.prototype.activate = function(g) {
        return {
            clearChart: this.clearChart,
            didDrawChart: this.didDrawChart
        }
    };
    annotations.prototype.detachLabels = function() {
        for (var i = 0; i < this.annotations_.length; i++) {
            var a = this.annotations_[i];
            if (a.parentNode)
                a.parentNode.removeChild(a);
            this.annotations_[i] = null
        }
        this.annotations_ = []
    };
    annotations.prototype.clearChart = function(e) {
        this.detachLabels()
    };
    annotations.prototype.didDrawChart = function(e) {
        var g = e.dygraph;
        var points = g.layout_.annotated_points;
        if (!points || points.length === 0)
            return;
        var containerDiv = e.canvas.parentNode;
        var bindEvt = function(eventName, classEventName, pt) {
            return function(annotation_event) {
                var a = pt.annotation;
                if (a.hasOwnProperty(eventName)) {
                    a[eventName](a, pt, g, annotation_event)
                } else if (g.getOption(classEventName)) {
                    g.getOption(classEventName)(a, pt, g, annotation_event)
                }
            }
        };
        var area = e.dygraph.getArea();
        var xToUsedHeight = {};
        for (var i = 0; i < points.length; i++) {
            var p = points[i];
            if (p.canvasx < area.x || p.canvasx > area.x + area.w || p.canvasy < area.y || p.canvasy > area.y + area.h) {
                continue
            }
            var a = p.annotation;
            var tick_height = 6;
            if (a.hasOwnProperty("tickHeight")) {
                tick_height = a.tickHeight
            }
            var div = document.createElement("div");
            div.style["fontSize"] = g.getOption("axisLabelFontSize") + "px";
            var className = "dygraph-annotation";
            if (!a.hasOwnProperty("icon")) {
                className += " dygraphDefaultAnnotation dygraph-default-annotation"
            }
            if (a.hasOwnProperty("cssClass")) {
                className += " " + a.cssClass
            }
            div.className = className;
            var width = a.hasOwnProperty("width") ? a.width : 16;
            var height = a.hasOwnProperty("height") ? a.height : 16;
            if (a.hasOwnProperty("icon")) {
                var img = document.createElement("img");
                img.src = a.icon;
                img.width = width;
                img.height = height;
                div.appendChild(img)
            } else if (p.annotation.hasOwnProperty("shortText")) {
                div.appendChild(document.createTextNode(p.annotation.shortText))
            }
            var left = p.canvasx - width / 2;
            div.style.left = left + "px";
            var divTop = 0;
            if (a.attachAtBottom) {
                var y = area.y + area.h - height - tick_height;
                if (xToUsedHeight[left]) {
                    y -= xToUsedHeight[left]
                } else {
                    xToUsedHeight[left] = 0
                }
                xToUsedHeight[left] += tick_height + height;
                divTop = y
            } else {
                divTop = p.canvasy - height - tick_height
            }
            div.style.top = divTop + "px";
            div.style.width = width + "px";
            div.style.height = height + "px";
            div.title = p.annotation.text;
            div.style.color = g.colorsMap_[p.name];
            div.style.borderColor = g.colorsMap_[p.name];
            a.div = div;
            g.addAndTrackEvent(div, "click", bindEvt("clickHandler", "annotationClickHandler", p, this));
            g.addAndTrackEvent(div, "mouseover", bindEvt("mouseOverHandler", "annotationMouseOverHandler", p, this));
            g.addAndTrackEvent(div, "mouseout", bindEvt("mouseOutHandler", "annotationMouseOutHandler", p, this));
            g.addAndTrackEvent(div, "dblclick", bindEvt("dblClickHandler", "annotationDblClickHandler", p, this));
            containerDiv.appendChild(div);
            this.annotations_.push(div);
            var ctx = e.drawingContext;
            ctx.save();
            ctx.strokeStyle = a.hasOwnProperty("tickColor") ? a.tickColor : g.colorsMap_[p.name];
            ctx.lineWidth = a.hasOwnProperty("tickWidth") ? a.tickWidth : g.getOption("strokeWidth");
            ctx.beginPath();
            if (!a.attachAtBottom) {
                ctx.moveTo(p.canvasx, p.canvasy);
                ctx.lineTo(p.canvasx, p.canvasy - 2 - tick_height)
            } else {
                var y = divTop + height;
                ctx.moveTo(p.canvasx, y);
                ctx.lineTo(p.canvasx, y + tick_height)
            }
            ctx.closePath();
            ctx.stroke();
            ctx.restore()
        }
    };
    annotations.prototype.destroy = function() {
        this.detachLabels()
    };
    __webpack_exports__["a"] = annotations
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__ = __webpack_require__(6);
    var axes = function() {
        this.xlabels_ = [];
        this.ylabels_ = []
    };
    axes.prototype.toString = function() {
        return "Axes Plugin"
    };
    axes.prototype.activate = function(g) {
        return {
            layout: this.layout,
            clearChart: this.clearChart,
            willDrawChart: this.willDrawChart
        }
    };
    axes.prototype.layout = function(e) {
        var g = e.dygraph;
        if (g.getOptionForAxis("drawAxis", "y")) {
            var w = g.getOptionForAxis("axisLabelWidth", "y") + 2 * g.getOptionForAxis("axisTickSize", "y");
            e.reserveSpaceLeft(w)
        }
        if (g.getOptionForAxis("drawAxis", "x")) {
            var h;
            if (g.getOption("xAxisHeight")) {
                h = g.getOption("xAxisHeight")
            } else {
                h = g.getOptionForAxis("axisLabelFontSize", "x") + 2 * g.getOptionForAxis("axisTickSize", "x")
            }
            e.reserveSpaceBottom(h)
        }
        if (g.numAxes() == 2) {
            if (g.getOptionForAxis("drawAxis", "y2")) {
                var w = g.getOptionForAxis("axisLabelWidth", "y2") + 2 * g.getOptionForAxis("axisTickSize", "y2");
                e.reserveSpaceRight(w)
            }
        } else if (g.numAxes() > 2) {
            g.error("Only two y-axes are supported at this time. (Trying " + "to use " + g.numAxes() + ")")
        }
    };
    axes.prototype.detachLabels = function() {
        function removeArray(ary) {
            for (var i = 0; i < ary.length; i++) {
                var el = ary[i];
                if (el.parentNode)
                    el.parentNode.removeChild(el)
            }
        }
        removeArray(this.xlabels_);
        removeArray(this.ylabels_);
        this.xlabels_ = [];
        this.ylabels_ = []
    };
    axes.prototype.clearChart = function(e) {
        this.detachLabels()
    };
    axes.prototype.willDrawChart = function(e) {
        var g = e.dygraph;
        if (!g.getOptionForAxis("drawAxis", "x") && !g.getOptionForAxis("drawAxis", "y") && !g.getOptionForAxis("drawAxis", "y2")) {
            return
        }
        function halfUp(x) {
            return Math.round(x) + .5
        }
        function halfDown(y) {
            return Math.round(y) - .5
        }
        var context = e.drawingContext;
        var containerDiv = e.canvas.parentNode;
        var canvasWidth = g.width_;
        var canvasHeight = g.height_;
        var label,
            x,
            y,
            tick,
            i;
        var makeLabelStyle = function(axis) {
            return {
                position: "absolute",
                fontSize: g.getOptionForAxis("axisLabelFontSize", axis) + "px",
                width: g.getOptionForAxis("axisLabelWidth", axis) + "px"
            }
        };
        var labelStyles = {
            x: makeLabelStyle("x"),
            y: makeLabelStyle("y"),
            y2: makeLabelStyle("y2")
        };
        var makeDiv = function(txt, axis, prec_axis) {
            var div = document.createElement("div");
            var labelStyle = labelStyles[prec_axis == "y2" ? "y2" : axis];
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["R"](div.style, labelStyle);
            var inner_div = document.createElement("div");
            inner_div.className = "dygraph-axis-label" + " dygraph-axis-label-" + axis + (prec_axis ? " dygraph-axis-label-" + prec_axis : "");
            inner_div.innerHTML = txt;
            div.appendChild(inner_div);
            return div
        };
        context.save();
        var layout = g.layout_;
        var area = e.dygraph.plotter_.area;
        var makeOptionGetter = function(axis) {
            return function(option) {
                return g.getOptionForAxis(option, axis)
            }
        };
        if (g.getOptionForAxis("drawAxis", "y")) {
            if (layout.yticks && layout.yticks.length > 0) {
                var num_axes = g.numAxes();
                var getOptions = [makeOptionGetter("y"), makeOptionGetter("y2")];
                layout.yticks.forEach(tick => {
                    if (tick.label === undefined)
                        return;
                    x = area.x;
                    var sgn = 1;
                    var prec_axis = "y1";
                    var getAxisOption = getOptions[0];
                    if (tick.axis == 1) {
                        x = area.x + area.w;
                        sgn = -1;
                        prec_axis = "y2";
                        getAxisOption = getOptions[1]
                    }
                    var fontSize = getAxisOption("axisLabelFontSize");
                    y = area.y + tick.pos * area.h;
                    label = makeDiv(tick.label, "y", num_axes == 2 ? prec_axis : null);
                    var top = y - fontSize / 2;
                    if (top < 0)
                        top = 0;
                    if (top + fontSize + 3 > canvasHeight) {
                        label.style.bottom = "0"
                    } else {
                        label.style.top = top + "px"
                    }
                    if (tick.axis === 0) {
                        label.style.left = area.x - getAxisOption("axisLabelWidth") - getAxisOption("axisTickSize") + "px";
                        label.style.textAlign = "right"
                    } else if (tick.axis == 1) {
                        label.style.left = area.x + area.w + getAxisOption("axisTickSize") + "px";
                        label.style.textAlign = "left"
                    }
                    label.style.width = getAxisOption("axisLabelWidth") + "px";
                    containerDiv.appendChild(label);
                    this.ylabels_.push(label)
                });
                var bottomTick = this.ylabels_[0];
                var fontSize = g.getOptionForAxis("axisLabelFontSize", "y");
                var bottom = parseInt(bottomTick.style.top, 10) + fontSize;
                if (bottom > canvasHeight - fontSize) {
                    bottomTick.style.top = parseInt(bottomTick.style.top, 10) - fontSize / 2 + "px"
                }
            }
            var axisX;
            if (g.getOption("drawAxesAtZero")) {
                var r = g.toPercentXCoord(0);
                if (r > 1 || r < 0 || isNaN(r))
                    r = 0;
                axisX = halfUp(area.x + r * area.w)
            } else {
                axisX = halfUp(area.x)
            }
            context.strokeStyle = g.getOptionForAxis("axisLineColor", "y");
            context.lineWidth = g.getOptionForAxis("axisLineWidth", "y");
            context.beginPath();
            context.moveTo(axisX, halfDown(area.y));
            context.lineTo(axisX, halfDown(area.y + area.h));
            context.closePath();
            context.stroke();
            if (g.numAxes() == 2) {
                context.strokeStyle = g.getOptionForAxis("axisLineColor", "y2");
                context.lineWidth = g.getOptionForAxis("axisLineWidth", "y2");
                context.beginPath();
                context.moveTo(halfDown(area.x + area.w), halfDown(area.y));
                context.lineTo(halfDown(area.x + area.w), halfDown(area.y + area.h));
                context.closePath();
                context.stroke()
            }
        }
        if (g.getOptionForAxis("drawAxis", "x")) {
            if (layout.xticks) {
                var getAxisOption = makeOptionGetter("x");
                layout.xticks.forEach(tick => {
                    if (tick.label === undefined)
                        return;
                    x = area.x + tick.pos * area.w;
                    y = area.y + area.h;
                    label = makeDiv(tick.label, "x");
                    label.style.textAlign = "center";
                    label.style.top = y + getAxisOption("axisTickSize") + "px";
                    var left = x - getAxisOption("axisLabelWidth") / 2;
                    if (left + getAxisOption("axisLabelWidth") > canvasWidth) {
                        left = canvasWidth - getAxisOption("axisLabelWidth");
                        label.style.textAlign = "right"
                    }
                    if (left < 0) {
                        left = 0;
                        label.style.textAlign = "left"
                    }
                    label.style.left = left + "px";
                    label.style.width = getAxisOption("axisLabelWidth") + "px";
                    containerDiv.appendChild(label);
                    this.xlabels_.push(label)
                })
            }
            context.strokeStyle = g.getOptionForAxis("axisLineColor", "x");
            context.lineWidth = g.getOptionForAxis("axisLineWidth", "x");
            context.beginPath();
            var axisY;
            if (g.getOption("drawAxesAtZero")) {
                var r = g.toPercentYCoord(0, 0);
                if (r > 1 || r < 0)
                    r = 1;
                axisY = halfDown(area.y + r * area.h)
            } else {
                axisY = halfDown(area.y + area.h)
            }
            context.moveTo(halfUp(area.x), axisY);
            context.lineTo(halfUp(area.x + area.w), axisY);
            context.closePath();
            context.stroke()
        }
        context.restore()
    };
    __webpack_exports__["a"] = axes
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var chart_labels = function() {
        this.title_div_ = null;
        this.xlabel_div_ = null;
        this.ylabel_div_ = null;
        this.y2label_div_ = null
    };
    chart_labels.prototype.toString = function() {
        return "ChartLabels Plugin"
    };
    chart_labels.prototype.activate = function(g) {
        return {
            layout: this.layout,
            didDrawChart: this.didDrawChart
        }
    };
    var createDivInRect = function(r) {
        var div = document.createElement("div");
        div.style.position = "absolute";
        div.style.left = r.x + "px";
        div.style.top = r.y + "px";
        div.style.width = r.w + "px";
        div.style.height = r.h + "px";
        return div
    };
    chart_labels.prototype.detachLabels_ = function() {
        var els = [this.title_div_, this.xlabel_div_, this.ylabel_div_, this.y2label_div_];
        for (var i = 0; i < els.length; i++) {
            var el = els[i];
            if (!el)
                continue;
            if (el.parentNode)
                el.parentNode.removeChild(el)
        }
        this.title_div_ = null;
        this.xlabel_div_ = null;
        this.ylabel_div_ = null;
        this.y2label_div_ = null
    };
    var createRotatedDiv = function(g, box, axis, classes, html) {
        var div = document.createElement("div");
        div.style.position = "absolute";
        if (axis == 1) {
            div.style.left = "0px"
        } else {
            div.style.left = box.x + "px"
        }
        div.style.top = box.y + "px";
        div.style.width = box.w + "px";
        div.style.height = box.h + "px";
        div.style.fontSize = g.getOption("yLabelWidth") - 2 + "px";
        var inner_div = document.createElement("div");
        inner_div.style.position = "absolute";
        inner_div.style.width = box.h + "px";
        inner_div.style.height = box.w + "px";
        inner_div.style.top = box.h / 2 - box.w / 2 + "px";
        inner_div.style.left = box.w / 2 - box.h / 2 + "px";
        inner_div.className = "dygraph-label-rotate-" + (axis == 1 ? "right" : "left");
        var class_div = document.createElement("div");
        class_div.className = classes;
        class_div.innerHTML = html;
        inner_div.appendChild(class_div);
        div.appendChild(inner_div);
        return div
    };
    chart_labels.prototype.layout = function(e) {
        this.detachLabels_();
        var g = e.dygraph;
        var div = e.chart_div;
        if (g.getOption("title")) {
            var title_rect = e.reserveSpaceTop(g.getOption("titleHeight"));
            this.title_div_ = createDivInRect(title_rect);
            this.title_div_.style.fontSize = g.getOption("titleHeight") - 8 + "px";
            var class_div = document.createElement("div");
            class_div.className = "dygraph-label dygraph-title";
            class_div.innerHTML = g.getOption("title");
            this.title_div_.appendChild(class_div);
            div.appendChild(this.title_div_)
        }
        if (g.getOption("xlabel")) {
            var x_rect = e.reserveSpaceBottom(g.getOption("xLabelHeight"));
            this.xlabel_div_ = createDivInRect(x_rect);
            this.xlabel_div_.style.fontSize = g.getOption("xLabelHeight") - 2 + "px";
            var class_div = document.createElement("div");
            class_div.className = "dygraph-label dygraph-xlabel";
            class_div.innerHTML = g.getOption("xlabel");
            this.xlabel_div_.appendChild(class_div);
            div.appendChild(this.xlabel_div_)
        }
        if (g.getOption("ylabel")) {
            var y_rect = e.reserveSpaceLeft(0);
            this.ylabel_div_ = createRotatedDiv(g, y_rect, 1, "dygraph-label dygraph-ylabel", g.getOption("ylabel"));
            div.appendChild(this.ylabel_div_)
        }
        if (g.getOption("y2label") && g.numAxes() == 2) {
            var y2_rect = e.reserveSpaceRight(0);
            this.y2label_div_ = createRotatedDiv(g, y2_rect, 2, "dygraph-label dygraph-y2label", g.getOption("y2label"));
            div.appendChild(this.y2label_div_)
        }
    };
    chart_labels.prototype.didDrawChart = function(e) {
        var g = e.dygraph;
        if (this.title_div_) {
            this.title_div_.children[0].innerHTML = g.getOption("title")
        }
        if (this.xlabel_div_) {
            this.xlabel_div_.children[0].innerHTML = g.getOption("xlabel")
        }
        if (this.ylabel_div_) {
            this.ylabel_div_.children[0].children[0].innerHTML = g.getOption("ylabel")
        }
        if (this.y2label_div_) {
            this.y2label_div_.children[0].children[0].innerHTML = g.getOption("y2label")
        }
    };
    chart_labels.prototype.clearChart = function() {};
    chart_labels.prototype.destroy = function() {
        this.detachLabels_()
    };
    __webpack_exports__["a"] = chart_labels
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var grid = function() {};
    grid.prototype.toString = function() {
        return "Gridline Plugin"
    };
    grid.prototype.activate = function(g) {
        return {
            willDrawChart: this.willDrawChart
        }
    };
    grid.prototype.willDrawChart = function(e) {
        var g = e.dygraph;
        var ctx = e.drawingContext;
        var layout = g.layout_;
        var area = e.dygraph.plotter_.area;
        function halfUp(x) {
            return Math.round(x) + .5
        }
        function halfDown(y) {
            return Math.round(y) - .5
        }
        var x,
            y,
            i,
            ticks;
        if (g.getOptionForAxis("drawGrid", "y")) {
            var axes = ["y", "y2"];
            var strokeStyles = [],
                lineWidths = [],
                drawGrid = [],
                stroking = [],
                strokePattern = [];
            for (var i = 0; i < axes.length; i++) {
                drawGrid[i] = g.getOptionForAxis("drawGrid", axes[i]);
                if (drawGrid[i]) {
                    strokeStyles[i] = g.getOptionForAxis("gridLineColor", axes[i]);
                    lineWidths[i] = g.getOptionForAxis("gridLineWidth", axes[i]);
                    strokePattern[i] = g.getOptionForAxis("gridLinePattern", axes[i]);
                    stroking[i] = strokePattern[i] && strokePattern[i].length >= 2
                }
            }
            ticks = layout.yticks;
            ctx.save();
            ticks.forEach(tick => {
                if (!tick.has_tick)
                    return;
                var axis = tick.axis;
                if (drawGrid[axis]) {
                    ctx.save();
                    if (stroking[axis]) {
                        if (ctx.setLineDash)
                            ctx.setLineDash(strokePattern[axis])
                    }
                    ctx.strokeStyle = strokeStyles[axis];
                    ctx.lineWidth = lineWidths[axis];
                    x = halfUp(area.x);
                    y = halfDown(area.y + tick.pos * area.h);
                    ctx.beginPath();
                    ctx.moveTo(x, y);
                    ctx.lineTo(x + area.w, y);
                    ctx.stroke();
                    ctx.restore()
                }
            });
            ctx.restore()
        }
        if (g.getOptionForAxis("drawGrid", "x")) {
            ticks = layout.xticks;
            ctx.save();
            var strokePattern = g.getOptionForAxis("gridLinePattern", "x");
            var stroking = strokePattern && strokePattern.length >= 2;
            if (stroking) {
                if (ctx.setLineDash)
                    ctx.setLineDash(strokePattern)
            }
            ctx.strokeStyle = g.getOptionForAxis("gridLineColor", "x");
            ctx.lineWidth = g.getOptionForAxis("gridLineWidth", "x");
            ticks.forEach(tick => {
                if (!tick.has_tick)
                    return;
                x = halfUp(area.x + tick.pos * area.w);
                y = halfDown(area.y + area.h);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x, area.y);
                ctx.closePath();
                ctx.stroke()
            });
            if (stroking) {
                if (ctx.setLineDash)
                    ctx.setLineDash([])
            }
            ctx.restore()
        }
    };
    grid.prototype.destroy = function() {};
    __webpack_exports__["a"] = grid
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__ = __webpack_require__(6);
    var Legend = function() {
        this.legend_div_ = null;
        this.is_generated_div_ = false
    };
    Legend.prototype.toString = function() {
        return "Legend Plugin"
    };
    Legend.prototype.activate = function(g) {
        var div;
        var userLabelsDiv = g.getOption("labelsDiv");
        if (userLabelsDiv && null !== userLabelsDiv) {
            if (typeof userLabelsDiv == "string" || userLabelsDiv instanceof String) {
                div = document.getElementById(userLabelsDiv)
            } else {
                div = userLabelsDiv
            }
        } else {
            div = document.createElement("div");
            div.className = "dygraph-legend";
            g.graphDiv.appendChild(div);
            this.is_generated_div_ = true
        }
        this.legend_div_ = div;
        this.one_em_width_ = 10;
        return {
            select: this.select,
            deselect: this.deselect,
            predraw: this.predraw,
            didDrawChart: this.didDrawChart
        }
    };
    var calculateEmWidthInDiv = function(div) {
        var sizeSpan = document.createElement("span");
        sizeSpan.setAttribute("style", "margin: 0; padding: 0 0 0 1em; border: 0;");
        div.appendChild(sizeSpan);
        var oneEmWidth = sizeSpan.offsetWidth;
        div.removeChild(sizeSpan);
        return oneEmWidth
    };
    var escapeHTML = function(str) {
        return str.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
    };
    Legend.prototype.select = function(e) {
        var xValue = e.selectedX;
        var points = e.selectedPoints;
        var row = e.selectedRow;
        var legendMode = e.dygraph.getOption("legend");
        if (legendMode === "never") {
            this.legend_div_.style.display = "none";
            return
        }
        if (legendMode === "follow") {
            var area = e.dygraph.plotter_.area;
            var labelsDivWidth = this.legend_div_.offsetWidth;
            var yAxisLabelWidth = e.dygraph.getOptionForAxis("axisLabelWidth", "y");
            var leftLegend = points[0].x * area.w + 50;
            var topLegend = points[0].y * area.h - 50;
            if (leftLegend + labelsDivWidth + 1 > area.w) {
                leftLegend = leftLegend - 2 * 50 - labelsDivWidth - (yAxisLabelWidth - area.x)
            }
            e.dygraph.graphDiv.appendChild(this.legend_div_);
            this.legend_div_.style.left = yAxisLabelWidth + leftLegend + "px";
            this.legend_div_.style.top = topLegend + "px"
        }
        var html = Legend.generateLegendHTML(e.dygraph, xValue, points, this.one_em_width_, row);
        this.legend_div_.innerHTML = html;
        this.legend_div_.style.display = ""
    };
    Legend.prototype.deselect = function(e) {
        var legendMode = e.dygraph.getOption("legend");
        if (legendMode !== "always") {
            this.legend_div_.style.display = "none"
        }
        var oneEmWidth = calculateEmWidthInDiv(this.legend_div_);
        this.one_em_width_ = oneEmWidth;
        var html = Legend.generateLegendHTML(e.dygraph, undefined, undefined, oneEmWidth, null);
        this.legend_div_.innerHTML = html
    };
    Legend.prototype.didDrawChart = function(e) {
        this.deselect(e)
    };
    Legend.prototype.predraw = function(e) {
        if (!this.is_generated_div_)
            return;
        e.dygraph.graphDiv.appendChild(this.legend_div_);
        var area = e.dygraph.getArea();
        var labelsDivWidth = this.legend_div_.offsetWidth;
        this.legend_div_.style.left = area.x + area.w - labelsDivWidth - 1 + "px";
        this.legend_div_.style.top = area.y + "px"
    };
    Legend.prototype.destroy = function() {
        this.legend_div_ = null
    };
    Legend.generateLegendHTML = function(g, x, sel_points, oneEmWidth, row) {
        var data = {
            dygraph: g,
            x: x,
            series: []
        };
        var labelToSeries = {};
        var labels = g.getLabels();
        if (labels) {
            for (var i = 1; i < labels.length; i++) {
                var series = g.getPropertiesForSeries(labels[i]);
                var strokePattern = g.getOption("strokePattern", labels[i]);
                var seriesData = {
                    dashHTML: generateLegendDashHTML(strokePattern, series.color, oneEmWidth),
                    label: labels[i],
                    labelHTML: escapeHTML(labels[i]),
                    isVisible: series.visible,
                    color: series.color
                };
                data.series.push(seriesData);
                labelToSeries[labels[i]] = seriesData
            }
        }
        if (typeof x !== "undefined") {
            var xOptView = g.optionsViewForAxis_("x");
            var xvf = xOptView("valueFormatter");
            data.xHTML = xvf.call(g, x, xOptView, labels[0], g, row, 0);
            var yOptViews = [];
            var num_axes = g.numAxes();
            for (var i = 0; i < num_axes; i++) {
                yOptViews[i] = g.optionsViewForAxis_("y" + (i ? 1 + i : ""))
            }
            var showZeros = g.getOption("labelsShowZeroValues");
            var highlightSeries = g.getHighlightSeries();
            for (i = 0; i < sel_points.length; i++) {
                var pt = sel_points[i];
                var seriesData = labelToSeries[pt.name];
                seriesData.y = pt.yval;
                if (pt.yval === 0 && !showZeros || isNaN(pt.canvasy)) {
                    seriesData.isVisible = false;
                    continue
                }
                var series = g.getPropertiesForSeries(pt.name);
                var yOptView = yOptViews[series.axis - 1];
                var fmtFunc = yOptView("valueFormatter");
                var yHTML = fmtFunc.call(g, pt.yval, yOptView, pt.name, g, row, labels.indexOf(pt.name));
                __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["R"](seriesData, {
                    yHTML: yHTML
                });
                if (pt.name == highlightSeries) {
                    seriesData.isHighlighted = true
                }
            }
        }
        var formatter = g.getOption("legendFormatter") || Legend.defaultFormatter;
        return formatter.call(g, data)
    };
    Legend.defaultFormatter = function(data) {
        var g = data.dygraph;
        if (g.getOption("showLabelsOnHighlight") !== true)
            return "";
        var sepLines = g.getOption("labelsSeparateLines");
        var html;
        if (typeof data.x === "undefined") {
            if (g.getOption("legend") != "always") {
                return ""
            }
            html = "";
            for (var i = 0; i < data.series.length; i++) {
                var series = data.series[i];
                if (!series.isVisible)
                    continue;
                if (html !== "")
                    html += sepLines ? "<br/>" : " ";
                html += `<span style='font-weight: bold; color: ${series.color};'>${series.dashHTML} ${series.labelHTML}</span>`
            }
            return html
        }
        html = data.xHTML + ":";
        for (var i = 0; i < data.series.length; i++) {
            var series = data.series[i];
            if (!series.isVisible)
                continue;
            if (sepLines)
                html += "<br>";
            var cls = series.isHighlighted ? ' class="highlight"' : "";
            html += `<span${cls}> <b><span style='color: ${series.color};'>${series.labelHTML}</span></b>:&#160;${series.yHTML}</span>`
        }
        return html
    };
    function generateLegendDashHTML(strokePattern, color, oneEmWidth) {
        if (!strokePattern || strokePattern.length <= 1) {
            return `<div class="dygraph-legend-line" style="border-bottom-color: ${color};"></div>`
        }
        var i,
            j,
            paddingLeft,
            marginRight;
        var strokePixelLength = 0,
            segmentLoop = 0;
        var normalizedPattern = [];
        var loop;
        for (i = 0; i <= strokePattern.length; i++) {
            strokePixelLength += strokePattern[i % strokePattern.length]
        }
        loop = Math.floor(oneEmWidth / (strokePixelLength - strokePattern[0]));
        if (loop > 1) {
            for (i = 0; i < strokePattern.length; i++) {
                normalizedPattern[i] = strokePattern[i] / oneEmWidth
            }
            segmentLoop = normalizedPattern.length
        } else {
            loop = 1;
            for (i = 0; i < strokePattern.length; i++) {
                normalizedPattern[i] = strokePattern[i] / strokePixelLength
            }
            segmentLoop = normalizedPattern.length + 1
        }
        var dash = "";
        for (j = 0; j < loop; j++) {
            for (i = 0; i < segmentLoop; i += 2) {
                paddingLeft = normalizedPattern[i % normalizedPattern.length];
                if (i < strokePattern.length) {
                    marginRight = normalizedPattern[(i + 1) % normalizedPattern.length]
                } else {
                    marginRight = 0
                }
                dash += `<div class="dygraph-legend-dash" style="margin-right: ${marginRight}em; padding-left: ${paddingLeft}em;"></div>`
            }
        }
        return dash
    }
    __webpack_exports__["a"] = Legend
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__ = __webpack_require__(6);
    var __WEBPACK_IMPORTED_MODULE_1__dygraph_interaction_model__ = __webpack_require__(19);
    var __WEBPACK_IMPORTED_MODULE_2__iframe_tarp__ = __webpack_require__(34);
    var rangeSelector = function() {
        this.hasTouchInterface_ = typeof TouchEvent != "undefined";
        this.isMobileDevice_ = /mobile|android/gi.test(navigator.appVersion);
        this.interfaceCreated_ = false
    };
    rangeSelector.prototype.toString = function() {
        return "RangeSelector Plugin"
    };
    rangeSelector.prototype.activate = function(dygraph) {
        this.dygraph_ = dygraph;
        if (this.getOption_("showRangeSelector")) {
            this.createInterface_()
        }
        return {
            layout: this.reserveSpace_,
            predraw: this.renderStaticLayer_,
            didDrawChart: this.renderInteractiveLayer_
        }
    };
    rangeSelector.prototype.destroy = function() {
        this.bgcanvas_ = null;
        this.fgcanvas_ = null;
        this.leftZoomHandle_ = null;
        this.rightZoomHandle_ = null
    };
    rangeSelector.prototype.getOption_ = function(name, opt_series) {
        return this.dygraph_.getOption(name, opt_series)
    };
    rangeSelector.prototype.setDefaultOption_ = function(name, value) {
        this.dygraph_.attrs_[name] = value
    };
    rangeSelector.prototype.createInterface_ = function() {
        this.createCanvases_();
        this.createZoomHandles_();
        this.initInteraction_();
        if (this.getOption_("animatedZooms")) {
            console.warn("Animated zooms and range selector are not compatible; disabling animatedZooms.");
            this.dygraph_.updateOptions({
                animatedZooms: false
            }, true)
        }
        this.interfaceCreated_ = true;
        this.addToGraph_()
    };
    rangeSelector.prototype.addToGraph_ = function() {
        var graphDiv = this.graphDiv_ = this.dygraph_.graphDiv;
        graphDiv.appendChild(this.bgcanvas_);
        graphDiv.appendChild(this.fgcanvas_);
        graphDiv.appendChild(this.leftZoomHandle_);
        graphDiv.appendChild(this.rightZoomHandle_)
    };
    rangeSelector.prototype.removeFromGraph_ = function() {
        var graphDiv = this.graphDiv_;
        graphDiv.removeChild(this.bgcanvas_);
        graphDiv.removeChild(this.fgcanvas_);
        graphDiv.removeChild(this.leftZoomHandle_);
        graphDiv.removeChild(this.rightZoomHandle_);
        this.graphDiv_ = null
    };
    rangeSelector.prototype.reserveSpace_ = function(e) {
        if (this.getOption_("showRangeSelector")) {
            e.reserveSpaceBottom(this.getOption_("rangeSelectorHeight") + 4)
        }
    };
    rangeSelector.prototype.renderStaticLayer_ = function() {
        if (!this.updateVisibility_()) {
            return
        }
        this.resize_();
        this.drawStaticLayer_()
    };
    rangeSelector.prototype.renderInteractiveLayer_ = function() {
        if (!this.updateVisibility_() || this.isChangingRange_) {
            return
        }
        this.placeZoomHandles_();
        this.drawInteractiveLayer_()
    };
    rangeSelector.prototype.updateVisibility_ = function() {
        var enabled = this.getOption_("showRangeSelector");
        if (enabled) {
            if (!this.interfaceCreated_) {
                this.createInterface_()
            } else if (!this.graphDiv_ || !this.graphDiv_.parentNode) {
                this.addToGraph_()
            }
        } else if (this.graphDiv_) {
            this.removeFromGraph_();
            var dygraph = this.dygraph_;
            setTimeout(function() {
                dygraph.width_ = 0;
                dygraph.resize()
            }, 1)
        }
        return enabled
    };
    rangeSelector.prototype.resize_ = function() {
        function setElementRect(canvas, context, rect, pixelRatioOption) {
            var canvasScale = pixelRatioOption || __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["y"](context);
            canvas.style.top = rect.y + "px";
            canvas.style.left = rect.x + "px";
            canvas.width = rect.w * canvasScale;
            canvas.height = rect.h * canvasScale;
            canvas.style.width = rect.w + "px";
            canvas.style.height = rect.h + "px";
            if (canvasScale != 1) {
                context.scale(canvasScale, canvasScale)
            }
        }
        var plotArea = this.dygraph_.layout_.getPlotArea();
        var xAxisLabelHeight = 0;
        if (this.dygraph_.getOptionForAxis("drawAxis", "x")) {
            xAxisLabelHeight = this.getOption_("xAxisHeight") || this.getOption_("axisLabelFontSize") + 2 * this.getOption_("axisTickSize")
        }
        this.canvasRect_ = {
            x: plotArea.x,
            y: plotArea.y + plotArea.h + xAxisLabelHeight + 4,
            w: plotArea.w,
            h: this.getOption_("rangeSelectorHeight")
        };
        var pixelRatioOption = this.dygraph_.getNumericOption("pixelRatio");
        setElementRect(this.bgcanvas_, this.bgcanvas_ctx_, this.canvasRect_, pixelRatioOption);
        setElementRect(this.fgcanvas_, this.fgcanvas_ctx_, this.canvasRect_, pixelRatioOption)
    };
    rangeSelector.prototype.createCanvases_ = function() {
        this.bgcanvas_ = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["m"]();
        this.bgcanvas_.className = "dygraph-rangesel-bgcanvas";
        this.bgcanvas_.style.position = "absolute";
        this.bgcanvas_.style.zIndex = 9;
        this.bgcanvas_ctx_ = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["x"](this.bgcanvas_);
        this.fgcanvas_ = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["m"]();
        this.fgcanvas_.className = "dygraph-rangesel-fgcanvas";
        this.fgcanvas_.style.position = "absolute";
        this.fgcanvas_.style.zIndex = 9;
        this.fgcanvas_.style.cursor = "default";
        this.fgcanvas_ctx_ = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["x"](this.fgcanvas_)
    };
    rangeSelector.prototype.createZoomHandles_ = function() {
        var img = new Image;
        img.className = "dygraph-rangesel-zoomhandle";
        img.style.position = "absolute";
        img.style.zIndex = 10;
        img.style.visibility = "hidden";
        img.style.cursor = "col-resize";
        img.width = 9;
        img.height = 16;
        img.src = "data:image/png;base64," + "iVBORw0KGgoAAAANSUhEUgAAAAkAAAAQCAYAAADESFVDAAAAAXNSR0IArs4c6QAAAAZiS0dEANAA" + "zwDP4Z7KegAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAAd0SU1FB9sHGw0cMqdt1UwAAAAZdEVYdENv" + "bW1lbnQAQ3JlYXRlZCB3aXRoIEdJTVBXgQ4XAAAAaElEQVQoz+3SsRFAQBCF4Z9WJM8KCDVwownl" + "6YXsTmCUsyKGkZzcl7zkz3YLkypgAnreFmDEpHkIwVOMfpdi9CEEN2nGpFdwD03yEqDtOgCaun7s" + "qSTDH32I1pQA2Pb9sZecAxc5r3IAb21d6878xsAAAAAASUVORK5CYII=";
        if (this.isMobileDevice_) {
            img.width *= 2;
            img.height *= 2
        }
        this.leftZoomHandle_ = img;
        this.rightZoomHandle_ = img.cloneNode(false)
    };
    rangeSelector.prototype.initInteraction_ = function() {
        var self = this;
        var topElem = document;
        var clientXLast = 0;
        var handle = null;
        var isZooming = false;
        var isPanning = false;
        var dynamic = !this.isMobileDevice_;
        var tarp = new __WEBPACK_IMPORTED_MODULE_2__iframe_tarp__["a"];
        var toXDataWindow,
            onZoomStart,
            onZoom,
            onZoomEnd,
            doZoom,
            isMouseInPanZone,
            onPanStart,
            onPan,
            onPanEnd,
            doPan,
            onCanvasHover;
        var onZoomHandleTouchEvent,
            onCanvasTouchEvent,
            addTouchEvents;
        toXDataWindow = function(zoomHandleStatus) {
            var xDataLimits = self.dygraph_.xAxisExtremes();
            var fact = (xDataLimits[1] - xDataLimits[0]) / self.canvasRect_.w;
            var xDataMin = xDataLimits[0] + (zoomHandleStatus.leftHandlePos - self.canvasRect_.x) * fact;
            var xDataMax = xDataLimits[0] + (zoomHandleStatus.rightHandlePos - self.canvasRect_.x) * fact;
            return [xDataMin, xDataMax]
        };
        onZoomStart = function(e) {
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["k"](e);
            isZooming = true;
            clientXLast = e.clientX;
            handle = e.target ? e.target : e.srcElement;
            if (e.type === "mousedown" || e.type === "dragstart") {
                __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["i"](topElem, "mousemove", onZoom);
                __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["i"](topElem, "mouseup", onZoomEnd)
            }
            self.fgcanvas_.style.cursor = "col-resize";
            tarp.cover();
            return true
        };
        onZoom = function(e) {
            if (!isZooming) {
                return false
            }
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["k"](e);
            var delX = e.clientX - clientXLast;
            if (Math.abs(delX) < 4) {
                return true
            }
            clientXLast = e.clientX;
            var zoomHandleStatus = self.getZoomHandleStatus_();
            var newPos;
            if (handle == self.leftZoomHandle_) {
                newPos = zoomHandleStatus.leftHandlePos + delX;
                newPos = Math.min(newPos, zoomHandleStatus.rightHandlePos - handle.width - 3);
                newPos = Math.max(newPos, self.canvasRect_.x)
            } else {
                newPos = zoomHandleStatus.rightHandlePos + delX;
                newPos = Math.min(newPos, self.canvasRect_.x + self.canvasRect_.w);
                newPos = Math.max(newPos, zoomHandleStatus.leftHandlePos + handle.width + 3)
            }
            var halfHandleWidth = handle.width / 2;
            handle.style.left = newPos - halfHandleWidth + "px";
            self.drawInteractiveLayer_();
            if (dynamic) {
                doZoom()
            }
            return true
        };
        onZoomEnd = function(e) {
            if (!isZooming) {
                return false
            }
            isZooming = false;
            tarp.uncover();
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["O"](topElem, "mousemove", onZoom);
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["O"](topElem, "mouseup", onZoomEnd);
            self.fgcanvas_.style.cursor = "default";
            if (!dynamic) {
                doZoom()
            }
            return true
        };
        doZoom = function() {
            try {
                var zoomHandleStatus = self.getZoomHandleStatus_();
                self.isChangingRange_ = true;
                if (!zoomHandleStatus.isZoomed) {
                    self.dygraph_.resetZoom()
                } else {
                    var xDataWindow = toXDataWindow(zoomHandleStatus);
                    self.dygraph_.doZoomXDates_(xDataWindow[0], xDataWindow[1])
                }
            } finally {
                self.isChangingRange_ = false
            }
        };
        isMouseInPanZone = function(e) {
            var rect = self.leftZoomHandle_.getBoundingClientRect();
            var leftHandleClientX = rect.left + rect.width / 2;
            rect = self.rightZoomHandle_.getBoundingClientRect();
            var rightHandleClientX = rect.left + rect.width / 2;
            return e.clientX > leftHandleClientX && e.clientX < rightHandleClientX
        };
        onPanStart = function(e) {
            if (!isPanning && isMouseInPanZone(e) && self.getZoomHandleStatus_().isZoomed) {
                __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["k"](e);
                isPanning = true;
                clientXLast = e.clientX;
                if (e.type === "mousedown") {
                    __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["i"](topElem, "mousemove", onPan);
                    __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["i"](topElem, "mouseup", onPanEnd)
                }
                return true
            }
            return false
        };
        onPan = function(e) {
            if (!isPanning) {
                return false
            }
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["k"](e);
            var delX = e.clientX - clientXLast;
            if (Math.abs(delX) < 4) {
                return true
            }
            clientXLast = e.clientX;
            var zoomHandleStatus = self.getZoomHandleStatus_();
            var leftHandlePos = zoomHandleStatus.leftHandlePos;
            var rightHandlePos = zoomHandleStatus.rightHandlePos;
            var rangeSize = rightHandlePos - leftHandlePos;
            if (leftHandlePos + delX <= self.canvasRect_.x) {
                leftHandlePos = self.canvasRect_.x;
                rightHandlePos = leftHandlePos + rangeSize
            } else if (rightHandlePos + delX >= self.canvasRect_.x + self.canvasRect_.w) {
                rightHandlePos = self.canvasRect_.x + self.canvasRect_.w;
                leftHandlePos = rightHandlePos - rangeSize
            } else {
                leftHandlePos += delX;
                rightHandlePos += delX
            }
            var halfHandleWidth = self.leftZoomHandle_.width / 2;
            self.leftZoomHandle_.style.left = leftHandlePos - halfHandleWidth + "px";
            self.rightZoomHandle_.style.left = rightHandlePos - halfHandleWidth + "px";
            self.drawInteractiveLayer_();
            if (dynamic) {
                doPan()
            }
            return true
        };
        onPanEnd = function(e) {
            if (!isPanning) {
                return false
            }
            isPanning = false;
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["O"](topElem, "mousemove", onPan);
            __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["O"](topElem, "mouseup", onPanEnd);
            if (!dynamic) {
                doPan()
            }
            return true
        };
        doPan = function() {
            try {
                self.isChangingRange_ = true;
                self.dygraph_.dateWindow_ = toXDataWindow(self.getZoomHandleStatus_());
                self.dygraph_.drawGraph_(false)
            } finally {
                self.isChangingRange_ = false
            }
        };
        onCanvasHover = function(e) {
            if (isZooming || isPanning) {
                return
            }
            var cursor = isMouseInPanZone(e) ? "move" : "default";
            if (cursor != self.fgcanvas_.style.cursor) {
                self.fgcanvas_.style.cursor = cursor
            }
        };
        onZoomHandleTouchEvent = function(e) {
            if (e.type == "touchstart" && e.targetTouches.length == 1) {
                if (onZoomStart(e.targetTouches[0])) {
                    __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["k"](e)
                }
            } else if (e.type == "touchmove" && e.targetTouches.length == 1) {
                if (onZoom(e.targetTouches[0])) {
                    __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["k"](e)
                }
            } else {
                onZoomEnd(e)
            }
        };
        onCanvasTouchEvent = function(e) {
            if (e.type == "touchstart" && e.targetTouches.length == 1) {
                if (onPanStart(e.targetTouches[0])) {
                    __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["k"](e)
                }
            } else if (e.type == "touchmove" && e.targetTouches.length == 1) {
                if (onPan(e.targetTouches[0])) {
                    __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["k"](e)
                }
            } else {
                onPanEnd(e)
            }
        };
        addTouchEvents = function(elem, fn) {
            var types = ["touchstart", "touchend", "touchmove", "touchcancel"];
            for (var i = 0; i < types.length; i++) {
                self.dygraph_.addAndTrackEvent(elem, types[i], fn)
            }
        };
        this.setDefaultOption_("interactionModel", __WEBPACK_IMPORTED_MODULE_1__dygraph_interaction_model__["a"].dragIsPanInteractionModel);
        this.setDefaultOption_("panEdgeFraction", 1e-4);
        var dragStartEvent = window.opera ? "mousedown" : "dragstart";
        this.dygraph_.addAndTrackEvent(this.leftZoomHandle_, dragStartEvent, onZoomStart);
        this.dygraph_.addAndTrackEvent(this.rightZoomHandle_, dragStartEvent, onZoomStart);
        this.dygraph_.addAndTrackEvent(this.fgcanvas_, "mousedown", onPanStart);
        this.dygraph_.addAndTrackEvent(this.fgcanvas_, "mousemove", onCanvasHover);
        if (this.hasTouchInterface_) {
            addTouchEvents(this.leftZoomHandle_, onZoomHandleTouchEvent);
            addTouchEvents(this.rightZoomHandle_, onZoomHandleTouchEvent);
            addTouchEvents(this.fgcanvas_, onCanvasTouchEvent)
        }
    };
    rangeSelector.prototype.drawStaticLayer_ = function() {
        var ctx = this.bgcanvas_ctx_;
        ctx.clearRect(0, 0, this.canvasRect_.w, this.canvasRect_.h);
        try {
            this.drawMiniPlot_()
        } catch (ex) {
            console.warn(ex)
        }
        var margin = .5;
        this.bgcanvas_ctx_.lineWidth = this.getOption_("rangeSelectorBackgroundLineWidth");
        ctx.strokeStyle = this.getOption_("rangeSelectorBackgroundStrokeColor");
        ctx.beginPath();
        ctx.moveTo(margin, margin);
        ctx.lineTo(margin, this.canvasRect_.h - margin);
        ctx.lineTo(this.canvasRect_.w - margin, this.canvasRect_.h - margin);
        ctx.lineTo(this.canvasRect_.w - margin, margin);
        ctx.stroke()
    };
    rangeSelector.prototype.drawMiniPlot_ = function() {
        var fillStyle = this.getOption_("rangeSelectorPlotFillColor");
        var fillGradientStyle = this.getOption_("rangeSelectorPlotFillGradientColor");
        var strokeStyle = this.getOption_("rangeSelectorPlotStrokeColor");
        if (!fillStyle && !strokeStyle) {
            return
        }
        var stepPlot = this.getOption_("stepPlot");
        var combinedSeriesData = this.computeCombinedSeriesAndLimits_();
        var yRange = combinedSeriesData.yMax - combinedSeriesData.yMin;
        var ctx = this.bgcanvas_ctx_;
        var margin = .5;
        var xExtremes = this.dygraph_.xAxisExtremes();
        var xRange = Math.max(xExtremes[1] - xExtremes[0], 1e-30);
        var xFact = (this.canvasRect_.w - margin) / xRange;
        var yFact = (this.canvasRect_.h - margin) / yRange;
        var canvasWidth = this.canvasRect_.w - margin;
        var canvasHeight = this.canvasRect_.h - margin;
        var prevX = null,
            prevY = null;
        ctx.beginPath();
        ctx.moveTo(margin, canvasHeight);
        for (var i = 0; i < combinedSeriesData.data.length; i++) {
            var dataPoint = combinedSeriesData.data[i];
            var x = dataPoint[0] !== null ? (dataPoint[0] - xExtremes[0]) * xFact : NaN;
            var y = dataPoint[1] !== null ? canvasHeight - (dataPoint[1] - combinedSeriesData.yMin) * yFact : NaN;
            if (!stepPlot && prevX !== null && Math.round(x) == Math.round(prevX)) {
                continue
            }
            if (isFinite(x) && isFinite(y)) {
                if (prevX === null) {
                    ctx.lineTo(x, canvasHeight)
                } else if (stepPlot) {
                    ctx.lineTo(x, prevY)
                }
                ctx.lineTo(x, y);
                prevX = x;
                prevY = y
            } else {
                if (prevX !== null) {
                    if (stepPlot) {
                        ctx.lineTo(x, prevY);
                        ctx.lineTo(x, canvasHeight)
                    } else {
                        ctx.lineTo(prevX, canvasHeight)
                    }
                }
                prevX = prevY = null
            }
        }
        ctx.lineTo(canvasWidth, canvasHeight);
        ctx.closePath();
        if (fillStyle) {
            var lingrad = this.bgcanvas_ctx_.createLinearGradient(0, 0, 0, canvasHeight);
            if (fillGradientStyle) {
                lingrad.addColorStop(0, fillGradientStyle)
            }
            lingrad.addColorStop(1, fillStyle);
            this.bgcanvas_ctx_.fillStyle = lingrad;
            ctx.fill()
        }
        if (strokeStyle) {
            this.bgcanvas_ctx_.strokeStyle = strokeStyle;
            this.bgcanvas_ctx_.lineWidth = this.getOption_("rangeSelectorPlotLineWidth");
            ctx.stroke()
        }
    };
    rangeSelector.prototype.computeCombinedSeriesAndLimits_ = function() {
        var g = this.dygraph_;
        var logscale = this.getOption_("logscale");
        var i;
        var numColumns = g.numColumns();
        var labels = g.getLabels();
        var includeSeries = new Array(numColumns);
        var anySet = false;
        var visibility = g.visibility();
        var inclusion = [];
        for (i = 1; i < numColumns; i++) {
            var include = this.getOption_("showInRangeSelector", labels[i]);
            inclusion.push(include);
            if (include !== null)
                anySet = true
        }
        if (anySet) {
            for (i = 1; i < numColumns; i++) {
                includeSeries[i] = inclusion[i - 1]
            }
        } else {
            for (i = 1; i < numColumns; i++) {
                includeSeries[i] = visibility[i - 1]
            }
        }
        var rolledSeries = [];
        var dataHandler = g.dataHandler_;
        var options = g.attributes_;
        for (i = 1; i < g.numColumns(); i++) {
            if (!includeSeries[i])
                continue;
            var series = dataHandler.extractSeries(g.rawData_, i, options);
            if (g.rollPeriod() > 1) {
                series = dataHandler.rollingAverage(series, g.rollPeriod(), options)
            }
            rolledSeries.push(series)
        }
        var combinedSeries = [];
        for (i = 0; i < rolledSeries[0].length; i++) {
            var sum = 0;
            var count = 0;
            for (var j = 0; j < rolledSeries.length; j++) {
                var y = rolledSeries[j][i][1];
                if (y === null || isNaN(y))
                    continue;
                count++;
                sum += y
            }
            combinedSeries.push([rolledSeries[0][i][0], sum / count])
        }
        var yMin = Number.MAX_VALUE;
        var yMax = -Number.MAX_VALUE;
        for (i = 0; i < combinedSeries.length; i++) {
            var yVal = combinedSeries[i][1];
            if (yVal !== null && isFinite(yVal) && (!logscale || yVal > 0)) {
                yMin = Math.min(yMin, yVal);
                yMax = Math.max(yMax, yVal)
            }
        }
        var extraPercent = .25;
        if (logscale) {
            yMax = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](yMax);
            yMax += yMax * extraPercent;
            yMin = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](yMin);
            for (i = 0; i < combinedSeries.length; i++) {
                combinedSeries[i][1] = __WEBPACK_IMPORTED_MODULE_0__dygraph_utils__["H"](combinedSeries[i][1])
            }
        } else {
            var yExtra;
            var yRange = yMax - yMin;
            if (yRange <= Number.MIN_VALUE) {
                yExtra = yMax * extraPercent
            } else {
                yExtra = yRange * extraPercent
            }
            yMax += yExtra;
            yMin -= yExtra
        }
        return {
            data: combinedSeries,
            yMin: yMin,
            yMax: yMax
        }
    };
    rangeSelector.prototype.placeZoomHandles_ = function() {
        var xExtremes = this.dygraph_.xAxisExtremes();
        var xWindowLimits = this.dygraph_.xAxisRange();
        var xRange = xExtremes[1] - xExtremes[0];
        var leftPercent = Math.max(0, (xWindowLimits[0] - xExtremes[0]) / xRange);
        var rightPercent = Math.max(0, (xExtremes[1] - xWindowLimits[1]) / xRange);
        var leftCoord = this.canvasRect_.x + this.canvasRect_.w * leftPercent;
        var rightCoord = this.canvasRect_.x + this.canvasRect_.w * (1 - rightPercent);
        var handleTop = Math.max(this.canvasRect_.y, this.canvasRect_.y + (this.canvasRect_.h - this.leftZoomHandle_.height) / 2);
        var halfHandleWidth = this.leftZoomHandle_.width / 2;
        this.leftZoomHandle_.style.left = leftCoord - halfHandleWidth + "px";
        this.leftZoomHandle_.style.top = handleTop + "px";
        this.rightZoomHandle_.style.left = rightCoord - halfHandleWidth + "px";
        this.rightZoomHandle_.style.top = this.leftZoomHandle_.style.top;
        this.leftZoomHandle_.style.visibility = "visible";
        this.rightZoomHandle_.style.visibility = "visible"
    };
    rangeSelector.prototype.drawInteractiveLayer_ = function() {
        var ctx = this.fgcanvas_ctx_;
        ctx.clearRect(0, 0, this.canvasRect_.w, this.canvasRect_.h);
        var margin = 1;
        var width = this.canvasRect_.w - margin;
        var height = this.canvasRect_.h - margin;
        var zoomHandleStatus = this.getZoomHandleStatus_();
        ctx.strokeStyle = this.getOption_("rangeSelectorForegroundStrokeColor");
        ctx.lineWidth = this.getOption_("rangeSelectorForegroundLineWidth");
        if (!zoomHandleStatus.isZoomed) {
            ctx.beginPath();
            ctx.moveTo(margin, margin);
            ctx.lineTo(margin, height);
            ctx.lineTo(width, height);
            ctx.lineTo(width, margin);
            ctx.stroke()
        } else {
            var leftHandleCanvasPos = Math.max(margin, zoomHandleStatus.leftHandlePos - this.canvasRect_.x);
            var rightHandleCanvasPos = Math.min(width, zoomHandleStatus.rightHandlePos - this.canvasRect_.x);
            ctx.fillStyle = "rgba(240, 240, 240, " + this.getOption_("rangeSelectorAlpha").toString() + ")";
            ctx.fillRect(0, 0, leftHandleCanvasPos, this.canvasRect_.h);
            ctx.fillRect(rightHandleCanvasPos, 0, this.canvasRect_.w - rightHandleCanvasPos, this.canvasRect_.h);
            ctx.beginPath();
            ctx.moveTo(margin, margin);
            ctx.lineTo(leftHandleCanvasPos, margin);
            ctx.lineTo(leftHandleCanvasPos, height);
            ctx.lineTo(rightHandleCanvasPos, height);
            ctx.lineTo(rightHandleCanvasPos, margin);
            ctx.lineTo(width, margin);
            ctx.stroke()
        }
    };
    rangeSelector.prototype.getZoomHandleStatus_ = function() {
        var halfHandleWidth = this.leftZoomHandle_.width / 2;
        var leftHandlePos = parseFloat(this.leftZoomHandle_.style.left) + halfHandleWidth;
        var rightHandlePos = parseFloat(this.rightZoomHandle_.style.left) + halfHandleWidth;
        return {
            leftHandlePos: leftHandlePos,
            rightHandlePos: rightHandlePos,
            isZoomed: leftHandlePos - 1 > this.canvasRect_.x || rightHandlePos + 1 < this.canvasRect_.x + this.canvasRect_.w
        }
    };
    __webpack_exports__["a"] = rangeSelector
}, function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var __WEBPACK_IMPORTED_MODULE_0__dygraph__ = __webpack_require__(16);
    var GVizChart = function(container) {
        this.container = container
    };
    GVizChart.prototype.draw = function(data, options) {
        this.container.innerHTML = "";
        if (typeof this.date_graph != "undefined") {
            this.date_graph.destroy()
        }
        this.date_graph = new __WEBPACK_IMPORTED_MODULE_0__dygraph__["a"](this.container, data, options)
    };
    GVizChart.prototype.setSelection = function(selection_array) {
        var row = false;
        if (selection_array.length) {
            row = selection_array[0].row
        }
        this.date_graph.setSelection(row)
    };
    GVizChart.prototype.getSelection = function() {
        var selection = [];
        var row = this.date_graph.getSelection();
        if (row < 0)
            return selection;
        var points = this.date_graph.layout_.points;
        for (var setIdx = 0; setIdx < points.length; ++setIdx) {
            selection.push({
                row: row,
                column: setIdx + 1
            })
        }
        return selection
    };
    __webpack_exports__["a"] = GVizChart
}, function(module, exports) {
    Vue.component("select-box", {
        template: `\n    <select class="arc-select-box" v-model="selectedValue" :style="{'border-color': selectedColor}">\n        <option \n            v-for="option in viewOptions"\n            :value="option.value"\n            :style="{color: option.color || '#FFFFFF'}"\n            >{{option.label}}</option>\n    </select>\n    `,
        data: function() {
            return {
                selectedValue: this.$props.value,
                viewOptions: this.$props.options,
                selectedColor: this.getSelectedColor(this.$props.value)
            }
        },
        props: ["value", "options", "callback"],
        watch: {
            value: function(value) {
                this.$data.selectedValue = value;
                this.$data.selectedColor = this.getSelectedColor(value)
            },
            selectedValue: function(value) {
                this.$data.selectedColor = this.getSelectedColor(value);
                this.$props.callback(value)
            },
            options: function(options) {
                this.$data.viewOptions = options;
                this.$data.selectedColor = this.getSelectedColor(this.$props.value)
            }
        },
        methods: {
            getSelectedColor(value) {
                for (var i = 0; i < this.$props.options.length; i++) {
                    if (this.$props.options[i].value === value) {
                        return this.$props.options[i].color
                    }
                }
            }
        }
    })
}, function(module, exports) {
    Vue.component("number-picker", {
        template: `\n        <div class="number-picker">\n            <div\n                class="btn minus"\n                @click="setValue(-1)"\n                :class="{disabled: minusDisabled}"\n            >-</div>\n            <input type="number" v-model="viewValue" :min="min" :max="max" step="1">\n            <div\n                class="btn plus"\n                @click="setValue(1)"\n                :class="{disabled: plusDisabled}"\n            >+</div>\n        </div>\n    `,
        props: ["min", "max", "value", "callback"],
        watch: {
            viewValue: function(val) {
                this.onValueChange(val)
            }
        },
        data: function() {
            return {
                minusDisabled: this.$props.value <= this.$props.min,
                plusDisabled: this.$props.value >= this.$props.max,
                viewValue: this.$props.value
            }
        },
        methods: {
            setValue(delta) {
                this.onValueChange(parseInt(this.$data.viewValue, 10) + delta)
            },
            onValueChange(newValue) {
                if (newValue >= this.$props.min && newValue <= this.$props.max) {
                    this.$data.viewValue = newValue;
                    this.$data.minusDisabled = newValue <= this.$props.min;
                    this.$data.plusDisabled = newValue >= this.$props.max;
                    this.$props.callback(newValue)
                }
            }
        }
    })
}, function(module, exports) {
    Vue.component("editable-label", {
        template: `\n    <div v-on:dblclick="onDblClick" v-on:click="onClick"  class="editable-label">\n        <label v-show="!editInProgress" v-text="title"></label>       \n        <form action="#" v-on:submit.prevent="onSubmit"  v-if="editInProgress">\n            <input \n                ref="input" \n                class="inline-input copyable" \n                type="text"\n                v-on:blur="onBlur"\n                v-model="inputValue" >\n        </form>\n    </div>\n    `,
        props: ["label", "callback", "event", "parentId", "populateWithLabel"],
        watch: {
            label() {
                this.$data.title = this.$props.label;
                this.$data.inputValue = this.$props.populateWithLabel ? this.$props.label : ""
            }
        },
        data() {
            return {
                editInProgress: false,
                inputValue: this.$props.populateWithLabel ? this.$props.label : "",
                title: this.$props.label
            }
        },
        created() {
            this.isEditableLabel = true
        },
        beforeDestroy() {
            this.$root.eventHub.off("user-cancel", this.onBlur, this, 1)
        },
        methods: {
            onClick() {
                if (this.$props.event === "click") {
                    this.startEdit()
                }
            },
            onDblClick() {
                if (this.$props.event === "dblClick") {
                    this.startEdit()
                }
            },
            startEdit() {
                this.$root.eventHub.on("user-cancel", this.onBlur, this, 1);
                this.$data.editInProgress = true;
                this.$data.inputValue = this.$props.populateWithLabel ? this.$props.label : "";
                setTimeout(() => {
                    this.$refs.input.focus()
                }, 1)
            },
            onBlur() {
                this.$root.eventHub.off("user-cancel", this.onBlur, this, 1);
                this.$data.editInProgress = false;
                return false
            },
            onSubmit() {
                const value = this.$data.inputValue.trim();
                this.$data.title = this.$props.populateWithLabel ? this.$data.inputValue.trim() : this.$props.label;
                this.$data.editInProgress = false;
                this.$props.callback(value, this.$props.parentId)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("layer-selector", {
        template: `\n        <div class="layer-selector">\n            <select-box :value="selectedLayer" :options="layers" :callback="setLayer"></select-box>\n        </div>\n    `,
        props: ["id", "callback"],
        data() {
            return {
                selectedLayer: null,
                layers: []
            }
        },
        created() {
            this.update();
            this.$root.canvas.layerManager.on("change", this.update, this)
        },
        destroyed() {
            this.$root.canvas.layerManager.off("change", this.update, this)
        },
        methods: {
            update() {
                const layers = this.$root.canvas.layerManager.getAll();
                if (this.$props.id) {
                    const state = this.$root.state.getStateForId(this.$props.id);
                    this.$data.selectedLayer = state ? state.layerId : null
                } else {
                    const selectedLayers = this.$root.canvas.selectionManager.selectedObjects.map(obj => {
                        return this.$root.state.getStateForId(obj.id).layerId
                    }).filter((value, index, self) => {
                        return self.indexOf(value) === index
                    });
                    if (selectedLayers.length === 1) {
                        this.$data.selectedLayer = selectedLayers[0]
                    } else {
                        this.$data.selectedLayer = null
                    }
                }
                this.$data.layers = layers.map(layer => {
                    return {
                        color: layer.color,
                        label: layer.name,
                        value: layer.id
                    }
                })
            },
            setLayer(layerId) {
                if (this.$props.callback) {
                    this.$props.callback(layerId)
                } else {
                    this.$root.state.processTransaction({
                        action: C.ACTIONS.UPDATE,
                        id: this.$props.id,
                        data: {
                            layerId: layerId
                        }
                    })
                }
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    __webpack_require__(204);
    __webpack_require__(205);
    __webpack_require__(207);
    const C = __webpack_require__(0);
    const config = __webpack_require__(1);
    const CONTEXT_VIEW = {
        FEEDBACK: "feedback",
        COLLABORATORS: "collaborators",
        LAYERS: "layers"
    };
    Vue.component("view-controls", {
        template: `\n\t\t<div class="view-controls">\n\t\t\t<div class="toggle" @click="toggleOpen" v-if="!viewControlsOnly">\n\t\t\t\t<i class="fas fa-caret-right" v-if="isOpen"></i>\n\t\t\t\t<i class="fas fa-caret-left" v-if="!isOpen"></i>\n\t\t\t</div>\n\t\t\t<span @click="createNewDocument" v-if="!viewControlsOnly">\n\t\t\t\t<i class="fas fa-plus-square"></i>\n\t\t\t\t<label>new document</label>\n\t\t\t</span>\n\t\t\t<div class="group-seperator" v-if="!viewControlsOnly"></div>\n\t\t\t<i v-if="!viewControlsOnly" @click="undo" class="fas fa-reply" title="undo (ctrl + z)"></i>\n\t\t\t<i v-if="!viewControlsOnly" @click="redo" class="fas fa-share" title="redo (ctrl + y)"></i>\n\t\t\t<div v-if="!viewControlsOnly" class="group-seperator"></div>\n\t\t\t<i @click="pan" v-if="!viewControlsOnly || isDashboardMode" class="fas fa-expand-arrows-alt has-hint" title="pan canvas (space or middle mouse button)">\n\t\t\t\t<div class="hint" :class="{show: showHint}">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tYou can also move the canvas by holding <b>space</b> or <b>middle mouse button / mousewheel</b>.<br />Cancel with right click.\n\t\t\t\t\t</p>\n\t\t\t\t\t<div class="tip"></div>\n\t\t\t\t</div>\n\t\t\t</i>\n\t\t\t<i @click="zoomOut" class="fas fa-search-minus" title="zoom out (mousewheel up)"></i>\n\t\t\t<i @click="zoomIn" class="fas fa-search-plus" title="zoom in (mousewheel down)"></i>\n\t\t\t<i @click="rotateLeft" class="fas fa-undo-alt" title="rotate view left (Q)"></i>\n\t\t\t<i @click="rotateRight" class="fas fa-redo-alt" title="rotate view right (E)"></i>\n\t\t\t<span class="text" @click="toggleTopDown" title="toggle between 2D and 3D Mode (X)">\n\t\t\t\t{{topDownLabel}}\n\t\t\t</span>\n\t\t\t<i @click="toggleDashboardMode" v-if="!isEmbed" class="fas fa-expand" :class="{active:isDashboardMode}" title="Presentation Mode (P)"></i>\n\t\t\t<div class="group-seperator" v-if="!isEmbed"></div>\n\t\t\t<span v-if="!isEmbed" title="layers" @click="setContextView('${CONTEXT_VIEW.LAYERS}')" :class="{active: contextView === '${CONTEXT_VIEW.LAYERS}'}">\n\t\t\t\t<layer-control v-if="contextView === '${CONTEXT_VIEW.LAYERS}'"></layer-control>\n\t\t\t\t<i class="fas fa-layer-group"></i>\n\t\t\t</span>\n\t\t\t<div class="group-seperator" v-if="!viewControlsOnly"></div>\n\t\t\t<span v-if="!isEmbed"  class="collab" title="collaborate with other users" @click="setContextView('${CONTEXT_VIEW.COLLABORATORS}')" :class="{active: contextView === '${CONTEXT_VIEW.COLLABORATORS}'}">\n\t\t\t\t<collab-control v-if="contextView === '${CONTEXT_VIEW.COLLABORATORS}'"></collab-control>\n\t\t\t\t<i class="fas fa-user-plus"></i>\n\t\t\t</span>\n\t\t\t<div class="group-seperator" v-if="isFreePlan && !viewControlsOnly"></div>\n\t\t\t<div \n\t\t\t\tclass="free-plan-count" \n\t\t\t\tv-if="isFreePlan && !viewControlsOnly" \n\t\t\t\t@click="upgradePlan" \n\t\t\t\t@animationend="onFreeItemsExceededAnimationEnd"\n\t\t\t\t:class="{exceeded: showExceeded }"\n\t\t\t>\n\t\t\t\t<div class="items">{{itemsRemaining}} of ${config.itemsInFreePlan} items remaining</div>\n\t\t\t\t<div class="label">upgrade to standard for infinite items</div>\n\t\t\t</div>\n\t\t\t<div class="group-seperator" v-if="!viewControlsOnly"></div>\n\t\t\t<span @click="setContextView('${CONTEXT_VIEW.FEEDBACK}')" v-if="!viewControlsOnly" :class="{active: contextView === '${CONTEXT_VIEW.FEEDBACK}'}">\n\t\t\t\t<feedback-form v-if="contextView === '${CONTEXT_VIEW.FEEDBACK}'"></feedback-form>\n\t\t\t\t<i class="far fa-comments"></i>\n\t\t\t</span>\n\t\t\t<div class="group-seperator" v-if="!viewControlsOnly"></div>\n\t\t\t<i @click="showControlHelp" v-if="!viewControlsOnly" class="fas fa-keyboard" title="Show Hotkeys"></i>\n\t\t\t<div class="group-seperator" v-if="!viewControlsOnly"></div>\n\t\t\t<i @click="logout" v-if="!viewControlsOnly" class="fas fa-power-off" title="logout"></i>\n\t\t</div>\n\t`,
        data: function() {
            return {
                viewControlsOnly: config.isEmbed,
                isEmbed: config.isEmbed,
                isOpen: null,
                contextView: null,
                isFreePlan: null,
                itemsRemaining: null,
                showExceeded: false,
                showHint: false,
                hintShown: false,
                isDashboardMode: false,
                topDownLabel: null
            }
        },
        watch: {
            isOpen: function(isOpen) {
                if (isOpen) {
                    this.$el.style.right = 0
                } else {
                    this.$el.style.right = -(this.$el.offsetWidth - 23) + "px"
                }
            }
        },
        created: function() {
            this.$root.$on("init", () => {
                this.$data.isOpen = this.$root.userSettings.get("viewControlsOpen");
                this.$root.canvas.camera.on("change", this.updateTopDownLabel, this);
                if (config.viewControlsOnly) {
                    return
                }
                this.setPlan();
                this.$root.accountData.on("change", this.setPlan, this);
                this.$root.state.on("change", this.updateItems, this);
                this.$root.state.on("free-items-exceeded", this.onFreeItemsExceeded, this)
            })
        },
        methods: {
            toggleOpen() {
                this.$data.isOpen = !this.$data.isOpen;
                if (!this.$data.isOpen) {
                    this.$data.showFeedbackForm = false
                }
                this.$root.userSettings.set("viewControlsOpen", this.$data.isOpen)
            },
            createNewDocument() {
                this.$root.$refs.sidebar.setView(C.VIEWS.FILE);
                this.$root.$refs.sidebar.$refs.filePanel.externalCreateDocument()
            },
            setContextView(contextView) {
                if (this.$data.contextView === contextView) {
                    this.$data.contextView = null
                } else {
                    this.$data.contextView = contextView
                }
            },
            rotateLeft() {
                this.$root.canvas.camera.rotateLeft()
            },
            rotateRight() {
                this.$root.canvas.camera.rotateRight()
            },
            undo() {
                this.$root.state.history.undo()
            },
            redo() {
                this.$root.state.history.redo()
            },
            zoomIn() {
                this.$root.canvas.camera.changeZoomBy(1)
            },
            zoomOut() {
                this.$root.canvas.camera.changeZoomBy(-1)
            },
            toggleTopDown() {
                this.$root.canvas.camera.toggleTopDown()
            },
            updateTopDownLabel() {
                if (this.$root.canvas.camera.isTopDown) {
                    this.$data.topDownLabel = "3D"
                } else {
                    this.$data.topDownLabel = "2D"
                }
            },
            pan() {
                if (this.$data.hintShown === false) {
                    this.$data.showHint = true;
                    this.$data.hintShown = true;
                    setTimeout(() => {
                        this.$data.showHint = false
                    }, 5e3)
                }
                this.$root.interactionMode.set(C.INTERACTION_MODE.PAN_ON_DRAG)
            },
            showControlHelp() {
                this.$root.$refs.fullscreenOverlay.showControlsHelp()
            },
            upgradePlan() {
                this.$root.$refs.sidebar.setView(C.VIEWS.ACCOUNT)
            },
            setPlan() {
                this.$data.isFreePlan = this.$root.accountData.get("paymentPlan") === C.PAYMENT_PLAN.FREE
            },
            updateItems() {
                this.$data.itemsRemaining = config.itemsInFreePlan - this.$root.state.countItems()
            },
            onFreeItemsExceeded() {
                this.$data.isOpen = true;
                this.$data.showExceeded = true
            },
            onFreeItemsExceededAnimationEnd() {
                this.$data.showExceeded = false
            },
            toggleDashboardMode() {
                if (this.$data.isDashboardMode === true) {
                    this.$data.isDashboardMode = false;
                    this.$data.viewControlsOnly = false;
                    this.$root.$refs.sidebar.show();
                    this.$root.$emit("dashboard-mode-off")
                } else {
                    this.$data.isDashboardMode = true;
                    this.$data.viewControlsOnly = true;
                    this.$root.$refs.sidebar.hide();
                    this.$root.$emit("dashboard-mode-on")
                }
            },
            logout() {
                this.$http.post("account/logout", {}).then(() => {
                    window.location = document.location.origin + "?logout=true"
                })
            }
        }
    })
}, function(module, exports) {
    Vue.component("feedback-form", {
        template: `\n    <div class="feedback-form view-menu" @click.stop>\n        <div class="confirm-overlay" :class="{show:showOverlay}">\n            <div v-if="isComplete">\n                <i class="fas fa-check"></i>\n                <p>\n                    Many thanks for your feedback, you can track your and other issues on our\n                    <a href="https://trello.com/b/ZixufhXG/arcentry" target="_blank">public trello board</a>.\n                </p>\n                <div class="btn primary" @click="close">OK</div>\n            </div>\n            <div v-if="isLoading">\n                <i class="fas fa-circle-notch fa-spin loading-icon"></i>\n            </div>\n        </div>\n\n        <i @click="close" class="fas fa-times close"></i>\n        \n        \n        <h2>Ask a question or contact support</h2>\n        <p>Please email us at <a href="mailto:info@example.com">info@example.com</a></p>\n        <div class="seperator">\n            <div></div>\n            <span>or</span>\n        </div>\n        <h2>Request a component, feature or bugfix</h2>\n        <p>\n            We'd love to hear from you! Please provide details below which will directly create a card on our \n            <a href="https://trello.com/b/ZixufhXG/arcentry" target="_blank">public trello board</a>.\n        </p>\n        <form action="#" @submit.prevent="sendData">\n            <label>Label</label>\n            <ul class="issue-type">\n                <li @click="label='BUG'" class="bug" :class="{active: label==='BUG'}">Bug</li>\n                <li @click="label='FEATURE'" class="feature" :class="{active: label==='FEATURE'}">Feature</li>\n                <li @click="label='COMPONENT'" class="component" :class="{active: label==='COMPONENT'}">Component</li>\n            </ul>\n            <label>Title</label>\n            <input type="text" v-model="title"/>\n            <label>Description</label>\n            <textarea rows="6" v-model="desc"></textarea>\n            <input type="submit" value="SEND" :disabled="!readyToSend" />\n        </form>\n        <div class="tip-bg">\n            <div class="tip"></div>\n        </div>\n        \n    </div>\n    `,
        data: function() {
            return {
                label: null,
                title: "",
                desc: "",
                readyToSend: false,
                showOverlay: false,
                isLoading: false,
                isComplete: false
            }
        },
        watch: {
            label: function() {
                this.checkReady()
            },
            title: function() {
                this.checkReady()
            },
            desc: function() {
                this.checkReady()
            }
        },
        methods: {
            sendData() {
                if (!this.$data.readyToSend) {
                    return
                }
                const data = {
                    title: this.$data.title,
                    desc: this.$data.desc,
                    label: this.$data.label
                };
                this.showOverlay = true;
                this.isLoading = true;
                this.isComplete = false;
                this.$http.post("feedback/send-to-trello", data).then(this.onComplete.bind(this))
            },
            onComplete() {
                this.$data.label = null;
                this.$data.title = "";
                this.$data.desc = "";
                this.showOverlay = true;
                this.isLoading = false;
                this.isComplete = true
            },
            close() {
                this.showOverlay = false;
                this.isLoading = false;
                this.isComplete = false;
                this.$parent.contextView = null
            },
            checkReady() {
                this.$data.readyToSend = this.$data.label && this.$data.title.trim().length > 0 && this.$data.desc.trim().length > 0
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    __webpack_require__(206);
    const C = __webpack_require__(0);
    const DEFAULT_LAYER_ID = "default";
    const CONFIRM_MODE = {
        DELETE_OPTIONS: "delete-options",
        LAST_LAYER_WARNING: "last-layer-warning"
    };
    Vue.component("layer-control", {
        template: `\n    <div class="layer-control view-menu" :class="{'show-confirm': confirmVisible }" @click.stop>\n        <div class="confirm">\n            <div class="delete-options" v-if="confirmMode === '${CONFIRM_MODE.DELETE_OPTIONS}'">\n                <p>What would you like to do with the {{numberOfObjects}} object{{pluralS}} on "{{deleteLayerName}}" you're about to delete?</p>\n                <div class="btn" title="Delete Objects and Layer" @click="deleteLayerAndObjects">Delete Object{{pluralS}}</div>\n                <div class="btn" :title="'Move Objects to ' + defaultLayerName + ' and delete the current layer'" @click="moveObjectsAndDeleteLayer">Move to {{defaultLayerName}}</div>\n                <div class="btn" title="Don't do anything" @click="confirmVisible=false">Cancel</div>\n            </div>\n            <div class="warning" v-if="confirmMode === '${CONFIRM_MODE.LAST_LAYER_WARNING}'">\n                <p>Sorry, you can't delete the only layer. Create another layer first before deleting this one.</p>\n                <div class="btn" @click="confirmVisible=false">OK</div>\n            </div>\n        </div>\n        <ul class="layers">\n            <layer-control-entry \n                v-for="id in layerIds" \n                :id="id" \n                :key="id"\n            ></layer-control-entry>\n        </ul>\n        <div class="add-layer" @click="addLayer">\n            <i class="fas fa-plus"></i>\n            add layer\n        </div>\n        <div class="tip-bg">\n            <div class="tip"></div>\n        </div>\n    </div>\n    `,
        data: function() {
            return {
                layerIds: this.$root.canvas.layerManager.getIds(),
                numberOfObjects: 3,
                pluralS: null,
                defaultLayerName: "Default Layer",
                deleteLayerId: null,
                deleteLayerName: null,
                confirmVisible: false,
                fallbackLayerId: null,
                confirmMode: null
            }
        },
        created() {
            this.$root.canvas.layerManager.on("change", this.update, this, 1)
        },
        destroyed() {
            this.$root.canvas.layerManager.off("change", this.update, this, 1)
        },
        methods: {
            update() {
                this.$data.layerIds = this.$root.canvas.layerManager.getIds()
            },
            addLayer() {
                this.$root.canvas.layerManager.addLayer()
            },
            deleteLayerAndObjects() {
                this.$root.state.startTransactionBlock("Delete objects and layer");
                this.$root.canvas.layerManager.getObjectIdsForLayerId(this.$data.deleteLayerId).forEach(objId => {
                    this.$root.state.processTransaction({
                        action: C.ACTIONS.DELETE,
                        id: objId
                    })
                });
                this.$root.canvas.layerManager.deleteLayer(this.$data.deleteLayerId);
                this.$root.state.endTransactionBlock();
                this.$data.confirmVisible = false
            },
            moveObjectsAndDeleteLayer() {
                this.$root.state.startTransactionBlock("Move objects and delete layer");
                this.$root.canvas.layerManager.getObjectIdsForLayerId(this.$data.deleteLayerId).forEach(objId => {
                    this.$root.state.processTransaction({
                        action: C.ACTIONS.UPDATE,
                        id: objId,
                        data: {
                            layerId: this.$data.fallbackLayerId
                        }
                    })
                });
                this.$root.canvas.layerManager.deleteLayer(this.$data.deleteLayerId);
                this.$root.state.endTransactionBlock();
                this.$data.confirmVisible = false
            },
            showDeleteConfirm(layerId) {
                this.$data.deleteLayerId = layerId;
                const allLayerIds = this.$root.canvas.layerManager.getIds();
                if (allLayerIds.length === 1) {
                    this.$data.confirmMode = CONFIRM_MODE.LAST_LAYER_WARNING;
                    this.$data.confirmVisible = true;
                    return
                }
                this.$data.numberOfObjects = this.$root.canvas.layerManager.getObjectIdsForLayerId(layerId).length;
                if (this.$data.numberOfObjects === 0) {
                    this.$root.canvas.layerManager.deleteLayer(layerId);
                    return
                }
                this.$data.confirmMode = CONFIRM_MODE.DELETE_OPTIONS;
                this.$data.deleteLayerName = this.$root.canvas.layerManager.getLayerById(layerId).name;
                this.$data.fallbackLayerId = DEFAULT_LAYER_ID;
                if (layerId === DEFAULT_LAYER_ID) {
                    this.$data.fallbackLayerId = allLayerIds.filter(id => {
                        return id !== DEFAULT_LAYER_ID
                    })[0]
                }
                this.$data.defaultLayerName = this.$root.canvas.layerManager.getLayerById(this.$data.fallbackLayerId).name;
                this.$data.pluralS = this.$data.numberOfObjects > 1 ? "s" : "";
                this.$data.confirmVisible = true
            }
        }
    })
}, function(module, exports) {
    Vue.component("layer-control-entry", {
        template: `\n        <li class="layer-control-entry">\n            <editable-label :label="name" :callback="setName" event="dblClick" :parentId="null" :populateWithLabel="true"></editable-label>\n            <color-picker :color="color" :changeCallback="setColor"></color-picker>\n            <i class="far fa-eye" title="Hide objects on this layer" @click="setVisible(false)" v-if="visible"></i>\n            <i class="far fa-eye-slash passive" title="Show objects on this layer" @click="setVisible(true)" v-if="!visible"></i>\n            <i class="fas fa-lock-open" title="Lock objects on this layer" @click="setLocked(true)" v-if="!locked"></i>\n            <i class="fas fa-lock passive" title="Unlock objects on this layer" @click="setLocked(false)" v-if="locked"></i>\n            <i class="fas fa-trash-alt" @click="deleteLayer"></i>\n        </li>\n    `,
        props: ["id"],
        data() {
            const layer = this.$root.canvas.layerManager.getLayerById(this.$props.id);
            return {
                name: layer.name,
                color: layer.color,
                visible: layer.visible,
                locked: layer.locked
            }
        },
        created() {
            this.$root.canvas.layerManager.on("change", this.update, this, 2)
        },
        destroyed() {
            this.$root.canvas.layerManager.off("change", this.update, this, 2)
        },
        methods: {
            update() {
                const layer = this.$root.canvas.layerManager.getLayerById(this.$props.id);
                if (!layer) {
                    return
                }
                this.$data.name = layer.name;
                this.$data.color = layer.color;
                this.$data.visible = layer.visible;
                this.$data.locked = layer.locked
            },
            setName(name) {
                this.$data.name = name;
                this.save()
            },
            setVisible(isVisible) {
                this.$data.visible = isVisible;
                this.save()
            },
            setLocked(isLocked) {
                this.$data.locked = isLocked;
                this.save()
            },
            setColor(color, isTransient) {
                this.$data.color = color;
                if (!isTransient) {
                    this.save()
                }
            },
            deleteLayer() {
                this.$parent.showDeleteConfirm(this.$props.id)
            },
            save() {
                const layer = {
                    name: this.$data.name,
                    color: this.$data.color,
                    visible: this.$data.visible,
                    locked: this.$data.locked,
                    id: this.$props.id
                };
                this.$root.canvas.layerManager.updateLayer(this.$props.id, layer)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    __webpack_require__(208);
    const OVERLAY_STATE = {
        LOADING: "loading",
        INVITE: "invite",
        INVITE_CONFIRM: "invite-confirm",
        CANT_ADD: "cant-add"
    };
    Vue.component("collab-control", {
        template: `\n    <div class="collab-control view-menu" @click.stop :class="{'overlay-visible': overlayState && overlayState !== '${OVERLAY_STATE.LOADING}'}">\n        <div class="loading-overlay" :class="{show: !!overlayState}">\n            <i v-if="overlayState === '${OVERLAY_STATE.LOADING}'" class="fas fa-circle-notch fa-spin loading-icon"></i>\n            <div class="invite-user" v-if="overlayState === '${OVERLAY_STATE.INVITE}'">\n                <p>\n                    Sorry, looks like <em>{{newUserEmail}}</em> is not a registered Arcentry account yet.\n                    Would you like to invite them?\n                </p>\n                <div class="buttons">\n                    <div class="secondary" @click="overlayState = null">Cancel</div>\n                    <div class="primary" @click="sendInvite">OK</div>\n                </div>\n            </div>\n            <div class="confirm-invite" v-if="overlayState === '${OVERLAY_STATE.INVITE_CONFIRM}'">\n                <i class="far fa-check-circle"></i>\n                <p>Invite sent</p>\n                <div class="buttons">\n                    <div class="primary" @click="refresh">OK</div>\n                </div>\n            </div>\n            <div class="cant-add" v-if="overlayState === '${OVERLAY_STATE.CANT_ADD}'">\n                <i class="far fa-times-circle"></i>\n                <p class="copyable">Sorry, you can only add collaborators to documents you own. This document is owned by {{ownerName}}.</p>\n                <div class="buttons">\n                    <div class="primary" @click="closeMenu">OK</div>\n                </div>\n            </div>\n        </div>\n        <ul class="collaborator-list">\n            <collab-control-entry \n                v-for="(user, id) in collaborators" \n                :user="user"\n                :key="id"\n                :id="id"\n            ></collab-control-entry >\n        </ul>\n        <div class="add-user">\n            <label>add collaborator</label>\n            <form @submit.prevent="addUser" data-lpignore="true">\n                <input type="email" placeholder="email" v-model="newUserEmail" required/>\n                <input type="submit" value="add" title="add collaborator">\n            </form>\n        </div>\n        <div class="tip-bg">\n            <div class="tip"></div>\n        </div>\n    </div>\n    `,
        data: function() {
            return {
                collaborators: [],
                newUserEmail: null,
                overlayState: null,
                ownerName: null
            }
        },
        created() {
            this.$root.userSettings.on("lastActiveDocIdchanged", this.refresh, this);
            this.refresh()
        },
        destroyed() {
            this.$root.userSettings.off("lastActiveDocIdchanged", this.refresh, this)
        },
        methods: {
            closeMenu() {
                this.$parent.$data.contextView = null
            },
            addUser() {
                const data = {
                    email: this.$data.newUserEmail,
                    docId: canvas.app.userSettings.get("lastActiveDocId")
                };
                this.$data.overlayState = OVERLAY_STATE.LOADING;
                this.$http.post("docs/add-collaborator", data).then(() => {
                    this.$data.newUserEmail = "";
                    this.refresh()
                }).catch(res => {
                    this.$data.overlayState = null;
                    if (res.body.errorType === "USER_NOT_FOUND") {
                        res.request.globalCatchError = false;
                        this.showUnknownUser(this.$data.newUserEmail)
                    }
                })
            },
            removeUser(id) {
                const data = {
                    collaboratorId: id,
                    docId: canvas.app.userSettings.get("lastActiveDocId")
                };
                this.$data.overlayState = OVERLAY_STATE.LOADING;
                Vue.http.post("docs/remove-collaborator", data).then(() => {
                    this.refresh()
                })
            },
            showUnknownUser() {
                this.$data.overlayState = OVERLAY_STATE.INVITE
            },
            sendInvite() {
                this.$data.overlayState = OVERLAY_STATE.LOADING;
                this.$http.post("account/signup-pending", {
                    email: this.$data.newUserEmail,
                    senderName: this.$root.accountData.get("email"),
                    diagramName: this.$root.$refs.sidebar.$refs.filePanel.getActiveDocTitle(),
                    docId: this.$root.state.meta.docMeta.id
                }).then(() => {
                    this.$data.overlayState = OVERLAY_STATE.INVITE_CONFIRM
                })
            },
            refresh() {
                var sharedDoc = null;
                const sharedDocPanel = this.$root.$refs.sidebar.$refs.filePanel.$refs.sharedWithMePanel;
                if (sharedDocPanel) {
                    sharedDoc = sharedDocPanel.getDocById(this.$root.userSettings.get("lastActiveDocId"))
                }
                if (sharedDoc) {
                    this.$data.overlayState = OVERLAY_STATE.CANT_ADD;
                    this.$data.ownerName = sharedDocPanel.getOwnerString(sharedDoc);
                    return
                }
                this.$data.overlayState = null;
                this.$data.ownerName = null;
                this.$data.overlayState = OVERLAY_STATE.LOADING;
                const url = "docs/get-collaborators?docId=" + this.$root.userSettings.get("lastActiveDocId");
                this.$http.get(url).then(res => {
                    this.$data.collaborators = res.body;
                    this.$data.overlayState = null
                })
            }
        }
    })
}, function(module, exports) {
    Vue.component("collab-control-entry", {
        template: `\n        <li class="collab-control-entry">\n            <div class="info">\n                <div class="name">{{user.name||'-'}}</div>\n                <div class="email">{{user.email}}</div>\n            </div>\n            <div class="remove-user" title="remove collaborator">\n                <i class="fas fa-times remove-icon" title="remove user" @click="removeUser"></i>\n            </div>\n        </li>\n    `,
        props: ["user", "id"],
        methods: {
            removeUser() {
                this.$parent.removeUser(this.$props.id)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const TIP_OF_DAY = __webpack_require__(36);
    __webpack_require__(37);
    __webpack_require__(210);
    Vue.component("fullscreen-panel", {
        template: `\n    <div class="fullscreen-panel" v-if="show" :class="[activePanel]">\n        <div class="inner">\n            <div v-if="activePanel === 'error'" class="error">\n                <i class="fas fa-exclamation-triangle"></i>\n                <h2>{{title}}</h2>\n                <p>{{description}}</p>\n                \n                <div class="btn primary" v-on:click.stop="onBtnClick">{{buttonCaption}}</div>\n            </div>\n            <embed-preview :id="embedPreviewId" v-if="activePanel === 'embedPreview'"></embed-preview>\n            <div v-if="activePanel === 'tipOfDay'" class="tip-of-day bright" :style="{backgroundImage: tipOfDayImage}">\n                <h2>...did you know?</h2>\n                <p v-html="tipOfDayText"></p>\n                <div class="btn primary" @click="show=false">GOT IT</div>\n                <checkbox label="don't show tips at startup" :value="false" :callback="setShowTips"></checkbox>\n            </div>\n            <controls-help v-if="activePanel === 'controls-help'"></controls-help>\n        </div>\n    </div>\n    `,
        data: function() {
            return {
                show: false,
                showRequestDetails: false,
                requestUrl: null,
                requestData: null,
                errorMsg: null,
                activePanel: null,
                title: null,
                description: null,
                buttonCaption: null,
                tipOfDayText: null,
                tipOfDayImage: null,
                keyMappings: null,
                embedPreviewId: null
            }
        },
        methods: {
            showControlsHelp() {
                this.$data.activePanel = "controls-help";
                this.$data.show = true
            },
            showEmbedPreview(id) {
                this.$data.embedPreviewId = id;
                this.$data.activePanel = "embedPreview";
                this.$data.show = true
            },
            showTipOfDay() {
                this.$data.activePanel = "tipOfDay";
                this.$data.show = true;
                var tipOfDayIndex = this.$root.userSettings.get("tipOfDayIndex");
                this.$data.tipOfDayText = TIP_OF_DAY[tipOfDayIndex].content;
                this.$data.tipOfDayImage = "url(" + TIP_OF_DAY[tipOfDayIndex].img + ")";
                tipOfDayIndex++;
                if (tipOfDayIndex === TIP_OF_DAY.length) {
                    tipOfDayIndex = 0
                }
                this.$root.userSettings.set("tipOfDayIndex", tipOfDayIndex)
            },
            setShowTips(show) {
                this.$root.userSettings.set("showTipOfDay", !show)
            },
            close() {
                this.$data.show = false
            },
            showHttpError(response) {
                if (response.status === 403) {
                    this.showNotLoggedIn();
                    return
                }
                var errorMsg;
                if (response.body.errorType) {
                    errorMsg = response.body.errorType + ": " + response.body.errorMsg
                } else {
                    errorMsg = response.body.message
                }
                var internalErrorMessage = `\n                URL: ${response.request.url},\n                Data: ${response.request.body},\n                Msg: ${errorMsg}\n            `;
                this.$root.errorReporter.reportError(C.ERROR_TYPES.HTTP_ERROR, internalErrorMessage);
                this.$data.activePanel = "error";
                this.$data.title = "Oops, that didn't work";
                this.$data.description = `So sorry, Arcentry seems to have trouble talking to its backend. We'll look into it.`;
                this.$data.buttonCaption = "OK";
                this.buttonAction = (() => {
                    this.$data.show = false;
                    this.$data.showRequestDetails = false
                });
                this.$data.show = true
            },
            showError(title, desc, callback) {
                this.$data.activePanel = "error";
                this.$data.title = title;
                this.$data.description = desc;
                this.$data.buttonCaption = "OK";
                this.buttonAction = (() => {
                    this.$data.show = false;
                    if (callback) {
                        callback()
                    }
                });
                this.$data.show = true
            },
            showNotLoggedIn() {
                this.$data.activePanel = "error";
                this.$data.title = "not logged in";
                this.$data.description = "Sorry, looks like your session has expired. Please log in again.";
                this.$data.buttonCaption = "log in";
                this.buttonAction = (() => {
                    document.location.href = "/?view=login"
                });
                this.$data.show = true
            },
            onBtnClick() {
                this.buttonAction()
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    const TIP_OF_DAY = __webpack_require__(36);
    __webpack_require__(37);
    Vue.component("embed-preview", {
        template: `\n    <div class="embed-preview">\n        <iframe width="700" height="400" :src="'http://localhost/app/embed.html?id=' + id"></iframe>\n        <p>Embed the following code into any website. Feel free to change width and height in any way you see fit</p>\n        <code class="copyable">\n&lt;iframe width="700" height="400" style="border:none;"<br />\nsrc="http://localhost/app/embed.html?id={{id}}"&gt;&lt;/iframe&gt;\n        </code>\n        <div class="confirm-controls">\n            <div class="btn primary flat" v-on:click="close">\n                <i class="fas fa-check"></i>\n                OK\n            </div>\n        </div>\n    </div>\n    `,
        props: ["id"],
        methods: {
            close() {
                this.$parent.close()
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const Rectangle = __webpack_require__(3);
    const MARGIN = 10;
    Vue.component("image-area-selector", {
        template: `\n    <div class="image-area-selector" v-bind:class="{show:isVisible}">\n        <div class="mask" v-bind:style="{'clip-path': maskClipPath}"></div>\n        <div class="controls" v-bind:class="{flash:doFlash}" v-bind:style="{left: left, top: top, width: width, height: height}" v-on:mousedown.stop="startDrag( $event, 'move')">\n            \n            <div class="top-left" v-on:mousedown.stop="startDrag( $event, 'top-left')"><div></div></div>\n            <div class="top" v-on:mousedown.stop="startDrag( $event, 'top')"><div></div></div>\n            <div class="top-right" v-on:mousedown.stop="startDrag( $event, 'top-right')"><div></div></div>\n            \n            <div class="left" v-on:mousedown.stop="startDrag( $event, 'left')"><div></div></div>\n            <div class="right" v-on:mousedown.stop="startDrag( $event, 'right')"><div></div></div>\n\n            <div class="bottom-left" v-on:mousedown.stop="startDrag( $event, 'bottom-left')"><div></div></div>\n            <div class="bottom" v-on:mousedown.stop="startDrag( $event, 'bottom')"><div></div></div>\n            <div class="bottom-right" v-on:mousedown.stop="startDrag( $event, 'bottom-right')"><div></div></div>\n        </div>\n    </div>\n    `,
        data: function() {
            return {
                maskClipPath: null,
                left: null,
                top: null,
                width: null,
                height: null,
                doFlash: false,
                isVisible: false
            }
        },
        created: function() {
            this.rectangle = new Rectangle(600, 200, 1e3, 400);
            this.startX = null;
            this.startY = null;
            this.draggedHandle = null;
            this.originalRectangle = null;
            this.onMouseMoveFn = this.onMouseMove.bind(this);
            this.onMouseUpFn = this.onMouseUp.bind(this);
            this.updatePosition()
        },
        methods: {
            updatePosition: function() {
                const r = this.rectangle;
                this.$data.left = r.x1 + "px";
                this.$data.top = r.y1 + "px";
                this.$data.width = r.width + "px";
                this.$data.height = r.height + "px";
                this.$data.maskClipPath = `polygon( 0 0, 100% 0, 100% 100%, ${r.x2}px ${r.y2}px, ${r.x2}px ${r.y1}px, ${r.x1}px ${r.y1}px,${r.x1}px ${r.y2}px,${r.x2}px ${r.y2}px,100% 100%,0 100%)`
            },
            show() {
                this.$root.canvas.mouseProjector.stopMouseTracking = true;
                this.$root.canvas.hoverManager.stopMouseTracking = true;
                this.$data.isVisible = true
            },
            hide() {
                this.$root.canvas.mouseProjector.stopMouseTracking = false;
                this.$root.canvas.hoverManager.stopMouseTracking = false;
                this.$data.isVisible = false
            },
            flash() {
                this.$data.doFlash = true;
                setTimeout(() => {
                    this.$data.doFlash = false
                }, 1e3)
            },
            setAspectRatio(ratio) {
                this.rectangle.set(this.rectangle.x1, this.rectangle.y1, this.rectangle.x1 + this.rectangle.width, this.rectangle.y1 + this.rectangle.width * ratio);
                this.updatePosition()
            },
            startDrag(event, draggedHandle) {
                event.preventDefault();
                this.startX = event.clientX;
                this.startY = event.clientY;
                this.draggedHandle = draggedHandle;
                this.originalRectangle = this.rectangle.clone();
                window.addEventListener("mousemove", this.onMouseMoveFn, false);
                window.addEventListener("mouseup", this.onMouseUpFn, false)
            },
            onMouseMove(event) {
                event.stopPropagation();
                const deltaX = event.clientX - this.startX;
                const deltaY = event.clientY - this.startY;
                const maxX = window.innerWidth - MARGIN;
                const maxY = window.innerHeight - MARGIN;
                var x1 = this.originalRectangle.x1;
                var y1 = this.originalRectangle.y1;
                var x2 = this.originalRectangle.x2;
                var y2 = this.originalRectangle.y2;
                if (this.draggedHandle === "move") {
                    x1 = this.originalRectangle.x1 + deltaX;
                    y1 = this.originalRectangle.y1 + deltaY;
                    x2 = this.originalRectangle.x2 + deltaX;
                    y2 = this.originalRectangle.y2 + deltaY
                } else if (this.draggedHandle === "top-left") {
                    x1 = this.originalRectangle.x1 + deltaX;
                    y1 = this.originalRectangle.y1 + deltaY
                } else if (this.draggedHandle === "top") {
                    y1 = this.originalRectangle.y1 + deltaY
                } else if (this.draggedHandle === "top-right") {
                    x2 = this.originalRectangle.x2 + deltaX;
                    y1 = this.originalRectangle.y1 + deltaY
                } else if (this.draggedHandle === "left") {
                    x1 = this.originalRectangle.x1 + deltaX
                } else if (this.draggedHandle === "right") {
                    x2 = this.originalRectangle.x2 + deltaX
                } else if (this.draggedHandle === "bottom-left") {
                    x1 = this.originalRectangle.x1 + deltaX;
                    y2 = this.originalRectangle.y2 + deltaY
                } else if (this.draggedHandle === "bottom") {
                    y2 = this.originalRectangle.y2 + deltaY
                } else if (this.draggedHandle === "bottom-right") {
                    x2 = this.originalRectangle.x2 + deltaX;
                    y2 = this.originalRectangle.y2 + deltaY
                }
                if (x1 < maxX - MARGIN && x2 > MARGIN && y1 < maxY - MARGIN && y2 > MARGIN && x1 < x2 && y1 < y2) {
                    this.rectangle.set(x1, y1, x2, y2);
                    this.updatePosition();
                    this.$emit("change", this.rectangle)
                }
            },
            onMouseUp(event) {
                window.removeEventListener("mousemove", this.onMouseMoveFn, false);
                window.removeEventListener("mouseup", this.onMouseUpFn, false)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const BODY_WIDTH = 400;
    const TIP_WIDTH = 20;
    const WIDTH = BODY_WIDTH + TIP_WIDTH;
    const MARGIN = 20;
    const CONTENT_TYPE = {
        COMPONENT: "component"
    };
    const tools = __webpack_require__(4);
    Vue.component("context-overlay", {
        template: `\n        <div class="context-overlay" :class="[side, show]" :style="{left:left + 'px', top: top + 'px'}">\n            <div class="tip" :style="{top:tipTop + 'px'}">\n                <div></div>\n            </div>\n            <div class="content">\n                <component-data-view\n                    v-if="contentType==='${CONTENT_TYPE.COMPONENT}'"\n                    ref="componentDataView"\n                    :id="contentId"\n                    :showMetaData="true"\n                    :isEditable="false"\n                ></component-data-view>\n                <plugin-panel :id="contentId" v-if="contentId" suppressNoPluginWarning="true"></plugin-panel>\n            </div>\n        </div>\n    `,
        data: function() {
            return {
                left: 600,
                top: 600,
                tipTop: "20px",
                side: "right",
                show: "",
                contentId: "",
                contentType: CONTENT_TYPE.COMPONENT
            }
        },
        created() {
            this.$root.$on("dashboard-mode-off", this.hide.bind(this))
        },
        methods: {
            setPosition(point) {
                if (window.innerWidth - (WIDTH + MARGIN) > point.x) {
                    this.$data.side = "right";
                    this.$data.left = point.x
                } else {
                    this.$data.side = "left";
                    this.$data.left = point.x - WIDTH
                }
                const elementHeight = this.$el.offsetHeight;
                this.$data.top = tools.clamp(point.y - 40, MARGIN, window.innerHeight - (elementHeight + MARGIN));
                this.$data.tipTop = tools.clamp(point.y - 25 - this.$data.top, 1, elementHeight - 31)
            },
            hide() {
                this.$data.show = "";
                this.$root.canvas.camera.off("change", this.updatePosition, this)
            },
            updatePosition() {
                this.setPosition(this.$root.canvas.mouseProjector.get2DCoordinatesForObject(this.threeObject))
            },
            showComponentInfo(threeObject, componentId) {
                this.$root.canvas.camera.on("change", this.updatePosition, this);
                this.$data.contentType = CONTENT_TYPE.COMPONENT;
                this.$data.contentId = componentId;
                this.threeObject = threeObject;
                this.$refs.componentDataView.refresh();
                this.updatePosition();
                this.$data.show = "show"
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    __webpack_require__(214);
    const C = __webpack_require__(0);
    Vue.component("notifications-panel", {
        template: `\n        <div class="notifications-panel">\n            <div class="header" v-if="notifications.length > 0" @click="toggleAll">\n                <i class="fas fa-bell" :class="{ring: bellRinging}"></i>\n                <div class="counter" v-if="unreadCount>0">{{unreadCount}}</div>\n            </div>\n            <ul>\n                <notification-entry\n                    v-for="notification in notifications"\n                    :key="notification.id"\n                    :notification="notification"\n                >\n                </notification-entry>\n            \n            </ul>\n        </div>\n    `,
        data() {
            return {
                bellRinging: false,
                notifications: [],
                unreadCount: 0,
                allVisible: false
            }
        },
        created() {
            this.$root.$on("init", this.subscribe.bind(this))
        },
        methods: {
            toggleAll() {
                if (this.$data.allVisible === false) {
                    this.unreadCount = 0;
                    this.$data.allVisible = true;
                    this.$children.forEach(notificationComponent => {
                        notificationComponent.show()
                    })
                } else {
                    this.$data.allVisible = false;
                    this.$children.forEach(notificationComponent => {
                        notificationComponent.hide()
                    })
                }
            },
            addNotification(notification) {
                notification.id = this.$root.state.generateId();
                this.$data.notifications.unshift(notification);
                this.$data.unreadCount++;
                this.ringBell()
            },
            removeNotification(notification) {
                const index = this.$data.notifications.indexOf(notification);
                this.$data.notifications.splice(index, 1)
            },
            ringBell() {
                this.$data.bellRinging = false;
                requestAnimationFrame(() => {
                    this.$data.bellRinging = true
                })
            },
            subscribe() {
                this.$root.eventHub.on(C.NOTIFICATION_TYPES.SHARED_DOC, this.addNotification, this)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    __webpack_require__(215);
    const C = __webpack_require__(0);
    const NOTIFICATION_TYPE_TO_COMPONENT = {
        [C.NOTIFICATION_TYPES.SHARED_DOC]: "notification-entry-shared-doc"
    };
    Vue.component("notification-entry", {
        template: `\n        <li class="notification-entry" :class="{show:isVisible}">\n            <div class="tip">\n                <div></div>\n            </div>\n            <div class="close" title="close notification" @click="close">\n                <i class="fas fa-times"></i>\n            </div>\n            <div class="icon">\n                <i class="fas fa-user-friends"></i>\n            </div>\n            <div class="content">\n            <component \n                v-bind:is="componentType"\n                :notification="notification"\n            ></component>\n            </div>\n        </li>\n    `,
        props: ["notification"],
        mounted() {
            setTimeout(() => {
                this.$data.isVisible = true
            }, 120);
            this.hideTimeout = setTimeout(() => {
                this.$data.isVisible = false
            }, 6e3)
        },
        data() {
            return {
                isVisible: false,
                componentType: NOTIFICATION_TYPE_TO_COMPONENT[this.$props.notification.type]
            }
        },
        methods: {
            show() {
                this.$data.isVisible = true;
                clearTimeout(this.hideTimeout)
            },
            hide() {
                this.$data.isVisible = false;
                clearTimeout(this.hideTimeout)
            },
            close() {
                this.$parent.removeNotification(this.$props.notification)
            }
        }
    })
}, function(module, exports, __webpack_require__) {
    const C = __webpack_require__(0);
    Vue.component("notification-entry-shared-doc", {
        template: `\n        <div class="notification-entry-shared-doc">\n        <p>\n            {{notification.user}} just shared "{{notification.title}}" with you.\n        </p>\n        <a href="#" @click="openSharedDiagram">\n            Open Now\n        </a>\n        </div>\n    `,
        props: ["notification"],
        methods: {
            openSharedDiagram() {
                this.$root.$refs.sidebar.$refs.filePanel.$data.activeView = "shareddocs";
                setTimeout(() => {
                    this.$root.$refs.sidebar.$refs.filePanel.$refs.sharedWithMePanel.loadDoc(this.$props.notification.sharedDocId);
                    this.$root.$refs.sidebar.setView(C.VIEWS.FILE)
                }, 20)
            }
        }
    })
}, function(module, exports) {}]);

